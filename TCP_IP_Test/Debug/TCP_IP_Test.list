
TCP_IP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000283c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040f4  08028594  08028594  00029594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c688  0802c688  0002e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0802c688  0802c688  0002d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c690  0802c690  0002e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c690  0802c690  0002d690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802c694  0802c694  0002d694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0802c698  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000b0  0802c748  0002e0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000150  0802c7e8  0002e150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00011a18  200001f0  0802c888  0002e1f0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011c08  0802c888  0002ec08  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002e1f0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005f57e  00000000  00000000  0002e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000d6fd  00000000  00000000  0008d79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004650  00000000  00000000  0009aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003748  00000000  00000000  0009f4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00049d08  00000000  00000000  000a2c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00072305  00000000  00000000  000ec940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00143f5a  00000000  00000000  0015ec45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002a2b9f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00013088  00000000  00000000  002a2be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  002b5c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802857c 	.word	0x0802857c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0802857c 	.word	0x0802857c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <vApplicationGetIdleTaskMemory+0x30>)
 80005ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2280      	movs	r2, #128	@ 0x80
 80005f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	2000020c 	.word	0x2000020c
 8000604:	200002b0 	.word	0x200002b0

08000608 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000618:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <SCB_EnableICache+0x48>)
 800061a:	2200      	movs	r2, #0
 800061c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000620:	f3bf 8f4f 	dsb	sy
}
 8000624:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000626:	f3bf 8f6f 	isb	sy
}
 800062a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <SCB_EnableICache+0x48>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <SCB_EnableICache+0x48>)
 8000632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000636:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000638:	f3bf 8f4f 	dsb	sy
}
 800063c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800063e:	f3bf 8f6f 	isb	sy
}
 8000642:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <SCB_EnableDCache+0x84>)
 800065c:	2200      	movs	r2, #0
 800065e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000662:	f3bf 8f4f 	dsb	sy
}
 8000666:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <SCB_EnableDCache+0x84>)
 800066a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800066e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	0b5b      	lsrs	r3, r3, #13
 8000674:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000678:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	08db      	lsrs	r3, r3, #3
 800067e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000682:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	015a      	lsls	r2, r3, #5
 8000688:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800068c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000692:	4911      	ldr	r1, [pc, #68]	@ (80006d8 <SCB_EnableDCache+0x84>)
 8000694:	4313      	orrs	r3, r2
 8000696:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	60ba      	str	r2, [r7, #8]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1ef      	bne.n	8000684 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	1e5a      	subs	r2, r3, #1
 80006a8:	60fa      	str	r2, [r7, #12]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1e5      	bne.n	800067a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006ae:	f3bf 8f4f 	dsb	sy
}
 80006b2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <SCB_EnableDCache+0x84>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a07      	ldr	r2, [pc, #28]	@ (80006d8 <SCB_EnableDCache+0x84>)
 80006ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c6:	f3bf 8f6f 	isb	sy
}
 80006ca:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b08e      	sub	sp, #56	@ 0x38
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006e2:	f7ff ff91 	bl	8000608 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006e6:	f7ff ffb5 	bl	8000654 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f002 fdc4 	bl	8003276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f863 	bl	80007b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f2:	f000 f8d3 	bl	800089c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f001 f843 	bl	8001780 <MX_GPIO_Init>
  MX_ADC3_Init();
 80006fa:	f000 f901 	bl	8000900 <MX_ADC3_Init>
  MX_CRC_Init();
 80006fe:	f000 f951 	bl	80009a4 <MX_CRC_Init>
  MX_DCMI_Init();
 8000702:	f000 f971 	bl	80009e8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000706:	f000 f9a3 	bl	8000a50 <MX_DMA2D_Init>
  MX_FMC_Init();
 800070a:	f000 ffe9 	bl	80016e0 <MX_FMC_Init>
  MX_I2C1_Init();
 800070e:	f000 f9d1 	bl	8000ab4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000712:	f000 fa0f 	bl	8000b34 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000716:	f000 fa4d 	bl	8000bb4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800071a:	f000 facd 	bl	8000cb8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800071e:	f000 faf7 	bl	8000d10 <MX_RTC_Init>
  MX_SAI2_Init();
 8000722:	f000 fb99 	bl	8000e58 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000726:	f000 fc3f 	bl	8000fa8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800072a:	f000 fc5f 	bl	8000fec <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800072e:	f000 fc8d 	bl	800104c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000732:	f000 fcc9 	bl	80010c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000736:	f000 fd73 	bl	8001220 <MX_TIM2_Init>
  MX_TIM3_Init();
 800073a:	f000 fde7 	bl	800130c <MX_TIM3_Init>
  MX_TIM5_Init();
 800073e:	f000 fe5d 	bl	80013fc <MX_TIM5_Init>
  MX_TIM8_Init();
 8000742:	f000 fed3 	bl	80014ec <MX_TIM8_Init>
  MX_TIM12_Init();
 8000746:	f000 ff25 	bl	8001594 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800074a:	f000 ff69 	bl	8001620 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800074e:	f000 ff97 	bl	8001680 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000752:	f00e fec9 	bl	800f4e8 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <main+0xcc>)
 8000758:	f107 041c 	add.w	r4, r7, #28
 800075c:	461d      	mov	r5, r3
 800075e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000762:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f012 fa19 	bl	8012ba8 <osThreadCreate>
 8000776:	4603      	mov	r3, r0
 8000778:	4a0c      	ldr	r2, [pc, #48]	@ (80007ac <main+0xd0>)
 800077a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TCPTask */
  osThreadDef(TCPTask, StartTCPTask, osPriorityNormal, 0, 1024);
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <main+0xd4>)
 800077e:	463c      	mov	r4, r7
 8000780:	461d      	mov	r5, r3
 8000782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000786:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800078a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TCPTaskHandle = osThreadCreate(osThread(TCPTask), NULL);
 800078e:	463b      	mov	r3, r7
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f012 fa08 	bl	8012ba8 <osThreadCreate>
 8000798:	4603      	mov	r3, r0
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <main+0xd8>)
 800079c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800079e:	f012 f9e0 	bl	8012b62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a2:	bf00      	nop
 80007a4:	e7fd      	b.n	80007a2 <main+0xc6>
 80007a6:	bf00      	nop
 80007a8:	080285a0 	.word	0x080285a0
 80007ac:	20000cb0 	.word	0x20000cb0
 80007b0:	080285c4 	.word	0x080285c4
 80007b4:	20000cb4 	.word	0x20000cb4

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	@ 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2230      	movs	r2, #48	@ 0x30
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f027 f928 	bl	8027a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007dc:	f007 ff0e 	bl	80085fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <SystemClock_Config+0xdc>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000894 <SystemClock_Config+0xdc>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ec:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <SystemClock_Config+0xdc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <SystemClock_Config+0xe0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a26      	ldr	r2, [pc, #152]	@ (8000898 <SystemClock_Config+0xe0>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <SystemClock_Config+0xe0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000810:	2309      	movs	r3, #9
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800081a:	2301      	movs	r3, #1
 800081c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000828:	2319      	movs	r3, #25
 800082a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800082c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000830:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000836:	2309      	movs	r3, #9
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f007 fffe 	bl	8008840 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800084a:	f001 f997 	bl	8001b7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084e:	f007 fee5 	bl	800861c <HAL_PWREx_EnableOverDrive>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000858:	f001 f990 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000868:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2106      	movs	r1, #6
 800087a:	4618      	mov	r0, r3
 800087c:	f008 fa84 	bl	8008d88 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000886:	f001 f979 	bl	8001b7c <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	@ 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000

0800089c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0a2      	sub	sp, #136	@ 0x88
 80008a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2284      	movs	r2, #132	@ 0x84
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f027 f8b7 	bl	8027a1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <PeriphCommonClock_Config+0x60>)
 80008b0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80008b2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80008b6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80008b8:	2305      	movs	r3, #5
 80008ba:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80008c0:	2303      	movs	r3, #3
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80008ce:	2300      	movs	r3, #0
 80008d0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80008d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f008 fc68 	bl	80091b8 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008ee:	f001 f945 	bl	8001b7c <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3788      	adds	r7, #136	@ 0x88
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	00b00008 	.word	0x00b00008

08000900 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <MX_ADC3_Init+0x98>)
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <MX_ADC3_Init+0x9c>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_ADC3_Init+0x98>)
 800091a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800091e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_ADC3_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_ADC3_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_ADC3_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_ADC3_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_ADC3_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_ADC3_Init+0x98>)
 8000942:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <MX_ADC3_Init+0xa0>)
 8000944:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_ADC3_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <MX_ADC3_Init+0x98>)
 800094e:	2201      	movs	r2, #1
 8000950:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_ADC3_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_ADC3_Init+0x98>)
 800095c:	2201      	movs	r2, #1
 800095e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	@ (8000998 <MX_ADC3_Init+0x98>)
 8000962:	f002 fce5 	bl	8003330 <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800096c:	f001 f906 	bl	8001b7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000970:	2304      	movs	r3, #4
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000974:	2301      	movs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_ADC3_Init+0x98>)
 8000982:	f002 fd19 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800098c:	f001 f8f6 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200004b0 	.word	0x200004b0
 800099c:	40012200 	.word	0x40012200
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <MX_CRC_Init+0x3c>)
 80009aa:	4a0e      	ldr	r2, [pc, #56]	@ (80009e4 <MX_CRC_Init+0x40>)
 80009ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_CRC_Init+0x3c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_CRC_Init+0x3c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_CRC_Init+0x3c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_CRC_Init+0x3c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_CRC_Init+0x3c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_CRC_Init+0x3c>)
 80009ce:	f003 f825 	bl	8003a1c <HAL_CRC_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009d8:	f001 f8d0 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200004f8 	.word	0x200004f8
 80009e4:	40023000 	.word	0x40023000

080009e8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_DCMI_Init+0x60>)
 80009ee:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <MX_DCMI_Init+0x64>)
 80009f0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <MX_DCMI_Init+0x60>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_DCMI_Init+0x60>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a04:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a28:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <MX_DCMI_Init+0x60>)
 8000a36:	f003 f8e3 	bl	8003c00 <HAL_DCMI_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a40:	f001 f89c 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000051c 	.word	0x2000051c
 8000a4c:	50050000 	.word	0x50050000

08000a50 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a56:	4a16      	ldr	r2, [pc, #88]	@ (8000ab0 <MX_DMA2D_Init+0x60>)
 8000a58:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a84:	4809      	ldr	r0, [pc, #36]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a86:	f003 f9cf 	bl	8003e28 <HAL_DMA2D_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a90:	f001 f874 	bl	8001b7c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a94:	2101      	movs	r1, #1
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_DMA2D_Init+0x5c>)
 8000a98:	f003 fb20 	bl	80040dc <HAL_DMA2D_ConfigLayer>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000aa2:	f001 f86b 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000056c 	.word	0x2000056c
 8000ab0:	4002b000 	.word	0x4002b000

08000ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000aba:	4a1c      	ldr	r2, [pc, #112]	@ (8000b2c <MX_I2C1_Init+0x78>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <MX_I2C1_Init+0x7c>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aee:	480e      	ldr	r0, [pc, #56]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000af0:	f007 f8e6 	bl	8007cc0 <HAL_I2C_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000afa:	f001 f83f 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000b02:	f007 f979 	bl	8007df8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b0c:	f001 f836 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_I2C1_Init+0x74>)
 8000b14:	f007 f9bb 	bl	8007e8e <HAL_I2CEx_ConfigDigitalFilter>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b1e:	f001 f82d 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200005ac 	.word	0x200005ac
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	00c0eaff 	.word	0x00c0eaff

08000b34 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bac <MX_I2C3_Init+0x78>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b40:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb0 <MX_I2C3_Init+0x7c>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b6e:	480e      	ldr	r0, [pc, #56]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b70:	f007 f8a6 	bl	8007cc0 <HAL_I2C_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b7a:	f000 ffff 	bl	8001b7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4809      	ldr	r0, [pc, #36]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b82:	f007 f939 	bl	8007df8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b8c:	f000 fff6 	bl	8001b7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b90:	2100      	movs	r1, #0
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_I2C3_Init+0x74>)
 8000b94:	f007 f97b 	bl	8007e8e <HAL_I2CEx_ConfigDigitalFilter>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 ffed 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000600 	.word	0x20000600
 8000bac:	40005c00 	.word	0x40005c00
 8000bb0:	00c0eaff 	.word	0x00c0eaff

08000bb4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2234      	movs	r2, #52	@ 0x34
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f026 ff2b 	bl	8027a1c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8000cb4 <MX_LTDC_Init+0x100>)
 8000bca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bcc:	4b38      	ldr	r3, [pc, #224]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bd2:	4b37      	ldr	r3, [pc, #220]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000bd8:	4b35      	ldr	r3, [pc, #212]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bde:	4b34      	ldr	r3, [pc, #208]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000be4:	4b32      	ldr	r3, [pc, #200]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000be6:	2228      	movs	r2, #40	@ 0x28
 8000be8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000bea:	4b31      	ldr	r3, [pc, #196]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000bec:	2209      	movs	r2, #9
 8000bee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000bf2:	2235      	movs	r2, #53	@ 0x35
 8000bf4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000bf8:	220b      	movs	r2, #11
 8000bfa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000bfe:	f240 2215 	movw	r2, #533	@ 0x215
 8000c02:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c04:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000c06:	f240 121b 	movw	r2, #283	@ 0x11b
 8000c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000c0c:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000c0e:	f240 2235 	movw	r2, #565	@ 0x235
 8000c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000c14:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000c16:	f240 121d 	movw	r2, #285	@ 0x11d
 8000c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c34:	481e      	ldr	r0, [pc, #120]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000c36:	f007 f977 	bl	8007f28 <HAL_LTDC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c40:	f000 ff9c 	bl	8001b7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000c48:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c4c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000c52:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000c56:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c5c:	23ff      	movs	r3, #255	@ 0xff
 8000c5e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c64:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c68:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c6e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000c74:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000c7a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_LTDC_Init+0xfc>)
 8000c9a:	f007 fad7 	bl	800824c <HAL_LTDC_ConfigLayer>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000ca4:	f000 ff6a 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3738      	adds	r7, #56	@ 0x38
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000654 	.word	0x20000654
 8000cb4:	40016800 	.word	0x40016800

08000cb8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000cbe:	4a13      	ldr	r2, [pc, #76]	@ (8000d0c <MX_QUADSPI_Init+0x54>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000cca:	2204      	movs	r2, #4
 8000ccc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000cd0:	2210      	movs	r2, #16
 8000cd2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000cd6:	2218      	movs	r2, #24
 8000cd8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000cdc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000ce0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <MX_QUADSPI_Init+0x50>)
 8000cf6:	f007 fce1 	bl	80086bc <HAL_QSPI_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d00:	f000 ff3c 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200006fc 	.word	0x200006fc
 8000d0c:	a0001000 	.word	0xa0001000

08000d10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b090      	sub	sp, #64	@ 0x40
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2228      	movs	r2, #40	@ 0x28
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f026 fe73 	bl	8027a1c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d36:	4b46      	ldr	r3, [pc, #280]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000d38:	4a46      	ldr	r2, [pc, #280]	@ (8000e54 <MX_RTC_Init+0x144>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d3c:	4b44      	ldr	r3, [pc, #272]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d42:	4b43      	ldr	r3, [pc, #268]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000d44:	227f      	movs	r2, #127	@ 0x7f
 8000d46:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d48:	4b41      	ldr	r3, [pc, #260]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000d4a:	22ff      	movs	r2, #255	@ 0xff
 8000d4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d4e:	4b40      	ldr	r3, [pc, #256]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d54:	4b3e      	ldr	r3, [pc, #248]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d60:	483b      	ldr	r0, [pc, #236]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000d62:	f008 ff59 	bl	8009c18 <HAL_RTC_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000d6c:	f000 ff06 	bl	8001b7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4619      	mov	r1, r3
 8000d92:	482f      	ldr	r0, [pc, #188]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000d94:	f008 ffc4 	bl	8009d20 <HAL_RTC_SetTime>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000d9e:	f000 feed 	bl	8001b7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000da2:	2301      	movs	r3, #1
 8000da4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4823      	ldr	r0, [pc, #140]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000dc4:	f009 f846 	bl	8009e54 <HAL_RTC_SetDate>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000dce:	f000 fed5 	bl	8001b7c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e02:	463b      	mov	r3, r7
 8000e04:	2201      	movs	r2, #1
 8000e06:	4619      	mov	r1, r3
 8000e08:	4811      	ldr	r0, [pc, #68]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000e0a:	f009 f8a7 	bl	8009f5c <HAL_RTC_SetAlarm>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000e14:	f000 feb2 	bl	8001b7c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2201      	movs	r2, #1
 8000e22:	4619      	mov	r1, r3
 8000e24:	480a      	ldr	r0, [pc, #40]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000e26:	f009 f899 	bl	8009f5c <HAL_RTC_SetAlarm>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000e30:	f000 fea4 	bl	8001b7c <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000e34:	2202      	movs	r2, #2
 8000e36:	2100      	movs	r1, #0
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <MX_RTC_Init+0x140>)
 8000e3a:	f009 fa59 	bl	800a2f0 <HAL_RTCEx_SetTimeStamp>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000e44:	f000 fe9a 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	3740      	adds	r7, #64	@ 0x40
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000748 	.word	0x20000748
 8000e54:	40002800 	.word	0x40002800

08000e58 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8000f98 <MX_SAI2_Init+0x140>)
 8000e60:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e62:	4b4c      	ldr	r3, [pc, #304]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e68:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e6e:	4b49      	ldr	r3, [pc, #292]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e70:	2240      	movs	r2, #64	@ 0x40
 8000e72:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e74:	4b47      	ldr	r3, [pc, #284]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e7a:	4b46      	ldr	r3, [pc, #280]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e80:	4b44      	ldr	r3, [pc, #272]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e86:	4b43      	ldr	r3, [pc, #268]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e8c:	4b41      	ldr	r3, [pc, #260]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e92:	4b40      	ldr	r3, [pc, #256]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e98:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000e9a:	4a40      	ldr	r2, [pc, #256]	@ (8000f9c <MX_SAI2_Init+0x144>)
 8000e9c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000eb0:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000eb6:	4b37      	ldr	r3, [pc, #220]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000eb8:	2208      	movs	r2, #8
 8000eba:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000ebc:	4b35      	ldr	r3, [pc, #212]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ec2:	4b34      	ldr	r3, [pc, #208]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ec8:	4b32      	ldr	r3, [pc, #200]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ece:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000eda:	4b2e      	ldr	r3, [pc, #184]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000eec:	4829      	ldr	r0, [pc, #164]	@ (8000f94 <MX_SAI2_Init+0x13c>)
 8000eee:	f009 fa67 	bl	800a3c0 <HAL_SAI_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000ef8:	f000 fe40 	bl	8001b7c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000efc:	4b28      	ldr	r3, [pc, #160]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000efe:	4a29      	ldr	r2, [pc, #164]	@ (8000fa4 <MX_SAI2_Init+0x14c>)
 8000f00:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f08:	4b25      	ldr	r3, [pc, #148]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f10:	2240      	movs	r2, #64	@ 0x40
 8000f12:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f14:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000f80:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <MX_SAI2_Init+0x148>)
 8000f82:	f009 fa1d 	bl	800a3c0 <HAL_SAI_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000f8c:	f000 fdf6 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000768 	.word	0x20000768
 8000f98:	40015c04 	.word	0x40015c04
 8000f9c:	0002ee00 	.word	0x0002ee00
 8000fa0:	200007ec 	.word	0x200007ec
 8000fa4:	40015c24 	.word	0x40015c24

08000fa8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fae:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <MX_SDMMC1_SD_Init+0x40>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fca:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <MX_SDMMC1_SD_Init+0x3c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000870 	.word	0x20000870
 8000fe8:	40012c00 	.word	0x40012c00

08000fec <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 8000ff2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000ff6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000ffe:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001010:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_SPDIFRX_Init+0x5c>)
 8001036:	f00a fc4f 	bl	800b8d8 <HAL_SPDIFRX_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001040:	f000 fd9c 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200008f4 	.word	0x200008f4

0800104c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <MX_SPI2_Init+0x74>)
 8001052:	4a1c      	ldr	r2, [pc, #112]	@ (80010c4 <MX_SPI2_Init+0x78>)
 8001054:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <MX_SPI2_Init+0x74>)
 8001058:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800105c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <MX_SPI2_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <MX_SPI2_Init+0x74>)
 8001066:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800106a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <MX_SPI2_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <MX_SPI2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_SPI2_Init+0x74>)
 800107a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800107e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_SPI2_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_SPI2_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_SPI2_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <MX_SPI2_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_SPI2_Init+0x74>)
 800109a:	2207      	movs	r2, #7
 800109c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <MX_SPI2_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_SPI2_Init+0x74>)
 80010a6:	2208      	movs	r2, #8
 80010a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_SPI2_Init+0x74>)
 80010ac:	f00a fc70 	bl	800b990 <HAL_SPI_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f000 fd61 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000940 	.word	0x20000940
 80010c4:	40003800 	.word	0x40003800

080010c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b09a      	sub	sp, #104	@ 0x68
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	615a      	str	r2, [r3, #20]
 80010fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	222c      	movs	r2, #44	@ 0x2c
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f026 fc8a 	bl	8027a1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001108:	4b43      	ldr	r3, [pc, #268]	@ (8001218 <MX_TIM1_Init+0x150>)
 800110a:	4a44      	ldr	r2, [pc, #272]	@ (800121c <MX_TIM1_Init+0x154>)
 800110c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800110e:	4b42      	ldr	r3, [pc, #264]	@ (8001218 <MX_TIM1_Init+0x150>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b40      	ldr	r3, [pc, #256]	@ (8001218 <MX_TIM1_Init+0x150>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800111a:	4b3f      	ldr	r3, [pc, #252]	@ (8001218 <MX_TIM1_Init+0x150>)
 800111c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001120:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b3d      	ldr	r3, [pc, #244]	@ (8001218 <MX_TIM1_Init+0x150>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001128:	4b3b      	ldr	r3, [pc, #236]	@ (8001218 <MX_TIM1_Init+0x150>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b3a      	ldr	r3, [pc, #232]	@ (8001218 <MX_TIM1_Init+0x150>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001134:	4838      	ldr	r0, [pc, #224]	@ (8001218 <MX_TIM1_Init+0x150>)
 8001136:	f00a fcd6 	bl	800bae6 <HAL_TIM_Base_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001140:	f000 fd1c 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001144:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001148:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800114a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800114e:	4619      	mov	r1, r3
 8001150:	4831      	ldr	r0, [pc, #196]	@ (8001218 <MX_TIM1_Init+0x150>)
 8001152:	f00b f809 	bl	800c168 <HAL_TIM_ConfigClockSource>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800115c:	f000 fd0e 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001160:	482d      	ldr	r0, [pc, #180]	@ (8001218 <MX_TIM1_Init+0x150>)
 8001162:	f00a fd8f 	bl	800bc84 <HAL_TIM_PWM_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800116c:	f000 fd06 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001180:	4619      	mov	r1, r3
 8001182:	4825      	ldr	r0, [pc, #148]	@ (8001218 <MX_TIM1_Init+0x150>)
 8001184:	f00b fc86 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800118e:	f000 fcf5 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001192:	2360      	movs	r3, #96	@ 0x60
 8001194:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119a:	2300      	movs	r3, #0
 800119c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800119e:	2300      	movs	r3, #0
 80011a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4818      	ldr	r0, [pc, #96]	@ (8001218 <MX_TIM1_Init+0x150>)
 80011b8:	f00a fec2 	bl	800bf40 <HAL_TIM_PWM_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011c2:	f000 fcdb 	bl	8001b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4807      	ldr	r0, [pc, #28]	@ (8001218 <MX_TIM1_Init+0x150>)
 80011fc:	f00b fcd8 	bl	800cbb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001206:	f000 fcb9 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800120a:	4803      	ldr	r0, [pc, #12]	@ (8001218 <MX_TIM1_Init+0x150>)
 800120c:	f001 fa26 	bl	800265c <HAL_TIM_MspPostInit>

}
 8001210:	bf00      	nop
 8001212:	3768      	adds	r7, #104	@ 0x68
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200009a4 	.word	0x200009a4
 800121c:	40010000 	.word	0x40010000

08001220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	@ 0x38
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001252:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001254:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001258:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125a:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <MX_TIM2_Init+0xe8>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001266:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127a:	4823      	ldr	r0, [pc, #140]	@ (8001308 <MX_TIM2_Init+0xe8>)
 800127c:	f00a fc33 	bl	800bae6 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001286:	f000 fc79 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001294:	4619      	mov	r1, r3
 8001296:	481c      	ldr	r0, [pc, #112]	@ (8001308 <MX_TIM2_Init+0xe8>)
 8001298:	f00a ff66 	bl	800c168 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012a2:	f000 fc6b 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012a6:	4818      	ldr	r0, [pc, #96]	@ (8001308 <MX_TIM2_Init+0xe8>)
 80012a8:	f00a fcec 	bl	800bc84 <HAL_TIM_PWM_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012b2:	f000 fc63 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	4810      	ldr	r0, [pc, #64]	@ (8001308 <MX_TIM2_Init+0xe8>)
 80012c6:	f00b fbe5 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012d0:	f000 fc54 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d4:	2360      	movs	r3, #96	@ 0x60
 80012d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <MX_TIM2_Init+0xe8>)
 80012ec:	f00a fe28 	bl	800bf40 <HAL_TIM_PWM_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012f6:	f000 fc41 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <MX_TIM2_Init+0xe8>)
 80012fc:	f001 f9ae 	bl	800265c <HAL_TIM_MspPostInit>

}
 8001300:	bf00      	nop
 8001302:	3738      	adds	r7, #56	@ 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200009f0 	.word	0x200009f0

0800130c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08e      	sub	sp, #56	@ 0x38
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800133e:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 8001340:	4a2d      	ldr	r2, [pc, #180]	@ (80013f8 <MX_TIM3_Init+0xec>)
 8001342:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001350:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 8001352:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001356:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b25      	ldr	r3, [pc, #148]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001364:	4823      	ldr	r0, [pc, #140]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 8001366:	f00a fbbe 	bl	800bae6 <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001370:	f000 fc04 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800137a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800137e:	4619      	mov	r1, r3
 8001380:	481c      	ldr	r0, [pc, #112]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 8001382:	f00a fef1 	bl	800c168 <HAL_TIM_ConfigClockSource>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800138c:	f000 fbf6 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001390:	4818      	ldr	r0, [pc, #96]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 8001392:	f00a fc77 	bl	800bc84 <HAL_TIM_PWM_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800139c:	f000 fbee 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 80013b0:	f00b fb70 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013ba:	f000 fbdf 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013be:	2360      	movs	r3, #96	@ 0x60
 80013c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 80013d6:	f00a fdb3 	bl	800bf40 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013e0:	f000 fbcc 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e4:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <MX_TIM3_Init+0xe8>)
 80013e6:	f001 f939 	bl	800265c <HAL_TIM_MspPostInit>

}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	@ 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000a3c 	.word	0x20000a3c
 80013f8:	40000400 	.word	0x40000400

080013fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	@ 0x38
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	615a      	str	r2, [r3, #20]
 800142c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800142e:	4b2d      	ldr	r3, [pc, #180]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 8001430:	4a2d      	ldr	r2, [pc, #180]	@ (80014e8 <MX_TIM5_Init+0xec>)
 8001432:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001434:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001440:	4b28      	ldr	r3, [pc, #160]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 8001442:	f04f 32ff 	mov.w	r2, #4294967295
 8001446:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b26      	ldr	r3, [pc, #152]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b25      	ldr	r3, [pc, #148]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001454:	4823      	ldr	r0, [pc, #140]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 8001456:	f00a fb46 	bl	800bae6 <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001460:	f000 fb8c 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800146a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146e:	4619      	mov	r1, r3
 8001470:	481c      	ldr	r0, [pc, #112]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 8001472:	f00a fe79 	bl	800c168 <HAL_TIM_ConfigClockSource>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800147c:	f000 fb7e 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001480:	4818      	ldr	r0, [pc, #96]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 8001482:	f00a fbff 	bl	800bc84 <HAL_TIM_PWM_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800148c:	f000 fb76 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4811      	ldr	r0, [pc, #68]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 80014a0:	f00b faf8 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80014aa:	f000 fb67 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ae:	2360      	movs	r3, #96	@ 0x60
 80014b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	220c      	movs	r2, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 80014c6:	f00a fd3b 	bl	800bf40 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80014d0:	f000 fb54 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014d4:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <MX_TIM5_Init+0xe8>)
 80014d6:	f001 f8c1 	bl	800265c <HAL_TIM_MspPostInit>

}
 80014da:	bf00      	nop
 80014dc:	3738      	adds	r7, #56	@ 0x38
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000a88 	.word	0x20000a88
 80014e8:	40000c00 	.word	0x40000c00

080014ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <MX_TIM8_Init+0xa0>)
 800150c:	4a20      	ldr	r2, [pc, #128]	@ (8001590 <MX_TIM8_Init+0xa4>)
 800150e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001510:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <MX_TIM8_Init+0xa0>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <MX_TIM8_Init+0xa0>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <MX_TIM8_Init+0xa0>)
 800151e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001522:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b19      	ldr	r3, [pc, #100]	@ (800158c <MX_TIM8_Init+0xa0>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_TIM8_Init+0xa0>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <MX_TIM8_Init+0xa0>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001536:	4815      	ldr	r0, [pc, #84]	@ (800158c <MX_TIM8_Init+0xa0>)
 8001538:	f00a fad5 	bl	800bae6 <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001542:	f000 fb1b 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	480e      	ldr	r0, [pc, #56]	@ (800158c <MX_TIM8_Init+0xa0>)
 8001554:	f00a fe08 	bl	800c168 <HAL_TIM_ConfigClockSource>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800155e:	f000 fb0d 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	@ (800158c <MX_TIM8_Init+0xa0>)
 8001574:	f00b fa8e 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800157e:	f000 fafd 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000ad4 	.word	0x20000ad4
 8001590:	40010400 	.word	0x40010400

08001594 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_TIM12_Init+0x84>)
 80015ae:	4a1b      	ldr	r2, [pc, #108]	@ (800161c <MX_TIM12_Init+0x88>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <MX_TIM12_Init+0x84>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_TIM12_Init+0x84>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <MX_TIM12_Init+0x84>)
 80015c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015c4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_TIM12_Init+0x84>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <MX_TIM12_Init+0x84>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015d2:	4811      	ldr	r0, [pc, #68]	@ (8001618 <MX_TIM12_Init+0x84>)
 80015d4:	f00a fb56 	bl	800bc84 <HAL_TIM_PWM_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80015de:	f000 facd 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e2:	2360      	movs	r3, #96	@ 0x60
 80015e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2200      	movs	r2, #0
 80015f6:	4619      	mov	r1, r3
 80015f8:	4807      	ldr	r0, [pc, #28]	@ (8001618 <MX_TIM12_Init+0x84>)
 80015fa:	f00a fca1 	bl	800bf40 <HAL_TIM_PWM_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001604:	f000 faba 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001608:	4803      	ldr	r0, [pc, #12]	@ (8001618 <MX_TIM12_Init+0x84>)
 800160a:	f001 f827 	bl	800265c <HAL_TIM_MspPostInit>

}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000b20 	.word	0x20000b20
 800161c:	40001800 	.word	0x40001800

08001620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 8001626:	4a15      	ldr	r2, [pc, #84]	@ (800167c <MX_USART1_UART_Init+0x5c>)
 8001628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_USART1_UART_Init+0x58>)
 8001664:	f00b fb40 	bl	800cce8 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800166e:	f000 fa85 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000b6c 	.word	0x20000b6c
 800167c:	40011000 	.word	0x40011000

08001680 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001684:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 8001686:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <MX_USART6_UART_Init+0x5c>)
 8001688:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <MX_USART6_UART_Init+0x58>)
 80016c4:	f00b fb10 	bl	800cce8 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016ce:	f000 fa55 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000bf4 	.word	0x20000bf4
 80016dc:	40011400 	.word	0x40011400

080016e0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <MX_FMC_Init+0x98>)
 80016fa:	4a20      	ldr	r2, [pc, #128]	@ (800177c <MX_FMC_Init+0x9c>)
 80016fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80016fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001778 <MX_FMC_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001704:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <MX_FMC_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800170a:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <MX_FMC_Init+0x98>)
 800170c:	2204      	movs	r2, #4
 800170e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <MX_FMC_Init+0x98>)
 8001712:	2210      	movs	r2, #16
 8001714:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <MX_FMC_Init+0x98>)
 8001718:	2240      	movs	r2, #64	@ 0x40
 800171a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <MX_FMC_Init+0x98>)
 800171e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001722:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001724:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <MX_FMC_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <MX_FMC_Init+0x98>)
 800172c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001730:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <MX_FMC_Init+0x98>)
 8001734:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <MX_FMC_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001740:	2302      	movs	r3, #2
 8001742:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001744:	2307      	movs	r3, #7
 8001746:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001748:	2304      	movs	r3, #4
 800174a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800174c:	2307      	movs	r3, #7
 800174e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001750:	2303      	movs	r3, #3
 8001752:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001754:	2302      	movs	r3, #2
 8001756:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001758:	2302      	movs	r3, #2
 800175a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_FMC_Init+0x98>)
 8001762:	f00a f884 	bl	800b86e <HAL_SDRAM_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800176c:	f000 fa06 	bl	8001b7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000c7c 	.word	0x20000c7c
 800177c:	a0000140 	.word	0xa0000140

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b090      	sub	sp, #64	@ 0x40
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001796:	4bb0      	ldr	r3, [pc, #704]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4aaf      	ldr	r2, [pc, #700]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4bad      	ldr	r3, [pc, #692]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ae:	4baa      	ldr	r3, [pc, #680]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4aa9      	ldr	r2, [pc, #676]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4ba7      	ldr	r3, [pc, #668]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4aa3      	ldr	r2, [pc, #652]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4ba1      	ldr	r3, [pc, #644]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	4b9e      	ldr	r3, [pc, #632]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a9d      	ldr	r2, [pc, #628]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b9b      	ldr	r3, [pc, #620]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b98      	ldr	r3, [pc, #608]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a97      	ldr	r2, [pc, #604]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b95      	ldr	r3, [pc, #596]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b92      	ldr	r3, [pc, #584]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a91      	ldr	r2, [pc, #580]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b8f      	ldr	r3, [pc, #572]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001826:	4b8c      	ldr	r3, [pc, #560]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a8b      	ldr	r2, [pc, #556]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 800182c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b89      	ldr	r3, [pc, #548]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800183e:	4b86      	ldr	r3, [pc, #536]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a85      	ldr	r2, [pc, #532]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b83      	ldr	r3, [pc, #524]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001856:	4b80      	ldr	r3, [pc, #512]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a7f      	ldr	r2, [pc, #508]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 800185c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b7d      	ldr	r3, [pc, #500]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800186e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a79      	ldr	r2, [pc, #484]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001874:	f043 0320 	orr.w	r3, r3, #32
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b77      	ldr	r3, [pc, #476]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0320 	and.w	r3, r3, #32
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001886:	4b74      	ldr	r3, [pc, #464]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a73      	ldr	r2, [pc, #460]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 800188c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b71      	ldr	r3, [pc, #452]	@ (8001a58 <MX_GPIO_Init+0x2d8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2120      	movs	r1, #32
 80018a2:	486e      	ldr	r0, [pc, #440]	@ (8001a5c <MX_GPIO_Init+0x2dc>)
 80018a4:	f004 f8d8 	bl	8005a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	210c      	movs	r1, #12
 80018ac:	486c      	ldr	r0, [pc, #432]	@ (8001a60 <MX_GPIO_Init+0x2e0>)
 80018ae:	f004 f8d3 	bl	8005a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018b2:	2201      	movs	r2, #1
 80018b4:	2108      	movs	r1, #8
 80018b6:	486b      	ldr	r0, [pc, #428]	@ (8001a64 <MX_GPIO_Init+0x2e4>)
 80018b8:	f004 f8ce 	bl	8005a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018c2:	4867      	ldr	r0, [pc, #412]	@ (8001a60 <MX_GPIO_Init+0x2e0>)
 80018c4:	f004 f8c8 	bl	8005a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ce:	4866      	ldr	r0, [pc, #408]	@ (8001a68 <MX_GPIO_Init+0x2e8>)
 80018d0:	f004 f8c2 	bl	8005a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	21c8      	movs	r1, #200	@ 0xc8
 80018d8:	4864      	ldr	r0, [pc, #400]	@ (8001a6c <MX_GPIO_Init+0x2ec>)
 80018da:	f004 f8bd 	bl	8005a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80018de:	2308      	movs	r3, #8
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e2:	2300      	movs	r3, #0
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ee:	4619      	mov	r1, r3
 80018f0:	485f      	ldr	r0, [pc, #380]	@ (8001a70 <MX_GPIO_Init+0x2f0>)
 80018f2:	f003 feed 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80018f6:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001908:	230a      	movs	r3, #10
 800190a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	4858      	ldr	r0, [pc, #352]	@ (8001a74 <MX_GPIO_Init+0x2f4>)
 8001914:	f003 fedc 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800192a:	4619      	mov	r1, r3
 800192c:	4852      	ldr	r0, [pc, #328]	@ (8001a78 <MX_GPIO_Init+0x2f8>)
 800192e:	f003 fecf 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001932:	2340      	movs	r3, #64	@ 0x40
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001936:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800193a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4845      	ldr	r0, [pc, #276]	@ (8001a5c <MX_GPIO_Init+0x2dc>)
 8001948:	f003 fec2 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800194c:	2320      	movs	r3, #32
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001960:	4619      	mov	r1, r3
 8001962:	483e      	ldr	r0, [pc, #248]	@ (8001a5c <MX_GPIO_Init+0x2dc>)
 8001964:	f003 feb4 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001968:	f241 030c 	movw	r3, #4108	@ 0x100c
 800196c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800197a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	4837      	ldr	r0, [pc, #220]	@ (8001a60 <MX_GPIO_Init+0x2e0>)
 8001982:	f003 fea5 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	4838      	ldr	r0, [pc, #224]	@ (8001a7c <MX_GPIO_Init+0x2fc>)
 800199c:	f003 fe98 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019a0:	2308      	movs	r3, #8
 80019a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b4:	4619      	mov	r1, r3
 80019b6:	482b      	ldr	r0, [pc, #172]	@ (8001a64 <MX_GPIO_Init+0x2e4>)
 80019b8:	f003 fe8a 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019bc:	2310      	movs	r3, #16
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	4823      	ldr	r0, [pc, #140]	@ (8001a5c <MX_GPIO_Init+0x2dc>)
 80019d0:	f003 fe7e 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80019d4:	f248 0304 	movw	r3, #32772	@ 0x8004
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019e6:	4619      	mov	r1, r3
 80019e8:	481f      	ldr	r0, [pc, #124]	@ (8001a68 <MX_GPIO_Init+0x2e8>)
 80019ea:	f003 fe71 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80019ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a04:	4619      	mov	r1, r3
 8001a06:	4818      	ldr	r0, [pc, #96]	@ (8001a68 <MX_GPIO_Init+0x2e8>)
 8001a08:	f003 fe62 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a12:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a20:	4619      	mov	r1, r3
 8001a22:	480f      	ldr	r0, [pc, #60]	@ (8001a60 <MX_GPIO_Init+0x2e0>)
 8001a24:	f003 fe54 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001a28:	2310      	movs	r3, #16
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a38:	230a      	movs	r3, #10
 8001a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a40:	4619      	mov	r1, r3
 8001a42:	4809      	ldr	r0, [pc, #36]	@ (8001a68 <MX_GPIO_Init+0x2e8>)
 8001a44:	f003 fe44 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001a48:	23c8      	movs	r3, #200	@ 0xc8
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a54:	e014      	b.n	8001a80 <MX_GPIO_Init+0x300>
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40022800 	.word	0x40022800
 8001a68:	40021c00 	.word	0x40021c00
 8001a6c:	40021800 	.word	0x40021800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40022400 	.word	0x40022400
 8001a7c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4819      	ldr	r0, [pc, #100]	@ (8001af0 <MX_GPIO_Init+0x370>)
 8001a8c:	f003 fe20 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001a90:	2305      	movs	r3, #5
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4812      	ldr	r0, [pc, #72]	@ (8001af4 <MX_GPIO_Init+0x374>)
 8001aac:	f003 fe10 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480b      	ldr	r0, [pc, #44]	@ (8001af0 <MX_GPIO_Init+0x370>)
 8001ac4:	f003 fe04 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ac8:	2328      	movs	r3, #40	@ 0x28
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ad8:	230a      	movs	r3, #10
 8001ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <MX_GPIO_Init+0x378>)
 8001ae4:	f003 fdf4 	bl	80056d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae8:	bf00      	nop
 8001aea:	3740      	adds	r7, #64	@ 0x40
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021800 	.word	0x40021800
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020000 	.word	0x40020000

08001afc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001b04:	f025 f97c 	bl	8026e00 <MX_USB_HOST_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8001b08:	f00d ff3e 	bl	800f988 <MX_LWIP_Init>

  // DHCP가 IP를 할당받을 때까지 대기
  while (gnetif.ip_addr.addr == 0) { // IP 주소가 0.0.0.0이면 아직 할당되지 않음
 8001b0c:	e003      	b.n	8001b16 <StartDefaultTask+0x1a>
      osDelay(500);
 8001b0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b12:	f011 f8a1 	bl	8012c58 <osDelay>
  while (gnetif.ip_addr.addr == 0) { // IP 주소가 0.0.0.0이면 아직 할당되지 않음
 8001b16:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <StartDefaultTask+0x2c>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f7      	beq.n	8001b0e <StartDefaultTask+0x12>
  }
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f011 f89a 	bl	8012c58 <osDelay>
 8001b24:	e7fb      	b.n	8001b1e <StartDefaultTask+0x22>
 8001b26:	bf00      	nop
 8001b28:	20000d20 	.word	0x20000d20

08001b2c <StartTCPTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTCPTask */
__weak void StartTCPTask(void const * argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTCPTask */
  /* Infinite loop */

    while (gnetif.ip_addr.addr == 0) {
 8001b34:	e003      	b.n	8001b3e <StartTCPTask+0x12>
        osDelay(500);
 8001b36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b3a:	f011 f88d 	bl	8012c58 <osDelay>
    while (gnetif.ip_addr.addr == 0) {
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <StartTCPTask+0x28>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f7      	beq.n	8001b36 <StartTCPTask+0xa>
    }

	tcp_echo_server();
 8001b46:	f001 f9c7 	bl	8002ed8 <tcp_echo_server>
  /* USER CODE END StartTCPTask */
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000d20 	.word	0x20000d20

08001b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b6a:	f001 fb91 	bl	8003290 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40001000 	.word	0x40001000

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <Error_Handler+0x8>

08001b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_MspInit+0x4c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	4a10      	ldr	r2, [pc, #64]	@ (8001bd4 <HAL_MspInit+0x4c>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <HAL_MspInit+0x4c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	f06f 0001 	mvn.w	r0, #1
 8001bc6:	f001 feff 	bl	80039c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a21      	ldr	r2, [pc, #132]	@ (8001c7c <HAL_ADC_MspInit+0xa4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d13c      	bne.n	8001c74 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bfa:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <HAL_ADC_MspInit+0xa8>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	4a20      	ldr	r2, [pc, #128]	@ (8001c80 <HAL_ADC_MspInit+0xa8>)
 8001c00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c06:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <HAL_ADC_MspInit+0xa8>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c12:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <HAL_ADC_MspInit+0xa8>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a1a      	ldr	r2, [pc, #104]	@ (8001c80 <HAL_ADC_MspInit+0xa8>)
 8001c18:	f043 0320 	orr.w	r3, r3, #32
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <HAL_ADC_MspInit+0xa8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_ADC_MspInit+0xa8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a14      	ldr	r2, [pc, #80]	@ (8001c80 <HAL_ADC_MspInit+0xa8>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_ADC_MspInit+0xa8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001c42:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001c46:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	480b      	ldr	r0, [pc, #44]	@ (8001c84 <HAL_ADC_MspInit+0xac>)
 8001c58:	f003 fd3a 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c60:	2303      	movs	r3, #3
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	@ (8001c88 <HAL_ADC_MspInit+0xb0>)
 8001c70:	f003 fd2e 	bl	80056d0 <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	@ 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40012200 	.word	0x40012200
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40021400 	.word	0x40021400
 8001c88:	40020000 	.word	0x40020000

08001c8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_CRC_MspInit+0x38>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_CRC_MspInit+0x3c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_CRC_MspInit+0x3c>)
 8001ca4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_CRC_MspInit+0x3c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023000 	.word	0x40023000
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08e      	sub	sp, #56	@ 0x38
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a50      	ldr	r2, [pc, #320]	@ (8001e2c <HAL_DCMI_MspInit+0x160>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	f040 809a 	bne.w	8001e24 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6353      	str	r3, [r2, #52]	@ 0x34
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
 8001d06:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d08:	4b49      	ldr	r3, [pc, #292]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	4a48      	ldr	r2, [pc, #288]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d14:	4b46      	ldr	r3, [pc, #280]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d20:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	4a42      	ldr	r2, [pc, #264]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2c:	4b40      	ldr	r3, [pc, #256]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d38:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d44:	4b3a      	ldr	r3, [pc, #232]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d50:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	4a36      	ldr	r2, [pc, #216]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5c:	4b34      	ldr	r3, [pc, #208]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b31      	ldr	r3, [pc, #196]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	4a30      	ldr	r2, [pc, #192]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d74:	4b2e      	ldr	r3, [pc, #184]	@ (8001e30 <HAL_DCMI_MspInit+0x164>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001d80:	2360      	movs	r3, #96	@ 0x60
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d90:	230d      	movs	r3, #13
 8001d92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4826      	ldr	r0, [pc, #152]	@ (8001e34 <HAL_DCMI_MspInit+0x168>)
 8001d9c:	f003 fc98 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001da0:	2308      	movs	r3, #8
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001db0:	230d      	movs	r3, #13
 8001db2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db8:	4619      	mov	r1, r3
 8001dba:	481f      	ldr	r0, [pc, #124]	@ (8001e38 <HAL_DCMI_MspInit+0x16c>)
 8001dbc:	f003 fc88 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001dc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dd2:	230d      	movs	r3, #13
 8001dd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4817      	ldr	r0, [pc, #92]	@ (8001e3c <HAL_DCMI_MspInit+0x170>)
 8001dde:	f003 fc77 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001de2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001df4:	230d      	movs	r3, #13
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4810      	ldr	r0, [pc, #64]	@ (8001e40 <HAL_DCMI_MspInit+0x174>)
 8001e00:	f003 fc66 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001e04:	2350      	movs	r3, #80	@ 0x50
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e14:	230d      	movs	r3, #13
 8001e16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4809      	ldr	r0, [pc, #36]	@ (8001e44 <HAL_DCMI_MspInit+0x178>)
 8001e20:	f003 fc56 	bl	80056d0 <HAL_GPIO_Init>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001e24:	bf00      	nop
 8001e26:	3738      	adds	r7, #56	@ 0x38
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	50050000 	.word	0x50050000
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40020c00 	.word	0x40020c00
 8001e3c:	40021800 	.word	0x40021800
 8001e40:	40021c00 	.word	0x40021c00
 8001e44:	40020000 	.word	0x40020000

08001e48 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <HAL_DMA2D_MspInit+0x44>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <HAL_DMA2D_MspInit+0x48>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <HAL_DMA2D_MspInit+0x48>)
 8001e60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_DMA2D_MspInit+0x48>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2105      	movs	r1, #5
 8001e76:	205a      	movs	r0, #90	@ 0x5a
 8001e78:	f001 fda6 	bl	80039c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e7c:	205a      	movs	r0, #90	@ 0x5a
 8001e7e:	f001 fdbf 	bl	8003a00 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	4002b000 	.word	0x4002b000
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0ac      	sub	sp, #176	@ 0xb0
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eac:	f107 0318 	add.w	r3, r7, #24
 8001eb0:	2284      	movs	r2, #132	@ 0x84
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f025 fdb1 	bl	8027a1c <memset>
  if(hi2c->Instance==I2C1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a44      	ldr	r2, [pc, #272]	@ (8001fd0 <HAL_I2C_MspInit+0x13c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d13d      	bne.n	8001f40 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ec4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ec8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ece:	f107 0318 	add.w	r3, r7, #24
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f007 f970 	bl	80091b8 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ede:	f7ff fe4d 	bl	8001b7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001efa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001efe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f02:	2312      	movs	r3, #18
 8001f04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f14:	2304      	movs	r3, #4
 8001f16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	482d      	ldr	r0, [pc, #180]	@ (8001fd8 <HAL_I2C_MspInit+0x144>)
 8001f22:	f003 fbd5 	bl	80056d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f26:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001f2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f3e:	e042      	b.n	8001fc6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a25      	ldr	r2, [pc, #148]	@ (8001fdc <HAL_I2C_MspInit+0x148>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d13d      	bne.n	8001fc6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f56:	f107 0318 	add.w	r3, r7, #24
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f007 f92c 	bl	80091b8 <HAL_RCCEx_PeriphCLKConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001f66:	f7ff fe09 	bl	8001b7c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a19      	ldr	r2, [pc, #100]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f82:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f8a:	2312      	movs	r3, #18
 8001f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fa2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <HAL_I2C_MspInit+0x14c>)
 8001faa:	f003 fb91 	bl	80056d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	4a08      	ldr	r2, [pc, #32]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001fb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_I2C_MspInit+0x140>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
}
 8001fc6:	bf00      	nop
 8001fc8:	37b0      	adds	r7, #176	@ 0xb0
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40005400 	.word	0x40005400
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40005c00 	.word	0x40005c00
 8001fe0:	40021c00 	.word	0x40021c00

08001fe4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	@ 0x38
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a55      	ldr	r2, [pc, #340]	@ (8002158 <HAL_LTDC_MspInit+0x174>)
 8002002:	4293      	cmp	r3, r2
 8002004:	f040 80a3 	bne.w	800214e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002008:	4b54      	ldr	r3, [pc, #336]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 800200a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200c:	4a53      	ldr	r2, [pc, #332]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 800200e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002012:	6453      	str	r3, [r2, #68]	@ 0x44
 8002014:	4b51      	ldr	r3, [pc, #324]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 8002016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002018:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800201c:	623b      	str	r3, [r7, #32]
 800201e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002020:	4b4e      	ldr	r3, [pc, #312]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	4a4d      	ldr	r2, [pc, #308]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6313      	str	r3, [r2, #48]	@ 0x30
 800202c:	4b4b      	ldr	r3, [pc, #300]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002038:	4b48      	ldr	r3, [pc, #288]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	4a47      	ldr	r2, [pc, #284]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002042:	6313      	str	r3, [r2, #48]	@ 0x30
 8002044:	4b45      	ldr	r3, [pc, #276]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002050:	4b42      	ldr	r3, [pc, #264]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4a41      	ldr	r2, [pc, #260]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 8002056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800205a:	6313      	str	r3, [r2, #48]	@ 0x30
 800205c:	4b3f      	ldr	r3, [pc, #252]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002068:	4b3c      	ldr	r3, [pc, #240]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	4a3b      	ldr	r2, [pc, #236]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 800206e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002072:	6313      	str	r3, [r2, #48]	@ 0x30
 8002074:	4b39      	ldr	r3, [pc, #228]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002080:	4b36      	ldr	r3, [pc, #216]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	4a35      	ldr	r2, [pc, #212]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208a:	6313      	str	r3, [r2, #48]	@ 0x30
 800208c:	4b33      	ldr	r3, [pc, #204]	@ (800215c <HAL_LTDC_MspInit+0x178>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002098:	2310      	movs	r3, #16
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a8:	230e      	movs	r3, #14
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	482b      	ldr	r0, [pc, #172]	@ (8002160 <HAL_LTDC_MspInit+0x17c>)
 80020b4:	f003 fb0c 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80020b8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020ca:	230e      	movs	r3, #14
 80020cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d2:	4619      	mov	r1, r3
 80020d4:	4823      	ldr	r0, [pc, #140]	@ (8002164 <HAL_LTDC_MspInit+0x180>)
 80020d6:	f003 fafb 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80020da:	23f7      	movs	r3, #247	@ 0xf7
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020ea:	230e      	movs	r3, #14
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	481c      	ldr	r0, [pc, #112]	@ (8002168 <HAL_LTDC_MspInit+0x184>)
 80020f6:	f003 faeb 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800210c:	2309      	movs	r3, #9
 800210e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	4815      	ldr	r0, [pc, #84]	@ (800216c <HAL_LTDC_MspInit+0x188>)
 8002118:	f003 fada 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800211c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800212e:	230e      	movs	r3, #14
 8002130:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002136:	4619      	mov	r1, r3
 8002138:	480d      	ldr	r0, [pc, #52]	@ (8002170 <HAL_LTDC_MspInit+0x18c>)
 800213a:	f003 fac9 	bl	80056d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2105      	movs	r1, #5
 8002142:	2058      	movs	r0, #88	@ 0x58
 8002144:	f001 fc40 	bl	80039c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002148:	2058      	movs	r0, #88	@ 0x58
 800214a:	f001 fc59 	bl	8003a00 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800214e:	bf00      	nop
 8002150:	3738      	adds	r7, #56	@ 0x38
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40016800 	.word	0x40016800
 800215c:	40023800 	.word	0x40023800
 8002160:	40021000 	.word	0x40021000
 8002164:	40022400 	.word	0x40022400
 8002168:	40022800 	.word	0x40022800
 800216c:	40021800 	.word	0x40021800
 8002170:	40022000 	.word	0x40022000

08002174 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	@ 0x30
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a3b      	ldr	r2, [pc, #236]	@ (8002280 <HAL_QSPI_MspInit+0x10c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d170      	bne.n	8002278 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002196:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 8002198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219a:	4a3a      	ldr	r2, [pc, #232]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6393      	str	r3, [r2, #56]	@ 0x38
 80021a2:	4b38      	ldr	r3, [pc, #224]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ae:	4b35      	ldr	r3, [pc, #212]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	4a34      	ldr	r2, [pc, #208]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ba:	4b32      	ldr	r3, [pc, #200]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021de:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a28      	ldr	r2, [pc, #160]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <HAL_QSPI_MspInit+0x110>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80021f6:	2304      	movs	r3, #4
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002206:	2309      	movs	r3, #9
 8002208:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	4619      	mov	r1, r3
 8002210:	481d      	ldr	r0, [pc, #116]	@ (8002288 <HAL_QSPI_MspInit+0x114>)
 8002212:	f003 fa5d 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002216:	2340      	movs	r3, #64	@ 0x40
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002226:	230a      	movs	r3, #10
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4816      	ldr	r0, [pc, #88]	@ (800228c <HAL_QSPI_MspInit+0x118>)
 8002232:	f003 fa4d 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002236:	2304      	movs	r3, #4
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002246:	2309      	movs	r3, #9
 8002248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	480e      	ldr	r0, [pc, #56]	@ (800228c <HAL_QSPI_MspInit+0x118>)
 8002252:	f003 fa3d 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002256:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002268:	2309      	movs	r3, #9
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	4807      	ldr	r0, [pc, #28]	@ (8002290 <HAL_QSPI_MspInit+0x11c>)
 8002274:	f003 fa2c 	bl	80056d0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002278:	bf00      	nop
 800227a:	3730      	adds	r7, #48	@ 0x30
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	a0001000 	.word	0xa0001000
 8002284:	40023800 	.word	0x40023800
 8002288:	40021000 	.word	0x40021000
 800228c:	40020400 	.word	0x40020400
 8002290:	40020c00 	.word	0x40020c00

08002294 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b0a4      	sub	sp, #144	@ 0x90
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2284      	movs	r2, #132	@ 0x84
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f025 fbb9 	bl	8027a1c <memset>
  if(hrtc->Instance==RTC)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a0e      	ldr	r2, [pc, #56]	@ (80022e8 <HAL_RTC_MspInit+0x54>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d114      	bne.n	80022de <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022b4:	2320      	movs	r3, #32
 80022b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	4618      	mov	r0, r3
 80022c4:	f006 ff78 	bl	80091b8 <HAL_RCCEx_PeriphCLKConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022ce:	f7ff fc55 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_RTC_MspInit+0x58>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d6:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <HAL_RTC_MspInit+0x58>)
 80022d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022dc:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80022de:	bf00      	nop
 80022e0:	3790      	adds	r7, #144	@ 0x90
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40002800 	.word	0x40002800
 80022ec:	40023800 	.word	0x40023800

080022f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	@ 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	@ (80023a4 <HAL_SD_MspInit+0xb4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d144      	bne.n	800239c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002312:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_SD_MspInit+0xb8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4a24      	ldr	r2, [pc, #144]	@ (80023a8 <HAL_SD_MspInit+0xb8>)
 8002318:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800231c:	6453      	str	r3, [r2, #68]	@ 0x44
 800231e:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <HAL_SD_MspInit+0xb8>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232a:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <HAL_SD_MspInit+0xb8>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_SD_MspInit+0xb8>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <HAL_SD_MspInit+0xb8>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002342:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_SD_MspInit+0xb8>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a18      	ldr	r2, [pc, #96]	@ (80023a8 <HAL_SD_MspInit+0xb8>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_SD_MspInit+0xb8>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800235a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800235e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800236c:	230c      	movs	r3, #12
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	480d      	ldr	r0, [pc, #52]	@ (80023ac <HAL_SD_MspInit+0xbc>)
 8002378:	f003 f9aa 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800237c:	2304      	movs	r3, #4
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800238c:	230c      	movs	r3, #12
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	4806      	ldr	r0, [pc, #24]	@ (80023b0 <HAL_SD_MspInit+0xc0>)
 8002398:	f003 f99a 	bl	80056d0 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800239c:	bf00      	nop
 800239e:	3728      	adds	r7, #40	@ 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00

080023b4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0aa      	sub	sp, #168	@ 0xa8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2284      	movs	r2, #132	@ 0x84
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f025 fb21 	bl	8027a1c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80023e2:	d143      	bne.n	800246c <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80023e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80023ea:	2364      	movs	r3, #100	@ 0x64
 80023ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80023ee:	2302      	movs	r3, #2
 80023f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80023f2:	2302      	movs	r3, #2
 80023f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	4618      	mov	r0, r3
 8002404:	f006 fed8 	bl	80091b8 <HAL_RCCEx_PeriphCLKConfig>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800240e:	f7ff fbb5 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002412:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <HAL_SPDIFRX_MspInit+0xc0>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	4a17      	ldr	r2, [pc, #92]	@ (8002474 <HAL_SPDIFRX_MspInit+0xc0>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241c:	6413      	str	r3, [r2, #64]	@ 0x40
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_SPDIFRX_MspInit+0xc0>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800242a:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <HAL_SPDIFRX_MspInit+0xc0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	4a11      	ldr	r2, [pc, #68]	@ (8002474 <HAL_SPDIFRX_MspInit+0xc0>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6313      	str	r3, [r2, #48]	@ 0x30
 8002436:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <HAL_SPDIFRX_MspInit+0xc0>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800245a:	2308      	movs	r3, #8
 800245c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002464:	4619      	mov	r1, r3
 8002466:	4804      	ldr	r0, [pc, #16]	@ (8002478 <HAL_SPDIFRX_MspInit+0xc4>)
 8002468:	f003 f932 	bl	80056d0 <HAL_GPIO_Init>

  /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 800246c:	bf00      	nop
 800246e:	37a8      	adds	r7, #168	@ 0xa8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	40020c00 	.word	0x40020c00

0800247c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a25      	ldr	r2, [pc, #148]	@ (8002530 <HAL_SPI_MspInit+0xb4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d144      	bne.n	8002528 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800249e:	4b25      	ldr	r3, [pc, #148]	@ (8002534 <HAL_SPI_MspInit+0xb8>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	4a24      	ldr	r2, [pc, #144]	@ (8002534 <HAL_SPI_MspInit+0xb8>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024aa:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <HAL_SPI_MspInit+0xb8>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80024b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002534 <HAL_SPI_MspInit+0xb8>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002534 <HAL_SPI_MspInit+0xb8>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <HAL_SPI_MspInit+0xb8>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <HAL_SPI_MspInit+0xb8>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	4a18      	ldr	r2, [pc, #96]	@ (8002534 <HAL_SPI_MspInit+0xb8>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024da:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <HAL_SPI_MspInit+0xb8>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80024e6:	2302      	movs	r3, #2
 80024e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f6:	2305      	movs	r3, #5
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	480d      	ldr	r0, [pc, #52]	@ (8002538 <HAL_SPI_MspInit+0xbc>)
 8002502:	f003 f8e5 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002506:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002518:	2305      	movs	r3, #5
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	4806      	ldr	r0, [pc, #24]	@ (800253c <HAL_SPI_MspInit+0xc0>)
 8002524:	f003 f8d4 	bl	80056d0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002528:	bf00      	nop
 800252a:	3728      	adds	r7, #40	@ 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40003800 	.word	0x40003800
 8002534:	40023800 	.word	0x40023800
 8002538:	40022000 	.word	0x40022000
 800253c:	40020400 	.word	0x40020400

08002540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	@ 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2e      	ldr	r2, [pc, #184]	@ (8002608 <HAL_TIM_Base_MspInit+0xc8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10c      	bne.n	800256c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002552:	4b2e      	ldr	r3, [pc, #184]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	4a2d      	ldr	r2, [pc, #180]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6453      	str	r3, [r2, #68]	@ 0x44
 800255e:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800256a:	e046      	b.n	80025fa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002574:	d10c      	bne.n	8002590 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002576:	4b25      	ldr	r3, [pc, #148]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	4a24      	ldr	r2, [pc, #144]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6413      	str	r3, [r2, #64]	@ 0x40
 8002582:	4b22      	ldr	r3, [pc, #136]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	69bb      	ldr	r3, [r7, #24]
}
 800258e:	e034      	b.n	80025fa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1e      	ldr	r2, [pc, #120]	@ (8002610 <HAL_TIM_Base_MspInit+0xd0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10c      	bne.n	80025b4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800259a:	4b1c      	ldr	r3, [pc, #112]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a1b      	ldr	r2, [pc, #108]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b19      	ldr	r3, [pc, #100]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
}
 80025b2:	e022      	b.n	80025fa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a16      	ldr	r2, [pc, #88]	@ (8002614 <HAL_TIM_Base_MspInit+0xd4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10c      	bne.n	80025d8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025be:	4b13      	ldr	r3, [pc, #76]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	4a12      	ldr	r2, [pc, #72]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ca:	4b10      	ldr	r3, [pc, #64]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
}
 80025d6:	e010      	b.n	80025fa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002618 <HAL_TIM_Base_MspInit+0xd8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10b      	bne.n	80025fa <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025e2:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a09      	ldr	r2, [pc, #36]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b07      	ldr	r3, [pc, #28]	@ (800260c <HAL_TIM_Base_MspInit+0xcc>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
}
 80025fa:	bf00      	nop
 80025fc:	3724      	adds	r7, #36	@ 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40010000 	.word	0x40010000
 800260c:	40023800 	.word	0x40023800
 8002610:	40000400 	.word	0x40000400
 8002614:	40000c00 	.word	0x40000c00
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <HAL_TIM_PWM_MspInit+0x38>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10b      	bne.n	8002646 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_TIM_PWM_MspInit+0x3c>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <HAL_TIM_PWM_MspInit+0x3c>)
 8002634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <HAL_TIM_PWM_MspInit+0x3c>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM12_MspInit 1 */

  }

}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40001800 	.word	0x40001800
 8002658:	40023800 	.word	0x40023800

0800265c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	@ 0x30
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_TIM_MspPostInit+0x178>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d11d      	bne.n	80026ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	4b56      	ldr	r3, [pc, #344]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	4a55      	ldr	r2, [pc, #340]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6313      	str	r3, [r2, #48]	@ 0x30
 800268a:	4b53      	ldr	r3, [pc, #332]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002696:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800269a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026a8:	2301      	movs	r3, #1
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	4619      	mov	r1, r3
 80026b2:	484a      	ldr	r0, [pc, #296]	@ (80027dc <HAL_TIM_MspPostInit+0x180>)
 80026b4:	f003 f80c 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80026b8:	e087      	b.n	80027ca <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c2:	d11d      	bne.n	8002700 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4b44      	ldr	r3, [pc, #272]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	4a43      	ldr	r2, [pc, #268]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d0:	4b41      	ldr	r3, [pc, #260]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80026dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ee:	2301      	movs	r3, #1
 80026f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	4619      	mov	r1, r3
 80026f8:	4838      	ldr	r0, [pc, #224]	@ (80027dc <HAL_TIM_MspPostInit+0x180>)
 80026fa:	f002 ffe9 	bl	80056d0 <HAL_GPIO_Init>
}
 80026fe:	e064      	b.n	80027ca <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a36      	ldr	r2, [pc, #216]	@ (80027e0 <HAL_TIM_MspPostInit+0x184>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d11c      	bne.n	8002744 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270a:	4b33      	ldr	r3, [pc, #204]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a32      	ldr	r2, [pc, #200]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b30      	ldr	r3, [pc, #192]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002722:	2310      	movs	r3, #16
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002732:	2302      	movs	r3, #2
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	4829      	ldr	r0, [pc, #164]	@ (80027e4 <HAL_TIM_MspPostInit+0x188>)
 800273e:	f002 ffc7 	bl	80056d0 <HAL_GPIO_Init>
}
 8002742:	e042      	b.n	80027ca <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a27      	ldr	r2, [pc, #156]	@ (80027e8 <HAL_TIM_MspPostInit+0x18c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d11c      	bne.n	8002788 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800274e:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a21      	ldr	r2, [pc, #132]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b1f      	ldr	r3, [pc, #124]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002766:	2301      	movs	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002776:	2302      	movs	r3, #2
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	481a      	ldr	r0, [pc, #104]	@ (80027ec <HAL_TIM_MspPostInit+0x190>)
 8002782:	f002 ffa5 	bl	80056d0 <HAL_GPIO_Init>
}
 8002786:	e020      	b.n	80027ca <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a18      	ldr	r2, [pc, #96]	@ (80027f0 <HAL_TIM_MspPostInit+0x194>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d11b      	bne.n	80027ca <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002792:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	4a10      	ldr	r2, [pc, #64]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 8002798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800279c:	6313      	str	r3, [r2, #48]	@ 0x30
 800279e:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <HAL_TIM_MspPostInit+0x17c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80027aa:	2340      	movs	r3, #64	@ 0x40
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80027ba:	2309      	movs	r3, #9
 80027bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	480b      	ldr	r0, [pc, #44]	@ (80027f4 <HAL_TIM_MspPostInit+0x198>)
 80027c6:	f002 ff83 	bl	80056d0 <HAL_GPIO_Init>
}
 80027ca:	bf00      	nop
 80027cc:	3730      	adds	r7, #48	@ 0x30
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40000c00 	.word	0x40000c00
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40001800 	.word	0x40001800
 80027f4:	40021c00 	.word	0x40021c00

080027f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0ae      	sub	sp, #184	@ 0xb8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	2284      	movs	r2, #132	@ 0x84
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f025 f8ff 	bl	8027a1c <memset>
  if(huart->Instance==USART1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a53      	ldr	r2, [pc, #332]	@ (8002970 <HAL_UART_MspInit+0x178>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d15d      	bne.n	80028e4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002828:	2340      	movs	r3, #64	@ 0x40
 800282a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800282c:	2300      	movs	r3, #0
 800282e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	4618      	mov	r0, r3
 8002836:	f006 fcbf 	bl	80091b8 <HAL_RCCEx_PeriphCLKConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002840:	f7ff f99c 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002844:	4b4b      	ldr	r3, [pc, #300]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 8002846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002848:	4a4a      	ldr	r2, [pc, #296]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 800284a:	f043 0310 	orr.w	r3, r3, #16
 800284e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002850:	4b48      	ldr	r3, [pc, #288]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285c:	4b45      	ldr	r3, [pc, #276]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	4a44      	ldr	r2, [pc, #272]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	6313      	str	r3, [r2, #48]	@ 0x30
 8002868:	4b42      	ldr	r3, [pc, #264]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002874:	4b3f      	ldr	r3, [pc, #252]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	4a3e      	ldr	r2, [pc, #248]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002880:	4b3c      	ldr	r3, [pc, #240]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028a4:	2307      	movs	r3, #7
 80028a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028ae:	4619      	mov	r1, r3
 80028b0:	4831      	ldr	r0, [pc, #196]	@ (8002978 <HAL_UART_MspInit+0x180>)
 80028b2:	f002 ff0d 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80028b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028d0:	2307      	movs	r3, #7
 80028d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028d6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028da:	4619      	mov	r1, r3
 80028dc:	4827      	ldr	r0, [pc, #156]	@ (800297c <HAL_UART_MspInit+0x184>)
 80028de:	f002 fef7 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028e2:	e040      	b.n	8002966 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a25      	ldr	r2, [pc, #148]	@ (8002980 <HAL_UART_MspInit+0x188>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d13b      	bne.n	8002966 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80028ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028f2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80028f4:	2300      	movs	r3, #0
 80028f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028f8:	f107 0320 	add.w	r3, r7, #32
 80028fc:	4618      	mov	r0, r3
 80028fe:	f006 fc5b 	bl	80091b8 <HAL_RCCEx_PeriphCLKConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002908:	f7ff f938 	bl	8001b7c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 800290e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002910:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	6453      	str	r3, [r2, #68]	@ 0x44
 8002918:	4b16      	ldr	r3, [pc, #88]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 800291a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002924:	4b13      	ldr	r3, [pc, #76]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002930:	4b10      	ldr	r3, [pc, #64]	@ (8002974 <HAL_UART_MspInit+0x17c>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800293c:	23c0      	movs	r3, #192	@ 0xc0
 800293e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002954:	2308      	movs	r3, #8
 8002956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800295e:	4619      	mov	r1, r3
 8002960:	4808      	ldr	r0, [pc, #32]	@ (8002984 <HAL_UART_MspInit+0x18c>)
 8002962:	f002 feb5 	bl	80056d0 <HAL_GPIO_Init>
}
 8002966:	bf00      	nop
 8002968:	37b8      	adds	r7, #184	@ 0xb8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40011000 	.word	0x40011000
 8002974:	40023800 	.word	0x40023800
 8002978:	40020400 	.word	0x40020400
 800297c:	40020000 	.word	0x40020000
 8002980:	40011400 	.word	0x40011400
 8002984:	40020800 	.word	0x40020800

08002988 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800299c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a88 <HAL_FMC_MspInit+0x100>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d16d      	bne.n	8002a80 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80029a4:	4b38      	ldr	r3, [pc, #224]	@ (8002a88 <HAL_FMC_MspInit+0x100>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029aa:	4b38      	ldr	r3, [pc, #224]	@ (8002a8c <HAL_FMC_MspInit+0x104>)
 80029ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ae:	4a37      	ldr	r2, [pc, #220]	@ (8002a8c <HAL_FMC_MspInit+0x104>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80029b6:	4b35      	ldr	r3, [pc, #212]	@ (8002a8c <HAL_FMC_MspInit+0x104>)
 80029b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80029c2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80029c6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c8:	2302      	movs	r3, #2
 80029ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d0:	2303      	movs	r3, #3
 80029d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029d4:	230c      	movs	r3, #12
 80029d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	4619      	mov	r1, r3
 80029dc:	482c      	ldr	r0, [pc, #176]	@ (8002a90 <HAL_FMC_MspInit+0x108>)
 80029de:	f002 fe77 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80029e2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80029e6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f0:	2303      	movs	r3, #3
 80029f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029f4:	230c      	movs	r3, #12
 80029f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4825      	ldr	r0, [pc, #148]	@ (8002a94 <HAL_FMC_MspInit+0x10c>)
 80029fe:	f002 fe67 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002a02:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002a06:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a14:	230c      	movs	r3, #12
 8002a16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	481e      	ldr	r0, [pc, #120]	@ (8002a98 <HAL_FMC_MspInit+0x110>)
 8002a1e:	f002 fe57 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002a22:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002a26:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a34:	230c      	movs	r3, #12
 8002a36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4817      	ldr	r0, [pc, #92]	@ (8002a9c <HAL_FMC_MspInit+0x114>)
 8002a3e:	f002 fe47 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a42:	2328      	movs	r3, #40	@ 0x28
 8002a44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a52:	230c      	movs	r3, #12
 8002a54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4811      	ldr	r0, [pc, #68]	@ (8002aa0 <HAL_FMC_MspInit+0x118>)
 8002a5c:	f002 fe38 	bl	80056d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002a60:	2308      	movs	r3, #8
 8002a62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a70:	230c      	movs	r3, #12
 8002a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	480a      	ldr	r0, [pc, #40]	@ (8002aa4 <HAL_FMC_MspInit+0x11c>)
 8002a7a:	f002 fe29 	bl	80056d0 <HAL_GPIO_Init>
 8002a7e:	e000      	b.n	8002a82 <HAL_FMC_MspInit+0xfa>
    return;
 8002a80:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000cb8 	.word	0x20000cb8
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40021800 	.word	0x40021800
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40021400 	.word	0x40021400
 8002aa0:	40021c00 	.word	0x40021c00
 8002aa4:	40020800 	.word	0x40020800

08002aa8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ab0:	f7ff ff6a 	bl	8002988 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8002b78 <HAL_SAI_MspInit+0xbc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d124      	bne.n	8002b18 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002ace:	4b2b      	ldr	r3, [pc, #172]	@ (8002b7c <HAL_SAI_MspInit+0xc0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b80 <HAL_SAI_MspInit+0xc4>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	4a29      	ldr	r2, [pc, #164]	@ (8002b80 <HAL_SAI_MspInit+0xc4>)
 8002adc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae2:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <HAL_SAI_MspInit+0xc4>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002aee:	4b23      	ldr	r3, [pc, #140]	@ (8002b7c <HAL_SAI_MspInit+0xc0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3301      	adds	r3, #1
 8002af4:	4a21      	ldr	r2, [pc, #132]	@ (8002b7c <HAL_SAI_MspInit+0xc0>)
 8002af6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002af8:	23f0      	movs	r3, #240	@ 0xf0
 8002afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b08:	230a      	movs	r3, #10
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4619      	mov	r1, r3
 8002b12:	481c      	ldr	r0, [pc, #112]	@ (8002b84 <HAL_SAI_MspInit+0xc8>)
 8002b14:	f002 fddc 	bl	80056d0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8002b88 <HAL_SAI_MspInit+0xcc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d125      	bne.n	8002b6e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002b22:	4b16      	ldr	r3, [pc, #88]	@ (8002b7c <HAL_SAI_MspInit+0xc0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b2a:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <HAL_SAI_MspInit+0xc4>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <HAL_SAI_MspInit+0xc4>)
 8002b30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <HAL_SAI_MspInit+0xc4>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_SAI_MspInit+0xc0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	4a0c      	ldr	r2, [pc, #48]	@ (8002b7c <HAL_SAI_MspInit+0xc0>)
 8002b4a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002b4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b5e:	230a      	movs	r3, #10
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4808      	ldr	r0, [pc, #32]	@ (8002b8c <HAL_SAI_MspInit+0xd0>)
 8002b6a:	f002 fdb1 	bl	80056d0 <HAL_GPIO_Init>

    }
}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	@ 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40015c04 	.word	0x40015c04
 8002b7c:	20000cbc 	.word	0x20000cbc
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40022000 	.word	0x40022000
 8002b88:	40015c24 	.word	0x40015c24
 8002b8c:	40021800 	.word	0x40021800

08002b90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08e      	sub	sp, #56	@ 0x38
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ba0:	4b33      	ldr	r3, [pc, #204]	@ (8002c70 <HAL_InitTick+0xe0>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	4a32      	ldr	r2, [pc, #200]	@ (8002c70 <HAL_InitTick+0xe0>)
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bac:	4b30      	ldr	r3, [pc, #192]	@ (8002c70 <HAL_InitTick+0xe0>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bb8:	f107 0210 	add.w	r2, r7, #16
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f006 fac6 	bl	8009154 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bd2:	f006 fa97 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 8002bd6:	6378      	str	r0, [r7, #52]	@ 0x34
 8002bd8:	e004      	b.n	8002be4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bda:	f006 fa93 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 8002bde:	4603      	mov	r3, r0
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be6:	4a23      	ldr	r2, [pc, #140]	@ (8002c74 <HAL_InitTick+0xe4>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0c9b      	lsrs	r3, r3, #18
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bf2:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002bf4:	4a21      	ldr	r2, [pc, #132]	@ (8002c7c <HAL_InitTick+0xec>)
 8002bf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002bfa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bfe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c00:	4a1d      	ldr	r2, [pc, #116]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c04:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c18:	4817      	ldr	r0, [pc, #92]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002c1a:	f008 ff64 	bl	800bae6 <HAL_TIM_Base_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11b      	bne.n	8002c64 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c2c:	4812      	ldr	r0, [pc, #72]	@ (8002c78 <HAL_InitTick+0xe8>)
 8002c2e:	f008 ffb1 	bl	800bb94 <HAL_TIM_Base_Start_IT>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d111      	bne.n	8002c64 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c40:	2036      	movs	r0, #54	@ 0x36
 8002c42:	f000 fedd 	bl	8003a00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0f      	cmp	r3, #15
 8002c4a:	d808      	bhi.n	8002c5e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	2036      	movs	r0, #54	@ 0x36
 8002c52:	f000 feb9 	bl	80039c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <HAL_InitTick+0xf0>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e002      	b.n	8002c64 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3738      	adds	r7, #56	@ 0x38
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	431bde83 	.word	0x431bde83
 8002c78:	20000cc0 	.word	0x20000cc0
 8002c7c:	40001000 	.word	0x40001000
 8002c80:	20000004 	.word	0x20000004

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <NMI_Handler+0x4>

08002c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cc0:	4802      	ldr	r0, [pc, #8]	@ (8002ccc <TIM6_DAC_IRQHandler+0x10>)
 8002cc2:	f009 f836 	bl	800bd32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000cc0 	.word	0x20000cc0

08002cd0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002cd4:	4802      	ldr	r0, [pc, #8]	@ (8002ce0 <ETH_IRQHandler+0x10>)
 8002cd6:	f001 fe21 	bl	800491c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200056f8 	.word	0x200056f8

08002ce4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002ce8:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <OTG_FS_IRQHandler+0x10>)
 8002cea:	f003 f9af 	bl	800604c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200116dc 	.word	0x200116dc

08002cf8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002cfc:	4802      	ldr	r0, [pc, #8]	@ (8002d08 <LTDC_IRQHandler+0x10>)
 8002cfe:	f005 f9e3 	bl	80080c8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000654 	.word	0x20000654

08002d0c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002d10:	4802      	ldr	r0, [pc, #8]	@ (8002d1c <DMA2D_IRQHandler+0x10>)
 8002d12:	f001 f8d3 	bl	8003ebc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	2000056c 	.word	0x2000056c

08002d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return 1;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_kill>:

int _kill(int pid, int sig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <_kill+0x20>)
 8002d3c:	2216      	movs	r2, #22
 8002d3e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	20011c00 	.word	0x20011c00

08002d54 <_exit>:

void _exit (int status)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffe5 	bl	8002d30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d66:	bf00      	nop
 8002d68:	e7fd      	b.n	8002d66 <_exit+0x12>

08002d6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e00a      	b.n	8002d92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d7c:	f3af 8000 	nop.w
 8002d80:	4601      	mov	r1, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	60ba      	str	r2, [r7, #8]
 8002d88:	b2ca      	uxtb	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dbf0      	blt.n	8002d7c <_read+0x12>
  }

  return len;
 8002d9a:	687b      	ldr	r3, [r7, #4]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e009      	b.n	8002dca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	60ba      	str	r2, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	dbf1      	blt.n	8002db6 <_write+0x12>
  }
  return len;
 8002dd2:	687b      	ldr	r3, [r7, #4]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_close>:

int _close(int file)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e04:	605a      	str	r2, [r3, #4]
  return 0;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <_isatty>:

int _isatty(int file)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e1c:	2301      	movs	r3, #1
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ea0 <_sbrk+0x5c>)
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <_sbrk+0x60>)
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <_sbrk+0x64>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <_sbrk+0x68>)
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d205      	bcs.n	8002e80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002e74:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <_sbrk+0x6c>)
 8002e76:	220c      	movs	r2, #12
 8002e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e009      	b.n	8002e94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e80:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <_sbrk+0x64>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e86:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a06      	ldr	r2, [pc, #24]	@ (8002ea8 <_sbrk+0x64>)
 8002e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	20050000 	.word	0x20050000
 8002ea4:	00000400 	.word	0x00000400
 8002ea8:	20000d0c 	.word	0x20000d0c
 8002eac:	20011c08 	.word	0x20011c08
 8002eb0:	20011c00 	.word	0x20011c00

08002eb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb8:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <SystemInit+0x20>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	4a05      	ldr	r2, [pc, #20]	@ (8002ed4 <SystemInit+0x20>)
 8002ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <tcp_echo_server>:
#include <string.h>

#define TCP_PORT 5000
#define BUFFER_SIZE 128

void tcp_echo_server(void) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0ac      	sub	sp, #176	@ 0xb0
 8002edc:	af00      	add	r7, sp, #0
    struct sockaddr_in server_addr, client_addr;
    int server_sock, client_sock;
    socklen_t client_addr_len = sizeof(client_addr);
 8002ede:	2310      	movs	r3, #16
 8002ee0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    char buffer[BUFFER_SIZE];
    int recv_len;

    // 1. 소켓 생성
    server_sock = socket(AF_INET, SOCK_STREAM, 0);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2002      	movs	r0, #2
 8002eea:	f016 fa5f 	bl	80193ac <lwip_socket>
 8002eee:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    if (server_sock < 0) {
 8002ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	da03      	bge.n	8002f02 <tcp_echo_server+0x2a>
        printf("Socket creation failed!\n");
 8002efa:	483f      	ldr	r0, [pc, #252]	@ (8002ff8 <tcp_echo_server+0x120>)
 8002efc:	f024 fc9e 	bl	802783c <puts>
        return;
 8002f00:	e076      	b.n	8002ff0 <tcp_echo_server+0x118>
    }

    // 2. 서버 주소 설정
    server_addr.sin_family = AF_INET;
 8002f02:	2302      	movs	r3, #2
 8002f04:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    server_addr.sin_port = htons(TCP_PORT);
 8002f08:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002f0c:	f016 fdf2 	bl	8019af4 <lwip_htons>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f016 fe01 	bl	8019b1e <lwip_htonl>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    // 3. 바인딩
    if (bind(server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
 8002f22:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002f26:	2210      	movs	r2, #16
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002f2e:	f015 fce9 	bl	8018904 <lwip_bind>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da07      	bge.n	8002f48 <tcp_echo_server+0x70>
        printf("Bind failed!\n");
 8002f38:	4830      	ldr	r0, [pc, #192]	@ (8002ffc <tcp_echo_server+0x124>)
 8002f3a:	f024 fc7f 	bl	802783c <puts>
        closesocket(server_sock);
 8002f3e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002f42:	f015 fd4d 	bl	80189e0 <lwip_close>
        return;
 8002f46:	e053      	b.n	8002ff0 <tcp_echo_server+0x118>
    }

    // 4. 연결 대기
    if (listen(server_sock, 5) < 0) {
 8002f48:	2105      	movs	r1, #5
 8002f4a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002f4e:	f015 fd9d 	bl	8018a8c <lwip_listen>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	da07      	bge.n	8002f68 <tcp_echo_server+0x90>
        printf("Listen failed!\n");
 8002f58:	4829      	ldr	r0, [pc, #164]	@ (8003000 <tcp_echo_server+0x128>)
 8002f5a:	f024 fc6f 	bl	802783c <puts>
        closesocket(server_sock);
 8002f5e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002f62:	f015 fd3d 	bl	80189e0 <lwip_close>
        return;
 8002f66:	e043      	b.n	8002ff0 <tcp_echo_server+0x118>
    }

    printf("TCP Echo Server started on port %d...\n", TCP_PORT);
 8002f68:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002f6c:	4825      	ldr	r0, [pc, #148]	@ (8003004 <tcp_echo_server+0x12c>)
 8002f6e:	f024 fbfd 	bl	802776c <iprintf>

    while (1) {
        // 5. 클라이언트 연결 대기
        client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &client_addr_len);
 8002f72:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8002f76:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002f80:	f015 fba2 	bl	80186c8 <lwip_accept>
 8002f84:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
        if (client_sock < 0) {
 8002f88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da03      	bge.n	8002f98 <tcp_echo_server+0xc0>
            printf("Accept failed!\n");
 8002f90:	481d      	ldr	r0, [pc, #116]	@ (8003008 <tcp_echo_server+0x130>)
 8002f92:	f024 fc53 	bl	802783c <puts>
            continue;
 8002f96:	e02a      	b.n	8002fee <tcp_echo_server+0x116>
        }

        printf("Client connected!\n");
 8002f98:	481c      	ldr	r0, [pc, #112]	@ (800300c <tcp_echo_server+0x134>)
 8002f9a:	f024 fc4f 	bl	802783c <puts>

        // 6. 데이터 송수신
        while ((recv_len = recv(client_sock, buffer, BUFFER_SIZE, 0)) > 0) {
 8002f9e:	e012      	b.n	8002fc6 <tcp_echo_server+0xee>
            buffer[recv_len] = '\0'; // 수신된 데이터 처리
 8002fa0:	463a      	mov	r2, r7
 8002fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fa6:	4413      	add	r3, r2
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
            printf("Received: %s\n", buffer);
 8002fac:	463b      	mov	r3, r7
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4817      	ldr	r0, [pc, #92]	@ (8003010 <tcp_echo_server+0x138>)
 8002fb2:	f024 fbdb 	bl	802776c <iprintf>

            // Echo 데이터 전송
            send(client_sock, buffer, recv_len, 0);
 8002fb6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002fba:	4639      	mov	r1, r7
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002fc2:	f016 f8e3 	bl	801918c <lwip_send>
        while ((recv_len = recv(client_sock, buffer, BUFFER_SIZE, 0)) > 0) {
 8002fc6:	4639      	mov	r1, r7
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2280      	movs	r2, #128	@ 0x80
 8002fcc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002fd0:	f016 f8c6 	bl	8019160 <lwip_recv>
 8002fd4:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 8002fd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	dcdf      	bgt.n	8002fa0 <tcp_echo_server+0xc8>
        }

        printf("Client disconnected!\n");
 8002fe0:	480c      	ldr	r0, [pc, #48]	@ (8003014 <tcp_echo_server+0x13c>)
 8002fe2:	f024 fc2b 	bl	802783c <puts>
        closesocket(client_sock);
 8002fe6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002fea:	f015 fcf9 	bl	80189e0 <lwip_close>
        client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &client_addr_len);
 8002fee:	e7c0      	b.n	8002f72 <tcp_echo_server+0x9a>
    }

    closesocket(server_sock);
}
 8002ff0:	37b0      	adds	r7, #176	@ 0xb0
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	080285e0 	.word	0x080285e0
 8002ffc:	080285f8 	.word	0x080285f8
 8003000:	08028608 	.word	0x08028608
 8003004:	08028618 	.word	0x08028618
 8003008:	08028640 	.word	0x08028640
 800300c:	08028650 	.word	0x08028650
 8003010:	08028664 	.word	0x08028664
 8003014:	08028674 	.word	0x08028674

08003018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003050 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800301c:	f7ff ff4a 	bl	8002eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003020:	480c      	ldr	r0, [pc, #48]	@ (8003054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003022:	490d      	ldr	r1, [pc, #52]	@ (8003058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003024:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003028:	e002      	b.n	8003030 <LoopCopyDataInit>

0800302a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800302c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302e:	3304      	adds	r3, #4

08003030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003034:	d3f9      	bcc.n	800302a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003038:	4c0a      	ldr	r4, [pc, #40]	@ (8003064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800303c:	e001      	b.n	8003042 <LoopFillZerobss>

0800303e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003040:	3204      	adds	r2, #4

08003042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003044:	d3fb      	bcc.n	800303e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003046:	f024 fd9d 	bl	8027b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304a:	f7fd fb47 	bl	80006dc <main>
  bx  lr    
 800304e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003050:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003058:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800305c:	0802c698 	.word	0x0802c698
  ldr r2, =_sbss
 8003060:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003064:	20011c08 	.word	0x20011c08

08003068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003068:	e7fe      	b.n	8003068 <ADC_IRQHandler>

0800306a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <LAN8742_RegisterBusIO+0x28>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <LAN8742_RegisterBusIO+0x28>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <LAN8742_RegisterBusIO+0x28>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
 8003096:	e014      	b.n	80030c2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d139      	bne.n	800315e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e01c      	b.n	800313e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f107 020c 	add.w	r2, r7, #12
 800310c:	2112      	movs	r1, #18
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	4798      	blx	r3
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	da03      	bge.n	8003120 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8003118:	f06f 0304 	mvn.w	r3, #4
 800311c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800311e:	e00b      	b.n	8003138 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d105      	bne.n	8003138 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
         break;
 8003136:	e005      	b.n	8003144 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3301      	adds	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b1f      	cmp	r3, #31
 8003142:	d9df      	bls.n	8003104 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b1f      	cmp	r3, #31
 800314a:	d902      	bls.n	8003152 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800314c:	f06f 0302 	mvn.w	r3, #2
 8003150:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800315e:	693b      	ldr	r3, [r7, #16]
 }
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6810      	ldr	r0, [r2, #0]
 800317c:	f107 020c 	add.w	r2, r7, #12
 8003180:	2101      	movs	r1, #1
 8003182:	4798      	blx	r3
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	da02      	bge.n	8003190 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800318a:	f06f 0304 	mvn.w	r3, #4
 800318e:	e06e      	b.n	800326e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6810      	ldr	r0, [r2, #0]
 8003198:	f107 020c 	add.w	r2, r7, #12
 800319c:	2101      	movs	r1, #1
 800319e:	4798      	blx	r3
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da02      	bge.n	80031ac <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80031a6:	f06f 0304 	mvn.w	r3, #4
 80031aa:	e060      	b.n	800326e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e059      	b.n	800326e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6810      	ldr	r0, [r2, #0]
 80031c2:	f107 020c 	add.w	r2, r7, #12
 80031c6:	2100      	movs	r1, #0
 80031c8:	4798      	blx	r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	da02      	bge.n	80031d6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80031d0:	f06f 0304 	mvn.w	r3, #4
 80031d4:	e04b      	b.n	800326e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d11b      	bne.n	8003218 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <LAN8742_GetLinkState+0x90>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80031f4:	2302      	movs	r3, #2
 80031f6:	e03a      	b.n	800326e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003202:	2303      	movs	r3, #3
 8003204:	e033      	b.n	800326e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003210:	2304      	movs	r3, #4
 8003212:	e02c      	b.n	800326e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003214:	2305      	movs	r3, #5
 8003216:	e02a      	b.n	800326e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6810      	ldr	r0, [r2, #0]
 8003220:	f107 020c 	add.w	r2, r7, #12
 8003224:	211f      	movs	r1, #31
 8003226:	4798      	blx	r3
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	da02      	bge.n	8003234 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800322e:	f06f 0304 	mvn.w	r3, #4
 8003232:	e01c      	b.n	800326e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800323e:	2306      	movs	r3, #6
 8003240:	e015      	b.n	800326e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 031c 	and.w	r3, r3, #28
 8003248:	2b18      	cmp	r3, #24
 800324a:	d101      	bne.n	8003250 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800324c:	2302      	movs	r3, #2
 800324e:	e00e      	b.n	800326e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 031c 	and.w	r3, r3, #28
 8003256:	2b08      	cmp	r3, #8
 8003258:	d101      	bne.n	800325e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800325a:	2303      	movs	r3, #3
 800325c:	e007      	b.n	800326e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 031c 	and.w	r3, r3, #28
 8003264:	2b14      	cmp	r3, #20
 8003266:	d101      	bne.n	800326c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003268:	2304      	movs	r3, #4
 800326a:	e000      	b.n	800326e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800326c:	2305      	movs	r3, #5
    }
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327a:	2003      	movs	r0, #3
 800327c:	f000 fb99 	bl	80039b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003280:	2000      	movs	r0, #0
 8003282:	f7ff fc85 	bl	8002b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003286:	f7fe fc7f 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003294:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_IncTick+0x20>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_IncTick+0x24>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	4a04      	ldr	r2, [pc, #16]	@ (80032b4 <HAL_IncTick+0x24>)
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000008 	.word	0x20000008
 80032b4:	20000d10 	.word	0x20000d10

080032b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return uwTick;
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <HAL_GetTick+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000d10 	.word	0x20000d10

080032d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff ffee 	bl	80032b8 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d005      	beq.n	80032f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_Delay+0x44>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032f6:	bf00      	nop
 80032f8:	f7ff ffde 	bl	80032b8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d8f7      	bhi.n	80032f8 <HAL_Delay+0x28>
  {
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000008 	.word	0x20000008

08003318 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <HAL_GetREVID+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0c1b      	lsrs	r3, r3, #16
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e0042000 	.word	0xe0042000

08003330 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e031      	b.n	80033aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe fc42 	bl	8001bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003372:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <HAL_ADC_Init+0x84>)
 8003374:	4013      	ands	r3, r2
 8003376:	f043 0202 	orr.w	r2, r3, #2
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f970 	bl	8003664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40
 800339a:	e001      	b.n	80033a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	ffffeefd 	.word	0xffffeefd

080033b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e136      	b.n	8003642 <HAL_ADC_ConfigChannel+0x28a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	d93a      	bls.n	800345a <HAL_ADC_ConfigChannel+0xa2>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033ec:	d035      	beq.n	800345a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68d9      	ldr	r1, [r3, #12]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	3b1e      	subs	r3, #30
 8003404:	2207      	movs	r2, #7
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	400a      	ands	r2, r1
 8003412:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a8d      	ldr	r2, [pc, #564]	@ (8003650 <HAL_ADC_ConfigChannel+0x298>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10a      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68d9      	ldr	r1, [r3, #12]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	061a      	lsls	r2, r3, #24
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003432:	e035      	b.n	80034a0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68d9      	ldr	r1, [r3, #12]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	4618      	mov	r0, r3
 8003446:	4603      	mov	r3, r0
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4403      	add	r3, r0
 800344c:	3b1e      	subs	r3, #30
 800344e:	409a      	lsls	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003458:	e022      	b.n	80034a0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6919      	ldr	r1, [r3, #16]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	2207      	movs	r2, #7
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43da      	mvns	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	400a      	ands	r2, r1
 800347c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6919      	ldr	r1, [r3, #16]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	4618      	mov	r0, r3
 8003490:	4603      	mov	r3, r0
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4403      	add	r3, r0
 8003496:	409a      	lsls	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d824      	bhi.n	80034f2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b05      	subs	r3, #5
 80034ba:	221f      	movs	r2, #31
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43da      	mvns	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	400a      	ands	r2, r1
 80034c8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4618      	mov	r0, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	3b05      	subs	r3, #5
 80034e4:	fa00 f203 	lsl.w	r2, r0, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80034f0:	e04c      	b.n	800358c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d824      	bhi.n	8003544 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3b23      	subs	r3, #35	@ 0x23
 800350c:	221f      	movs	r2, #31
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	400a      	ands	r2, r1
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	4618      	mov	r0, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3b23      	subs	r3, #35	@ 0x23
 8003536:	fa00 f203 	lsl.w	r2, r0, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
 8003542:	e023      	b.n	800358c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	3b41      	subs	r3, #65	@ 0x41
 8003556:	221f      	movs	r2, #31
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43da      	mvns	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	400a      	ands	r2, r1
 8003564:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	4618      	mov	r0, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	3b41      	subs	r3, #65	@ 0x41
 8003580:	fa00 f203 	lsl.w	r2, r0, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a30      	ldr	r2, [pc, #192]	@ (8003654 <HAL_ADC_ConfigChannel+0x29c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10a      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x1f4>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800359e:	d105      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80035a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 80035a6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80035aa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a28      	ldr	r2, [pc, #160]	@ (8003654 <HAL_ADC_ConfigChannel+0x29c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10f      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x21e>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b12      	cmp	r3, #18
 80035bc:	d10b      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80035be:	4b26      	ldr	r3, [pc, #152]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4a25      	ldr	r2, [pc, #148]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 80035c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80035c8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80035ca:	4b23      	ldr	r3, [pc, #140]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4a22      	ldr	r2, [pc, #136]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 80035d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035d4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1e      	ldr	r2, [pc, #120]	@ (8003654 <HAL_ADC_ConfigChannel+0x29c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d12b      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x280>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1a      	ldr	r2, [pc, #104]	@ (8003650 <HAL_ADC_ConfigChannel+0x298>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <HAL_ADC_ConfigChannel+0x23a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b11      	cmp	r3, #17
 80035f0:	d122      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80035f2:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a18      	ldr	r2, [pc, #96]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 80035f8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80035fc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80035fe:	4b16      	ldr	r3, [pc, #88]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a15      	ldr	r2, [pc, #84]	@ (8003658 <HAL_ADC_ConfigChannel+0x2a0>)
 8003604:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003608:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a10      	ldr	r2, [pc, #64]	@ (8003650 <HAL_ADC_ConfigChannel+0x298>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d111      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003614:	4b11      	ldr	r3, [pc, #68]	@ (800365c <HAL_ADC_ConfigChannel+0x2a4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a11      	ldr	r2, [pc, #68]	@ (8003660 <HAL_ADC_ConfigChannel+0x2a8>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	0c9a      	lsrs	r2, r3, #18
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800362a:	e002      	b.n	8003632 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3b01      	subs	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f9      	bne.n	800362c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	10000012 	.word	0x10000012
 8003654:	40012000 	.word	0x40012000
 8003658:	40012300 	.word	0x40012300
 800365c:	20000000 	.word	0x20000000
 8003660:	431bde83 	.word	0x431bde83

08003664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800366c:	4b78      	ldr	r3, [pc, #480]	@ (8003850 <ADC_Init+0x1ec>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a77      	ldr	r2, [pc, #476]	@ (8003850 <ADC_Init+0x1ec>)
 8003672:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003676:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003678:	4b75      	ldr	r3, [pc, #468]	@ (8003850 <ADC_Init+0x1ec>)
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4973      	ldr	r1, [pc, #460]	@ (8003850 <ADC_Init+0x1ec>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	021a      	lsls	r2, r3, #8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80036b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6899      	ldr	r1, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	4a58      	ldr	r2, [pc, #352]	@ (8003854 <ADC_Init+0x1f0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d022      	beq.n	800373e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6899      	ldr	r1, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6899      	ldr	r1, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	e00f      	b.n	800375e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800374c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800375c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0202 	bic.w	r2, r2, #2
 800376c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6899      	ldr	r1, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	005a      	lsls	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01b      	beq.n	80037c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800379a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80037aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6859      	ldr	r1, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	3b01      	subs	r3, #1
 80037b8:	035a      	lsls	r2, r3, #13
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	e007      	b.n	80037d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80037e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	051a      	lsls	r2, r3, #20
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6899      	ldr	r1, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003816:	025a      	lsls	r2, r3, #9
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800382e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	029a      	lsls	r2, r3, #10
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40012300 	.word	0x40012300
 8003854:	0f000001 	.word	0x0f000001

08003858 <__NVIC_SetPriorityGrouping>:
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003868:	4b0b      	ldr	r3, [pc, #44]	@ (8003898 <__NVIC_SetPriorityGrouping+0x40>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <__NVIC_SetPriorityGrouping+0x44>)
 8003882:	4313      	orrs	r3, r2
 8003884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003886:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <__NVIC_SetPriorityGrouping+0x40>)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	60d3      	str	r3, [r2, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00
 800389c:	05fa0000 	.word	0x05fa0000

080038a0 <__NVIC_GetPriorityGrouping>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a4:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <__NVIC_GetPriorityGrouping+0x18>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 0307 	and.w	r3, r3, #7
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <__NVIC_EnableIRQ>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	db0b      	blt.n	80038e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	4907      	ldr	r1, [pc, #28]	@ (80038f4 <__NVIC_EnableIRQ+0x38>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2001      	movs	r0, #1
 80038de:	fa00 f202 	lsl.w	r2, r0, r2
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000e100 	.word	0xe000e100

080038f8 <__NVIC_SetPriority>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db0a      	blt.n	8003922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	490c      	ldr	r1, [pc, #48]	@ (8003944 <__NVIC_SetPriority+0x4c>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	440b      	add	r3, r1
 800391c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003920:	e00a      	b.n	8003938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4908      	ldr	r1, [pc, #32]	@ (8003948 <__NVIC_SetPriority+0x50>)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3b04      	subs	r3, #4
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	440b      	add	r3, r1
 8003936:	761a      	strb	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000e100 	.word	0xe000e100
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <NVIC_EncodePriority>:
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	@ 0x24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf28      	it	cs
 800396a:	2304      	movcs	r3, #4
 800396c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3304      	adds	r3, #4
 8003972:	2b06      	cmp	r3, #6
 8003974:	d902      	bls.n	800397c <NVIC_EncodePriority+0x30>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3b03      	subs	r3, #3
 800397a:	e000      	b.n	800397e <NVIC_EncodePriority+0x32>
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	f04f 32ff 	mov.w	r2, #4294967295
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	401a      	ands	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003994:	f04f 31ff 	mov.w	r1, #4294967295
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	43d9      	mvns	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	4313      	orrs	r3, r2
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	@ 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ff4c 	bl	8003858 <__NVIC_SetPriorityGrouping>
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039da:	f7ff ff61 	bl	80038a0 <__NVIC_GetPriorityGrouping>
 80039de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	6978      	ldr	r0, [r7, #20]
 80039e6:	f7ff ffb1 	bl	800394c <NVIC_EncodePriority>
 80039ea:	4602      	mov	r2, r0
 80039ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ff80 	bl	80038f8 <__NVIC_SetPriority>
}
 80039f8:	bf00      	nop
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ff54 	bl	80038bc <__NVIC_EnableIRQ>
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e054      	b.n	8003ad8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7f5b      	ldrb	r3, [r3, #29]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fe f924 	bl	8001c8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	791b      	ldrb	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a22      	ldr	r2, [pc, #136]	@ (8003ae0 <HAL_CRC_Init+0xc4>)
 8003a58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0218 	bic.w	r2, r2, #24
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	e00c      	b.n	8003a86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6899      	ldr	r1, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	461a      	mov	r2, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f834 	bl	8003ae4 <HAL_CRCEx_Polynomial_Set>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e028      	b.n	8003ad8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	795b      	ldrb	r3, [r3, #5]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d105      	bne.n	8003a9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f04f 32ff 	mov.w	r2, #4294967295
 8003a96:	611a      	str	r2, [r3, #16]
 8003a98:	e004      	b.n	8003aa4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6912      	ldr	r2, [r2, #16]
 8003aa2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	04c11db7 	.word	0x04c11db7

08003ae4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003af4:	231f      	movs	r3, #31
 8003af6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
 8003b06:	e063      	b.n	8003bd0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003b08:	bf00      	nop
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1e5a      	subs	r2, r3, #1
 8003b0e:	613a      	str	r2, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <HAL_CRCEx_Polynomial_Set+0x44>
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b18      	cmp	r3, #24
 8003b2c:	d846      	bhi.n	8003bbc <HAL_CRCEx_Polynomial_Set+0xd8>
 8003b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b34 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b34:	08003bc3 	.word	0x08003bc3
 8003b38:	08003bbd 	.word	0x08003bbd
 8003b3c:	08003bbd 	.word	0x08003bbd
 8003b40:	08003bbd 	.word	0x08003bbd
 8003b44:	08003bbd 	.word	0x08003bbd
 8003b48:	08003bbd 	.word	0x08003bbd
 8003b4c:	08003bbd 	.word	0x08003bbd
 8003b50:	08003bbd 	.word	0x08003bbd
 8003b54:	08003bb1 	.word	0x08003bb1
 8003b58:	08003bbd 	.word	0x08003bbd
 8003b5c:	08003bbd 	.word	0x08003bbd
 8003b60:	08003bbd 	.word	0x08003bbd
 8003b64:	08003bbd 	.word	0x08003bbd
 8003b68:	08003bbd 	.word	0x08003bbd
 8003b6c:	08003bbd 	.word	0x08003bbd
 8003b70:	08003bbd 	.word	0x08003bbd
 8003b74:	08003ba5 	.word	0x08003ba5
 8003b78:	08003bbd 	.word	0x08003bbd
 8003b7c:	08003bbd 	.word	0x08003bbd
 8003b80:	08003bbd 	.word	0x08003bbd
 8003b84:	08003bbd 	.word	0x08003bbd
 8003b88:	08003bbd 	.word	0x08003bbd
 8003b8c:	08003bbd 	.word	0x08003bbd
 8003b90:	08003bbd 	.word	0x08003bbd
 8003b94:	08003b99 	.word	0x08003b99
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d913      	bls.n	8003bc6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ba2:	e010      	b.n	8003bc6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b07      	cmp	r3, #7
 8003ba8:	d90f      	bls.n	8003bca <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003bae:	e00c      	b.n	8003bca <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d90b      	bls.n	8003bce <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003bba:	e008      	b.n	8003bce <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
        break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003bce:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10d      	bne.n	8003bf2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f023 0118 	bic.w	r1, r3, #24
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e069      	b.n	8003ce6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe f854 	bl	8001ccc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6819      	ldr	r1, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf0 <HAL_DCMI_Init+0xf0>)
 8003c46:	400b      	ands	r3, r1
 8003c48:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003c5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003c6a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003c76:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003c82:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003c8e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d112      	bne.n	8003cc6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7f1b      	ldrb	r3, [r3, #28]
 8003ca4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	7f5b      	ldrb	r3, [r3, #29]
 8003caa:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003cac:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7f9b      	ldrb	r3, [r3, #30]
 8003cb2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003cb4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	7fdb      	ldrb	r3, [r3, #31]
 8003cbc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003cc2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003cc4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 021e 	orr.w	r2, r2, #30
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	ffe0f007 	.word	0xffe0f007

08003cf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_DMA_Start_IT+0x26>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e048      	b.n	8003dac <HAL_DMA_Start_IT+0xb8>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d137      	bne.n	8003d9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f842 	bl	8003dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	223f      	movs	r2, #63	@ 0x3f
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0216 	orr.w	r2, r2, #22
 8003d62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d72:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0208 	orr.w	r2, r2, #8
 8003d8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e005      	b.n	8003daa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
 8003da8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b40      	cmp	r3, #64	@ 0x40
 8003df8:	d108      	bne.n	8003e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e0a:	e007      	b.n	8003e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e039      	b.n	8003eae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd fffa 	bl	8001e48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e78:	f023 0107 	bic.w	r1, r3, #7
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <HAL_DMA2D_Init+0x90>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68d1      	ldr	r1, [r2, #12]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6812      	ldr	r2, [r2, #0]
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	ffffc000 	.word	0xffffc000

08003ebc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d026      	beq.n	8003f2c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d021      	beq.n	8003f2c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ef6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efc:	f043 0201 	orr.w	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d026      	beq.n	8003f84 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d021      	beq.n	8003f84 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2220      	movs	r2, #32
 8003f56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	f043 0202 	orr.w	r2, r3, #2
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2204      	movs	r2, #4
 8003f68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d026      	beq.n	8003fdc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d021      	beq.n	8003fdc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2208      	movs	r2, #8
 8003fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	f043 0204 	orr.w	r2, r3, #4
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d013      	beq.n	800400e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00e      	beq.n	800400e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2204      	movs	r2, #4
 8004006:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f853 	bl	80040b4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d024      	beq.n	8004062 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01f      	beq.n	8004062 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004030:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2202      	movs	r2, #2
 8004038:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01f      	beq.n	80040ac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01a      	beq.n	80040ac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004084:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2210      	movs	r2, #16
 800408c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f80e 	bl	80040c8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_DMA2D_ConfigLayer+0x20>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e079      	b.n	80041f0 <HAL_DMA2D_ConfigLayer+0x114>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	3318      	adds	r3, #24
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004126:	4b35      	ldr	r3, [pc, #212]	@ (80041fc <HAL_DMA2D_ConfigLayer+0x120>)
 8004128:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b0a      	cmp	r3, #10
 8004130:	d003      	beq.n	800413a <HAL_DMA2D_ConfigLayer+0x5e>
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b09      	cmp	r3, #9
 8004138:	d107      	bne.n	800414a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e005      	b.n	8004156 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d120      	bne.n	800419e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43db      	mvns	r3, r3
 8004166:	ea02 0103 	and.w	r1, r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	430a      	orrs	r2, r1
 8004172:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b0a      	cmp	r3, #10
 8004184:	d003      	beq.n	800418e <HAL_DMA2D_ConfigLayer+0xb2>
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b09      	cmp	r3, #9
 800418c:	d127      	bne.n	80041de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28
 800419c:	e01f      	b.n	80041de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	43db      	mvns	r3, r3
 80041a8:	ea02 0103 	and.w	r1, r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b0a      	cmp	r3, #10
 80041c6:	d003      	beq.n	80041d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b09      	cmp	r3, #9
 80041ce:	d106      	bne.n	80041de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80041dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	ff03000f 	.word	0xff03000f

08004200 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e086      	b.n	8004320 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2223      	movs	r2, #35	@ 0x23
 8004220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f00b ff09 	bl	801003c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422a:	4b3f      	ldr	r3, [pc, #252]	@ (8004328 <HAL_ETH_Init+0x128>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	4a3e      	ldr	r2, [pc, #248]	@ (8004328 <HAL_ETH_Init+0x128>)
 8004230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004234:	6453      	str	r3, [r2, #68]	@ 0x44
 8004236:	4b3c      	ldr	r3, [pc, #240]	@ (8004328 <HAL_ETH_Init+0x128>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004242:	4b3a      	ldr	r3, [pc, #232]	@ (800432c <HAL_ETH_Init+0x12c>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4a39      	ldr	r2, [pc, #228]	@ (800432c <HAL_ETH_Init+0x12c>)
 8004248:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800424c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800424e:	4b37      	ldr	r3, [pc, #220]	@ (800432c <HAL_ETH_Init+0x12c>)
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	4935      	ldr	r1, [pc, #212]	@ (800432c <HAL_ETH_Init+0x12c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800425c:	4b33      	ldr	r3, [pc, #204]	@ (800432c <HAL_ETH_Init+0x12c>)
 800425e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004276:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004278:	f7ff f81e 	bl	80032b8 <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800427e:	e011      	b.n	80042a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004280:	f7ff f81a 	bl	80032b8 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800428e:	d909      	bls.n	80042a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2204      	movs	r2, #4
 8004294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	22e0      	movs	r2, #224	@ 0xe0
 800429c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e03d      	b.n	8004320 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e4      	bne.n	8004280 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 ff4e 	bl	8005158 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fff9 	bl	80052b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f001 f84f 	bl	8005366 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	461a      	mov	r2, r3
 80042ce:	2100      	movs	r1, #0
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 ffb7 	bl	8005244 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80042e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004330 <HAL_ETH_Init+0x130>)
 80042f4:	430b      	orrs	r3, r1
 80042f6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800430a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2210      	movs	r2, #16
 800431a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	40013800 	.word	0x40013800
 8004330:	00020060 	.word	0x00020060

08004334 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004342:	2b10      	cmp	r3, #16
 8004344:	d15f      	bne.n	8004406 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2223      	movs	r2, #35	@ 0x23
 800434a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2204      	movs	r2, #4
 8004358:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f9f6 	bl	800474c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004368:	2001      	movs	r0, #1
 800436a:	f7fe ffb1 	bl	80032d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004388:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800438c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043a4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fd73 	bl	8004e92 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0208 	orr.w	r2, r2, #8
 80043ba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80043c4:	2001      	movs	r0, #1
 80043c6:	f7fe ff83 	bl	80032d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0204 	orr.w	r2, r2, #4
 80043e0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ea:	69d9      	ldr	r1, [r3, #28]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <HAL_ETH_Start_IT+0xdc>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043f8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2223      	movs	r2, #35	@ 0x23
 80043fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	0001a0c1 	.word	0x0001a0c1

08004414 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004422:	2b23      	cmp	r3, #35	@ 0x23
 8004424:	d16e      	bne.n	8004504 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2223      	movs	r2, #35	@ 0x23
 800442a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004436:	69d9      	ldr	r1, [r3, #28]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b34      	ldr	r3, [pc, #208]	@ (8004510 <HAL_ETH_Stop_IT+0xfc>)
 800443e:	400b      	ands	r3, r1
 8004440:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004444:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004458:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800445c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	f023 0302 	bic.w	r3, r3, #2
 8004470:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004474:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0204 	bic.w	r2, r2, #4
 8004484:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800448e:	2001      	movs	r0, #1
 8004490:	f7fe ff1e 	bl	80032d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fcf8 	bl	8004e92 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0208 	bic.w	r2, r2, #8
 80044b0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044ba:	2001      	movs	r0, #1
 80044bc:	f7fe ff08 	bl	80032d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e00e      	b.n	80044ec <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	3212      	adds	r2, #18
 80044d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	3301      	adds	r3, #1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d9ed      	bls.n	80044ce <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2210      	movs	r2, #16
 80044fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	e000      	b.n	8004506 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
  }
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	fffe5f3e 	.word	0xfffe5f3e

08004514 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e045      	b.n	80045c4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800453e:	2b23      	cmp	r3, #35	@ 0x23
 8004540:	d13f      	bne.n	80045c2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800454a:	2201      	movs	r2, #1
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 ff78 	bl	8005444 <ETH_Prepare_Tx_Descriptors>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004560:	f043 0202 	orr.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e02a      	b.n	80045c4 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800456e:	f3bf 8f4f 	dsb	sy
}
 8004572:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	629a      	str	r2, [r3, #40]	@ 0x28
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004582:	2b03      	cmp	r3, #3
 8004584:	d904      	bls.n	8004590 <HAL_ETH_Transmit_IT+0x7c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458a:	1f1a      	subs	r2, r3, #4
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045aa:	461a      	mov	r2, r3
 80045ac:	2304      	movs	r3, #4
 80045ae:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045b8:	461a      	mov	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ea:	f043 0201 	orr.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0a4      	b.n	8004742 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045fe:	2b23      	cmp	r3, #35	@ 0x23
 8004600:	d001      	beq.n	8004606 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e09d      	b.n	8004742 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	3212      	adds	r2, #18
 8004612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004616:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800461c:	f1c3 0304 	rsb	r3, r3, #4
 8004620:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004622:	e066      	b.n	80046f2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	69da      	ldr	r2, [r3, #28]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	699a      	ldr	r2, [r3, #24]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <HAL_ETH_ReadData+0x88>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d03c      	beq.n	80046ce <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004676:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800468c:	2301      	movs	r3, #1
 800468e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046a8:	461a      	mov	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f00b fe73 	bl	8010398 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	441a      	add	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2200      	movs	r2, #0
 80046cc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d902      	bls.n	80046e0 <HAL_ETH_ReadData+0x114>
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	3b04      	subs	r3, #4
 80046de:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	3212      	adds	r2, #18
 80046e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ea:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	3301      	adds	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	db06      	blt.n	8004708 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d202      	bcs.n	8004708 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d08d      	beq.n	8004624 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	441a      	add	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f815 	bl	800474c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d108      	bne.n	8004740 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004758:	2301      	movs	r3, #1
 800475a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004760:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	3212      	adds	r2, #18
 8004768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800476c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004772:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004774:	e042      	b.n	80047fc <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d112      	bne.n	80047a4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	4618      	mov	r0, r3
 8004784:	f00b fdd8 	bl	8010338 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	74fb      	strb	r3, [r7, #19]
 8004792:	e007      	b.n	80047a4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	461a      	mov	r2, r3
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	461a      	mov	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d028      	beq.n	80047fc <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	4b26      	ldr	r3, [pc, #152]	@ (8004850 <ETH_UpdateDescriptor+0x104>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	6053      	str	r3, [r2, #4]
 80047be:	e005      	b.n	80047cc <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	3301      	adds	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d902      	bls.n	80047ea <ETH_UpdateDescriptor+0x9e>
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	3b04      	subs	r3, #4
 80047e8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	3212      	adds	r2, #18
 80047f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f4:	617b      	str	r3, [r7, #20]
      desccount--;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <ETH_UpdateDescriptor+0xbc>
 8004802:	7cfb      	ldrb	r3, [r7, #19]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1b6      	bne.n	8004776 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	429a      	cmp	r2, r3
 8004810:	d01a      	beq.n	8004848 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3301      	adds	r3, #1
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800481c:	f3bf 8f5f 	dmb	sy
}
 8004820:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6919      	ldr	r1, [r3, #16]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	18ca      	adds	r2, r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800483a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004848:	bf00      	nop
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	80004000 	.word	0x80004000

08004854 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3318      	adds	r3, #24
 8004860:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004866:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004872:	e047      	b.n	8004904 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004874:	2301      	movs	r3, #1
 8004876:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3b01      	subs	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	3304      	adds	r3, #4
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3301      	adds	r3, #1
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d902      	bls.n	80048a0 <HAL_ETH_ReleaseTxPacket+0x4c>
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3b04      	subs	r3, #4
 800489e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d02c      	beq.n	8004904 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68d9      	ldr	r1, [r3, #12]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	440b      	add	r3, r1
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	db1f      	blt.n	8004900 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	3304      	adds	r3, #4
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f00b fda5 	bl	801041c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	3304      	adds	r3, #4
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	2200      	movs	r2, #0
 80048de:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	3301      	adds	r3, #1
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d902      	bls.n	80048f2 <HAL_ETH_ReleaseTxPacket+0x9e>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3b04      	subs	r3, #4
 80048f0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80048fe:	e001      	b.n	8004904 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_ETH_ReleaseTxPacket+0xbc>
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1b1      	bne.n	8004874 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004944:	4b4b      	ldr	r3, [pc, #300]	@ (8004a74 <HAL_ETH_IRQHandler+0x158>)
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00e      	beq.n	8004972 <HAL_ETH_IRQHandler+0x56>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004966:	461a      	mov	r2, r3
 8004968:	4b43      	ldr	r3, [pc, #268]	@ (8004a78 <HAL_ETH_IRQHandler+0x15c>)
 800496a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f00b f88d 	bl	800fa8c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00f      	beq.n	800499c <HAL_ETH_IRQHandler+0x80>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800498e:	461a      	mov	r2, r3
 8004990:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004994:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f00b f888 	bl	800faac <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d042      	beq.n	8004a2c <HAL_ETH_IRQHandler+0x110>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d03d      	beq.n	8004a2c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f043 0208 	orr.w	r2, r3, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01a      	beq.n	8004a00 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	4b29      	ldr	r3, [pc, #164]	@ (8004a7c <HAL_ETH_IRQHandler+0x160>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80049f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80049f4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	22e0      	movs	r2, #224	@ 0xe0
 80049fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80049fe:	e012      	b.n	8004a26 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a0e:	4013      	ands	r3, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004a24:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f00b f850 	bl	800facc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00e      	beq.n	8004a54 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f81a 	bl	8004a80 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a5e:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <HAL_ETH_IRQHandler+0x158>)
 8004a60:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004a64:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f814 	bl	8004a94 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40013c00 	.word	0x40013c00
 8004a78:	00010040 	.word	0x00010040
 8004a7c:	007e2000 	.word	0x007e2000

08004a80 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 031c 	and.w	r3, r3, #28
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	02db      	lsls	r3, r3, #11
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0302 	bic.w	r3, r3, #2
 8004ae6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004af8:	f7fe fbde 	bl	80032b8 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004afe:	e00d      	b.n	8004b1c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004b00:	f7fe fbda 	bl	80032b8 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0e:	d301      	bcc.n	8004b14 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e010      	b.n	8004b36 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ec      	bne.n	8004b00 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b086      	sub	sp, #24
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
 8004b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f003 031c 	and.w	r3, r3, #28
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	02db      	lsls	r3, r3, #11
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	019b      	lsls	r3, r3, #6
 8004b6c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b98:	f7fe fb8e 	bl	80032b8 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b9e:	e00d      	b.n	8004bbc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004ba0:	f7fe fb8a 	bl	80032b8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bae:	d301      	bcc.n	8004bb4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e009      	b.n	8004bc8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ec      	bne.n	8004ba0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0e6      	b.n	8004db2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bf0c      	ite	eq
 8004c52:	2301      	moveq	r3, #1
 8004c54:	2300      	movne	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bf14      	ite	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	2300      	moveq	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	bf14      	ite	ne
 8004cfe:	2301      	movne	r3, #1
 8004d00:	2300      	moveq	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	461a      	mov	r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bf14      	ite	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	2300      	moveq	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e00b      	b.n	8004dea <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d105      	bne.n	8004de8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f87c 	bl	8004edc <ETH_SetMACConfig>

    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 031c 	bic.w	r3, r3, #28
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e0c:	f004 f96e 	bl	80090ec <HAL_RCC_GetHCLKFreq>
 8004e10:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4a14      	ldr	r2, [pc, #80]	@ (8004e68 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d804      	bhi.n	8004e24 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f043 0308 	orr.w	r3, r3, #8
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	e019      	b.n	8004e58 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4a11      	ldr	r2, [pc, #68]	@ (8004e6c <HAL_ETH_SetMDIOClockRange+0x78>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d204      	bcs.n	8004e36 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f043 030c 	orr.w	r3, r3, #12
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e010      	b.n	8004e58 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a0d      	ldr	r2, [pc, #52]	@ (8004e70 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d90c      	bls.n	8004e58 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4a0c      	ldr	r2, [pc, #48]	@ (8004e74 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d804      	bhi.n	8004e50 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f043 0304 	orr.w	r3, r3, #4
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e003      	b.n	8004e58 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f043 0310 	orr.w	r3, r3, #16
 8004e56:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	611a      	str	r2, [r3, #16]
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	02160ebf 	.word	0x02160ebf
 8004e6c:	03938700 	.word	0x03938700
 8004e70:	05f5e0ff 	.word	0x05f5e0ff
 8004e74:	08f0d17f 	.word	0x08f0d17f

08004e78 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004eb4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f7fe fa04 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ed2:	6193      	str	r3, [r2, #24]
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4b53      	ldr	r3, [pc, #332]	@ (8005040 <ETH_SetMACConfig+0x164>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	7b9b      	ldrb	r3, [r3, #14]
 8004efa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	7c12      	ldrb	r2, [r2, #16]
 8004f00:	2a00      	cmp	r2, #0
 8004f02:	d102      	bne.n	8004f0a <ETH_SetMACConfig+0x2e>
 8004f04:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f08:	e000      	b.n	8004f0c <ETH_SetMACConfig+0x30>
 8004f0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f0c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	7c52      	ldrb	r2, [r2, #17]
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	d102      	bne.n	8004f1c <ETH_SetMACConfig+0x40>
 8004f16:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004f1a:	e000      	b.n	8004f1e <ETH_SetMACConfig+0x42>
 8004f1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f1e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	7fdb      	ldrb	r3, [r3, #31]
 8004f2a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004f2c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	7f92      	ldrb	r2, [r2, #30]
 8004f38:	2a00      	cmp	r2, #0
 8004f3a:	d102      	bne.n	8004f42 <ETH_SetMACConfig+0x66>
 8004f3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f40:	e000      	b.n	8004f44 <ETH_SetMACConfig+0x68>
 8004f42:	2200      	movs	r2, #0
                        macconf->Speed |
 8004f44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	7f1b      	ldrb	r3, [r3, #28]
 8004f4a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f4c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	791b      	ldrb	r3, [r3, #4]
 8004f58:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004f5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f62:	2a00      	cmp	r2, #0
 8004f64:	d102      	bne.n	8004f6c <ETH_SetMACConfig+0x90>
 8004f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f6a:	e000      	b.n	8004f6e <ETH_SetMACConfig+0x92>
 8004f6c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	7bdb      	ldrb	r3, [r3, #15]
 8004f74:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f76:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f84:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f86:	4313      	orrs	r3, r2
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f7fe f996 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004fba:	4013      	ands	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	d101      	bne.n	8004fd2 <ETH_SetMACConfig+0xf6>
 8004fce:	2280      	movs	r2, #128	@ 0x80
 8004fd0:	e000      	b.n	8004fd4 <ETH_SetMACConfig+0xf8>
 8004fd2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fd4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004fda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004fe2:	2a01      	cmp	r2, #1
 8004fe4:	d101      	bne.n	8004fea <ETH_SetMACConfig+0x10e>
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	e000      	b.n	8004fec <ETH_SetMACConfig+0x110>
 8004fea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004fec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004ff4:	2a01      	cmp	r2, #1
 8004ff6:	d101      	bne.n	8004ffc <ETH_SetMACConfig+0x120>
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	e000      	b.n	8004ffe <ETH_SetMACConfig+0x122>
 8004ffc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004ffe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005006:	2a01      	cmp	r2, #1
 8005008:	d101      	bne.n	800500e <ETH_SetMACConfig+0x132>
 800500a:	2202      	movs	r2, #2
 800500c:	e000      	b.n	8005010 <ETH_SetMACConfig+0x134>
 800500e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005010:	4313      	orrs	r3, r2
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005028:	2001      	movs	r0, #1
 800502a:	f7fe f951 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	619a      	str	r2, [r3, #24]
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	fd20810f 	.word	0xfd20810f

08005044 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4b3d      	ldr	r3, [pc, #244]	@ (8005154 <ETH_SetDMAConfig+0x110>)
 800505e:	4013      	ands	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	7b1b      	ldrb	r3, [r3, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <ETH_SetDMAConfig+0x2c>
 800506a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800506e:	e000      	b.n	8005072 <ETH_SetDMAConfig+0x2e>
 8005070:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	7b5b      	ldrb	r3, [r3, #13]
 8005076:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005078:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	7f52      	ldrb	r2, [r2, #29]
 800507e:	2a00      	cmp	r2, #0
 8005080:	d102      	bne.n	8005088 <ETH_SetDMAConfig+0x44>
 8005082:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005086:	e000      	b.n	800508a <ETH_SetDMAConfig+0x46>
 8005088:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800508a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	7b9b      	ldrb	r3, [r3, #14]
 8005090:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005092:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005098:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	7f1b      	ldrb	r3, [r3, #28]
 800509e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80050a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	7f9b      	ldrb	r3, [r3, #30]
 80050a6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050a8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050b6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050b8:	4313      	orrs	r3, r2
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050c8:	461a      	mov	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050da:	2001      	movs	r0, #1
 80050dc:	f7fe f8f8 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e8:	461a      	mov	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	791b      	ldrb	r3, [r3, #4]
 80050f2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80050f8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80050fe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005104:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800510c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800510e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005116:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800511c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005126:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800512a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005138:	2001      	movs	r0, #1
 800513a:	f7fe f8c9 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005146:	461a      	mov	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6013      	str	r3, [r2, #0]
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	f8de3f23 	.word	0xf8de3f23

08005158 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b0a6      	sub	sp, #152	@ 0x98
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005160:	2301      	movs	r3, #1
 8005162:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800516c:	2300      	movs	r3, #0
 800516e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800518e:	2300      	movs	r3, #0
 8005190:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800519a:	2300      	movs	r3, #0
 800519c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800519e:	2300      	movs	r3, #0
 80051a0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80051c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80051c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80051d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff fe7f 	bl	8004edc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80051de:	2301      	movs	r3, #1
 80051e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005200:	2300      	movs	r3, #0
 8005202:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800520a:	2301      	movs	r3, #1
 800520c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800520e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005212:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005214:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005218:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800521a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800521e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005226:	2300      	movs	r3, #0
 8005228:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800522e:	f107 0308 	add.w	r3, r7, #8
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff ff05 	bl	8005044 <ETH_SetDMAConfig>
}
 800523a:	bf00      	nop
 800523c:	3798      	adds	r7, #152	@ 0x98
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3305      	adds	r3, #5
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	3204      	adds	r2, #4
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <ETH_MACAddressConfig+0x68>)
 8005266:	4413      	add	r3, r2
 8005268:	461a      	mov	r2, r3
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3303      	adds	r3, #3
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	061a      	lsls	r2, r3, #24
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3302      	adds	r3, #2
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3301      	adds	r3, #1
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	4313      	orrs	r3, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <ETH_MACAddressConfig+0x6c>)
 8005296:	4413      	add	r3, r2
 8005298:	461a      	mov	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	6013      	str	r3, [r2, #0]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40028040 	.word	0x40028040
 80052b0:	40028044 	.word	0x40028044

080052b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e03e      	b.n	8005340 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68d9      	ldr	r1, [r3, #12]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	440b      	add	r3, r1
 80052d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2200      	movs	r2, #0
 80052ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	3206      	adds	r2, #6
 80052f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d80c      	bhi.n	8005324 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68d9      	ldr	r1, [r3, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	440b      	add	r3, r1
 800531c:	461a      	mov	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	e004      	b.n	800532e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d9bd      	bls.n	80052c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005358:	611a      	str	r2, [r3, #16]
}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e048      	b.n	8005406 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6919      	ldr	r1, [r3, #16]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2200      	movs	r2, #0
 8005396:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2200      	movs	r2, #0
 800539c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2200      	movs	r2, #0
 80053a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	3212      	adds	r2, #18
 80053d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d80c      	bhi.n	80053f6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6919      	ldr	r1, [r3, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	440b      	add	r3, r1
 80053ee:	461a      	mov	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	e004      	b.n	8005400 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	461a      	mov	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d9b3      	bls.n	8005374 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005436:	60da      	str	r2, [r3, #12]
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005444:	b480      	push	{r7}
 8005446:	b091      	sub	sp, #68	@ 0x44
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3318      	adds	r3, #24
 8005454:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005482:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005486:	d007      	beq.n	8005498 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800548a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800548c:	3304      	adds	r3, #4
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005498:	2302      	movs	r3, #2
 800549a:	e111      	b.n	80056c0 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	3301      	adds	r3, #1
 80054a0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	4b86      	ldr	r3, [pc, #536]	@ (80056cc <ETH_Prepare_Tx_Descriptors+0x288>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b6:	6852      	ldr	r2, [r2, #4]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800551e:	e082      	b.n	8005626 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e005      	b.n	800554c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800554c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800554e:	3301      	adds	r3, #1
 8005550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005554:	2b03      	cmp	r3, #3
 8005556:	d902      	bls.n	800555e <ETH_Prepare_Tx_Descriptors+0x11a>
 8005558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555a:	3b04      	subs	r3, #4
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005566:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005574:	d007      	beq.n	8005586 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557a:	3304      	adds	r3, #4
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d029      	beq.n	80055da <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005594:	2300      	movs	r3, #0
 8005596:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005598:	e019      	b.n	80055ce <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800559a:	f3bf 8f5f 	dmb	sy
}
 800559e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80055a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80055ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ae:	3301      	adds	r3, #1
 80055b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d902      	bls.n	80055be <ETH_Prepare_Tx_Descriptors+0x17a>
 80055b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ba:	3b04      	subs	r3, #4
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80055c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c6:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	3301      	adds	r3, #1
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3e1      	bcc.n	800559a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80055d6:	2302      	movs	r3, #2
 80055d8:	e072      	b.n	80056c0 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80055e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e8:	3301      	adds	r3, #1
 80055ea:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80055ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80055f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	4b32      	ldr	r3, [pc, #200]	@ (80056cc <ETH_Prepare_Tx_Descriptors+0x288>)
 8005602:	4013      	ands	r3, r2
 8005604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005606:	6852      	ldr	r2, [r2, #4]
 8005608:	431a      	orrs	r2, r3
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	3301      	adds	r3, #1
 8005612:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005614:	f3bf 8f5f 	dmb	sy
}
 8005618:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800561a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f47f af78 	bne.w	8005520 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d006      	beq.n	8005644 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e005      	b.n	8005650 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800565c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565e:	6a3a      	ldr	r2, [r7, #32]
 8005660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005664:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005666:	f3bf 8f5f 	dmb	sy
}
 800566a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800567c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800567e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005680:	3304      	adds	r3, #4
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800568c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800568e:	f3ef 8310 	mrs	r3, PRIMASK
 8005692:	613b      	str	r3, [r7, #16]
  return(result);
 8005694:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	2301      	movs	r3, #1
 800569a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	4413      	add	r3, r2
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	f383 8810 	msr	PRIMASK, r3
}
 80056bc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3744      	adds	r7, #68	@ 0x44
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	ffffe000 	.word	0xffffe000

080056d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b089      	sub	sp, #36	@ 0x24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	e175      	b.n	80059dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80056f0:	2201      	movs	r2, #1
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4013      	ands	r3, r2
 8005702:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	429a      	cmp	r2, r3
 800570a:	f040 8164 	bne.w	80059d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	2b01      	cmp	r3, #1
 8005718:	d005      	beq.n	8005726 <HAL_GPIO_Init+0x56>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d130      	bne.n	8005788 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	2203      	movs	r2, #3
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4313      	orrs	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800575c:	2201      	movs	r2, #1
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4013      	ands	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	f003 0201 	and.w	r2, r3, #1
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4313      	orrs	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	2b03      	cmp	r3, #3
 8005792:	d017      	beq.n	80057c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	2203      	movs	r2, #3
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	43db      	mvns	r3, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4013      	ands	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d123      	bne.n	8005818 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	08da      	lsrs	r2, r3, #3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3208      	adds	r2, #8
 80057d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	220f      	movs	r2, #15
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4313      	orrs	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	08da      	lsrs	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3208      	adds	r2, #8
 8005812:	69b9      	ldr	r1, [r7, #24]
 8005814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	2203      	movs	r2, #3
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	43db      	mvns	r3, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4013      	ands	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f003 0203 	and.w	r2, r3, #3
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80be 	beq.w	80059d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800585a:	4b66      	ldr	r3, [pc, #408]	@ (80059f4 <HAL_GPIO_Init+0x324>)
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	4a65      	ldr	r2, [pc, #404]	@ (80059f4 <HAL_GPIO_Init+0x324>)
 8005860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005864:	6453      	str	r3, [r2, #68]	@ 0x44
 8005866:	4b63      	ldr	r3, [pc, #396]	@ (80059f4 <HAL_GPIO_Init+0x324>)
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005872:	4a61      	ldr	r2, [pc, #388]	@ (80059f8 <HAL_GPIO_Init+0x328>)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	089b      	lsrs	r3, r3, #2
 8005878:	3302      	adds	r3, #2
 800587a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800587e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	220f      	movs	r2, #15
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43db      	mvns	r3, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a58      	ldr	r2, [pc, #352]	@ (80059fc <HAL_GPIO_Init+0x32c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d037      	beq.n	800590e <HAL_GPIO_Init+0x23e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a57      	ldr	r2, [pc, #348]	@ (8005a00 <HAL_GPIO_Init+0x330>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d031      	beq.n	800590a <HAL_GPIO_Init+0x23a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a56      	ldr	r2, [pc, #344]	@ (8005a04 <HAL_GPIO_Init+0x334>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d02b      	beq.n	8005906 <HAL_GPIO_Init+0x236>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a55      	ldr	r2, [pc, #340]	@ (8005a08 <HAL_GPIO_Init+0x338>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d025      	beq.n	8005902 <HAL_GPIO_Init+0x232>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a54      	ldr	r2, [pc, #336]	@ (8005a0c <HAL_GPIO_Init+0x33c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d01f      	beq.n	80058fe <HAL_GPIO_Init+0x22e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a53      	ldr	r2, [pc, #332]	@ (8005a10 <HAL_GPIO_Init+0x340>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d019      	beq.n	80058fa <HAL_GPIO_Init+0x22a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a52      	ldr	r2, [pc, #328]	@ (8005a14 <HAL_GPIO_Init+0x344>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_GPIO_Init+0x226>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a51      	ldr	r2, [pc, #324]	@ (8005a18 <HAL_GPIO_Init+0x348>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00d      	beq.n	80058f2 <HAL_GPIO_Init+0x222>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a50      	ldr	r2, [pc, #320]	@ (8005a1c <HAL_GPIO_Init+0x34c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d007      	beq.n	80058ee <HAL_GPIO_Init+0x21e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005a20 <HAL_GPIO_Init+0x350>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d101      	bne.n	80058ea <HAL_GPIO_Init+0x21a>
 80058e6:	2309      	movs	r3, #9
 80058e8:	e012      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058ea:	230a      	movs	r3, #10
 80058ec:	e010      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058ee:	2308      	movs	r3, #8
 80058f0:	e00e      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058f2:	2307      	movs	r3, #7
 80058f4:	e00c      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058f6:	2306      	movs	r3, #6
 80058f8:	e00a      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058fa:	2305      	movs	r3, #5
 80058fc:	e008      	b.n	8005910 <HAL_GPIO_Init+0x240>
 80058fe:	2304      	movs	r3, #4
 8005900:	e006      	b.n	8005910 <HAL_GPIO_Init+0x240>
 8005902:	2303      	movs	r3, #3
 8005904:	e004      	b.n	8005910 <HAL_GPIO_Init+0x240>
 8005906:	2302      	movs	r3, #2
 8005908:	e002      	b.n	8005910 <HAL_GPIO_Init+0x240>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_GPIO_Init+0x240>
 800590e:	2300      	movs	r3, #0
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	f002 0203 	and.w	r2, r2, #3
 8005916:	0092      	lsls	r2, r2, #2
 8005918:	4093      	lsls	r3, r2
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005920:	4935      	ldr	r1, [pc, #212]	@ (80059f8 <HAL_GPIO_Init+0x328>)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	089b      	lsrs	r3, r3, #2
 8005926:	3302      	adds	r3, #2
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800592e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a24 <HAL_GPIO_Init+0x354>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005952:	4a34      	ldr	r2, [pc, #208]	@ (8005a24 <HAL_GPIO_Init+0x354>)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005958:	4b32      	ldr	r3, [pc, #200]	@ (8005a24 <HAL_GPIO_Init+0x354>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800597c:	4a29      	ldr	r2, [pc, #164]	@ (8005a24 <HAL_GPIO_Init+0x354>)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005982:	4b28      	ldr	r3, [pc, #160]	@ (8005a24 <HAL_GPIO_Init+0x354>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a24 <HAL_GPIO_Init+0x354>)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005a24 <HAL_GPIO_Init+0x354>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059d0:	4a14      	ldr	r2, [pc, #80]	@ (8005a24 <HAL_GPIO_Init+0x354>)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3301      	adds	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	f67f ae86 	bls.w	80056f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3724      	adds	r7, #36	@ 0x24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40013800 	.word	0x40013800
 80059fc:	40020000 	.word	0x40020000
 8005a00:	40020400 	.word	0x40020400
 8005a04:	40020800 	.word	0x40020800
 8005a08:	40020c00 	.word	0x40020c00
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40021400 	.word	0x40021400
 8005a14:	40021800 	.word	0x40021800
 8005a18:	40021c00 	.word	0x40021c00
 8005a1c:	40022000 	.word	0x40022000
 8005a20:	40022400 	.word	0x40022400
 8005a24:	40013c00 	.word	0x40013c00

08005a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
 8005a44:	e001      	b.n	8005a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	807b      	strh	r3, [r7, #2]
 8005a64:	4613      	mov	r3, r2
 8005a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a68:	787b      	ldrb	r3, [r7, #1]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a6e:	887a      	ldrh	r2, [r7, #2]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a74:	e003      	b.n	8005a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a76:	887b      	ldrh	r3, [r7, #2]
 8005a78:	041a      	lsls	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	619a      	str	r2, [r3, #24]
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af02      	add	r7, sp, #8
 8005a90:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e059      	b.n	8005b50 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f021 f9f6 	bl	8026ea8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2203      	movs	r2, #3
 8005ac0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aca:	d102      	bne.n	8005ad2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f008 fc19 	bl	800e30e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	7c1a      	ldrb	r2, [r3, #16]
 8005ae4:	f88d 2000 	strb.w	r2, [sp]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aec:	f008 fba4 	bl	800e238 <USB_CoreInit>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e026      	b.n	8005b50 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2101      	movs	r1, #1
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f008 fc11 	bl	800e330 <USB_SetCurrentMode>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e017      	b.n	8005b50 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	7c1a      	ldrb	r2, [r3, #16]
 8005b28:	f88d 2000 	strb.w	r2, [sp]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b30:	f008 fdb4 	bl	800e69c <USB_HostInit>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e004      	b.n	8005b50 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b08b      	sub	sp, #44	@ 0x2c
 8005b5c:	af04      	add	r7, sp, #16
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	461a      	mov	r2, r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	70fb      	strb	r3, [r7, #3]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	70bb      	strb	r3, [r7, #2]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005b72:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005b74:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_HCD_HC_Init+0x2c>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e09d      	b.n	8005cc0 <HAL_HCD_HC_Init+0x168>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005b8c:	78fa      	ldrb	r2, [r7, #3]
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	3319      	adds	r3, #25
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	6879      	ldr	r1, [r7, #4]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	3314      	adds	r3, #20
 8005bb0:	787a      	ldrb	r2, [r7, #1]
 8005bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005bb4:	78fa      	ldrb	r2, [r7, #3]
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	3315      	adds	r3, #21
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005bc8:	78fa      	ldrb	r2, [r7, #3]
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	3326      	adds	r3, #38	@ 0x26
 8005bd8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005bdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005bde:	78fa      	ldrb	r2, [r7, #3]
 8005be0:	78bb      	ldrb	r3, [r7, #2]
 8005be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005be6:	b2d8      	uxtb	r0, r3
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3316      	adds	r3, #22
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005bfa:	78fb      	ldrb	r3, [r7, #3]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fbc8 	bl	8006394 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005c04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	da0a      	bge.n	8005c22 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005c0c:	78fa      	ldrb	r2, [r7, #3]
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	3317      	adds	r3, #23
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e009      	b.n	8005c36 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3317      	adds	r3, #23
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f008 fe86 	bl	800e94c <USB_GetHostSpeed>
 8005c40:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005c42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10b      	bne.n	8005c62 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005c4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d107      	bne.n	8005c62 <HAL_HCD_HC_Init+0x10a>
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2bbc      	cmp	r3, #188	@ 0xbc
 8005c5c:	d901      	bls.n	8005c62 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005c5e:	23bc      	movs	r3, #188	@ 0xbc
 8005c60:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	3318      	adds	r3, #24
 8005c72:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005c76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	b298      	uxth	r0, r3
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	3328      	adds	r3, #40	@ 0x28
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	787c      	ldrb	r4, [r7, #1]
 8005c9a:	78ba      	ldrb	r2, [r7, #2]
 8005c9c:	78f9      	ldrb	r1, [r7, #3]
 8005c9e:	9302      	str	r3, [sp, #8]
 8005ca0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	4623      	mov	r3, r4
 8005cae:	f008 fe75 	bl	800e99c <USB_HC_Init>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd90      	pop	{r4, r7, pc}

08005cc8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_HCD_HC_Halt+0x1e>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e00f      	b.n	8005d06 <HAL_HCD_HC_Halt+0x3e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	78fa      	ldrb	r2, [r7, #3]
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f009 fa07 	bl	800f10a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	4608      	mov	r0, r1
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	70fb      	strb	r3, [r7, #3]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70bb      	strb	r3, [r7, #2]
 8005d26:	4613      	mov	r3, r2
 8005d28:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	3317      	adds	r3, #23
 8005d3a:	78ba      	ldrb	r2, [r7, #2]
 8005d3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005d3e:	78fa      	ldrb	r2, [r7, #3]
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	4613      	mov	r3, r2
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	3326      	adds	r3, #38	@ 0x26
 8005d4e:	787a      	ldrb	r2, [r7, #1]
 8005d50:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005d52:	7c3b      	ldrb	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d114      	bne.n	8005d82 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005d58:	78fa      	ldrb	r2, [r7, #3]
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	332a      	adds	r3, #42	@ 0x2a
 8005d68:	2203      	movs	r2, #3
 8005d6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	3319      	adds	r3, #25
 8005d7c:	7f3a      	ldrb	r2, [r7, #28]
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e009      	b.n	8005d96 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	332a      	adds	r3, #42	@ 0x2a
 8005d92:	2202      	movs	r2, #2
 8005d94:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005d96:	787b      	ldrb	r3, [r7, #1]
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	f200 8102 	bhi.w	8005fa2 <HAL_HCD_HC_SubmitRequest+0x292>
 8005d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005f8d 	.word	0x08005f8d
 8005dac:	08005e79 	.word	0x08005e79
 8005db0:	08005f03 	.word	0x08005f03
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005db4:	7c3b      	ldrb	r3, [r7, #16]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	f040 80f5 	bne.w	8005fa6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005dbc:	78bb      	ldrb	r3, [r7, #2]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d12d      	bne.n	8005e1e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8005dc2:	8b3b      	ldrh	r3, [r7, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	1a9b      	subs	r3, r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	333d      	adds	r3, #61	@ 0x3d
 8005dd8:	2201      	movs	r2, #1
 8005dda:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005ddc:	78fa      	ldrb	r2, [r7, #3]
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	4613      	mov	r3, r2
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	333d      	adds	r3, #61	@ 0x3d
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005df2:	78fa      	ldrb	r2, [r7, #3]
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	440b      	add	r3, r1
 8005e00:	332a      	adds	r3, #42	@ 0x2a
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8005e06:	e0ce      	b.n	8005fa6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005e08:	78fa      	ldrb	r2, [r7, #3]
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	332a      	adds	r3, #42	@ 0x2a
 8005e18:	2202      	movs	r2, #2
 8005e1a:	701a      	strb	r2, [r3, #0]
      break;
 8005e1c:	e0c3      	b.n	8005fa6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	331a      	adds	r3, #26
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f040 80b8 	bne.w	8005fa6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	333c      	adds	r3, #60	@ 0x3c
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005e4c:	78fa      	ldrb	r2, [r7, #3]
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	332a      	adds	r3, #42	@ 0x2a
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
      break;
 8005e60:	e0a1      	b.n	8005fa6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	332a      	adds	r3, #42	@ 0x2a
 8005e72:	2202      	movs	r2, #2
 8005e74:	701a      	strb	r2, [r3, #0]
      break;
 8005e76:	e096      	b.n	8005fa6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005e78:	78bb      	ldrb	r3, [r7, #2]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d120      	bne.n	8005ec0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005e7e:	78fa      	ldrb	r2, [r7, #3]
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	011b      	lsls	r3, r3, #4
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	333d      	adds	r3, #61	@ 0x3d
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	332a      	adds	r3, #42	@ 0x2a
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005ea8:	e07e      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005eaa:	78fa      	ldrb	r2, [r7, #3]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	332a      	adds	r3, #42	@ 0x2a
 8005eba:	2202      	movs	r2, #2
 8005ebc:	701a      	strb	r2, [r3, #0]
      break;
 8005ebe:	e073      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	333c      	adds	r3, #60	@ 0x3c
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	332a      	adds	r3, #42	@ 0x2a
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
      break;
 8005eea:	e05d      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	332a      	adds	r3, #42	@ 0x2a
 8005efc:	2202      	movs	r2, #2
 8005efe:	701a      	strb	r2, [r3, #0]
      break;
 8005f00:	e052      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005f02:	78bb      	ldrb	r3, [r7, #2]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d120      	bne.n	8005f4a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005f08:	78fa      	ldrb	r2, [r7, #3]
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	1a9b      	subs	r3, r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	333d      	adds	r3, #61	@ 0x3d
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f1e:	78fa      	ldrb	r2, [r7, #3]
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	332a      	adds	r3, #42	@ 0x2a
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005f32:	e039      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	1a9b      	subs	r3, r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	332a      	adds	r3, #42	@ 0x2a
 8005f44:	2202      	movs	r2, #2
 8005f46:	701a      	strb	r2, [r3, #0]
      break;
 8005f48:	e02e      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005f4a:	78fa      	ldrb	r2, [r7, #3]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	333c      	adds	r3, #60	@ 0x3c
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	332a      	adds	r3, #42	@ 0x2a
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
      break;
 8005f74:	e018      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	332a      	adds	r3, #42	@ 0x2a
 8005f86:	2202      	movs	r2, #2
 8005f88:	701a      	strb	r2, [r3, #0]
      break;
 8005f8a:	e00d      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f8c:	78fa      	ldrb	r2, [r7, #3]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	332a      	adds	r3, #42	@ 0x2a
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
      break;
 8005fa0:	e002      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8005fa6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005fa8:	78fa      	ldrb	r2, [r7, #3]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	332c      	adds	r3, #44	@ 0x2c
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	8b39      	ldrh	r1, [r7, #24]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4403      	add	r3, r0
 8005fcc:	3334      	adds	r3, #52	@ 0x34
 8005fce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	334c      	adds	r3, #76	@ 0x4c
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005fe4:	78fa      	ldrb	r2, [r7, #3]
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	3338      	adds	r3, #56	@ 0x38
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	3315      	adds	r3, #21
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800600c:	78fa      	ldrb	r2, [r7, #3]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	334d      	adds	r3, #77	@ 0x4d
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	4613      	mov	r3, r2
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	3310      	adds	r3, #16
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	4413      	add	r3, r2
 8006034:	1d19      	adds	r1, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	799b      	ldrb	r3, [r3, #6]
 800603a:	461a      	mov	r2, r3
 800603c:	f008 fdda 	bl	800ebf4 <USB_HC_StartXfer>
 8006040:	4603      	mov	r3, r0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop

0800604c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f008 fada 	bl	800e61c <USB_GetMode>
 8006068:	4603      	mov	r3, r0
 800606a:	2b01      	cmp	r3, #1
 800606c:	f040 80fb 	bne.w	8006266 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f008 fa9d 	bl	800e5b4 <USB_ReadInterrupts>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80f1 	beq.w	8006264 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f008 fa94 	bl	800e5b4 <USB_ReadInterrupts>
 800608c:	4603      	mov	r3, r0
 800608e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006096:	d104      	bne.n	80060a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80060a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f008 fa84 	bl	800e5b4 <USB_ReadInterrupts>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060b6:	d104      	bne.n	80060c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80060c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f008 fa74 	bl	800e5b4 <USB_ReadInterrupts>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060d6:	d104      	bne.n	80060e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80060e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f008 fa64 	bl	800e5b4 <USB_ReadInterrupts>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d103      	bne.n	80060fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2202      	movs	r2, #2
 80060fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f008 fa56 	bl	800e5b4 <USB_ReadInterrupts>
 8006108:	4603      	mov	r3, r0
 800610a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006112:	d120      	bne.n	8006156 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800611c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d113      	bne.n	8006156 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800612e:	2110      	movs	r1, #16
 8006130:	6938      	ldr	r0, [r7, #16]
 8006132:	f008 f949 	bl	800e3c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006136:	6938      	ldr	r0, [r7, #16]
 8006138:	f008 f978 	bl	800e42c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	7a5b      	ldrb	r3, [r3, #9]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d105      	bne.n	8006150 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2101      	movs	r1, #1
 800614a:	4618      	mov	r0, r3
 800614c:	f008 fb5e 	bl	800e80c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f020 ff1b 	bl	8026f8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f008 fa2a 	bl	800e5b4 <USB_ReadInterrupts>
 8006160:	4603      	mov	r3, r0
 8006162:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006166:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800616a:	d102      	bne.n	8006172 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fd33 	bl	8007bd8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f008 fa1c 	bl	800e5b4 <USB_ReadInterrupts>
 800617c:	4603      	mov	r3, r0
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b08      	cmp	r3, #8
 8006184:	d106      	bne.n	8006194 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f020 fee4 	bl	8026f54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2208      	movs	r2, #8
 8006192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f008 fa0b 	bl	800e5b4 <USB_ReadInterrupts>
 800619e:	4603      	mov	r3, r0
 80061a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061a8:	d139      	bne.n	800621e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f008 ff9a 	bl	800f0e8 <USB_HC_ReadInterrupt>
 80061b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	e025      	b.n	8006208 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d018      	beq.n	8006202 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061e6:	d106      	bne.n	80061f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f905 	bl	80063fe <HCD_HC_IN_IRQHandler>
 80061f4:	e005      	b.n	8006202 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 ff67 	bl	80070d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	3301      	adds	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	795b      	ldrb	r3, [r3, #5]
 800620c:	461a      	mov	r2, r3
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	4293      	cmp	r3, r2
 8006212:	d3d3      	bcc.n	80061bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800621c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f008 f9c6 	bl	800e5b4 <USB_ReadInterrupts>
 8006228:	4603      	mov	r3, r0
 800622a:	f003 0310 	and.w	r3, r3, #16
 800622e:	2b10      	cmp	r3, #16
 8006230:	d101      	bne.n	8006236 <HAL_HCD_IRQHandler+0x1ea>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <HAL_HCD_IRQHandler+0x1ec>
 8006236:	2300      	movs	r3, #0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d014      	beq.n	8006266 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0210 	bic.w	r2, r2, #16
 800624a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fbe4 	bl	8007a1a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0210 	orr.w	r2, r2, #16
 8006260:	619a      	str	r2, [r3, #24]
 8006262:	e000      	b.n	8006266 <HAL_HCD_IRQHandler+0x21a>
      return;
 8006264:	bf00      	nop
    }
  }
}
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_HCD_Start+0x16>
 800627e:	2302      	movs	r3, #2
 8006280:	e013      	b.n	80062aa <HAL_HCD_Start+0x3e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2101      	movs	r1, #1
 8006290:	4618      	mov	r0, r3
 8006292:	f008 fb22 	bl	800e8da <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f008 f826 	bl	800e2ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_HCD_Stop+0x16>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e00d      	b.n	80062e4 <HAL_HCD_Stop+0x32>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f009 f875 	bl	800f3c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f008 fac4 	bl	800e886 <USB_ResetPort>
 80062fe:	4603      	mov	r3, r0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	4613      	mov	r3, r2
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	334c      	adds	r3, #76	@ 0x4c
 8006324:	781b      	ldrb	r3, [r3, #0]
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800633e:	78fa      	ldrb	r2, [r7, #3]
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	3338      	adds	r3, #56	@ 0x38
 800634e:	681b      	ldr	r3, [r3, #0]
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f008 fb06 	bl	800e97a <USB_GetCurrentFrame>
 800636e:	4603      	mov	r3, r0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	f008 fae1 	bl	800e94c <USB_GetHostSpeed>
 800638a:	4603      	mov	r3, r0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	331a      	adds	r3, #26
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	331b      	adds	r3, #27
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	3325      	adds	r3, #37	@ 0x25
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80063dc:	78fa      	ldrb	r2, [r7, #3]
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	3324      	adds	r3, #36	@ 0x24
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	78fa      	ldrb	r2, [r7, #3]
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f008 f8dc 	bl	800e5da <USB_ReadChInterrupts>
 8006422:	4603      	mov	r3, r0
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b04      	cmp	r3, #4
 800642a:	d11a      	bne.n	8006462 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006438:	461a      	mov	r2, r3
 800643a:	2304      	movs	r3, #4
 800643c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	440b      	add	r3, r1
 800644c:	334d      	adds	r3, #77	@ 0x4d
 800644e:	2207      	movs	r2, #7
 8006450:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	4611      	mov	r1, r2
 800645a:	4618      	mov	r0, r3
 800645c:	f008 fe55 	bl	800f10a <USB_HC_Halt>
 8006460:	e09e      	b.n	80065a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	78fa      	ldrb	r2, [r7, #3]
 8006468:	4611      	mov	r1, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f008 f8b5 	bl	800e5da <USB_ReadChInterrupts>
 8006470:	4603      	mov	r3, r0
 8006472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800647a:	d11b      	bne.n	80064b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4413      	add	r3, r2
 8006484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006488:	461a      	mov	r2, r3
 800648a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800648e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8006490:	78fa      	ldrb	r2, [r7, #3]
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	334d      	adds	r3, #77	@ 0x4d
 80064a0:	2208      	movs	r2, #8
 80064a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	4611      	mov	r1, r2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f008 fe2c 	bl	800f10a <USB_HC_Halt>
 80064b2:	e075      	b.n	80065a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	78fa      	ldrb	r2, [r7, #3]
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f008 f88c 	bl	800e5da <USB_ReadChInterrupts>
 80064c2:	4603      	mov	r3, r0
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d11a      	bne.n	8006502 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d8:	461a      	mov	r2, r3
 80064da:	2308      	movs	r3, #8
 80064dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	4613      	mov	r3, r2
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	1a9b      	subs	r3, r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	440b      	add	r3, r1
 80064ec:	334d      	adds	r3, #77	@ 0x4d
 80064ee:	2206      	movs	r2, #6
 80064f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	78fa      	ldrb	r2, [r7, #3]
 80064f8:	4611      	mov	r1, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f008 fe05 	bl	800f10a <USB_HC_Halt>
 8006500:	e04e      	b.n	80065a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f008 f865 	bl	800e5da <USB_ReadChInterrupts>
 8006510:	4603      	mov	r3, r0
 8006512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800651a:	d11b      	bne.n	8006554 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006528:	461a      	mov	r2, r3
 800652a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800652e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006530:	78fa      	ldrb	r2, [r7, #3]
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	4613      	mov	r3, r2
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	334d      	adds	r3, #77	@ 0x4d
 8006540:	2209      	movs	r2, #9
 8006542:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f008 fddc 	bl	800f10a <USB_HC_Halt>
 8006552:	e025      	b.n	80065a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	4611      	mov	r1, r2
 800655c:	4618      	mov	r0, r3
 800655e:	f008 f83c 	bl	800e5da <USB_ReadChInterrupts>
 8006562:	4603      	mov	r3, r0
 8006564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006568:	2b80      	cmp	r3, #128	@ 0x80
 800656a:	d119      	bne.n	80065a0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006578:	461a      	mov	r2, r3
 800657a:	2380      	movs	r3, #128	@ 0x80
 800657c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800657e:	78fa      	ldrb	r2, [r7, #3]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	334d      	adds	r3, #77	@ 0x4d
 800658e:	2207      	movs	r2, #7
 8006590:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	78fa      	ldrb	r2, [r7, #3]
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f008 fdb5 	bl	800f10a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	78fa      	ldrb	r2, [r7, #3]
 80065a6:	4611      	mov	r1, r2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f008 f816 	bl	800e5da <USB_ReadChInterrupts>
 80065ae:	4603      	mov	r3, r0
 80065b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065b8:	d112      	bne.n	80065e0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	4611      	mov	r1, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f008 fda1 	bl	800f10a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d4:	461a      	mov	r2, r3
 80065d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065da:	6093      	str	r3, [r2, #8]
 80065dc:	f000 bd75 	b.w	80070ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	78fa      	ldrb	r2, [r7, #3]
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f007 fff6 	bl	800e5da <USB_ReadChInterrupts>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	f040 8128 	bne.w	800684a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4413      	add	r3, r2
 8006602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006606:	461a      	mov	r2, r3
 8006608:	2320      	movs	r3, #32
 800660a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	331b      	adds	r3, #27
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d119      	bne.n	8006656 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	331b      	adds	r3, #27
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	4413      	add	r3, r2
 800663e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	440a      	add	r2, r1
 800664c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006654:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	799b      	ldrb	r3, [r3, #6]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01b      	beq.n	8006696 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800665e:	78fa      	ldrb	r2, [r7, #3]
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3330      	adds	r3, #48	@ 0x30
 800666e:	6819      	ldr	r1, [r3, #0]
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	1ac9      	subs	r1, r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4613      	mov	r3, r2
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4403      	add	r3, r0
 8006692:	3338      	adds	r3, #56	@ 0x38
 8006694:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8006696:	78fa      	ldrb	r2, [r7, #3]
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	334d      	adds	r3, #77	@ 0x4d
 80066a6:	2201      	movs	r2, #1
 80066a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	4613      	mov	r3, r2
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	1a9b      	subs	r3, r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	3344      	adds	r3, #68	@ 0x44
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ca:	461a      	mov	r2, r3
 80066cc:	2301      	movs	r3, #1
 80066ce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80066d0:	78fa      	ldrb	r2, [r7, #3]
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	4613      	mov	r3, r2
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	3326      	adds	r3, #38	@ 0x26
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	1a9b      	subs	r3, r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	3326      	adds	r3, #38	@ 0x26
 80066f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d110      	bne.n	800671e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	4611      	mov	r1, r2
 8006704:	4618      	mov	r0, r3
 8006706:	f008 fd00 	bl	800f10a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006716:	461a      	mov	r2, r3
 8006718:	2310      	movs	r3, #16
 800671a:	6093      	str	r3, [r2, #8]
 800671c:	e03d      	b.n	800679a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	3326      	adds	r3, #38	@ 0x26
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d00a      	beq.n	800674a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006734:	78fa      	ldrb	r2, [r7, #3]
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	4613      	mov	r3, r2
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	1a9b      	subs	r3, r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	3326      	adds	r3, #38	@ 0x26
 8006744:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006746:	2b01      	cmp	r3, #1
 8006748:	d127      	bne.n	800679a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4413      	add	r3, r2
 8006752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	78fa      	ldrb	r2, [r7, #3]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	440a      	add	r2, r1
 8006760:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006764:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006768:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	334c      	adds	r3, #76	@ 0x4c
 800677a:	2201      	movs	r2, #1
 800677c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800677e:	78fa      	ldrb	r2, [r7, #3]
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	011b      	lsls	r3, r3, #4
 8006786:	1a9b      	subs	r3, r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	334c      	adds	r3, #76	@ 0x4c
 800678e:	781a      	ldrb	r2, [r3, #0]
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f020 fc07 	bl	8026fa8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	799b      	ldrb	r3, [r3, #6]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d13b      	bne.n	800681a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	3338      	adds	r3, #56	@ 0x38
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	78fa      	ldrb	r2, [r7, #3]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	4613      	mov	r3, r2
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	1a9b      	subs	r3, r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4403      	add	r3, r0
 80067c2:	3328      	adds	r3, #40	@ 0x28
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	440b      	add	r3, r1
 80067c8:	1e59      	subs	r1, r3, #1
 80067ca:	78fa      	ldrb	r2, [r7, #3]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4403      	add	r3, r0
 80067d8:	3328      	adds	r3, #40	@ 0x28
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8470 	beq.w	80070ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	333c      	adds	r3, #60	@ 0x3c
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	78fa      	ldrb	r2, [r7, #3]
 80067fe:	f083 0301 	eor.w	r3, r3, #1
 8006802:	b2d8      	uxtb	r0, r3
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	1a9b      	subs	r3, r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	333c      	adds	r3, #60	@ 0x3c
 8006812:	4602      	mov	r2, r0
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	f000 bc58 	b.w	80070ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	333c      	adds	r3, #60	@ 0x3c
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	78fa      	ldrb	r2, [r7, #3]
 800682e:	f083 0301 	eor.w	r3, r3, #1
 8006832:	b2d8      	uxtb	r0, r3
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	333c      	adds	r3, #60	@ 0x3c
 8006842:	4602      	mov	r2, r0
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	f000 bc40 	b.w	80070ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f007 fec1 	bl	800e5da <USB_ReadChInterrupts>
 8006858:	4603      	mov	r3, r0
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b20      	cmp	r3, #32
 8006860:	d131      	bne.n	80068c6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800686e:	461a      	mov	r2, r3
 8006870:	2320      	movs	r3, #32
 8006872:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8006874:	78fa      	ldrb	r2, [r7, #3]
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	331a      	adds	r3, #26
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b01      	cmp	r3, #1
 8006888:	f040 841f 	bne.w	80070ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	331b      	adds	r3, #27
 800689c:	2201      	movs	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80068a0:	78fa      	ldrb	r2, [r7, #3]
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	1a9b      	subs	r3, r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	334d      	adds	r3, #77	@ 0x4d
 80068b0:	2203      	movs	r2, #3
 80068b2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	4611      	mov	r1, r2
 80068bc:	4618      	mov	r0, r3
 80068be:	f008 fc24 	bl	800f10a <USB_HC_Halt>
 80068c2:	f000 bc02 	b.w	80070ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	78fa      	ldrb	r2, [r7, #3]
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f007 fe83 	bl	800e5da <USB_ReadChInterrupts>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b02      	cmp	r3, #2
 80068dc:	f040 8305 	bne.w	8006eea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ec:	461a      	mov	r2, r3
 80068ee:	2302      	movs	r3, #2
 80068f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80068f2:	78fa      	ldrb	r2, [r7, #3]
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	1a9b      	subs	r3, r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	334d      	adds	r3, #77	@ 0x4d
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d114      	bne.n	8006932 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006908:	78fa      	ldrb	r2, [r7, #3]
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	4613      	mov	r3, r2
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	334d      	adds	r3, #77	@ 0x4d
 8006918:	2202      	movs	r2, #2
 800691a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800691c:	78fa      	ldrb	r2, [r7, #3]
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	4613      	mov	r3, r2
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	334c      	adds	r3, #76	@ 0x4c
 800692c:	2201      	movs	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	e2cc      	b.n	8006ecc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006932:	78fa      	ldrb	r2, [r7, #3]
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	334d      	adds	r3, #77	@ 0x4d
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b06      	cmp	r3, #6
 8006946:	d114      	bne.n	8006972 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006948:	78fa      	ldrb	r2, [r7, #3]
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	4613      	mov	r3, r2
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	1a9b      	subs	r3, r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	334d      	adds	r3, #77	@ 0x4d
 8006958:	2202      	movs	r2, #2
 800695a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800695c:	78fa      	ldrb	r2, [r7, #3]
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	334c      	adds	r3, #76	@ 0x4c
 800696c:	2205      	movs	r2, #5
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	e2ac      	b.n	8006ecc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	334d      	adds	r3, #77	@ 0x4d
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b07      	cmp	r3, #7
 8006986:	d00b      	beq.n	80069a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	4613      	mov	r3, r2
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	1a9b      	subs	r3, r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	334d      	adds	r3, #77	@ 0x4d
 8006998:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800699a:	2b09      	cmp	r3, #9
 800699c:	f040 80a6 	bne.w	8006aec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	334d      	adds	r3, #77	@ 0x4d
 80069b0:	2202      	movs	r2, #2
 80069b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	1a9b      	subs	r3, r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	3344      	adds	r3, #68	@ 0x44
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	1c59      	adds	r1, r3, #1
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4403      	add	r3, r0
 80069d4:	3344      	adds	r3, #68	@ 0x44
 80069d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069d8:	78fa      	ldrb	r2, [r7, #3]
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	1a9b      	subs	r3, r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	3344      	adds	r3, #68	@ 0x44
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d943      	bls.n	8006a76 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80069ee:	78fa      	ldrb	r2, [r7, #3]
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	3344      	adds	r3, #68	@ 0x44
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	331a      	adds	r3, #26
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d123      	bne.n	8006a60 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	1a9b      	subs	r3, r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	331b      	adds	r3, #27
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	1a9b      	subs	r3, r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	331c      	adds	r3, #28
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	78fa      	ldrb	r2, [r7, #3]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a5e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006a60:	78fa      	ldrb	r2, [r7, #3]
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	1a9b      	subs	r3, r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	334c      	adds	r3, #76	@ 0x4c
 8006a70:	2204      	movs	r2, #4
 8006a72:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006a74:	e229      	b.n	8006eca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006a76:	78fa      	ldrb	r2, [r7, #3]
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	1a9b      	subs	r3, r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	334c      	adds	r3, #76	@ 0x4c
 8006a86:	2202      	movs	r2, #2
 8006a88:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006a8a:	78fa      	ldrb	r2, [r7, #3]
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3326      	adds	r3, #38	@ 0x26
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006aa0:	78fa      	ldrb	r2, [r7, #3]
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	1a9b      	subs	r3, r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	3326      	adds	r3, #38	@ 0x26
 8006ab0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	f040 8209 	bne.w	8006eca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ace:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ad6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006aea:	e1ee      	b.n	8006eca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006aec:	78fa      	ldrb	r2, [r7, #3]
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	334d      	adds	r3, #77	@ 0x4d
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	f040 80c8 	bne.w	8006c94 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006b04:	78fa      	ldrb	r2, [r7, #3]
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	1a9b      	subs	r3, r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	334d      	adds	r3, #77	@ 0x4d
 8006b14:	2202      	movs	r2, #2
 8006b16:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	331b      	adds	r3, #27
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	f040 81ce 	bne.w	8006ecc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4613      	mov	r3, r2
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	3326      	adds	r3, #38	@ 0x26
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d16b      	bne.n	8006c1e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	3348      	adds	r3, #72	@ 0x48
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	1c59      	adds	r1, r3, #1
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4403      	add	r3, r0
 8006b66:	3348      	adds	r3, #72	@ 0x48
 8006b68:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8006b6a:	78fa      	ldrb	r2, [r7, #3]
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	011b      	lsls	r3, r3, #4
 8006b72:	1a9b      	subs	r3, r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	440b      	add	r3, r1
 8006b78:	3348      	adds	r3, #72	@ 0x48
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d943      	bls.n	8006c08 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3348      	adds	r3, #72	@ 0x48
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006b94:	78fa      	ldrb	r2, [r7, #3]
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	331b      	adds	r3, #27
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8006ba8:	78fa      	ldrb	r2, [r7, #3]
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3344      	adds	r3, #68	@ 0x44
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d809      	bhi.n	8006bd2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006bbe:	78fa      	ldrb	r2, [r7, #3]
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	331c      	adds	r3, #28
 8006bce:	2201      	movs	r2, #1
 8006bd0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	334c      	adds	r3, #76	@ 0x4c
 8006c02:	2204      	movs	r2, #4
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	e014      	b.n	8006c32 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c08:	78fa      	ldrb	r2, [r7, #3]
 8006c0a:	6879      	ldr	r1, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	334c      	adds	r3, #76	@ 0x4c
 8006c18:	2202      	movs	r2, #2
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	e009      	b.n	8006c32 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4613      	mov	r3, r2
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	1a9b      	subs	r3, r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	334c      	adds	r3, #76	@ 0x4c
 8006c2e:	2202      	movs	r2, #2
 8006c30:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	1a9b      	subs	r3, r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	3326      	adds	r3, #38	@ 0x26
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006c48:	78fa      	ldrb	r2, [r7, #3]
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	1a9b      	subs	r3, r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	3326      	adds	r3, #38	@ 0x26
 8006c58:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	f040 8136 	bne.w	8006ecc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c76:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c7e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	e11b      	b.n	8006ecc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006c94:	78fa      	ldrb	r2, [r7, #3]
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	334d      	adds	r3, #77	@ 0x4d
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	f040 8081 	bne.w	8006dae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	1a9b      	subs	r3, r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	440b      	add	r3, r1
 8006cba:	334d      	adds	r3, #77	@ 0x4d
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006cc0:	78fa      	ldrb	r2, [r7, #3]
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	331b      	adds	r3, #27
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	f040 80fa 	bne.w	8006ecc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	334c      	adds	r3, #76	@ 0x4c
 8006ce8:	2202      	movs	r2, #2
 8006cea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	78fa      	ldrb	r2, [r7, #3]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d0a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	78fa      	ldrb	r2, [r7, #3]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d2a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d46:	f023 0320 	bic.w	r3, r3, #32
 8006d4a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006d4c:	78fa      	ldrb	r2, [r7, #3]
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	4613      	mov	r3, r2
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	3326      	adds	r3, #38	@ 0x26
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006d62:	78fa      	ldrb	r2, [r7, #3]
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	3326      	adds	r3, #38	@ 0x26
 8006d72:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	f040 80a9 	bne.w	8006ecc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d98:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da6:	461a      	mov	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e08e      	b.n	8006ecc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006dae:	78fa      	ldrb	r2, [r7, #3]
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	4613      	mov	r3, r2
 8006db4:	011b      	lsls	r3, r3, #4
 8006db6:	1a9b      	subs	r3, r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	440b      	add	r3, r1
 8006dbc:	334d      	adds	r3, #77	@ 0x4d
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d143      	bne.n	8006e4c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006dc4:	78fa      	ldrb	r2, [r7, #3]
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	1a9b      	subs	r3, r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	334d      	adds	r3, #77	@ 0x4d
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006dd8:	78fa      	ldrb	r2, [r7, #3]
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	334c      	adds	r3, #76	@ 0x4c
 8006de8:	2202      	movs	r2, #2
 8006dea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006dec:	78fa      	ldrb	r2, [r7, #3]
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	3326      	adds	r3, #38	@ 0x26
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	1a9b      	subs	r3, r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3326      	adds	r3, #38	@ 0x26
 8006e12:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d159      	bne.n	8006ecc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e2e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e36:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e44:	461a      	mov	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e03f      	b.n	8006ecc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	334d      	adds	r3, #77	@ 0x4d
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b08      	cmp	r3, #8
 8006e60:	d126      	bne.n	8006eb0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e62:	78fa      	ldrb	r2, [r7, #3]
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	334d      	adds	r3, #77	@ 0x4d
 8006e72:	2202      	movs	r2, #2
 8006e74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	3344      	adds	r3, #68	@ 0x44
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	1c59      	adds	r1, r3, #1
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4403      	add	r3, r0
 8006e96:	3344      	adds	r3, #68	@ 0x44
 8006e98:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	334c      	adds	r3, #76	@ 0x4c
 8006eaa:	2204      	movs	r2, #4
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	e00d      	b.n	8006ecc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006eb0:	78fa      	ldrb	r2, [r7, #3]
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	334d      	adds	r3, #77	@ 0x4d
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	f000 8100 	beq.w	80070c8 <HCD_HC_IN_IRQHandler+0xcca>
 8006ec8:	e000      	b.n	8006ecc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006eca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006ecc:	78fa      	ldrb	r2, [r7, #3]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	334c      	adds	r3, #76	@ 0x4c
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f020 f860 	bl	8026fa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006ee8:	e0ef      	b.n	80070ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f007 fb71 	bl	800e5da <USB_ReadChInterrupts>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006efe:	2b40      	cmp	r3, #64	@ 0x40
 8006f00:	d12f      	bne.n	8006f62 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2340      	movs	r3, #64	@ 0x40
 8006f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	334d      	adds	r3, #77	@ 0x4d
 8006f24:	2205      	movs	r2, #5
 8006f26:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	331a      	adds	r3, #26
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d109      	bne.n	8006f52 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	3344      	adds	r3, #68	@ 0x44
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	78fa      	ldrb	r2, [r7, #3]
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f008 f8d5 	bl	800f10a <USB_HC_Halt>
 8006f60:	e0b3      	b.n	80070ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	78fa      	ldrb	r2, [r7, #3]
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f007 fb35 	bl	800e5da <USB_ReadChInterrupts>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	f040 80a7 	bne.w	80070ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006f7c:	78fa      	ldrb	r2, [r7, #3]
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	4613      	mov	r3, r2
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	3326      	adds	r3, #38	@ 0x26
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d11b      	bne.n	8006fca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	3344      	adds	r3, #68	@ 0x44
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8006fa6:	78fa      	ldrb	r2, [r7, #3]
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	1a9b      	subs	r3, r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	334d      	adds	r3, #77	@ 0x4d
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f008 f8a1 	bl	800f10a <USB_HC_Halt>
 8006fc8:	e03f      	b.n	800704a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	1a9b      	subs	r3, r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	3326      	adds	r3, #38	@ 0x26
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	3326      	adds	r3, #38	@ 0x26
 8006ff0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d129      	bne.n	800704a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006ff6:	78fa      	ldrb	r2, [r7, #3]
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	3344      	adds	r3, #68	@ 0x44
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	799b      	ldrb	r3, [r3, #6]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <HCD_HC_IN_IRQHandler+0xc2a>
 8007012:	78fa      	ldrb	r2, [r7, #3]
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	4613      	mov	r3, r2
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	331b      	adds	r3, #27
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d110      	bne.n	800704a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007028:	78fa      	ldrb	r2, [r7, #3]
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	334d      	adds	r3, #77	@ 0x4d
 8007038:	2204      	movs	r2, #4
 800703a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	78fa      	ldrb	r2, [r7, #3]
 8007042:	4611      	mov	r1, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f008 f860 	bl	800f10a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4613      	mov	r3, r2
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	1a9b      	subs	r3, r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	331b      	adds	r3, #27
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d129      	bne.n	80070b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007060:	78fa      	ldrb	r2, [r7, #3]
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	4613      	mov	r3, r2
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	1a9b      	subs	r3, r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	331b      	adds	r3, #27
 8007070:	2200      	movs	r2, #0
 8007072:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4413      	add	r3, r2
 800707c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	78fa      	ldrb	r2, [r7, #3]
 8007084:	0151      	lsls	r1, r2, #5
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	440a      	add	r2, r1
 800708a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800708e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007092:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8007094:	78fb      	ldrb	r3, [r7, #3]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	4413      	add	r3, r2
 800709c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	78fa      	ldrb	r2, [r7, #3]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ae:	f043 0320 	orr.w	r3, r3, #32
 80070b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c0:	461a      	mov	r2, r3
 80070c2:	2310      	movs	r3, #16
 80070c4:	6093      	str	r3, [r2, #8]
 80070c6:	e000      	b.n	80070ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80070c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	4611      	mov	r1, r2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f007 fa73 	bl	800e5da <USB_ReadChInterrupts>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d11b      	bne.n	8007136 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4413      	add	r3, r2
 8007106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710a:	461a      	mov	r2, r3
 800710c:	2304      	movs	r3, #4
 800710e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	4613      	mov	r3, r2
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	1a9b      	subs	r3, r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	334d      	adds	r3, #77	@ 0x4d
 8007120:	2207      	movs	r2, #7
 8007122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	78fa      	ldrb	r2, [r7, #3]
 800712a:	4611      	mov	r1, r2
 800712c:	4618      	mov	r0, r3
 800712e:	f007 ffec 	bl	800f10a <USB_HC_Halt>
 8007132:	f000 bc6f 	b.w	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	4611      	mov	r1, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f007 fa4b 	bl	800e5da <USB_ReadChInterrupts>
 8007144:	4603      	mov	r3, r0
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b20      	cmp	r3, #32
 800714c:	f040 8082 	bne.w	8007254 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4413      	add	r3, r2
 8007158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800715c:	461a      	mov	r2, r3
 800715e:	2320      	movs	r3, #32
 8007160:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	4613      	mov	r3, r2
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	1a9b      	subs	r3, r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	3319      	adds	r3, #25
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d124      	bne.n	80071c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8007178:	78fa      	ldrb	r2, [r7, #3]
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	4613      	mov	r3, r2
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	1a9b      	subs	r3, r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	440b      	add	r3, r1
 8007186:	3319      	adds	r3, #25
 8007188:	2200      	movs	r2, #0
 800718a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800718c:	78fa      	ldrb	r2, [r7, #3]
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	4613      	mov	r3, r2
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	440b      	add	r3, r1
 800719a:	334c      	adds	r3, #76	@ 0x4c
 800719c:	2202      	movs	r2, #2
 800719e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80071a0:	78fa      	ldrb	r2, [r7, #3]
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	4613      	mov	r3, r2
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	1a9b      	subs	r3, r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	440b      	add	r3, r1
 80071ae:	334d      	adds	r3, #77	@ 0x4d
 80071b0:	2203      	movs	r2, #3
 80071b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	4611      	mov	r1, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f007 ffa4 	bl	800f10a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	331a      	adds	r3, #26
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 841d 	bne.w	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	1a9b      	subs	r3, r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	440b      	add	r3, r1
 80071e8:	331b      	adds	r3, #27
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 8411 	bne.w	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80071f2:	78fa      	ldrb	r2, [r7, #3]
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	4613      	mov	r3, r2
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	440b      	add	r3, r1
 8007200:	3326      	adds	r3, #38	@ 0x26
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d009      	beq.n	800721c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007208:	78fa      	ldrb	r2, [r7, #3]
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	4613      	mov	r3, r2
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	1a9b      	subs	r3, r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	331b      	adds	r3, #27
 8007218:	2201      	movs	r2, #1
 800721a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800721c:	78fa      	ldrb	r2, [r7, #3]
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	4613      	mov	r3, r2
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	440b      	add	r3, r1
 800722a:	334d      	adds	r3, #77	@ 0x4d
 800722c:	2203      	movs	r2, #3
 800722e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	4611      	mov	r1, r2
 8007238:	4618      	mov	r0, r3
 800723a:	f007 ff66 	bl	800f10a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	3344      	adds	r3, #68	@ 0x44
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	e3df      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	78fa      	ldrb	r2, [r7, #3]
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f007 f9bc 	bl	800e5da <USB_ReadChInterrupts>
 8007262:	4603      	mov	r3, r0
 8007264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726c:	d111      	bne.n	8007292 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800727a:	461a      	mov	r2, r3
 800727c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007280:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	4611      	mov	r1, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f007 ff3d 	bl	800f10a <USB_HC_Halt>
 8007290:	e3c0      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f007 f99d 	bl	800e5da <USB_ReadChInterrupts>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d168      	bne.n	800737c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80072aa:	78fa      	ldrb	r2, [r7, #3]
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4613      	mov	r3, r2
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	3344      	adds	r3, #68	@ 0x44
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f007 f987 	bl	800e5da <USB_ReadChInterrupts>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d2:	2b40      	cmp	r3, #64	@ 0x40
 80072d4:	d112      	bne.n	80072fc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	3319      	adds	r3, #25
 80072e6:	2201      	movs	r2, #1
 80072e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072f6:	461a      	mov	r2, r3
 80072f8:	2340      	movs	r3, #64	@ 0x40
 80072fa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	331b      	adds	r3, #27
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d019      	beq.n	8007346 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	331b      	adds	r3, #27
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4413      	add	r3, r2
 800732e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	78fa      	ldrb	r2, [r7, #3]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	440a      	add	r2, r1
 800733c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007344:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	4413      	add	r3, r2
 800734e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007352:	461a      	mov	r2, r3
 8007354:	2301      	movs	r3, #1
 8007356:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007358:	78fa      	ldrb	r2, [r7, #3]
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	334d      	adds	r3, #77	@ 0x4d
 8007368:	2201      	movs	r2, #1
 800736a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	78fa      	ldrb	r2, [r7, #3]
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f007 fec8 	bl	800f10a <USB_HC_Halt>
 800737a:	e34b      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	78fa      	ldrb	r2, [r7, #3]
 8007382:	4611      	mov	r1, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f007 f928 	bl	800e5da <USB_ReadChInterrupts>
 800738a:	4603      	mov	r3, r0
 800738c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007390:	2b40      	cmp	r3, #64	@ 0x40
 8007392:	d139      	bne.n	8007408 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8007394:	78fa      	ldrb	r2, [r7, #3]
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4613      	mov	r3, r2
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	1a9b      	subs	r3, r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	440b      	add	r3, r1
 80073a2:	334d      	adds	r3, #77	@ 0x4d
 80073a4:	2205      	movs	r2, #5
 80073a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80073a8:	78fa      	ldrb	r2, [r7, #3]
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	4613      	mov	r3, r2
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	1a9b      	subs	r3, r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	331a      	adds	r3, #26
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d109      	bne.n	80073d2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4613      	mov	r3, r2
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	1a9b      	subs	r3, r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	3319      	adds	r3, #25
 80073ce:	2201      	movs	r2, #1
 80073d0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	4613      	mov	r3, r2
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	3344      	adds	r3, #68	@ 0x44
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	4611      	mov	r1, r2
 80073ee:	4618      	mov	r0, r3
 80073f0:	f007 fe8b 	bl	800f10a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007400:	461a      	mov	r2, r3
 8007402:	2340      	movs	r3, #64	@ 0x40
 8007404:	6093      	str	r3, [r2, #8]
 8007406:	e305      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	78fa      	ldrb	r2, [r7, #3]
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f007 f8e2 	bl	800e5da <USB_ReadChInterrupts>
 8007416:	4603      	mov	r3, r0
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b08      	cmp	r3, #8
 800741e:	d11a      	bne.n	8007456 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800742c:	461a      	mov	r2, r3
 800742e:	2308      	movs	r3, #8
 8007430:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007432:	78fa      	ldrb	r2, [r7, #3]
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	4613      	mov	r3, r2
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	334d      	adds	r3, #77	@ 0x4d
 8007442:	2206      	movs	r2, #6
 8007444:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f007 fe5b 	bl	800f10a <USB_HC_Halt>
 8007454:	e2de      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	78fa      	ldrb	r2, [r7, #3]
 800745c:	4611      	mov	r1, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f007 f8bb 	bl	800e5da <USB_ReadChInterrupts>
 8007464:	4603      	mov	r3, r0
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b10      	cmp	r3, #16
 800746c:	d144      	bne.n	80074f8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	3344      	adds	r3, #68	@ 0x44
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	1a9b      	subs	r3, r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	334d      	adds	r3, #77	@ 0x4d
 8007492:	2204      	movs	r2, #4
 8007494:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8007496:	78fa      	ldrb	r2, [r7, #3]
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	1a9b      	subs	r3, r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	3319      	adds	r3, #25
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d114      	bne.n	80074d6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80074ac:	78fa      	ldrb	r2, [r7, #3]
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	4613      	mov	r3, r2
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	3318      	adds	r3, #24
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	3319      	adds	r3, #25
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	78fa      	ldrb	r2, [r7, #3]
 80074dc:	4611      	mov	r1, r2
 80074de:	4618      	mov	r0, r3
 80074e0:	f007 fe13 	bl	800f10a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f0:	461a      	mov	r2, r3
 80074f2:	2310      	movs	r3, #16
 80074f4:	6093      	str	r3, [r2, #8]
 80074f6:	e28d      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	78fa      	ldrb	r2, [r7, #3]
 80074fe:	4611      	mov	r1, r2
 8007500:	4618      	mov	r0, r3
 8007502:	f007 f86a 	bl	800e5da <USB_ReadChInterrupts>
 8007506:	4603      	mov	r3, r0
 8007508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750c:	2b80      	cmp	r3, #128	@ 0x80
 800750e:	d169      	bne.n	80075e4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	799b      	ldrb	r3, [r3, #6]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d111      	bne.n	800753c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007518:	78fa      	ldrb	r2, [r7, #3]
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4613      	mov	r3, r2
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	334d      	adds	r3, #77	@ 0x4d
 8007528:	2207      	movs	r2, #7
 800752a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	78fa      	ldrb	r2, [r7, #3]
 8007532:	4611      	mov	r1, r2
 8007534:	4618      	mov	r0, r3
 8007536:	f007 fde8 	bl	800f10a <USB_HC_Halt>
 800753a:	e049      	b.n	80075d0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800753c:	78fa      	ldrb	r2, [r7, #3]
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4613      	mov	r3, r2
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	3344      	adds	r3, #68	@ 0x44
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	1c59      	adds	r1, r3, #1
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4613      	mov	r3, r2
 8007554:	011b      	lsls	r3, r3, #4
 8007556:	1a9b      	subs	r3, r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4403      	add	r3, r0
 800755c:	3344      	adds	r3, #68	@ 0x44
 800755e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	1a9b      	subs	r3, r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	3344      	adds	r3, #68	@ 0x44
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d922      	bls.n	80075bc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	3344      	adds	r3, #68	@ 0x44
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800758a:	78fa      	ldrb	r2, [r7, #3]
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	4613      	mov	r3, r2
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	334c      	adds	r3, #76	@ 0x4c
 800759a:	2204      	movs	r2, #4
 800759c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800759e:	78fa      	ldrb	r2, [r7, #3]
 80075a0:	6879      	ldr	r1, [r7, #4]
 80075a2:	4613      	mov	r3, r2
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	1a9b      	subs	r3, r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	440b      	add	r3, r1
 80075ac:	334c      	adds	r3, #76	@ 0x4c
 80075ae:	781a      	ldrb	r2, [r3, #0]
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f01f fcf7 	bl	8026fa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80075ba:	e009      	b.n	80075d0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80075bc:	78fa      	ldrb	r2, [r7, #3]
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	4613      	mov	r3, r2
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	440b      	add	r3, r1
 80075ca:	334c      	adds	r3, #76	@ 0x4c
 80075cc:	2202      	movs	r2, #2
 80075ce:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075dc:	461a      	mov	r2, r3
 80075de:	2380      	movs	r3, #128	@ 0x80
 80075e0:	6093      	str	r3, [r2, #8]
 80075e2:	e217      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	78fa      	ldrb	r2, [r7, #3]
 80075ea:	4611      	mov	r1, r2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f006 fff4 	bl	800e5da <USB_ReadChInterrupts>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075fc:	d11b      	bne.n	8007636 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	4613      	mov	r3, r2
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	1a9b      	subs	r3, r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	334d      	adds	r3, #77	@ 0x4d
 800760e:	2209      	movs	r2, #9
 8007610:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f007 fd75 	bl	800f10a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	4413      	add	r3, r2
 8007628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800762c:	461a      	mov	r2, r3
 800762e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007632:	6093      	str	r3, [r2, #8]
 8007634:	e1ee      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	4611      	mov	r1, r2
 800763e:	4618      	mov	r0, r3
 8007640:	f006 ffcb 	bl	800e5da <USB_ReadChInterrupts>
 8007644:	4603      	mov	r3, r0
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b02      	cmp	r3, #2
 800764c:	f040 81df 	bne.w	8007a0e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800765c:	461a      	mov	r2, r3
 800765e:	2302      	movs	r3, #2
 8007660:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	1a9b      	subs	r3, r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	440b      	add	r3, r1
 8007670:	334d      	adds	r3, #77	@ 0x4d
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b01      	cmp	r3, #1
 8007676:	f040 8093 	bne.w	80077a0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800767a:	78fa      	ldrb	r2, [r7, #3]
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	1a9b      	subs	r3, r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	334d      	adds	r3, #77	@ 0x4d
 800768a:	2202      	movs	r2, #2
 800768c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800768e:	78fa      	ldrb	r2, [r7, #3]
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	4613      	mov	r3, r2
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	334c      	adds	r3, #76	@ 0x4c
 800769e:	2201      	movs	r2, #1
 80076a0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80076a2:	78fa      	ldrb	r2, [r7, #3]
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	3326      	adds	r3, #38	@ 0x26
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d00b      	beq.n	80076d0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	3326      	adds	r3, #38	@ 0x26
 80076c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	f040 8190 	bne.w	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	799b      	ldrb	r3, [r3, #6]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d115      	bne.n	8007704 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	1a9b      	subs	r3, r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	333d      	adds	r3, #61	@ 0x3d
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	78fa      	ldrb	r2, [r7, #3]
 80076ec:	f083 0301 	eor.w	r3, r3, #1
 80076f0:	b2d8      	uxtb	r0, r3
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	4613      	mov	r3, r2
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	1a9b      	subs	r3, r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	333d      	adds	r3, #61	@ 0x3d
 8007700:	4602      	mov	r2, r0
 8007702:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	799b      	ldrb	r3, [r3, #6]
 8007708:	2b01      	cmp	r3, #1
 800770a:	f040 8171 	bne.w	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
 800770e:	78fa      	ldrb	r2, [r7, #3]
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	3334      	adds	r3, #52	@ 0x34
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 8165 	beq.w	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8007726:	78fa      	ldrb	r2, [r7, #3]
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	1a9b      	subs	r3, r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	3334      	adds	r3, #52	@ 0x34
 8007736:	6819      	ldr	r1, [r3, #0]
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4613      	mov	r3, r2
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4403      	add	r3, r0
 8007746:	3328      	adds	r3, #40	@ 0x28
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	440b      	add	r3, r1
 800774c:	1e59      	subs	r1, r3, #1
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4403      	add	r3, r0
 800775c:	3328      	adds	r3, #40	@ 0x28
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	fbb1 f3f3 	udiv	r3, r1, r3
 8007764:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 813f 	beq.w	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	333d      	adds	r3, #61	@ 0x3d
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	f083 0301 	eor.w	r3, r3, #1
 800778a:	b2d8      	uxtb	r0, r3
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	4613      	mov	r3, r2
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	1a9b      	subs	r3, r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	440b      	add	r3, r1
 8007798:	333d      	adds	r3, #61	@ 0x3d
 800779a:	4602      	mov	r2, r0
 800779c:	701a      	strb	r2, [r3, #0]
 800779e:	e127      	b.n	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80077a0:	78fa      	ldrb	r2, [r7, #3]
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	4613      	mov	r3, r2
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	1a9b      	subs	r3, r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	334d      	adds	r3, #77	@ 0x4d
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d120      	bne.n	80077f8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	334d      	adds	r3, #77	@ 0x4d
 80077c6:	2202      	movs	r2, #2
 80077c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80077ca:	78fa      	ldrb	r2, [r7, #3]
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	4613      	mov	r3, r2
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	331b      	adds	r3, #27
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	f040 8107 	bne.w	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	334c      	adds	r3, #76	@ 0x4c
 80077f2:	2202      	movs	r2, #2
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e0fb      	b.n	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80077f8:	78fa      	ldrb	r2, [r7, #3]
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	334d      	adds	r3, #77	@ 0x4d
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b04      	cmp	r3, #4
 800780c:	d13a      	bne.n	8007884 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	6879      	ldr	r1, [r7, #4]
 8007812:	4613      	mov	r3, r2
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	1a9b      	subs	r3, r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	334d      	adds	r3, #77	@ 0x4d
 800781e:	2202      	movs	r2, #2
 8007820:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	1a9b      	subs	r3, r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	334c      	adds	r3, #76	@ 0x4c
 8007832:	2202      	movs	r2, #2
 8007834:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	440b      	add	r3, r1
 8007844:	331b      	adds	r3, #27
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	f040 80d1 	bne.w	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800784e:	78fa      	ldrb	r2, [r7, #3]
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	1a9b      	subs	r3, r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	331b      	adds	r3, #27
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007862:	78fb      	ldrb	r3, [r7, #3]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4413      	add	r3, r2
 800786a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	78fa      	ldrb	r2, [r7, #3]
 8007872:	0151      	lsls	r1, r2, #5
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	440a      	add	r2, r1
 8007878:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800787c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007880:	6053      	str	r3, [r2, #4]
 8007882:	e0b5      	b.n	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	4613      	mov	r3, r2
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	1a9b      	subs	r3, r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	440b      	add	r3, r1
 8007892:	334d      	adds	r3, #77	@ 0x4d
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b05      	cmp	r3, #5
 8007898:	d114      	bne.n	80078c4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	4613      	mov	r3, r2
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	440b      	add	r3, r1
 80078a8:	334d      	adds	r3, #77	@ 0x4d
 80078aa:	2202      	movs	r2, #2
 80078ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	334c      	adds	r3, #76	@ 0x4c
 80078be:	2202      	movs	r2, #2
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e095      	b.n	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80078c4:	78fa      	ldrb	r2, [r7, #3]
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	4613      	mov	r3, r2
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	440b      	add	r3, r1
 80078d2:	334d      	adds	r3, #77	@ 0x4d
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b06      	cmp	r3, #6
 80078d8:	d114      	bne.n	8007904 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	1a9b      	subs	r3, r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	334d      	adds	r3, #77	@ 0x4d
 80078ea:	2202      	movs	r2, #2
 80078ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80078ee:	78fa      	ldrb	r2, [r7, #3]
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	4613      	mov	r3, r2
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	1a9b      	subs	r3, r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	440b      	add	r3, r1
 80078fc:	334c      	adds	r3, #76	@ 0x4c
 80078fe:	2205      	movs	r2, #5
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	e075      	b.n	80079f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007904:	78fa      	ldrb	r2, [r7, #3]
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	4613      	mov	r3, r2
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	1a9b      	subs	r3, r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	334d      	adds	r3, #77	@ 0x4d
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b07      	cmp	r3, #7
 8007918:	d00a      	beq.n	8007930 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	4613      	mov	r3, r2
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	334d      	adds	r3, #77	@ 0x4d
 800792a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800792c:	2b09      	cmp	r3, #9
 800792e:	d170      	bne.n	8007a12 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007930:	78fa      	ldrb	r2, [r7, #3]
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	4613      	mov	r3, r2
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	1a9b      	subs	r3, r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	440b      	add	r3, r1
 800793e:	334d      	adds	r3, #77	@ 0x4d
 8007940:	2202      	movs	r2, #2
 8007942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	4613      	mov	r3, r2
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	1a9b      	subs	r3, r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	440b      	add	r3, r1
 8007952:	3344      	adds	r3, #68	@ 0x44
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1c59      	adds	r1, r3, #1
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	4613      	mov	r3, r2
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4403      	add	r3, r0
 8007964:	3344      	adds	r3, #68	@ 0x44
 8007966:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	4613      	mov	r3, r2
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	1a9b      	subs	r3, r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	3344      	adds	r3, #68	@ 0x44
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b02      	cmp	r3, #2
 800797c:	d914      	bls.n	80079a8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	4613      	mov	r3, r2
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	1a9b      	subs	r3, r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	440b      	add	r3, r1
 800798c:	3344      	adds	r3, #68	@ 0x44
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	4613      	mov	r3, r2
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	1a9b      	subs	r3, r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	334c      	adds	r3, #76	@ 0x4c
 80079a2:	2204      	movs	r2, #4
 80079a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80079a6:	e022      	b.n	80079ee <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80079a8:	78fa      	ldrb	r2, [r7, #3]
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	4613      	mov	r3, r2
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	334c      	adds	r3, #76	@ 0x4c
 80079b8:	2202      	movs	r2, #2
 80079ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e8:	461a      	mov	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80079ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	1a9b      	subs	r3, r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	334c      	adds	r3, #76	@ 0x4c
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	78fb      	ldrb	r3, [r7, #3]
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f01f face 	bl	8026fa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007a0c:	e002      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007a0e:	bf00      	nop
 8007a10:	e000      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8007a12:	bf00      	nop
  }
}
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b08a      	sub	sp, #40	@ 0x28
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	0c5b      	lsrs	r3, r3, #17
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	091b      	lsrs	r3, r3, #4
 8007a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a4e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d004      	beq.n	8007a60 <HCD_RXQLVL_IRQHandler+0x46>
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b05      	cmp	r3, #5
 8007a5a:	f000 80b6 	beq.w	8007bca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007a5e:	e0b7      	b.n	8007bd0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80b3 	beq.w	8007bce <HCD_RXQLVL_IRQHandler+0x1b4>
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	332c      	adds	r3, #44	@ 0x2c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80a7 	beq.w	8007bce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4613      	mov	r3, r2
 8007a86:	011b      	lsls	r3, r3, #4
 8007a88:	1a9b      	subs	r3, r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	3338      	adds	r3, #56	@ 0x38
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	18d1      	adds	r1, r2, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	1a9b      	subs	r3, r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4403      	add	r3, r0
 8007aa4:	3334      	adds	r3, #52	@ 0x34
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4299      	cmp	r1, r3
 8007aaa:	f200 8083 	bhi.w	8007bb4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	6879      	ldr	r1, [r7, #4]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	1a9b      	subs	r3, r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	332c      	adds	r3, #44	@ 0x2c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	b292      	uxth	r2, r2
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f006 fd1b 	bl	800e504 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	1a9b      	subs	r3, r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	332c      	adds	r3, #44	@ 0x2c
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	18d1      	adds	r1, r2, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	1a9b      	subs	r3, r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4403      	add	r3, r0
 8007af2:	332c      	adds	r3, #44	@ 0x2c
 8007af4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	4613      	mov	r3, r2
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	1a9b      	subs	r3, r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	440b      	add	r3, r1
 8007b04:	3338      	adds	r3, #56	@ 0x38
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	18d1      	adds	r1, r2, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	4613      	mov	r3, r2
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4403      	add	r3, r0
 8007b1a:	3338      	adds	r3, #56	@ 0x38
 8007b1c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	0cdb      	lsrs	r3, r3, #19
 8007b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b32:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	3328      	adds	r3, #40	@ 0x28
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d13f      	bne.n	8007bce <HCD_RXQLVL_IRQHandler+0x1b4>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d03c      	beq.n	8007bce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b72:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b80:	461a      	mov	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	1a9b      	subs	r3, r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	333c      	adds	r3, #60	@ 0x3c
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f083 0301 	eor.w	r3, r3, #1
 8007b9c:	b2d8      	uxtb	r0, r3
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	1a9b      	subs	r3, r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	333c      	adds	r3, #60	@ 0x3c
 8007bae:	4602      	mov	r2, r0
 8007bb0:	701a      	strb	r2, [r3, #0]
      break;
 8007bb2:	e00c      	b.n	8007bce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	334c      	adds	r3, #76	@ 0x4c
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	701a      	strb	r2, [r3, #0]
      break;
 8007bc8:	e001      	b.n	8007bce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007bca:	bf00      	nop
 8007bcc:	e000      	b.n	8007bd0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007bce:	bf00      	nop
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	3728      	adds	r7, #40	@ 0x28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007c04:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d10b      	bne.n	8007c28 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d102      	bne.n	8007c20 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f01f f9a8 	bl	8026f70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f043 0302 	orr.w	r3, r3, #2
 8007c26:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b08      	cmp	r3, #8
 8007c30:	d132      	bne.n	8007c98 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f043 0308 	orr.w	r3, r3, #8
 8007c38:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d126      	bne.n	8007c92 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7a5b      	ldrb	r3, [r3, #9]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d113      	bne.n	8007c74 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8007c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c56:	d106      	bne.n	8007c66 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f006 fdd4 	bl	800e80c <USB_InitFSLSPClkSel>
 8007c64:	e011      	b.n	8007c8a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f006 fdcd 	bl	800e80c <USB_InitFSLSPClkSel>
 8007c72:	e00a      	b.n	8007c8a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	79db      	ldrb	r3, [r3, #7]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d106      	bne.n	8007c8a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c82:	461a      	mov	r2, r3
 8007c84:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007c88:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f01f f99e 	bl	8026fcc <HAL_HCD_PortEnabled_Callback>
 8007c90:	e002      	b.n	8007c98 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f01f f9a8 	bl	8026fe8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d103      	bne.n	8007caa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f043 0320 	orr.w	r3, r3, #32
 8007ca8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6013      	str	r3, [r2, #0]
}
 8007cb6:	bf00      	nop
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e08b      	b.n	8007dea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d106      	bne.n	8007cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7fa f8d4 	bl	8001e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2224      	movs	r2, #36	@ 0x24
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0201 	bic.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007d10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d107      	bne.n	8007d3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d36:	609a      	str	r2, [r3, #8]
 8007d38:	e006      	b.n	8007d48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007d46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d108      	bne.n	8007d62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d5e:	605a      	str	r2, [r3, #4]
 8007d60:	e007      	b.n	8007d72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6859      	ldr	r1, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007df4 <HAL_I2C_Init+0x134>)
 8007d7e:	430b      	orrs	r3, r1
 8007d80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691a      	ldr	r2, [r3, #16]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	69d9      	ldr	r1, [r3, #28]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a1a      	ldr	r2, [r3, #32]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0201 	orr.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	02008000 	.word	0x02008000

08007df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d138      	bne.n	8007e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e032      	b.n	8007e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2224      	movs	r2, #36	@ 0x24
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0201 	bic.w	r2, r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0201 	orr.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e000      	b.n	8007e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e80:	2302      	movs	r3, #2
  }
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	d139      	bne.n	8007f18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d101      	bne.n	8007eb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	e033      	b.n	8007f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2224      	movs	r2, #36	@ 0x24
 8007ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0201 	bic.w	r2, r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007ee0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e000      	b.n	8007f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f18:	2302      	movs	r3, #2
  }
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e0bf      	b.n	80080ba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fa f848 	bl	8001fe4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007f6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6999      	ldr	r1, [r3, #24]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f80:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6899      	ldr	r1, [r3, #8]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80080c4 <HAL_LTDC_Init+0x19c>)
 8007f9c:	400b      	ands	r3, r1
 8007f9e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6899      	ldr	r1, [r3, #8]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68d9      	ldr	r1, [r3, #12]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80080c4 <HAL_LTDC_Init+0x19c>)
 8007fca:	400b      	ands	r3, r1
 8007fcc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	041b      	lsls	r3, r3, #16
 8007fd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68d9      	ldr	r1, [r3, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1a      	ldr	r2, [r3, #32]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6919      	ldr	r1, [r3, #16]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	4b33      	ldr	r3, [pc, #204]	@ (80080c4 <HAL_LTDC_Init+0x19c>)
 8007ff8:	400b      	ands	r3, r1
 8007ffa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008000:	041b      	lsls	r3, r3, #16
 8008002:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6919      	ldr	r1, [r3, #16]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	431a      	orrs	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6959      	ldr	r1, [r3, #20]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	4b27      	ldr	r3, [pc, #156]	@ (80080c4 <HAL_LTDC_Init+0x19c>)
 8008026:	400b      	ands	r3, r1
 8008028:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6959      	ldr	r1, [r3, #20]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008058:	041b      	lsls	r3, r3, #16
 800805a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800806a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0206 	orr.w	r2, r2, #6
 8008096:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0201 	orr.w	r2, r2, #1
 80080a6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	f000f800 	.word	0xf000f800

080080c8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080de:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d023      	beq.n	8008132 <HAL_LTDC_IRQHandler+0x6a>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01e      	beq.n	8008132 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0204 	bic.w	r2, r2, #4
 8008102:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2204      	movs	r2, #4
 800810a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008112:	f043 0201 	orr.w	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2204      	movs	r2, #4
 8008120:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f86f 	bl	8008210 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	d023      	beq.n	8008184 <HAL_LTDC_IRQHandler+0xbc>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d01e      	beq.n	8008184 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 0202 	bic.w	r2, r2, #2
 8008154:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2202      	movs	r2, #2
 800815c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008164:	f043 0202 	orr.w	r2, r3, #2
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2204      	movs	r2, #4
 8008172:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f846 	bl	8008210 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d01b      	beq.n	80081c6 <HAL_LTDC_IRQHandler+0xfe>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d016      	beq.n	80081c6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0201 	bic.w	r2, r2, #1
 80081a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2201      	movs	r2, #1
 80081ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f82f 	bl	8008224 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f003 0308 	and.w	r3, r3, #8
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d01b      	beq.n	8008208 <HAL_LTDC_IRQHandler+0x140>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d016      	beq.n	8008208 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0208 	bic.w	r2, r2, #8
 80081e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2208      	movs	r2, #8
 80081f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f818 	bl	8008238 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008208:	bf00      	nop
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800824c:	b5b0      	push	{r4, r5, r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800825e:	2b01      	cmp	r3, #1
 8008260:	d101      	bne.n	8008266 <HAL_LTDC_ConfigLayer+0x1a>
 8008262:	2302      	movs	r3, #2
 8008264:	e02c      	b.n	80082c0 <HAL_LTDC_ConfigLayer+0x74>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2202      	movs	r2, #2
 8008272:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2134      	movs	r1, #52	@ 0x34
 800827c:	fb01 f303 	mul.w	r3, r1, r3
 8008280:	4413      	add	r3, r2
 8008282:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4614      	mov	r4, r2
 800828a:	461d      	mov	r5, r3
 800828c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800828e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f811 	bl	80082c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2201      	movs	r2, #1
 80082ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bdb0      	pop	{r4, r5, r7, pc}

080082c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b089      	sub	sp, #36	@ 0x24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	0c1b      	lsrs	r3, r3, #16
 80082e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082e4:	4413      	add	r3, r2
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	01db      	lsls	r3, r3, #7
 80082f4:	4413      	add	r3, r2
 80082f6:	3384      	adds	r3, #132	@ 0x84
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	4611      	mov	r1, r2
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	01d2      	lsls	r2, r2, #7
 8008304:	440a      	add	r2, r1
 8008306:	3284      	adds	r2, #132	@ 0x84
 8008308:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800830c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	0c1b      	lsrs	r3, r3, #16
 800831a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800831e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008320:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4619      	mov	r1, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	01db      	lsls	r3, r3, #7
 800832c:	440b      	add	r3, r1
 800832e:	3384      	adds	r3, #132	@ 0x84
 8008330:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008336:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008346:	4413      	add	r3, r2
 8008348:	041b      	lsls	r3, r3, #16
 800834a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	01db      	lsls	r3, r3, #7
 8008356:	4413      	add	r3, r2
 8008358:	3384      	adds	r3, #132	@ 0x84
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	4611      	mov	r1, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	01d2      	lsls	r2, r2, #7
 8008366:	440a      	add	r2, r1
 8008368:	3284      	adds	r2, #132	@ 0x84
 800836a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800836e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	689a      	ldr	r2, [r3, #8]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800837e:	4413      	add	r3, r2
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4619      	mov	r1, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	01db      	lsls	r3, r3, #7
 800838c:	440b      	add	r3, r1
 800838e:	3384      	adds	r3, #132	@ 0x84
 8008390:	4619      	mov	r1, r3
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4313      	orrs	r3, r2
 8008396:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	461a      	mov	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	01db      	lsls	r3, r3, #7
 80083a2:	4413      	add	r3, r2
 80083a4:	3384      	adds	r3, #132	@ 0x84
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	4611      	mov	r1, r2
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	01d2      	lsls	r2, r2, #7
 80083b2:	440a      	add	r2, r1
 80083b4:	3284      	adds	r2, #132	@ 0x84
 80083b6:	f023 0307 	bic.w	r3, r3, #7
 80083ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	01db      	lsls	r3, r3, #7
 80083c6:	4413      	add	r3, r2
 80083c8:	3384      	adds	r3, #132	@ 0x84
 80083ca:	461a      	mov	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80083d8:	021b      	lsls	r3, r3, #8
 80083da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80083e2:	041b      	lsls	r3, r3, #16
 80083e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	061b      	lsls	r3, r3, #24
 80083ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	01db      	lsls	r3, r3, #7
 80083f8:	4413      	add	r3, r2
 80083fa:	3384      	adds	r3, #132	@ 0x84
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	01db      	lsls	r3, r3, #7
 8008408:	4413      	add	r3, r2
 800840a:	3384      	adds	r3, #132	@ 0x84
 800840c:	461a      	mov	r2, r3
 800840e:	2300      	movs	r3, #0
 8008410:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008418:	461a      	mov	r2, r3
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	431a      	orrs	r2, r3
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	431a      	orrs	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4619      	mov	r1, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	01db      	lsls	r3, r3, #7
 800842c:	440b      	add	r3, r1
 800842e:	3384      	adds	r3, #132	@ 0x84
 8008430:	4619      	mov	r1, r3
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	01db      	lsls	r3, r3, #7
 8008442:	4413      	add	r3, r2
 8008444:	3384      	adds	r3, #132	@ 0x84
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	4611      	mov	r1, r2
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	01d2      	lsls	r2, r2, #7
 8008452:	440a      	add	r2, r1
 8008454:	3284      	adds	r2, #132	@ 0x84
 8008456:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800845a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	461a      	mov	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	01db      	lsls	r3, r3, #7
 8008466:	4413      	add	r3, r2
 8008468:	3384      	adds	r3, #132	@ 0x84
 800846a:	461a      	mov	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	01db      	lsls	r3, r3, #7
 800847c:	4413      	add	r3, r2
 800847e:	3384      	adds	r3, #132	@ 0x84
 8008480:	69da      	ldr	r2, [r3, #28]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4619      	mov	r1, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	01db      	lsls	r3, r3, #7
 800848c:	440b      	add	r3, r1
 800848e:	3384      	adds	r3, #132	@ 0x84
 8008490:	4619      	mov	r1, r3
 8008492:	4b58      	ldr	r3, [pc, #352]	@ (80085f4 <LTDC_SetConfig+0x32c>)
 8008494:	4013      	ands	r3, r2
 8008496:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	68f9      	ldr	r1, [r7, #12]
 80084a2:	6809      	ldr	r1, [r1, #0]
 80084a4:	4608      	mov	r0, r1
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	01c9      	lsls	r1, r1, #7
 80084aa:	4401      	add	r1, r0
 80084ac:	3184      	adds	r1, #132	@ 0x84
 80084ae:	4313      	orrs	r3, r2
 80084b0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	01db      	lsls	r3, r3, #7
 80084bc:	4413      	add	r3, r2
 80084be:	3384      	adds	r3, #132	@ 0x84
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	01db      	lsls	r3, r3, #7
 80084cc:	4413      	add	r3, r2
 80084ce:	3384      	adds	r3, #132	@ 0x84
 80084d0:	461a      	mov	r2, r3
 80084d2:	2300      	movs	r3, #0
 80084d4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	01db      	lsls	r3, r3, #7
 80084e0:	4413      	add	r3, r2
 80084e2:	3384      	adds	r3, #132	@ 0x84
 80084e4:	461a      	mov	r2, r3
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ea:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d102      	bne.n	80084fa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80084f4:	2304      	movs	r3, #4
 80084f6:	61fb      	str	r3, [r7, #28]
 80084f8:	e01b      	b.n	8008532 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d102      	bne.n	8008508 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008502:	2303      	movs	r3, #3
 8008504:	61fb      	str	r3, [r7, #28]
 8008506:	e014      	b.n	8008532 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	2b04      	cmp	r3, #4
 800850e:	d00b      	beq.n	8008528 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008514:	2b02      	cmp	r3, #2
 8008516:	d007      	beq.n	8008528 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800851c:	2b03      	cmp	r3, #3
 800851e:	d003      	beq.n	8008528 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008524:	2b07      	cmp	r3, #7
 8008526:	d102      	bne.n	800852e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008528:	2302      	movs	r3, #2
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e001      	b.n	8008532 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800852e:	2301      	movs	r3, #1
 8008530:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	01db      	lsls	r3, r3, #7
 800853c:	4413      	add	r3, r2
 800853e:	3384      	adds	r3, #132	@ 0x84
 8008540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	6812      	ldr	r2, [r2, #0]
 8008546:	4611      	mov	r1, r2
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	01d2      	lsls	r2, r2, #7
 800854c:	440a      	add	r2, r1
 800854e:	3284      	adds	r2, #132	@ 0x84
 8008550:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008554:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	fb02 f303 	mul.w	r3, r2, r3
 8008560:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6859      	ldr	r1, [r3, #4]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	1acb      	subs	r3, r1, r3
 800856c:	69f9      	ldr	r1, [r7, #28]
 800856e:	fb01 f303 	mul.w	r3, r1, r3
 8008572:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008574:	68f9      	ldr	r1, [r7, #12]
 8008576:	6809      	ldr	r1, [r1, #0]
 8008578:	4608      	mov	r0, r1
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	01c9      	lsls	r1, r1, #7
 800857e:	4401      	add	r1, r0
 8008580:	3184      	adds	r1, #132	@ 0x84
 8008582:	4313      	orrs	r3, r2
 8008584:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	01db      	lsls	r3, r3, #7
 8008590:	4413      	add	r3, r2
 8008592:	3384      	adds	r3, #132	@ 0x84
 8008594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4619      	mov	r1, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	01db      	lsls	r3, r3, #7
 80085a0:	440b      	add	r3, r1
 80085a2:	3384      	adds	r3, #132	@ 0x84
 80085a4:	4619      	mov	r1, r3
 80085a6:	4b14      	ldr	r3, [pc, #80]	@ (80085f8 <LTDC_SetConfig+0x330>)
 80085a8:	4013      	ands	r3, r2
 80085aa:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	01db      	lsls	r3, r3, #7
 80085b6:	4413      	add	r3, r2
 80085b8:	3384      	adds	r3, #132	@ 0x84
 80085ba:	461a      	mov	r2, r3
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	01db      	lsls	r3, r3, #7
 80085cc:	4413      	add	r3, r2
 80085ce:	3384      	adds	r3, #132	@ 0x84
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	4611      	mov	r1, r2
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	01d2      	lsls	r2, r2, #7
 80085dc:	440a      	add	r2, r1
 80085de:	3284      	adds	r2, #132	@ 0x84
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	6013      	str	r3, [r2, #0]
}
 80085e6:	bf00      	nop
 80085e8:	3724      	adds	r7, #36	@ 0x24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	fffff8f8 	.word	0xfffff8f8
 80085f8:	fffff800 	.word	0xfffff800

080085fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008600:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a04      	ldr	r2, [pc, #16]	@ (8008618 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800860a:	6013      	str	r3, [r2, #0]
}
 800860c:	bf00      	nop
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	40007000 	.word	0x40007000

0800861c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008626:	4b23      	ldr	r3, [pc, #140]	@ (80086b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862a:	4a22      	ldr	r2, [pc, #136]	@ (80086b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800862c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008630:	6413      	str	r3, [r2, #64]	@ 0x40
 8008632:	4b20      	ldr	r3, [pc, #128]	@ (80086b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800863e:	4b1e      	ldr	r3, [pc, #120]	@ (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1d      	ldr	r2, [pc, #116]	@ (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008648:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800864a:	f7fa fe35 	bl	80032b8 <HAL_GetTick>
 800864e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008650:	e009      	b.n	8008666 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008652:	f7fa fe31 	bl	80032b8 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008660:	d901      	bls.n	8008666 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e022      	b.n	80086ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008666:	4b14      	ldr	r3, [pc, #80]	@ (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800866e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008672:	d1ee      	bne.n	8008652 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008674:	4b10      	ldr	r3, [pc, #64]	@ (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a0f      	ldr	r2, [pc, #60]	@ (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800867a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800867e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008680:	f7fa fe1a 	bl	80032b8 <HAL_GetTick>
 8008684:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008686:	e009      	b.n	800869c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008688:	f7fa fe16 	bl	80032b8 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008696:	d901      	bls.n	800869c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	e007      	b.n	80086ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800869c:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086a8:	d1ee      	bne.n	8008688 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	40023800 	.word	0x40023800
 80086b8:	40007000 	.word	0x40007000

080086bc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80086c4:	f7fa fdf8 	bl	80032b8 <HAL_GetTick>
 80086c8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e067      	b.n	80087a4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7f9 fd43 	bl	8002174 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80086ee:	f241 3188 	movw	r1, #5000	@ 0x1388
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f85e 	bl	80087b4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	3b01      	subs	r3, #1
 8008708:	021a      	lsls	r2, r3, #8
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	2120      	movs	r1, #32
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f856 	bl	80087d0 <QSPI_WaitFlagStateUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d135      	bne.n	800879a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	4b1d      	ldr	r3, [pc, #116]	@ (80087ac <HAL_QSPI_Init+0xf0>)
 8008736:	4013      	ands	r3, r2
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	6852      	ldr	r2, [r2, #4]
 800873c:	0611      	lsls	r1, r2, #24
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68d2      	ldr	r2, [r2, #12]
 8008742:	4311      	orrs	r1, r2
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	69d2      	ldr	r2, [r2, #28]
 8008748:	4311      	orrs	r1, r2
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	6a12      	ldr	r2, [r2, #32]
 800874e:	4311      	orrs	r1, r2
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6812      	ldr	r2, [r2, #0]
 8008754:	430b      	orrs	r3, r1
 8008756:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	4b14      	ldr	r3, [pc, #80]	@ (80087b0 <HAL_QSPI_Init+0xf4>)
 8008760:	4013      	ands	r3, r2
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	6912      	ldr	r2, [r2, #16]
 8008766:	0411      	lsls	r1, r2, #16
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	6952      	ldr	r2, [r2, #20]
 800876c:	4311      	orrs	r1, r2
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6992      	ldr	r2, [r2, #24]
 8008772:	4311      	orrs	r1, r2
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	6812      	ldr	r2, [r2, #0]
 8008778:	430b      	orrs	r3, r1
 800877a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0201 	orr.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80087a2:	7afb      	ldrb	r3, [r7, #11]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	00ffff2f 	.word	0x00ffff2f
 80087b0:	ffe0f8fe 	.word	0xffe0f8fe

080087b4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	4613      	mov	r3, r2
 80087de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80087e0:	e01a      	b.n	8008818 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e8:	d016      	beq.n	8008818 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ea:	f7fa fd65 	bl	80032b8 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d302      	bcc.n	8008800 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10b      	bne.n	8008818 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2204      	movs	r2, #4
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800880c:	f043 0201 	orr.w	r2, r3, #1
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e00e      	b.n	8008836 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	4013      	ands	r3, r2
 8008822:	2b00      	cmp	r3, #0
 8008824:	bf14      	ite	ne
 8008826:	2301      	movne	r3, #1
 8008828:	2300      	moveq	r3, #0
 800882a:	b2db      	uxtb	r3, r3
 800882c:	461a      	mov	r2, r3
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	429a      	cmp	r2, r3
 8008832:	d1d6      	bne.n	80087e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008848:	2300      	movs	r3, #0
 800884a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e291      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 8087 	beq.w	8008972 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008864:	4b96      	ldr	r3, [pc, #600]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f003 030c 	and.w	r3, r3, #12
 800886c:	2b04      	cmp	r3, #4
 800886e:	d00c      	beq.n	800888a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008870:	4b93      	ldr	r3, [pc, #588]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 030c 	and.w	r3, r3, #12
 8008878:	2b08      	cmp	r3, #8
 800887a:	d112      	bne.n	80088a2 <HAL_RCC_OscConfig+0x62>
 800887c:	4b90      	ldr	r3, [pc, #576]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008888:	d10b      	bne.n	80088a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800888a:	4b8d      	ldr	r3, [pc, #564]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d06c      	beq.n	8008970 <HAL_RCC_OscConfig+0x130>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d168      	bne.n	8008970 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e26b      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088aa:	d106      	bne.n	80088ba <HAL_RCC_OscConfig+0x7a>
 80088ac:	4b84      	ldr	r3, [pc, #528]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a83      	ldr	r2, [pc, #524]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	e02e      	b.n	8008918 <HAL_RCC_OscConfig+0xd8>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10c      	bne.n	80088dc <HAL_RCC_OscConfig+0x9c>
 80088c2:	4b7f      	ldr	r3, [pc, #508]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a7e      	ldr	r2, [pc, #504]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	4b7c      	ldr	r3, [pc, #496]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a7b      	ldr	r2, [pc, #492]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	e01d      	b.n	8008918 <HAL_RCC_OscConfig+0xd8>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088e4:	d10c      	bne.n	8008900 <HAL_RCC_OscConfig+0xc0>
 80088e6:	4b76      	ldr	r3, [pc, #472]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a75      	ldr	r2, [pc, #468]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	4b73      	ldr	r3, [pc, #460]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a72      	ldr	r2, [pc, #456]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80088f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	e00b      	b.n	8008918 <HAL_RCC_OscConfig+0xd8>
 8008900:	4b6f      	ldr	r3, [pc, #444]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a6e      	ldr	r2, [pc, #440]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	4b6c      	ldr	r3, [pc, #432]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a6b      	ldr	r2, [pc, #428]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d013      	beq.n	8008948 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008920:	f7fa fcca 	bl	80032b8 <HAL_GetTick>
 8008924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008926:	e008      	b.n	800893a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008928:	f7fa fcc6 	bl	80032b8 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b64      	cmp	r3, #100	@ 0x64
 8008934:	d901      	bls.n	800893a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e21f      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800893a:	4b61      	ldr	r3, [pc, #388]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0f0      	beq.n	8008928 <HAL_RCC_OscConfig+0xe8>
 8008946:	e014      	b.n	8008972 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008948:	f7fa fcb6 	bl	80032b8 <HAL_GetTick>
 800894c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800894e:	e008      	b.n	8008962 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008950:	f7fa fcb2 	bl	80032b8 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b64      	cmp	r3, #100	@ 0x64
 800895c:	d901      	bls.n	8008962 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e20b      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008962:	4b57      	ldr	r3, [pc, #348]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1f0      	bne.n	8008950 <HAL_RCC_OscConfig+0x110>
 800896e:	e000      	b.n	8008972 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d069      	beq.n	8008a52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800897e:	4b50      	ldr	r3, [pc, #320]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 030c 	and.w	r3, r3, #12
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00b      	beq.n	80089a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800898a:	4b4d      	ldr	r3, [pc, #308]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f003 030c 	and.w	r3, r3, #12
 8008992:	2b08      	cmp	r3, #8
 8008994:	d11c      	bne.n	80089d0 <HAL_RCC_OscConfig+0x190>
 8008996:	4b4a      	ldr	r3, [pc, #296]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d116      	bne.n	80089d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089a2:	4b47      	ldr	r3, [pc, #284]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d005      	beq.n	80089ba <HAL_RCC_OscConfig+0x17a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d001      	beq.n	80089ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e1df      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ba:	4b41      	ldr	r3, [pc, #260]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	493d      	ldr	r1, [pc, #244]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089ce:	e040      	b.n	8008a52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d023      	beq.n	8008a20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089d8:	4b39      	ldr	r3, [pc, #228]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a38      	ldr	r2, [pc, #224]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e4:	f7fa fc68 	bl	80032b8 <HAL_GetTick>
 80089e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089ea:	e008      	b.n	80089fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089ec:	f7fa fc64 	bl	80032b8 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d901      	bls.n	80089fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e1bd      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089fe:	4b30      	ldr	r3, [pc, #192]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0f0      	beq.n	80089ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	4929      	ldr	r1, [pc, #164]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	600b      	str	r3, [r1, #0]
 8008a1e:	e018      	b.n	8008a52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a20:	4b27      	ldr	r3, [pc, #156]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a26      	ldr	r2, [pc, #152]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a26:	f023 0301 	bic.w	r3, r3, #1
 8008a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2c:	f7fa fc44 	bl	80032b8 <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a34:	f7fa fc40 	bl	80032b8 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e199      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a46:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1f0      	bne.n	8008a34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d038      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d019      	beq.n	8008a9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a66:	4b16      	ldr	r3, [pc, #88]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a6a:	4a15      	ldr	r2, [pc, #84]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a72:	f7fa fc21 	bl	80032b8 <HAL_GetTick>
 8008a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a78:	e008      	b.n	8008a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a7a:	f7fa fc1d 	bl	80032b8 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d901      	bls.n	8008a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e176      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0f0      	beq.n	8008a7a <HAL_RCC_OscConfig+0x23a>
 8008a98:	e01a      	b.n	8008ad0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a9a:	4b09      	ldr	r3, [pc, #36]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a9e:	4a08      	ldr	r2, [pc, #32]	@ (8008ac0 <HAL_RCC_OscConfig+0x280>)
 8008aa0:	f023 0301 	bic.w	r3, r3, #1
 8008aa4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa6:	f7fa fc07 	bl	80032b8 <HAL_GetTick>
 8008aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008aac:	e00a      	b.n	8008ac4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aae:	f7fa fc03 	bl	80032b8 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d903      	bls.n	8008ac4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e15c      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
 8008ac0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ac4:	4b91      	ldr	r3, [pc, #580]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac8:	f003 0302 	and.w	r3, r3, #2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1ee      	bne.n	8008aae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80a4 	beq.w	8008c26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ade:	4b8b      	ldr	r3, [pc, #556]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10d      	bne.n	8008b06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008aea:	4b88      	ldr	r3, [pc, #544]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aee:	4a87      	ldr	r2, [pc, #540]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8008af6:	4b85      	ldr	r3, [pc, #532]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008afe:	60bb      	str	r3, [r7, #8]
 8008b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b02:	2301      	movs	r3, #1
 8008b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b06:	4b82      	ldr	r3, [pc, #520]	@ (8008d10 <HAL_RCC_OscConfig+0x4d0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d118      	bne.n	8008b44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008b12:	4b7f      	ldr	r3, [pc, #508]	@ (8008d10 <HAL_RCC_OscConfig+0x4d0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a7e      	ldr	r2, [pc, #504]	@ (8008d10 <HAL_RCC_OscConfig+0x4d0>)
 8008b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b1e:	f7fa fbcb 	bl	80032b8 <HAL_GetTick>
 8008b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b24:	e008      	b.n	8008b38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b26:	f7fa fbc7 	bl	80032b8 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	2b64      	cmp	r3, #100	@ 0x64
 8008b32:	d901      	bls.n	8008b38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e120      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b38:	4b75      	ldr	r3, [pc, #468]	@ (8008d10 <HAL_RCC_OscConfig+0x4d0>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0f0      	beq.n	8008b26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d106      	bne.n	8008b5a <HAL_RCC_OscConfig+0x31a>
 8008b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b50:	4a6e      	ldr	r2, [pc, #440]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b58:	e02d      	b.n	8008bb6 <HAL_RCC_OscConfig+0x376>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10c      	bne.n	8008b7c <HAL_RCC_OscConfig+0x33c>
 8008b62:	4b6a      	ldr	r3, [pc, #424]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b66:	4a69      	ldr	r2, [pc, #420]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b68:	f023 0301 	bic.w	r3, r3, #1
 8008b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b6e:	4b67      	ldr	r3, [pc, #412]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b72:	4a66      	ldr	r2, [pc, #408]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b74:	f023 0304 	bic.w	r3, r3, #4
 8008b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b7a:	e01c      	b.n	8008bb6 <HAL_RCC_OscConfig+0x376>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	2b05      	cmp	r3, #5
 8008b82:	d10c      	bne.n	8008b9e <HAL_RCC_OscConfig+0x35e>
 8008b84:	4b61      	ldr	r3, [pc, #388]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b88:	4a60      	ldr	r2, [pc, #384]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b8a:	f043 0304 	orr.w	r3, r3, #4
 8008b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b90:	4b5e      	ldr	r3, [pc, #376]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b94:	4a5d      	ldr	r2, [pc, #372]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b9c:	e00b      	b.n	8008bb6 <HAL_RCC_OscConfig+0x376>
 8008b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ba2:	4a5a      	ldr	r2, [pc, #360]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008ba4:	f023 0301 	bic.w	r3, r3, #1
 8008ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008baa:	4b58      	ldr	r3, [pc, #352]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bae:	4a57      	ldr	r2, [pc, #348]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008bb0:	f023 0304 	bic.w	r3, r3, #4
 8008bb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d015      	beq.n	8008bea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bbe:	f7fa fb7b 	bl	80032b8 <HAL_GetTick>
 8008bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bc4:	e00a      	b.n	8008bdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc6:	f7fa fb77 	bl	80032b8 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e0ce      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0ee      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x386>
 8008be8:	e014      	b.n	8008c14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bea:	f7fa fb65 	bl	80032b8 <HAL_GetTick>
 8008bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bf0:	e00a      	b.n	8008c08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bf2:	f7fa fb61 	bl	80032b8 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e0b8      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c08:	4b40      	ldr	r3, [pc, #256]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ee      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d105      	bne.n	8008c26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1e:	4a3b      	ldr	r2, [pc, #236]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c24:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 80a4 	beq.w	8008d78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c30:	4b36      	ldr	r3, [pc, #216]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f003 030c 	and.w	r3, r3, #12
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d06b      	beq.n	8008d14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d149      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c44:	4b31      	ldr	r3, [pc, #196]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a30      	ldr	r2, [pc, #192]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c50:	f7fa fb32 	bl	80032b8 <HAL_GetTick>
 8008c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c56:	e008      	b.n	8008c6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c58:	f7fa fb2e 	bl	80032b8 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d901      	bls.n	8008c6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e087      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c6a:	4b28      	ldr	r3, [pc, #160]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1f0      	bne.n	8008c58 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69da      	ldr	r2, [r3, #28]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c84:	019b      	lsls	r3, r3, #6
 8008c86:	431a      	orrs	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8c:	085b      	lsrs	r3, r3, #1
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	041b      	lsls	r3, r3, #16
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c98:	061b      	lsls	r3, r3, #24
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008c9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ca2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ca4:	4b19      	ldr	r3, [pc, #100]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a18      	ldr	r2, [pc, #96]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb0:	f7fa fb02 	bl	80032b8 <HAL_GetTick>
 8008cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cb6:	e008      	b.n	8008cca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cb8:	f7fa fafe 	bl	80032b8 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e057      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cca:	4b10      	ldr	r3, [pc, #64]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0f0      	beq.n	8008cb8 <HAL_RCC_OscConfig+0x478>
 8008cd6:	e04f      	b.n	8008d78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce4:	f7fa fae8 	bl	80032b8 <HAL_GetTick>
 8008ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cea:	e008      	b.n	8008cfe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cec:	f7fa fae4 	bl	80032b8 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e03d      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cfe:	4b03      	ldr	r3, [pc, #12]	@ (8008d0c <HAL_RCC_OscConfig+0x4cc>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1f0      	bne.n	8008cec <HAL_RCC_OscConfig+0x4ac>
 8008d0a:	e035      	b.n	8008d78 <HAL_RCC_OscConfig+0x538>
 8008d0c:	40023800 	.word	0x40023800
 8008d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008d14:	4b1b      	ldr	r3, [pc, #108]	@ (8008d84 <HAL_RCC_OscConfig+0x544>)
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d028      	beq.n	8008d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d121      	bne.n	8008d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d11a      	bne.n	8008d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008d44:	4013      	ands	r3, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d111      	bne.n	8008d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5a:	085b      	lsrs	r3, r3, #1
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d107      	bne.n	8008d74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d001      	beq.n	8008d78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e000      	b.n	8008d7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40023800 	.word	0x40023800

08008d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e0d0      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008da0:	4b6a      	ldr	r3, [pc, #424]	@ (8008f4c <HAL_RCC_ClockConfig+0x1c4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 030f 	and.w	r3, r3, #15
 8008da8:	683a      	ldr	r2, [r7, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d910      	bls.n	8008dd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dae:	4b67      	ldr	r3, [pc, #412]	@ (8008f4c <HAL_RCC_ClockConfig+0x1c4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f023 020f 	bic.w	r2, r3, #15
 8008db6:	4965      	ldr	r1, [pc, #404]	@ (8008f4c <HAL_RCC_ClockConfig+0x1c4>)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dbe:	4b63      	ldr	r3, [pc, #396]	@ (8008f4c <HAL_RCC_ClockConfig+0x1c4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d001      	beq.n	8008dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e0b8      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d020      	beq.n	8008e1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008de8:	4b59      	ldr	r3, [pc, #356]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	4a58      	ldr	r2, [pc, #352]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008dee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008df2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0308 	and.w	r3, r3, #8
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e00:	4b53      	ldr	r3, [pc, #332]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	4a52      	ldr	r2, [pc, #328]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008e0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e0c:	4b50      	ldr	r3, [pc, #320]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	494d      	ldr	r1, [pc, #308]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d040      	beq.n	8008eac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d107      	bne.n	8008e42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e32:	4b47      	ldr	r3, [pc, #284]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d115      	bne.n	8008e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e07f      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d107      	bne.n	8008e5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e4a:	4b41      	ldr	r3, [pc, #260]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d109      	bne.n	8008e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e073      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e06b      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e6a:	4b39      	ldr	r3, [pc, #228]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f023 0203 	bic.w	r2, r3, #3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4936      	ldr	r1, [pc, #216]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e7c:	f7fa fa1c 	bl	80032b8 <HAL_GetTick>
 8008e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e82:	e00a      	b.n	8008e9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e84:	f7fa fa18 	bl	80032b8 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e053      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 020c 	and.w	r2, r3, #12
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d1eb      	bne.n	8008e84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008eac:	4b27      	ldr	r3, [pc, #156]	@ (8008f4c <HAL_RCC_ClockConfig+0x1c4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 030f 	and.w	r3, r3, #15
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d210      	bcs.n	8008edc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eba:	4b24      	ldr	r3, [pc, #144]	@ (8008f4c <HAL_RCC_ClockConfig+0x1c4>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f023 020f 	bic.w	r2, r3, #15
 8008ec2:	4922      	ldr	r1, [pc, #136]	@ (8008f4c <HAL_RCC_ClockConfig+0x1c4>)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eca:	4b20      	ldr	r3, [pc, #128]	@ (8008f4c <HAL_RCC_ClockConfig+0x1c4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d001      	beq.n	8008edc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e032      	b.n	8008f42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d008      	beq.n	8008efa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ee8:	4b19      	ldr	r3, [pc, #100]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	4916      	ldr	r1, [pc, #88]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0308 	and.w	r3, r3, #8
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d009      	beq.n	8008f1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f06:	4b12      	ldr	r3, [pc, #72]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	490e      	ldr	r1, [pc, #56]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f1a:	f000 f821 	bl	8008f60 <HAL_RCC_GetSysClockFreq>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b0b      	ldr	r3, [pc, #44]	@ (8008f50 <HAL_RCC_ClockConfig+0x1c8>)
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	091b      	lsrs	r3, r3, #4
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	490a      	ldr	r1, [pc, #40]	@ (8008f54 <HAL_RCC_ClockConfig+0x1cc>)
 8008f2c:	5ccb      	ldrb	r3, [r1, r3]
 8008f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f32:	4a09      	ldr	r2, [pc, #36]	@ (8008f58 <HAL_RCC_ClockConfig+0x1d0>)
 8008f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008f36:	4b09      	ldr	r3, [pc, #36]	@ (8008f5c <HAL_RCC_ClockConfig+0x1d4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7f9 fe28 	bl	8002b90 <HAL_InitTick>

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	40023c00 	.word	0x40023c00
 8008f50:	40023800 	.word	0x40023800
 8008f54:	0802c3e8 	.word	0x0802c3e8
 8008f58:	20000000 	.word	0x20000000
 8008f5c:	20000004 	.word	0x20000004

08008f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f64:	b090      	sub	sp, #64	@ 0x40
 8008f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f70:	2300      	movs	r3, #0
 8008f72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f78:	4b59      	ldr	r3, [pc, #356]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f003 030c 	and.w	r3, r3, #12
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d00d      	beq.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	f200 80a1 	bhi.w	80090cc <HAL_RCC_GetSysClockFreq+0x16c>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <HAL_RCC_GetSysClockFreq+0x34>
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d003      	beq.n	8008f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8008f92:	e09b      	b.n	80090cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f94:	4b53      	ldr	r3, [pc, #332]	@ (80090e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008f96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f98:	e09b      	b.n	80090d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f9a:	4b53      	ldr	r3, [pc, #332]	@ (80090e8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f9e:	e098      	b.n	80090d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fa8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008faa:	4b4d      	ldr	r3, [pc, #308]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d028      	beq.n	8009008 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	099b      	lsrs	r3, r3, #6
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	623b      	str	r3, [r7, #32]
 8008fc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008fc8:	2100      	movs	r1, #0
 8008fca:	4b47      	ldr	r3, [pc, #284]	@ (80090e8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008fcc:	fb03 f201 	mul.w	r2, r3, r1
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	fb00 f303 	mul.w	r3, r0, r3
 8008fd6:	4413      	add	r3, r2
 8008fd8:	4a43      	ldr	r2, [pc, #268]	@ (80090e8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008fda:	fba0 1202 	umull	r1, r2, r0, r2
 8008fde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fe0:	460a      	mov	r2, r1
 8008fe2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008fe4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fe6:	4413      	add	r3, r2
 8008fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fec:	2200      	movs	r2, #0
 8008fee:	61bb      	str	r3, [r7, #24]
 8008ff0:	61fa      	str	r2, [r7, #28]
 8008ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ff6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008ffa:	f7f7 f959 	bl	80002b0 <__aeabi_uldivmod>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4613      	mov	r3, r2
 8009004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009006:	e053      	b.n	80090b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009008:	4b35      	ldr	r3, [pc, #212]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	099b      	lsrs	r3, r3, #6
 800900e:	2200      	movs	r2, #0
 8009010:	613b      	str	r3, [r7, #16]
 8009012:	617a      	str	r2, [r7, #20]
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800901a:	f04f 0b00 	mov.w	fp, #0
 800901e:	4652      	mov	r2, sl
 8009020:	465b      	mov	r3, fp
 8009022:	f04f 0000 	mov.w	r0, #0
 8009026:	f04f 0100 	mov.w	r1, #0
 800902a:	0159      	lsls	r1, r3, #5
 800902c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009030:	0150      	lsls	r0, r2, #5
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	ebb2 080a 	subs.w	r8, r2, sl
 800903a:	eb63 090b 	sbc.w	r9, r3, fp
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	f04f 0300 	mov.w	r3, #0
 8009046:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800904a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800904e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009052:	ebb2 0408 	subs.w	r4, r2, r8
 8009056:	eb63 0509 	sbc.w	r5, r3, r9
 800905a:	f04f 0200 	mov.w	r2, #0
 800905e:	f04f 0300 	mov.w	r3, #0
 8009062:	00eb      	lsls	r3, r5, #3
 8009064:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009068:	00e2      	lsls	r2, r4, #3
 800906a:	4614      	mov	r4, r2
 800906c:	461d      	mov	r5, r3
 800906e:	eb14 030a 	adds.w	r3, r4, sl
 8009072:	603b      	str	r3, [r7, #0]
 8009074:	eb45 030b 	adc.w	r3, r5, fp
 8009078:	607b      	str	r3, [r7, #4]
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	f04f 0300 	mov.w	r3, #0
 8009082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009086:	4629      	mov	r1, r5
 8009088:	028b      	lsls	r3, r1, #10
 800908a:	4621      	mov	r1, r4
 800908c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009090:	4621      	mov	r1, r4
 8009092:	028a      	lsls	r2, r1, #10
 8009094:	4610      	mov	r0, r2
 8009096:	4619      	mov	r1, r3
 8009098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909a:	2200      	movs	r2, #0
 800909c:	60bb      	str	r3, [r7, #8]
 800909e:	60fa      	str	r2, [r7, #12]
 80090a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090a4:	f7f7 f904 	bl	80002b0 <__aeabi_uldivmod>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4613      	mov	r3, r2
 80090ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80090b0:	4b0b      	ldr	r3, [pc, #44]	@ (80090e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	f003 0303 	and.w	r3, r3, #3
 80090ba:	3301      	adds	r3, #1
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80090c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80090ca:	e002      	b.n	80090d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80090cc:	4b05      	ldr	r3, [pc, #20]	@ (80090e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80090ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80090d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3740      	adds	r7, #64	@ 0x40
 80090d8:	46bd      	mov	sp, r7
 80090da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090de:	bf00      	nop
 80090e0:	40023800 	.word	0x40023800
 80090e4:	00f42400 	.word	0x00f42400
 80090e8:	017d7840 	.word	0x017d7840

080090ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090f0:	4b03      	ldr	r3, [pc, #12]	@ (8009100 <HAL_RCC_GetHCLKFreq+0x14>)
 80090f2:	681b      	ldr	r3, [r3, #0]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20000000 	.word	0x20000000

08009104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009108:	f7ff fff0 	bl	80090ec <HAL_RCC_GetHCLKFreq>
 800910c:	4602      	mov	r2, r0
 800910e:	4b05      	ldr	r3, [pc, #20]	@ (8009124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	0a9b      	lsrs	r3, r3, #10
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	4903      	ldr	r1, [pc, #12]	@ (8009128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800911a:	5ccb      	ldrb	r3, [r1, r3]
 800911c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009120:	4618      	mov	r0, r3
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40023800 	.word	0x40023800
 8009128:	0802c3f8 	.word	0x0802c3f8

0800912c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009130:	f7ff ffdc 	bl	80090ec <HAL_RCC_GetHCLKFreq>
 8009134:	4602      	mov	r2, r0
 8009136:	4b05      	ldr	r3, [pc, #20]	@ (800914c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	0b5b      	lsrs	r3, r3, #13
 800913c:	f003 0307 	and.w	r3, r3, #7
 8009140:	4903      	ldr	r1, [pc, #12]	@ (8009150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009142:	5ccb      	ldrb	r3, [r1, r3]
 8009144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009148:	4618      	mov	r0, r3
 800914a:	bd80      	pop	{r7, pc}
 800914c:	40023800 	.word	0x40023800
 8009150:	0802c3f8 	.word	0x0802c3f8

08009154 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	220f      	movs	r2, #15
 8009162:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009164:	4b12      	ldr	r3, [pc, #72]	@ (80091b0 <HAL_RCC_GetClockConfig+0x5c>)
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f003 0203 	and.w	r2, r3, #3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009170:	4b0f      	ldr	r3, [pc, #60]	@ (80091b0 <HAL_RCC_GetClockConfig+0x5c>)
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800917c:	4b0c      	ldr	r3, [pc, #48]	@ (80091b0 <HAL_RCC_GetClockConfig+0x5c>)
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009188:	4b09      	ldr	r3, [pc, #36]	@ (80091b0 <HAL_RCC_GetClockConfig+0x5c>)
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	08db      	lsrs	r3, r3, #3
 800918e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009196:	4b07      	ldr	r3, [pc, #28]	@ (80091b4 <HAL_RCC_GetClockConfig+0x60>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 020f 	and.w	r2, r3, #15
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	601a      	str	r2, [r3, #0]
}
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40023800 	.word	0x40023800
 80091b4:	40023c00 	.word	0x40023c00

080091b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d012      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80091e0:	4b69      	ldr	r3, [pc, #420]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	4a68      	ldr	r2, [pc, #416]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80091ea:	6093      	str	r3, [r2, #8]
 80091ec:	4b66      	ldr	r3, [pc, #408]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091f4:	4964      	ldr	r1, [pc, #400]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009202:	2301      	movs	r3, #1
 8009204:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d017      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009212:	4b5d      	ldr	r3, [pc, #372]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009218:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009220:	4959      	ldr	r1, [pc, #356]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009222:	4313      	orrs	r3, r2
 8009224:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800922c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009230:	d101      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009232:	2301      	movs	r3, #1
 8009234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800923e:	2301      	movs	r3, #1
 8009240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d017      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800924e:	4b4e      	ldr	r3, [pc, #312]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009254:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925c:	494a      	ldr	r1, [pc, #296]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800925e:	4313      	orrs	r3, r2
 8009260:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800926c:	d101      	bne.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800926e:	2301      	movs	r3, #1
 8009270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800927a:	2301      	movs	r3, #1
 800927c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800928a:	2301      	movs	r3, #1
 800928c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 808b 	beq.w	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800929c:	4b3a      	ldr	r3, [pc, #232]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a0:	4a39      	ldr	r2, [pc, #228]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80092a8:	4b37      	ldr	r3, [pc, #220]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b0:	60bb      	str	r3, [r7, #8]
 80092b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092b4:	4b35      	ldr	r3, [pc, #212]	@ (800938c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a34      	ldr	r2, [pc, #208]	@ (800938c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092c0:	f7f9 fffa 	bl	80032b8 <HAL_GetTick>
 80092c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092c6:	e008      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092c8:	f7f9 fff6 	bl	80032b8 <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	2b64      	cmp	r3, #100	@ 0x64
 80092d4:	d901      	bls.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e357      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092da:	4b2c      	ldr	r3, [pc, #176]	@ (800938c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0f0      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80092e6:	4b28      	ldr	r3, [pc, #160]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d035      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	429a      	cmp	r2, r3
 8009302:	d02e      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009304:	4b20      	ldr	r3, [pc, #128]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800930c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800930e:	4b1e      	ldr	r3, [pc, #120]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009312:	4a1d      	ldr	r2, [pc, #116]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009318:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800931a:	4b1b      	ldr	r3, [pc, #108]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800931c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800931e:	4a1a      	ldr	r2, [pc, #104]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009324:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009326:	4a18      	ldr	r2, [pc, #96]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800932c:	4b16      	ldr	r3, [pc, #88]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800932e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b01      	cmp	r3, #1
 8009336:	d114      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009338:	f7f9 ffbe 	bl	80032b8 <HAL_GetTick>
 800933c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800933e:	e00a      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009340:	f7f9 ffba 	bl	80032b8 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800934e:	4293      	cmp	r3, r2
 8009350:	d901      	bls.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e319      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009356:	4b0c      	ldr	r3, [pc, #48]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0ee      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800936a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800936e:	d111      	bne.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009370:	4b05      	ldr	r3, [pc, #20]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800937c:	4b04      	ldr	r3, [pc, #16]	@ (8009390 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800937e:	400b      	ands	r3, r1
 8009380:	4901      	ldr	r1, [pc, #4]	@ (8009388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009382:	4313      	orrs	r3, r2
 8009384:	608b      	str	r3, [r1, #8]
 8009386:	e00b      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009388:	40023800 	.word	0x40023800
 800938c:	40007000 	.word	0x40007000
 8009390:	0ffffcff 	.word	0x0ffffcff
 8009394:	4baa      	ldr	r3, [pc, #680]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	4aa9      	ldr	r2, [pc, #676]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800939a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800939e:	6093      	str	r3, [r2, #8]
 80093a0:	4ba7      	ldr	r3, [pc, #668]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ac:	49a4      	ldr	r1, [pc, #656]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0310 	and.w	r3, r3, #16
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d010      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093be:	4ba0      	ldr	r3, [pc, #640]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093c4:	4a9e      	ldr	r2, [pc, #632]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80093ce:	4b9c      	ldr	r3, [pc, #624]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d8:	4999      	ldr	r1, [pc, #612]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00a      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80093ec:	4b94      	ldr	r3, [pc, #592]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093fa:	4991      	ldr	r1, [pc, #580]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00a      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800940e:	4b8c      	ldr	r3, [pc, #560]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009414:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800941c:	4988      	ldr	r1, [pc, #544]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800941e:	4313      	orrs	r3, r2
 8009420:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00a      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009430:	4b83      	ldr	r3, [pc, #524]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009436:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800943e:	4980      	ldr	r1, [pc, #512]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009440:	4313      	orrs	r3, r2
 8009442:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009452:	4b7b      	ldr	r3, [pc, #492]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009458:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009460:	4977      	ldr	r1, [pc, #476]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009462:	4313      	orrs	r3, r2
 8009464:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00a      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009474:	4b72      	ldr	r3, [pc, #456]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800947a:	f023 0203 	bic.w	r2, r3, #3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009482:	496f      	ldr	r1, [pc, #444]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009484:	4313      	orrs	r3, r2
 8009486:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009496:	4b6a      	ldr	r3, [pc, #424]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800949c:	f023 020c 	bic.w	r2, r3, #12
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094a4:	4966      	ldr	r1, [pc, #408]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00a      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80094b8:	4b61      	ldr	r3, [pc, #388]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094c6:	495e      	ldr	r1, [pc, #376]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80094da:	4b59      	ldr	r3, [pc, #356]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e8:	4955      	ldr	r1, [pc, #340]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80094fc:	4b50      	ldr	r3, [pc, #320]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009502:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800950a:	494d      	ldr	r1, [pc, #308]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800950c:	4313      	orrs	r3, r2
 800950e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800951e:	4b48      	ldr	r3, [pc, #288]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009524:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952c:	4944      	ldr	r1, [pc, #272]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800952e:	4313      	orrs	r3, r2
 8009530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00a      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009540:	4b3f      	ldr	r3, [pc, #252]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009546:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800954e:	493c      	ldr	r1, [pc, #240]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009550:	4313      	orrs	r3, r2
 8009552:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00a      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009562:	4b37      	ldr	r3, [pc, #220]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009568:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009570:	4933      	ldr	r1, [pc, #204]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009572:	4313      	orrs	r3, r2
 8009574:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00a      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009584:	4b2e      	ldr	r3, [pc, #184]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800958a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009592:	492b      	ldr	r1, [pc, #172]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009594:	4313      	orrs	r3, r2
 8009596:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d011      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80095a6:	4b26      	ldr	r3, [pc, #152]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095b4:	4922      	ldr	r1, [pc, #136]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c4:	d101      	bne.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80095c6:	2301      	movs	r3, #1
 80095c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0308 	and.w	r3, r3, #8
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80095d6:	2301      	movs	r3, #1
 80095d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095e6:	4b16      	ldr	r3, [pc, #88]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095f4:	4912      	ldr	r1, [pc, #72]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009608:	4b0d      	ldr	r3, [pc, #52]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800960a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009618:	4909      	ldr	r1, [pc, #36]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800961a:	4313      	orrs	r3, r2
 800961c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d006      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 80d9 	beq.w	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009634:	4b02      	ldr	r3, [pc, #8]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a01      	ldr	r2, [pc, #4]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800963a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800963e:	e001      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009640:	40023800 	.word	0x40023800
 8009644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009646:	f7f9 fe37 	bl	80032b8 <HAL_GetTick>
 800964a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800964c:	e008      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800964e:	f7f9 fe33 	bl	80032b8 <HAL_GetTick>
 8009652:	4602      	mov	r2, r0
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	2b64      	cmp	r3, #100	@ 0x64
 800965a:	d901      	bls.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	e194      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009660:	4b6c      	ldr	r3, [pc, #432]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1f0      	bne.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	d021      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800967c:	2b00      	cmp	r3, #0
 800967e:	d11d      	bne.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009680:	4b64      	ldr	r3, [pc, #400]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009686:	0c1b      	lsrs	r3, r3, #16
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800968e:	4b61      	ldr	r3, [pc, #388]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009694:	0e1b      	lsrs	r3, r3, #24
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	019a      	lsls	r2, r3, #6
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	041b      	lsls	r3, r3, #16
 80096a6:	431a      	orrs	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	061b      	lsls	r3, r3, #24
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	071b      	lsls	r3, r3, #28
 80096b4:	4957      	ldr	r1, [pc, #348]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d004      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096d0:	d00a      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d02e      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096e6:	d129      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80096e8:	4b4a      	ldr	r3, [pc, #296]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096ee:	0c1b      	lsrs	r3, r3, #16
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80096f6:	4b47      	ldr	r3, [pc, #284]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096fc:	0f1b      	lsrs	r3, r3, #28
 80096fe:	f003 0307 	and.w	r3, r3, #7
 8009702:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	019a      	lsls	r2, r3, #6
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	041b      	lsls	r3, r3, #16
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	061b      	lsls	r3, r3, #24
 8009716:	431a      	orrs	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	071b      	lsls	r3, r3, #28
 800971c:	493d      	ldr	r1, [pc, #244]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800971e:	4313      	orrs	r3, r2
 8009720:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009724:	4b3b      	ldr	r3, [pc, #236]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800972a:	f023 021f 	bic.w	r2, r3, #31
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009732:	3b01      	subs	r3, #1
 8009734:	4937      	ldr	r1, [pc, #220]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009736:	4313      	orrs	r3, r2
 8009738:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01d      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009748:	4b32      	ldr	r3, [pc, #200]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800974a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800974e:	0e1b      	lsrs	r3, r3, #24
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009756:	4b2f      	ldr	r3, [pc, #188]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800975c:	0f1b      	lsrs	r3, r3, #28
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	019a      	lsls	r2, r3, #6
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	041b      	lsls	r3, r3, #16
 8009770:	431a      	orrs	r2, r3
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	061b      	lsls	r3, r3, #24
 8009776:	431a      	orrs	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	071b      	lsls	r3, r3, #28
 800977c:	4925      	ldr	r1, [pc, #148]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800977e:	4313      	orrs	r3, r2
 8009780:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d011      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	019a      	lsls	r2, r3, #6
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	041b      	lsls	r3, r3, #16
 800979c:	431a      	orrs	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	061b      	lsls	r3, r3, #24
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	071b      	lsls	r3, r3, #28
 80097ac:	4919      	ldr	r1, [pc, #100]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80097b4:	4b17      	ldr	r3, [pc, #92]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a16      	ldr	r2, [pc, #88]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80097be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097c0:	f7f9 fd7a 	bl	80032b8 <HAL_GetTick>
 80097c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097c6:	e008      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80097c8:	f7f9 fd76 	bl	80032b8 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b64      	cmp	r3, #100	@ 0x64
 80097d4:	d901      	bls.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e0d7      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097da:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0f0      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	f040 80cd 	bne.w	8009988 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80097ee:	4b09      	ldr	r3, [pc, #36]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a08      	ldr	r2, [pc, #32]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097fa:	f7f9 fd5d 	bl	80032b8 <HAL_GetTick>
 80097fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009800:	e00a      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009802:	f7f9 fd59 	bl	80032b8 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b64      	cmp	r3, #100	@ 0x64
 800980e:	d903      	bls.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e0ba      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009814:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009818:	4b5e      	ldr	r3, [pc, #376]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009824:	d0ed      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d009      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009842:	2b00      	cmp	r3, #0
 8009844:	d02e      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984a:	2b00      	cmp	r3, #0
 800984c:	d12a      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800984e:	4b51      	ldr	r3, [pc, #324]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009854:	0c1b      	lsrs	r3, r3, #16
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800985c:	4b4d      	ldr	r3, [pc, #308]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800985e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009862:	0f1b      	lsrs	r3, r3, #28
 8009864:	f003 0307 	and.w	r3, r3, #7
 8009868:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	019a      	lsls	r2, r3, #6
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	041b      	lsls	r3, r3, #16
 8009874:	431a      	orrs	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	061b      	lsls	r3, r3, #24
 800987c:	431a      	orrs	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	071b      	lsls	r3, r3, #28
 8009882:	4944      	ldr	r1, [pc, #272]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009884:	4313      	orrs	r3, r2
 8009886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800988a:	4b42      	ldr	r3, [pc, #264]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800988c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009890:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009898:	3b01      	subs	r3, #1
 800989a:	021b      	lsls	r3, r3, #8
 800989c:	493d      	ldr	r1, [pc, #244]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800989e:	4313      	orrs	r3, r2
 80098a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d022      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098b8:	d11d      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80098ba:	4b36      	ldr	r3, [pc, #216]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098c0:	0e1b      	lsrs	r3, r3, #24
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80098c8:	4b32      	ldr	r3, [pc, #200]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ce:	0f1b      	lsrs	r3, r3, #28
 80098d0:	f003 0307 	and.w	r3, r3, #7
 80098d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	019a      	lsls	r2, r3, #6
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	041b      	lsls	r3, r3, #16
 80098e2:	431a      	orrs	r2, r3
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	061b      	lsls	r3, r3, #24
 80098e8:	431a      	orrs	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	071b      	lsls	r3, r3, #28
 80098ee:	4929      	ldr	r1, [pc, #164]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0308 	and.w	r3, r3, #8
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d028      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009902:	4b24      	ldr	r3, [pc, #144]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009908:	0e1b      	lsrs	r3, r3, #24
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009910:	4b20      	ldr	r3, [pc, #128]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009916:	0c1b      	lsrs	r3, r3, #16
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	019a      	lsls	r2, r3, #6
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	041b      	lsls	r3, r3, #16
 8009928:	431a      	orrs	r2, r3
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	061b      	lsls	r3, r3, #24
 800992e:	431a      	orrs	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	071b      	lsls	r3, r3, #28
 8009936:	4917      	ldr	r1, [pc, #92]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009938:	4313      	orrs	r3, r2
 800993a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800993e:	4b15      	ldr	r3, [pc, #84]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009944:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994c:	4911      	ldr	r1, [pc, #68]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800994e:	4313      	orrs	r3, r2
 8009950:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009954:	4b0f      	ldr	r3, [pc, #60]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a0e      	ldr	r2, [pc, #56]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800995a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800995e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009960:	f7f9 fcaa 	bl	80032b8 <HAL_GetTick>
 8009964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009966:	e008      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009968:	f7f9 fca6 	bl	80032b8 <HAL_GetTick>
 800996c:	4602      	mov	r2, r0
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	2b64      	cmp	r3, #100	@ 0x64
 8009974:	d901      	bls.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e007      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800997a:	4b06      	ldr	r3, [pc, #24]	@ (8009994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009986:	d1ef      	bne.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3720      	adds	r7, #32
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	40023800 	.word	0x40023800

08009998 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80099b6:	f040 808d 	bne.w	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80099ba:	4b93      	ldr	r3, [pc, #588]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099c0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80099c8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099d0:	d07c      	beq.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099d8:	d87b      	bhi.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099e6:	d039      	beq.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80099e8:	e073      	b.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80099ea:	4b87      	ldr	r3, [pc, #540]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d108      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80099f6:	4b84      	ldr	r3, [pc, #528]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099fe:	4a83      	ldr	r2, [pc, #524]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a04:	613b      	str	r3, [r7, #16]
 8009a06:	e007      	b.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009a08:	4b7f      	ldr	r3, [pc, #508]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a10:	4a7f      	ldr	r2, [pc, #508]	@ (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a16:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009a18:	4b7b      	ldr	r3, [pc, #492]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a1e:	0e1b      	lsrs	r3, r3, #24
 8009a20:	f003 030f 	and.w	r3, r3, #15
 8009a24:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009a26:	4b78      	ldr	r3, [pc, #480]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a2c:	099b      	lsrs	r3, r3, #6
 8009a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	fb03 f202 	mul.w	r2, r3, r2
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a3e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009a40:	4b71      	ldr	r3, [pc, #452]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a46:	0a1b      	lsrs	r3, r3, #8
 8009a48:	f003 031f 	and.w	r3, r3, #31
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a58:	617b      	str	r3, [r7, #20]
        break;
 8009a5a:	e03b      	b.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d108      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009a68:	4b67      	ldr	r3, [pc, #412]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a70:	4a66      	ldr	r2, [pc, #408]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a76:	613b      	str	r3, [r7, #16]
 8009a78:	e007      	b.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009a7a:	4b63      	ldr	r3, [pc, #396]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a82:	4a63      	ldr	r2, [pc, #396]	@ (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a88:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a90:	0e1b      	lsrs	r3, r3, #24
 8009a92:	f003 030f 	and.w	r3, r3, #15
 8009a96:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009a98:	4b5b      	ldr	r3, [pc, #364]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a9e:	099b      	lsrs	r3, r3, #6
 8009aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	fb03 f202 	mul.w	r2, r3, r2
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009ab2:	4b55      	ldr	r3, [pc, #340]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ab8:	f003 031f 	and.w	r3, r3, #31
 8009abc:	3301      	adds	r3, #1
 8009abe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac8:	617b      	str	r3, [r7, #20]
        break;
 8009aca:	e003      	b.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009acc:	4b51      	ldr	r3, [pc, #324]	@ (8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009ace:	617b      	str	r3, [r7, #20]
        break;
 8009ad0:	e000      	b.n	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8009ad2:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ada:	f040 808d 	bne.w	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009ade:	4b4a      	ldr	r3, [pc, #296]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ae4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009aec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009af4:	d07c      	beq.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009afc:	d87b      	bhi.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d004      	beq.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b0a:	d039      	beq.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009b0c:	e073      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d108      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b22:	4a3a      	ldr	r2, [pc, #232]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b28:	613b      	str	r3, [r7, #16]
 8009b2a:	e007      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009b2c:	4b36      	ldr	r3, [pc, #216]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b34:	4a36      	ldr	r2, [pc, #216]	@ (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009b3c:	4b32      	ldr	r3, [pc, #200]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b42:	0e1b      	lsrs	r3, r3, #24
 8009b44:	f003 030f 	and.w	r3, r3, #15
 8009b48:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b50:	099b      	lsrs	r3, r3, #6
 8009b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	fb03 f202 	mul.w	r2, r3, r2
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b62:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009b64:	4b28      	ldr	r3, [pc, #160]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b6a:	0a1b      	lsrs	r3, r3, #8
 8009b6c:	f003 031f 	and.w	r3, r3, #31
 8009b70:	3301      	adds	r3, #1
 8009b72:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b7c:	617b      	str	r3, [r7, #20]
        break;
 8009b7e:	e03b      	b.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009b80:	4b21      	ldr	r3, [pc, #132]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d108      	bne.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b94:	4a1d      	ldr	r2, [pc, #116]	@ (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b9a:	613b      	str	r3, [r7, #16]
 8009b9c:	e007      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009bae:	4b16      	ldr	r3, [pc, #88]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bb4:	0e1b      	lsrs	r3, r3, #24
 8009bb6:	f003 030f 	and.w	r3, r3, #15
 8009bba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009bbc:	4b12      	ldr	r3, [pc, #72]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bc2:	099b      	lsrs	r3, r3, #6
 8009bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	fb03 f202 	mul.w	r2, r3, r2
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bdc:	f003 031f 	and.w	r3, r3, #31
 8009be0:	3301      	adds	r3, #1
 8009be2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009be4:	697a      	ldr	r2, [r7, #20]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bec:	617b      	str	r3, [r7, #20]
        break;
 8009bee:	e003      	b.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bf0:	4b08      	ldr	r3, [pc, #32]	@ (8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009bf2:	617b      	str	r3, [r7, #20]
        break;
 8009bf4:	e000      	b.n	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8009bf6:	bf00      	nop
      }
    }
  }

  return frequency;
 8009bf8:	697b      	ldr	r3, [r7, #20]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	40023800 	.word	0x40023800
 8009c0c:	00f42400 	.word	0x00f42400
 8009c10:	017d7840 	.word	0x017d7840
 8009c14:	00bb8000 	.word	0x00bb8000

08009c18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e071      	b.n	8009d12 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	7f5b      	ldrb	r3, [r3, #29]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d105      	bne.n	8009c44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7f8 fb28 	bl	8002294 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b10      	cmp	r3, #16
 8009c56:	d053      	beq.n	8009d00 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	22ca      	movs	r2, #202	@ 0xca
 8009c5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2253      	movs	r2, #83	@ 0x53
 8009c66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fac7 	bl	800a1fc <RTC_EnterInitMode>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d12a      	bne.n	8009cce <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6899      	ldr	r1, [r3, #8]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4b26      	ldr	r3, [pc, #152]	@ (8009d1c <HAL_RTC_Init+0x104>)
 8009c84:	400b      	ands	r3, r1
 8009c86:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6899      	ldr	r1, [r3, #8]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685a      	ldr	r2, [r3, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	68d2      	ldr	r2, [r2, #12]
 8009cae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6919      	ldr	r1, [r3, #16]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	041a      	lsls	r2, r3, #16
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fad0 	bl	800a26a <RTC_ExitInitMode>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d110      	bne.n	8009cf6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 0208 	bic.w	r2, r2, #8
 8009ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	22ff      	movs	r2, #255	@ 0xff
 8009cfc:	625a      	str	r2, [r3, #36]	@ 0x24
 8009cfe:	e001      	b.n	8009d04 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	ff8fffbf 	.word	0xff8fffbf

08009d20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d20:	b590      	push	{r4, r7, lr}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	7f1b      	ldrb	r3, [r3, #28]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d101      	bne.n	8009d3c <HAL_RTC_SetTime+0x1c>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e085      	b.n	8009e48 <HAL_RTC_SetTime+0x128>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2202      	movs	r2, #2
 8009d46:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d126      	bne.n	8009d9c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 faa4 	bl	800a2b4 <RTC_ByteToBcd2>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	785b      	ldrb	r3, [r3, #1]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 fa9d 	bl	800a2b4 <RTC_ByteToBcd2>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d7e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	789b      	ldrb	r3, [r3, #2]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fa95 	bl	800a2b4 <RTC_ByteToBcd2>
 8009d8a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d8c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	78db      	ldrb	r3, [r3, #3]
 8009d94:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d96:	4313      	orrs	r3, r2
 8009d98:	617b      	str	r3, [r7, #20]
 8009d9a:	e018      	b.n	8009dce <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009dbc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009dc2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	78db      	ldrb	r3, [r3, #3]
 8009dc8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	22ca      	movs	r2, #202	@ 0xca
 8009dd4:	625a      	str	r2, [r3, #36]	@ 0x24
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2253      	movs	r2, #83	@ 0x53
 8009ddc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 fa0c 	bl	800a1fc <RTC_EnterInitMode>
 8009de4:	4603      	mov	r3, r0
 8009de6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009de8:	7cfb      	ldrb	r3, [r7, #19]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d11e      	bne.n	8009e2c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	6979      	ldr	r1, [r7, #20]
 8009df4:	4b16      	ldr	r3, [pc, #88]	@ (8009e50 <HAL_RTC_SetTime+0x130>)
 8009df6:	400b      	ands	r3, r1
 8009df8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689a      	ldr	r2, [r3, #8]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009e08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6899      	ldr	r1, [r3, #8]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	68da      	ldr	r2, [r3, #12]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fa21 	bl	800a26a <RTC_ExitInitMode>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009e2c:	7cfb      	ldrb	r3, [r7, #19]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d102      	bne.n	8009e38 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2201      	movs	r2, #1
 8009e36:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	22ff      	movs	r2, #255	@ 0xff
 8009e3e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	771a      	strb	r2, [r3, #28]

  return status;
 8009e46:	7cfb      	ldrb	r3, [r7, #19]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	371c      	adds	r7, #28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd90      	pop	{r4, r7, pc}
 8009e50:	007f7f7f 	.word	0x007f7f7f

08009e54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e54:	b590      	push	{r4, r7, lr}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	7f1b      	ldrb	r3, [r3, #28]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_RTC_SetDate+0x1c>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e06f      	b.n	8009f50 <HAL_RTC_SetDate+0xfc>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2202      	movs	r2, #2
 8009e7a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10e      	bne.n	8009ea0 <HAL_RTC_SetDate+0x4c>
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	785b      	ldrb	r3, [r3, #1]
 8009e86:	f003 0310 	and.w	r3, r3, #16
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d008      	beq.n	8009ea0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	785b      	ldrb	r3, [r3, #1]
 8009e92:	f023 0310 	bic.w	r3, r3, #16
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	330a      	adds	r3, #10
 8009e9a:	b2da      	uxtb	r2, r3
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d11c      	bne.n	8009ee0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	78db      	ldrb	r3, [r3, #3]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fa02 	bl	800a2b4 <RTC_ByteToBcd2>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	785b      	ldrb	r3, [r3, #1]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 f9fb 	bl	800a2b4 <RTC_ByteToBcd2>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ec2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	789b      	ldrb	r3, [r3, #2]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 f9f3 	bl	800a2b4 <RTC_ByteToBcd2>
 8009ece:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ed0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009eda:	4313      	orrs	r3, r2
 8009edc:	617b      	str	r3, [r7, #20]
 8009ede:	e00e      	b.n	8009efe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	78db      	ldrb	r3, [r3, #3]
 8009ee4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	785b      	ldrb	r3, [r3, #1]
 8009eea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009eec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ef2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009efa:	4313      	orrs	r3, r2
 8009efc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	22ca      	movs	r2, #202	@ 0xca
 8009f04:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2253      	movs	r2, #83	@ 0x53
 8009f0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f000 f974 	bl	800a1fc <RTC_EnterInitMode>
 8009f14:	4603      	mov	r3, r0
 8009f16:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009f18:	7cfb      	ldrb	r3, [r7, #19]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	6979      	ldr	r1, [r7, #20]
 8009f24:	4b0c      	ldr	r3, [pc, #48]	@ (8009f58 <HAL_RTC_SetDate+0x104>)
 8009f26:	400b      	ands	r3, r1
 8009f28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 f99d 	bl	800a26a <RTC_ExitInitMode>
 8009f30:	4603      	mov	r3, r0
 8009f32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009f34:	7cfb      	ldrb	r3, [r7, #19]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d102      	bne.n	8009f40 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	22ff      	movs	r2, #255	@ 0xff
 8009f46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	771a      	strb	r2, [r3, #28]

  return status;
 8009f4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	371c      	adds	r7, #28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd90      	pop	{r4, r7, pc}
 8009f58:	00ffff3f 	.word	0x00ffff3f

08009f5c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009f5c:	b590      	push	{r4, r7, lr}
 8009f5e:	b089      	sub	sp, #36	@ 0x24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	7f1b      	ldrb	r3, [r3, #28]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d101      	bne.n	8009f80 <HAL_RTC_SetAlarm+0x24>
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	e113      	b.n	800a1a8 <HAL_RTC_SetAlarm+0x24c>
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2201      	movs	r2, #1
 8009f84:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2202      	movs	r2, #2
 8009f8a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d137      	bne.n	800a002 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d102      	bne.n	8009fa6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f982 	bl	800a2b4 <RTC_ByteToBcd2>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	785b      	ldrb	r3, [r3, #1]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 f97b 	bl	800a2b4 <RTC_ByteToBcd2>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009fc2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	789b      	ldrb	r3, [r3, #2]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 f973 	bl	800a2b4 <RTC_ByteToBcd2>
 8009fce:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009fd0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	78db      	ldrb	r3, [r3, #3]
 8009fd8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009fda:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f965 	bl	800a2b4 <RTC_ByteToBcd2>
 8009fea:	4603      	mov	r3, r0
 8009fec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009fee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009ff6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	61fb      	str	r3, [r7, #28]
 800a000:	e023      	b.n	800a04a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d102      	bne.n	800a016 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2200      	movs	r2, #0
 800a014:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	785b      	ldrb	r3, [r3, #1]
 800a020:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a022:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a028:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	78db      	ldrb	r3, [r3, #3]
 800a02e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a030:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a038:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a03a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a040:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a046:	4313      	orrs	r3, r2
 800a048:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a052:	4313      	orrs	r3, r2
 800a054:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	22ca      	movs	r2, #202	@ 0xca
 800a05c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2253      	movs	r2, #83	@ 0x53
 800a064:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a06e:	d148      	bne.n	800a102 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	689a      	ldr	r2, [r3, #8]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a07e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a08e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	b2da      	uxtb	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800a0a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a0a2:	f7f9 f909 	bl	80032b8 <HAL_GetTick>
 800a0a6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a0a8:	e013      	b.n	800a0d2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a0aa:	f7f9 f905 	bl	80032b8 <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a0b8:	d90b      	bls.n	800a0d2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	22ff      	movs	r2, #255	@ 0xff
 800a0c0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2203      	movs	r2, #3
 800a0c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e06a      	b.n	800a1a8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d0e4      	beq.n	800a0aa <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	69fa      	ldr	r2, [r7, #28]
 800a0e6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0fe:	609a      	str	r2, [r3, #8]
 800a100:	e047      	b.n	800a192 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a110:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a120:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800a132:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a134:	f7f9 f8c0 	bl	80032b8 <HAL_GetTick>
 800a138:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a13a:	e013      	b.n	800a164 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a13c:	f7f9 f8bc 	bl	80032b8 <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a14a:	d90b      	bls.n	800a164 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	22ff      	movs	r2, #255	@ 0xff
 800a152:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2203      	movs	r2, #3
 800a158:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e021      	b.n	800a1a8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f003 0302 	and.w	r3, r3, #2
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0e4      	beq.n	800a13c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	69fa      	ldr	r2, [r7, #28]
 800a178:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a190:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	22ff      	movs	r2, #255	@ 0xff
 800a198:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2201      	movs	r2, #1
 800a19e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3724      	adds	r7, #36	@ 0x24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd90      	pop	{r4, r7, pc}

0800a1b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a0d      	ldr	r2, [pc, #52]	@ (800a1f8 <HAL_RTC_WaitForSynchro+0x48>)
 800a1c2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a1c4:	f7f9 f878 	bl	80032b8 <HAL_GetTick>
 800a1c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1ca:	e009      	b.n	800a1e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1cc:	f7f9 f874 	bl	80032b8 <HAL_GetTick>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a1da:	d901      	bls.n	800a1e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e007      	b.n	800a1f0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f003 0320 	and.w	r3, r3, #32
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0ee      	beq.n	800a1cc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	0001ff5f 	.word	0x0001ff5f

0800a1fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a216:	2b00      	cmp	r3, #0
 800a218:	d122      	bne.n	800a260 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68da      	ldr	r2, [r3, #12]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a228:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a22a:	f7f9 f845 	bl	80032b8 <HAL_GetTick>
 800a22e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a230:	e00c      	b.n	800a24c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a232:	f7f9 f841 	bl	80032b8 <HAL_GetTick>
 800a236:	4602      	mov	r2, r0
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a240:	d904      	bls.n	800a24c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2204      	movs	r2, #4
 800a246:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a256:	2b00      	cmp	r3, #0
 800a258:	d102      	bne.n	800a260 <RTC_EnterInitMode+0x64>
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d1e8      	bne.n	800a232 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a260:	7bfb      	ldrb	r3, [r7, #15]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b084      	sub	sp, #16
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a284:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	f003 0320 	and.w	r3, r3, #32
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff ff8b 	bl	800a1b0 <HAL_RTC_WaitForSynchro>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d004      	beq.n	800a2aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2204      	movs	r2, #4
 800a2a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a2c2:	e005      	b.n	800a2d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	3b0a      	subs	r3, #10
 800a2ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a2d0:	79fb      	ldrb	r3, [r7, #7]
 800a2d2:	2b09      	cmp	r3, #9
 800a2d4:	d8f6      	bhi.n	800a2c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	011b      	lsls	r3, r3, #4
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	b2db      	uxtb	r3, r3
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	7f1b      	ldrb	r3, [r3, #28]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d101      	bne.n	800a30c <HAL_RTCEx_SetTimeStamp+0x1c>
 800a308:	2302      	movs	r3, #2
 800a30a:	e050      	b.n	800a3ae <HAL_RTCEx_SetTimeStamp+0xbe>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2201      	movs	r2, #1
 800a310:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2202      	movs	r2, #2
 800a316:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0206 	bic.w	r2, r2, #6
 800a326:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	430a      	orrs	r2, r1
 800a336:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689a      	ldr	r2, [r3, #8]
 800a33e:	4b1f      	ldr	r3, [pc, #124]	@ (800a3bc <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a340:	4013      	ands	r3, r2
 800a342:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	4313      	orrs	r3, r2
 800a34a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	22ca      	movs	r2, #202	@ 0xca
 800a352:	625a      	str	r2, [r3, #36]	@ 0x24
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2253      	movs	r2, #83	@ 0x53
 800a35a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800a374:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800a386:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a396:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	22ff      	movs	r2, #255	@ 0xff
 800a39e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	371c      	adds	r7, #28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	fffff7f7 	.word	0xfffff7f7

0800a3c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d101      	bne.n	800a3de <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e156      	b.n	800a68c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d106      	bne.n	800a3f8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7f8 fb62 	bl	8002abc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f95b 	bl	800a6bc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d00c      	beq.n	800a428 <HAL_SAI_Init+0x68>
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d80d      	bhi.n	800a42e <HAL_SAI_Init+0x6e>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <HAL_SAI_Init+0x5c>
 800a416:	2b01      	cmp	r3, #1
 800a418:	d003      	beq.n	800a422 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a41a:	e008      	b.n	800a42e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	61fb      	str	r3, [r7, #28]
      break;
 800a420:	e006      	b.n	800a430 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a422:	2310      	movs	r3, #16
 800a424:	61fb      	str	r3, [r7, #28]
      break;
 800a426:	e003      	b.n	800a430 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a428:	2320      	movs	r3, #32
 800a42a:	61fb      	str	r3, [r7, #28]
      break;
 800a42c:	e000      	b.n	800a430 <HAL_SAI_Init+0x70>
      break;
 800a42e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	2b03      	cmp	r3, #3
 800a436:	d81e      	bhi.n	800a476 <HAL_SAI_Init+0xb6>
 800a438:	a201      	add	r2, pc, #4	@ (adr r2, 800a440 <HAL_SAI_Init+0x80>)
 800a43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43e:	bf00      	nop
 800a440:	0800a451 	.word	0x0800a451
 800a444:	0800a457 	.word	0x0800a457
 800a448:	0800a45f 	.word	0x0800a45f
 800a44c:	0800a467 	.word	0x0800a467
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
    }
    break;
 800a454:	e010      	b.n	800a478 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a45a:	617b      	str	r3, [r7, #20]
    }
    break;
 800a45c:	e00c      	b.n	800a478 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a45e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a462:	617b      	str	r3, [r7, #20]
    }
    break;
 800a464:	e008      	b.n	800a478 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a466:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a46a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f043 0301 	orr.w	r3, r3, #1
 800a472:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a474:	e000      	b.n	800a478 <HAL_SAI_Init+0xb8>
    default:
      break;
 800a476:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a85      	ldr	r2, [pc, #532]	@ (800a694 <HAL_SAI_Init+0x2d4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d004      	beq.n	800a48c <HAL_SAI_Init+0xcc>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a84      	ldr	r2, [pc, #528]	@ (800a698 <HAL_SAI_Init+0x2d8>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d103      	bne.n	800a494 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a48c:	4a83      	ldr	r2, [pc, #524]	@ (800a69c <HAL_SAI_Init+0x2dc>)
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	e002      	b.n	800a49a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a494:	4a82      	ldr	r2, [pc, #520]	@ (800a6a0 <HAL_SAI_Init+0x2e0>)
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d04c      	beq.n	800a53c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a7a      	ldr	r2, [pc, #488]	@ (800a694 <HAL_SAI_Init+0x2d4>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d004      	beq.n	800a4ba <HAL_SAI_Init+0xfa>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a78      	ldr	r2, [pc, #480]	@ (800a698 <HAL_SAI_Init+0x2d8>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d104      	bne.n	800a4c4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a4ba:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a4be:	f7ff fa6b 	bl	8009998 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4c2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a76      	ldr	r2, [pc, #472]	@ (800a6a4 <HAL_SAI_Init+0x2e4>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d004      	beq.n	800a4d8 <HAL_SAI_Init+0x118>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a75      	ldr	r2, [pc, #468]	@ (800a6a8 <HAL_SAI_Init+0x2e8>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d104      	bne.n	800a4e2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a4d8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a4dc:	f7ff fa5c 	bl	8009998 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4e0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	025b      	lsls	r3, r3, #9
 800a4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	4a6b      	ldr	r2, [pc, #428]	@ (800a6ac <HAL_SAI_Init+0x2ec>)
 800a4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a502:	08da      	lsrs	r2, r3, #3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a508:	68f9      	ldr	r1, [r7, #12]
 800a50a:	4b68      	ldr	r3, [pc, #416]	@ (800a6ac <HAL_SAI_Init+0x2ec>)
 800a50c:	fba3 2301 	umull	r2, r3, r3, r1
 800a510:	08da      	lsrs	r2, r3, #3
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	1aca      	subs	r2, r1, r3
 800a51c:	2a08      	cmp	r2, #8
 800a51e:	d904      	bls.n	800a52a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	1c5a      	adds	r2, r3, #1
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a52e:	2b04      	cmp	r3, #4
 800a530:	d104      	bne.n	800a53c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	085a      	lsrs	r2, r3, #1
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d003      	beq.n	800a54c <HAL_SAI_Init+0x18c>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d109      	bne.n	800a560 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a550:	2b01      	cmp	r3, #1
 800a552:	d101      	bne.n	800a558 <HAL_SAI_Init+0x198>
 800a554:	2300      	movs	r3, #0
 800a556:	e001      	b.n	800a55c <HAL_SAI_Init+0x19c>
 800a558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	e008      	b.n	800a572 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a564:	2b01      	cmp	r3, #1
 800a566:	d102      	bne.n	800a56e <HAL_SAI_Init+0x1ae>
 800a568:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a56c:	e000      	b.n	800a570 <HAL_SAI_Init+0x1b0>
 800a56e:	2300      	movs	r3, #0
 800a570:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6819      	ldr	r1, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	4b4c      	ldr	r3, [pc, #304]	@ (800a6b0 <HAL_SAI_Init+0x2f0>)
 800a57e:	400b      	ands	r3, r1
 800a580:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6819      	ldr	r1, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a590:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a596:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a59c:	431a      	orrs	r2, r3
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800a5aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a5b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a1b      	ldr	r3, [r3, #32]
 800a5bc:	051b      	lsls	r3, r3, #20
 800a5be:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6859      	ldr	r1, [r3, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	4b38      	ldr	r3, [pc, #224]	@ (800a6b4 <HAL_SAI_Init+0x2f4>)
 800a5d4:	400b      	ands	r3, r1
 800a5d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6859      	ldr	r1, [r3, #4]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	699a      	ldr	r2, [r3, #24]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6899      	ldr	r1, [r3, #8]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	4b2d      	ldr	r3, [pc, #180]	@ (800a6b8 <HAL_SAI_Init+0x2f8>)
 800a602:	400b      	ands	r3, r1
 800a604:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6899      	ldr	r1, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a610:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a616:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800a61c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800a622:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a628:	3b01      	subs	r3, #1
 800a62a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a62c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68d9      	ldr	r1, [r3, #12]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a644:	400b      	ands	r3, r1
 800a646:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68d9      	ldr	r1, [r3, #12]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a656:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a65c:	041b      	lsls	r3, r3, #16
 800a65e:	431a      	orrs	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a664:	3b01      	subs	r3, #1
 800a666:	021b      	lsls	r3, r3, #8
 800a668:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	430a      	orrs	r2, r1
 800a670:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	40015804 	.word	0x40015804
 800a698:	40015824 	.word	0x40015824
 800a69c:	40015800 	.word	0x40015800
 800a6a0:	40015c00 	.word	0x40015c00
 800a6a4:	40015c04 	.word	0x40015c04
 800a6a8:	40015c24 	.word	0x40015c24
 800a6ac:	cccccccd 	.word	0xcccccccd
 800a6b0:	ff05c010 	.word	0xff05c010
 800a6b4:	ffff1ff0 	.word	0xffff1ff0
 800a6b8:	fff88000 	.word	0xfff88000

0800a6bc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a6c4:	4b17      	ldr	r3, [pc, #92]	@ (800a724 <SAI_Disable+0x68>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a17      	ldr	r2, [pc, #92]	@ (800a728 <SAI_Disable+0x6c>)
 800a6ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ce:	0b1b      	lsrs	r3, r3, #12
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a6e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	1e5a      	subs	r2, r3, #1
 800a6ec:	60fa      	str	r2, [r7, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10a      	bne.n	800a708 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800a702:	2303      	movs	r3, #3
 800a704:	72fb      	strb	r3, [r7, #11]
      break;
 800a706:	e006      	b.n	800a716 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e8      	bne.n	800a6e8 <SAI_Disable+0x2c>

  return status;
 800a716:	7afb      	ldrb	r3, [r7, #11]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	20000000 	.word	0x20000000
 800a728:	95cbec1b 	.word	0x95cbec1b

0800a72c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e022      	b.n	800a784 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b00      	cmp	r3, #0
 800a748:	d105      	bne.n	800a756 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7f7 fdcd 	bl	80022f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2203      	movs	r2, #3
 800a75a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f814 	bl	800a78c <HAL_SD_InitCard>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	e00a      	b.n	800a784 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a78c:	b5b0      	push	{r4, r5, r7, lr}
 800a78e:	b08e      	sub	sp, #56	@ 0x38
 800a790:	af04      	add	r7, sp, #16
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a794:	2300      	movs	r3, #0
 800a796:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a798:	2300      	movs	r3, #0
 800a79a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a79c:	2300      	movs	r3, #0
 800a79e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a7a8:	2376      	movs	r3, #118	@ 0x76
 800a7aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681d      	ldr	r5, [r3, #0]
 800a7b0:	466c      	mov	r4, sp
 800a7b2:	f107 0314 	add.w	r3, r7, #20
 800a7b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a7be:	f107 0308 	add.w	r3, r7, #8
 800a7c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f002 ffd1 	bl	800d76c <SDMMC_Init>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d001      	beq.n	800a7dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e059      	b.n	800a890 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685a      	ldr	r2, [r3, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7ea:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f002 fff4 	bl	800d7de <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a804:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a806:	2002      	movs	r0, #2
 800a808:	f7f8 fd62 	bl	80032d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fe0f 	bl	800b430 <SD_PowerON>
 800a812:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00b      	beq.n	800a832 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	431a      	orrs	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e02e      	b.n	800a890 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fd2e 	bl	800b294 <SD_InitCard>
 800a838:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00b      	beq.n	800a858 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	431a      	orrs	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e01b      	b.n	800a890 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a860:	4618      	mov	r0, r3
 800a862:	f003 f84f 	bl	800d904 <SDMMC_CmdBlockLength>
 800a866:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00f      	beq.n	800a88e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a09      	ldr	r2, [pc, #36]	@ (800a898 <HAL_SD_InitCard+0x10c>)
 800a874:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a87a:	6a3b      	ldr	r3, [r7, #32]
 800a87c:	431a      	orrs	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e000      	b.n	800a890 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3728      	adds	r7, #40	@ 0x28
 800a894:	46bd      	mov	sp, r7
 800a896:	bdb0      	pop	{r4, r5, r7, pc}
 800a898:	004005ff 	.word	0x004005ff

0800a89c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08c      	sub	sp, #48	@ 0x30
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d107      	bne.n	800a8c4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e0c3      	b.n	800aa4c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	f040 80bc 	bne.w	800aa4a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a8d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	441a      	add	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d907      	bls.n	800a8f6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ea:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e0aa      	b.n	800aa4c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2203      	movs	r2, #3
 800a8fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2200      	movs	r2, #0
 800a904:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a914:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a91a:	4a4e      	ldr	r2, [pc, #312]	@ (800aa54 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a91c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a922:	4a4d      	ldr	r2, [pc, #308]	@ (800aa58 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a924:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a92a:	2200      	movs	r2, #0
 800a92c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a932:	2200      	movs	r2, #0
 800a934:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a946:	689a      	ldr	r2, [r3, #8]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3380      	adds	r3, #128	@ 0x80
 800a95c:	4619      	mov	r1, r3
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	025b      	lsls	r3, r3, #9
 800a964:	089b      	lsrs	r3, r3, #2
 800a966:	f7f9 f9c5 	bl	8003cf4 <HAL_DMA_Start_IT>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d017      	beq.n	800a9a0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800a97e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a35      	ldr	r2, [pc, #212]	@ (800aa5c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a986:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e055      	b.n	800aa4c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0208 	orr.w	r2, r2, #8
 800a9ae:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d002      	beq.n	800a9be <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ba:	025b      	lsls	r3, r3, #9
 800a9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	025b      	lsls	r3, r3, #9
 800a9c8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a9ca:	2390      	movs	r3, #144	@ 0x90
 800a9cc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f107 0210 	add.w	r2, r7, #16
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f002 ff61 	bl	800d8ac <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d90a      	bls.n	800aa06 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2282      	movs	r2, #130	@ 0x82
 800a9f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f002 ffc5 	bl	800d98c <SDMMC_CmdReadMultiBlock>
 800aa02:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800aa04:	e009      	b.n	800aa1a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2281      	movs	r2, #129	@ 0x81
 800aa0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa12:	4618      	mov	r0, r3
 800aa14:	f002 ff98 	bl	800d948 <SDMMC_CmdReadSingleBlock>
 800aa18:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800aa1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d012      	beq.n	800aa46 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a0d      	ldr	r2, [pc, #52]	@ (800aa5c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800aa26:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e002      	b.n	800aa4c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	e000      	b.n	800aa4c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800aa4a:	2302      	movs	r3, #2
  }
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3730      	adds	r7, #48	@ 0x30
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	0800b17f 	.word	0x0800b17f
 800aa58:	0800b1f1 	.word	0x0800b1f1
 800aa5c:	004005ff 	.word	0x004005ff

0800aa60 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08c      	sub	sp, #48	@ 0x30
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d107      	bne.n	800aa88 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e0c6      	b.n	800ac16 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	f040 80bf 	bne.w	800ac14 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aa9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	441a      	add	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d907      	bls.n	800aaba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaae:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e0ad      	b.n	800ac16 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2203      	movs	r2, #3
 800aabe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2200      	movs	r2, #0
 800aac8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f042 021a 	orr.w	r2, r2, #26
 800aad8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aade:	4a50      	ldr	r2, [pc, #320]	@ (800ac20 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800aae0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae6:	4a4f      	ldr	r2, [pc, #316]	@ (800ac24 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800aae8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaee:	2200      	movs	r2, #0
 800aaf0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d002      	beq.n	800ab00 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800aafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafc:	025b      	lsls	r3, r3, #9
 800aafe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d90a      	bls.n	800ab1c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	22a0      	movs	r2, #160	@ 0xa0
 800ab0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab12:	4618      	mov	r0, r3
 800ab14:	f002 ff7e 	bl	800da14 <SDMMC_CmdWriteMultiBlock>
 800ab18:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ab1a:	e009      	b.n	800ab30 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2290      	movs	r2, #144	@ 0x90
 800ab20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f002 ff51 	bl	800d9d0 <SDMMC_CmdWriteSingleBlock>
 800ab2e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d012      	beq.n	800ab5c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a3b      	ldr	r2, [pc, #236]	@ (800ac28 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ab3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab44:	431a      	orrs	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e05c      	b.n	800ac16 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f042 0208 	orr.w	r2, r2, #8
 800ab6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab70:	2240      	movs	r2, #64	@ 0x40
 800ab72:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab84:	689a      	ldr	r2, [r3, #8]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ab94:	68b9      	ldr	r1, [r7, #8]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3380      	adds	r3, #128	@ 0x80
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	025b      	lsls	r3, r3, #9
 800aba2:	089b      	lsrs	r3, r3, #2
 800aba4:	f7f9 f8a6 	bl	8003cf4 <HAL_DMA_Start_IT>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d01a      	beq.n	800abe4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 021a 	bic.w	r2, r2, #26
 800abbc:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a19      	ldr	r2, [pc, #100]	@ (800ac28 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800abc4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e018      	b.n	800ac16 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abe4:	f04f 33ff 	mov.w	r3, #4294967295
 800abe8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	025b      	lsls	r3, r3, #9
 800abee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800abf0:	2390      	movs	r3, #144	@ 0x90
 800abf2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800abf4:	2300      	movs	r3, #0
 800abf6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800abfc:	2301      	movs	r3, #1
 800abfe:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f107 0210 	add.w	r2, r7, #16
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f002 fe4e 	bl	800d8ac <SDMMC_ConfigData>

      return HAL_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	e000      	b.n	800ac16 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800ac14:	2302      	movs	r3, #2
  }
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3730      	adds	r7, #48	@ 0x30
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	0800b155 	.word	0x0800b155
 800ac24:	0800b1f1 	.word	0x0800b1f1
 800ac28:	004005ff 	.word	0x004005ff

0800ac2c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac4e:	0f9b      	lsrs	r3, r3, #30
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac5a:	0e9b      	lsrs	r3, r3, #26
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	f003 030f 	and.w	r3, r3, #15
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac6c:	0e1b      	lsrs	r3, r3, #24
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	f003 0303 	and.w	r3, r3, #3
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac7e:	0c1b      	lsrs	r3, r3, #16
 800ac80:	b2da      	uxtb	r2, r3
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac8a:	0a1b      	lsrs	r3, r3, #8
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aca0:	0d1b      	lsrs	r3, r3, #20
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acac:	0c1b      	lsrs	r3, r3, #16
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	f003 030f 	and.w	r3, r3, #15
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acbe:	0bdb      	lsrs	r3, r3, #15
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	f003 0301 	and.w	r3, r3, #1
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acd0:	0b9b      	lsrs	r3, r3, #14
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ace2:	0b5b      	lsrs	r3, r3, #13
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	b2da      	uxtb	r2, r3
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800acf4:	0b1b      	lsrs	r3, r3, #12
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2200      	movs	r2, #0
 800ad06:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d163      	bne.n	800add8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad14:	009a      	lsls	r2, r3, #2
 800ad16:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800ad20:	0f92      	lsrs	r2, r2, #30
 800ad22:	431a      	orrs	r2, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad2c:	0edb      	lsrs	r3, r3, #27
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	f003 0307 	and.w	r3, r3, #7
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad3e:	0e1b      	lsrs	r3, r3, #24
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad50:	0d5b      	lsrs	r3, r3, #21
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	f003 0307 	and.w	r3, r3, #7
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad62:	0c9b      	lsrs	r3, r3, #18
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	f003 0307 	and.w	r3, r3, #7
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad74:	0bdb      	lsrs	r3, r3, #15
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	b2da      	uxtb	r2, r3
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	7e1b      	ldrb	r3, [r3, #24]
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	3302      	adds	r3, #2
 800ad98:	2201      	movs	r2, #1
 800ad9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ada2:	fb03 f202 	mul.w	r2, r3, r2
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	7a1b      	ldrb	r3, [r3, #8]
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	f003 030f 	and.w	r3, r3, #15
 800adb4:	2201      	movs	r2, #1
 800adb6:	409a      	lsls	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800adc4:	0a52      	lsrs	r2, r2, #9
 800adc6:	fb03 f202 	mul.w	r2, r3, r2
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800add4:	661a      	str	r2, [r3, #96]	@ 0x60
 800add6:	e031      	b.n	800ae3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800addc:	2b01      	cmp	r3, #1
 800adde:	d11d      	bne.n	800ae1c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ade4:	041b      	lsls	r3, r3, #16
 800ade6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adee:	0c1b      	lsrs	r3, r3, #16
 800adf0:	431a      	orrs	r2, r3
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	3301      	adds	r3, #1
 800adfc:	029a      	lsls	r2, r3, #10
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae10:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	661a      	str	r2, [r3, #96]	@ 0x60
 800ae1a:	e00f      	b.n	800ae3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a58      	ldr	r2, [pc, #352]	@ (800af84 <HAL_SD_GetCardCSD+0x344>)
 800ae22:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e09d      	b.n	800af78 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae40:	0b9b      	lsrs	r3, r3, #14
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae52:	09db      	lsrs	r3, r3, #7
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae74:	0fdb      	lsrs	r3, r3, #31
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae80:	0f5b      	lsrs	r3, r3, #29
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	f003 0303 	and.w	r3, r3, #3
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae92:	0e9b      	lsrs	r3, r3, #26
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	f003 0307 	and.w	r3, r3, #7
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aea4:	0d9b      	lsrs	r3, r3, #22
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	f003 030f 	and.w	r3, r3, #15
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeb6:	0d5b      	lsrs	r3, r3, #21
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aed2:	0c1b      	lsrs	r3, r3, #16
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aee6:	0bdb      	lsrs	r3, r3, #15
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aefa:	0b9b      	lsrs	r3, r3, #14
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	f003 0301 	and.w	r3, r3, #1
 800af02:	b2da      	uxtb	r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af0e:	0b5b      	lsrs	r3, r3, #13
 800af10:	b2db      	uxtb	r3, r3
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	b2da      	uxtb	r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af22:	0b1b      	lsrs	r3, r3, #12
 800af24:	b2db      	uxtb	r3, r3
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af36:	0a9b      	lsrs	r3, r3, #10
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	f003 0303 	and.w	r3, r3, #3
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af4a:	0a1b      	lsrs	r3, r3, #8
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	b2da      	uxtb	r2, r3
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af5e:	085b      	lsrs	r3, r3, #1
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af66:	b2da      	uxtb	r2, r3
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	004005ff 	.word	0x004005ff

0800af88 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800afe0:	b5b0      	push	{r4, r5, r7, lr}
 800afe2:	b08e      	sub	sp, #56	@ 0x38
 800afe4:	af04      	add	r7, sp, #16
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800afea:	2300      	movs	r3, #0
 800afec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2203      	movs	r2, #3
 800aff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800affc:	2b03      	cmp	r3, #3
 800affe:	d02e      	beq.n	800b05e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b006:	d106      	bne.n	800b016 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b00c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	639a      	str	r2, [r3, #56]	@ 0x38
 800b014:	e029      	b.n	800b06a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b01c:	d10a      	bne.n	800b034 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fabc 	bl	800b59c <SD_WideBus_Enable>
 800b024:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	431a      	orrs	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	639a      	str	r2, [r3, #56]	@ 0x38
 800b032:	e01a      	b.n	800b06a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10a      	bne.n	800b050 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 faf9 	bl	800b632 <SD_WideBus_Disable>
 800b040:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	431a      	orrs	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	639a      	str	r2, [r3, #56]	@ 0x38
 800b04e:	e00c      	b.n	800b06a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b054:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b05c:	e005      	b.n	800b06a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b062:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00b      	beq.n	800b08a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a26      	ldr	r2, [pc, #152]	@ (800b110 <HAL_SD_ConfigWideBusOperation+0x130>)
 800b078:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b088:	e01f      	b.n	800b0ca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681d      	ldr	r5, [r3, #0]
 800b0b0:	466c      	mov	r4, sp
 800b0b2:	f107 0314 	add.w	r3, r7, #20
 800b0b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b0be:	f107 0308 	add.w	r3, r7, #8
 800b0c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	f002 fb51 	bl	800d76c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f002 fc16 	bl	800d904 <SDMMC_CmdBlockLength>
 800b0d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00c      	beq.n	800b0fa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a0a      	ldr	r2, [pc, #40]	@ (800b110 <HAL_SD_ConfigWideBusOperation+0x130>)
 800b0e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0ec:	6a3b      	ldr	r3, [r7, #32]
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800b102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b106:	4618      	mov	r0, r3
 800b108:	3728      	adds	r7, #40	@ 0x28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bdb0      	pop	{r4, r5, r7, pc}
 800b10e:	bf00      	nop
 800b110:	004005ff 	.word	0x004005ff

0800b114 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b120:	f107 030c 	add.w	r3, r7, #12
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fa10 	bl	800b54c <SD_SendStatus>
 800b12c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d005      	beq.n	800b140 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	431a      	orrs	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	0a5b      	lsrs	r3, r3, #9
 800b144:	f003 030f 	and.w	r3, r3, #15
 800b148:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b14a:	693b      	ldr	r3, [r7, #16]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3718      	adds	r7, #24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b160:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b170:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b172:	bf00      	nop
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr

0800b17e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b18a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b190:	2b82      	cmp	r3, #130	@ 0x82
 800b192:	d111      	bne.n	800b1b8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4618      	mov	r0, r3
 800b19a:	f002 fc5d 	bl	800da58 <SDMMC_CmdStopTransfer>
 800b19e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d008      	beq.n	800b1b8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f7ff fd3a 	bl	800ac2c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f022 0208 	bic.w	r2, r2, #8
 800b1c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b1d0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f004 fa0b 	bl	800f5fc <HAL_SD_RxCpltCallback>
#endif
}
 800b1e6:	bf00      	nop
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1fc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7f8 fdd8 	bl	8003db4 <HAL_DMA_GetError>
 800b204:	4603      	mov	r3, r0
 800b206:	2b02      	cmp	r3, #2
 800b208:	d03e      	beq.n	800b288 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b20e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b210:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b218:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d002      	beq.n	800b226 <SD_DMAError+0x36>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d12d      	bne.n	800b282 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a19      	ldr	r2, [pc, #100]	@ (800b290 <SD_DMAError+0xa0>)
 800b22c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800b23c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b242:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b24a:	6978      	ldr	r0, [r7, #20]
 800b24c:	f7ff ff62 	bl	800b114 <HAL_SD_GetCardState>
 800b250:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2b06      	cmp	r3, #6
 800b256:	d002      	beq.n	800b25e <SD_DMAError+0x6e>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b05      	cmp	r3, #5
 800b25c:	d10a      	bne.n	800b274 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f002 fbf8 	bl	800da58 <SDMMC_CmdStopTransfer>
 800b268:	4602      	mov	r2, r0
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26e:	431a      	orrs	r2, r3
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2200      	movs	r2, #0
 800b280:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b282:	6978      	ldr	r0, [r7, #20]
 800b284:	f7ff fcd2 	bl	800ac2c <HAL_SD_ErrorCallback>
#endif
  }
}
 800b288:	bf00      	nop
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	004005ff 	.word	0x004005ff

0800b294 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b294:	b5b0      	push	{r4, r5, r7, lr}
 800b296:	b094      	sub	sp, #80	@ 0x50
 800b298:	af04      	add	r7, sp, #16
 800b29a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b29c:	2301      	movs	r3, #1
 800b29e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f002 faa8 	bl	800d7fa <SDMMC_GetPowerState>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d102      	bne.n	800b2b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2b0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b2b4:	e0b8      	b.n	800b428 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d02f      	beq.n	800b31e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f002 fcd3 	bl	800dc6e <SDMMC_CmdSendCID>
 800b2c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <SD_InitCard+0x40>
    {
      return errorstate;
 800b2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2d2:	e0a9      	b.n	800b428 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f002 fad3 	bl	800d886 <SDMMC_GetResponse>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2104      	movs	r1, #4
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f002 faca 	bl	800d886 <SDMMC_GetResponse>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2108      	movs	r1, #8
 800b2fe:	4618      	mov	r0, r3
 800b300:	f002 fac1 	bl	800d886 <SDMMC_GetResponse>
 800b304:	4602      	mov	r2, r0
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	210c      	movs	r1, #12
 800b310:	4618      	mov	r0, r3
 800b312:	f002 fab8 	bl	800d886 <SDMMC_GetResponse>
 800b316:	4602      	mov	r2, r0
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b322:	2b03      	cmp	r3, #3
 800b324:	d00d      	beq.n	800b342 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f107 020e 	add.w	r2, r7, #14
 800b32e:	4611      	mov	r1, r2
 800b330:	4618      	mov	r0, r3
 800b332:	f002 fcd9 	bl	800dce8 <SDMMC_CmdSetRelAdd>
 800b336:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <SD_InitCard+0xae>
    {
      return errorstate;
 800b33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b340:	e072      	b.n	800b428 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b346:	2b03      	cmp	r3, #3
 800b348:	d036      	beq.n	800b3b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b34a:	89fb      	ldrh	r3, [r7, #14]
 800b34c:	461a      	mov	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b35a:	041b      	lsls	r3, r3, #16
 800b35c:	4619      	mov	r1, r3
 800b35e:	4610      	mov	r0, r2
 800b360:	f002 fca3 	bl	800dcaa <SDMMC_CmdSendCSD>
 800b364:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b36c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b36e:	e05b      	b.n	800b428 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2100      	movs	r1, #0
 800b376:	4618      	mov	r0, r3
 800b378:	f002 fa85 	bl	800d886 <SDMMC_GetResponse>
 800b37c:	4602      	mov	r2, r0
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2104      	movs	r1, #4
 800b388:	4618      	mov	r0, r3
 800b38a:	f002 fa7c 	bl	800d886 <SDMMC_GetResponse>
 800b38e:	4602      	mov	r2, r0
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2108      	movs	r1, #8
 800b39a:	4618      	mov	r0, r3
 800b39c:	f002 fa73 	bl	800d886 <SDMMC_GetResponse>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	210c      	movs	r1, #12
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f002 fa6a 	bl	800d886 <SDMMC_GetResponse>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2104      	movs	r1, #4
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f002 fa61 	bl	800d886 <SDMMC_GetResponse>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	0d1a      	lsrs	r2, r3, #20
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b3cc:	f107 0310 	add.w	r3, r7, #16
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7ff fc34 	bl	800ac40 <HAL_SD_GetCardCSD>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b3e2:	e021      	b.n	800b428 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6819      	ldr	r1, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3ec:	041b      	lsls	r3, r3, #16
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	461c      	mov	r4, r3
 800b3f2:	4615      	mov	r5, r2
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	462b      	mov	r3, r5
 800b3f8:	4608      	mov	r0, r1
 800b3fa:	f002 fb4f 	bl	800da9c <SDMMC_CmdSelDesel>
 800b3fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <SD_InitCard+0x176>
  {
    return errorstate;
 800b406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b408:	e00e      	b.n	800b428 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681d      	ldr	r5, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	466c      	mov	r4, sp
 800b412:	f103 0210 	add.w	r2, r3, #16
 800b416:	ca07      	ldmia	r2, {r0, r1, r2}
 800b418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b41c:	3304      	adds	r3, #4
 800b41e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b420:	4628      	mov	r0, r5
 800b422:	f002 f9a3 	bl	800d76c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3740      	adds	r7, #64	@ 0x40
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bdb0      	pop	{r4, r5, r7, pc}

0800b430 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b438:	2300      	movs	r3, #0
 800b43a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	2300      	movs	r3, #0
 800b442:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4618      	mov	r0, r3
 800b44a:	f002 fb4a 	bl	800dae2 <SDMMC_CmdGoIdleState>
 800b44e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d001      	beq.n	800b45a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	e072      	b.n	800b540 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4618      	mov	r0, r3
 800b460:	f002 fb5d 	bl	800db1e <SDMMC_CmdOperCond>
 800b464:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00d      	beq.n	800b488 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4618      	mov	r0, r3
 800b478:	f002 fb33 	bl	800dae2 <SDMMC_CmdGoIdleState>
 800b47c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d004      	beq.n	800b48e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	e05b      	b.n	800b540 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b492:	2b01      	cmp	r3, #1
 800b494:	d137      	bne.n	800b506 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2100      	movs	r1, #0
 800b49c:	4618      	mov	r0, r3
 800b49e:	f002 fb5d 	bl	800db5c <SDMMC_CmdAppCommand>
 800b4a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d02d      	beq.n	800b506 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b4ae:	e047      	b.n	800b540 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f002 fb50 	bl	800db5c <SDMMC_CmdAppCommand>
 800b4bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <SD_PowerON+0x98>
    {
      return errorstate;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	e03b      	b.n	800b540 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	491e      	ldr	r1, [pc, #120]	@ (800b548 <SD_PowerON+0x118>)
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f002 fb66 	bl	800dba0 <SDMMC_CmdAppOperCommand>
 800b4d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b4e0:	e02e      	b.n	800b540 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f002 f9cc 	bl	800d886 <SDMMC_GetResponse>
 800b4ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	0fdb      	lsrs	r3, r3, #31
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d101      	bne.n	800b4fc <SD_PowerON+0xcc>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e000      	b.n	800b4fe <SD_PowerON+0xce>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	613b      	str	r3, [r7, #16]

    count++;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	3301      	adds	r3, #1
 800b504:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d802      	bhi.n	800b516 <SD_PowerON+0xe6>
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0cc      	beq.n	800b4b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d902      	bls.n	800b526 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b520:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b524:	e00c      	b.n	800b540 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	645a      	str	r2, [r3, #68]	@ 0x44
 800b536:	e002      	b.n	800b53e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	c1100000 	.word	0xc1100000

0800b54c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d102      	bne.n	800b562 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b55c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b560:	e018      	b.n	800b594 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b56a:	041b      	lsls	r3, r3, #16
 800b56c:	4619      	mov	r1, r3
 800b56e:	4610      	mov	r0, r2
 800b570:	f002 fbdb 	bl	800dd2a <SDMMC_CmdSendStatus>
 800b574:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	e009      	b.n	800b594 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2100      	movs	r1, #0
 800b586:	4618      	mov	r0, r3
 800b588:	f002 f97d 	bl	800d886 <SDMMC_GetResponse>
 800b58c:	4602      	mov	r2, r0
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f002 f967 	bl	800d886 <SDMMC_GetResponse>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5c2:	d102      	bne.n	800b5ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b5c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5c8:	e02f      	b.n	800b62a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b5ca:	f107 030c 	add.w	r3, r7, #12
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f879 	bl	800b6c8 <SD_FindSCR>
 800b5d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	e023      	b.n	800b62a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d01c      	beq.n	800b626 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5f4:	041b      	lsls	r3, r3, #16
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f002 faaf 	bl	800db5c <SDMMC_CmdAppCommand>
 800b5fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	e00f      	b.n	800b62a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2102      	movs	r1, #2
 800b610:	4618      	mov	r0, r3
 800b612:	f002 fae9 	bl	800dbe8 <SDMMC_CmdBusWidth>
 800b616:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	e003      	b.n	800b62a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b622:	2300      	movs	r3, #0
 800b624:	e001      	b.n	800b62a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b626:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b086      	sub	sp, #24
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
 800b63e:	2300      	movs	r3, #0
 800b640:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2100      	movs	r1, #0
 800b648:	4618      	mov	r0, r3
 800b64a:	f002 f91c 	bl	800d886 <SDMMC_GetResponse>
 800b64e:	4603      	mov	r3, r0
 800b650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b658:	d102      	bne.n	800b660 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b65a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b65e:	e02f      	b.n	800b6c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b660:	f107 030c 	add.w	r3, r7, #12
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f82e 	bl	800b6c8 <SD_FindSCR>
 800b66c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	e023      	b.n	800b6c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d01c      	beq.n	800b6bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b68a:	041b      	lsls	r3, r3, #16
 800b68c:	4619      	mov	r1, r3
 800b68e:	4610      	mov	r0, r2
 800b690:	f002 fa64 	bl	800db5c <SDMMC_CmdAppCommand>
 800b694:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	e00f      	b.n	800b6c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f002 fa9e 	bl	800dbe8 <SDMMC_CmdBusWidth>
 800b6ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	e003      	b.n	800b6c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	e001      	b.n	800b6c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b6bc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b6c8:	b590      	push	{r4, r7, lr}
 800b6ca:	b08f      	sub	sp, #60	@ 0x3c
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b6d2:	f7f7 fdf1 	bl	80032b8 <HAL_GetTick>
 800b6d6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60bb      	str	r3, [r7, #8]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2108      	movs	r1, #8
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f002 f908 	bl	800d904 <SDMMC_CmdBlockLength>
 800b6f4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fe:	e0b2      	b.n	800b866 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b708:	041b      	lsls	r3, r3, #16
 800b70a:	4619      	mov	r1, r3
 800b70c:	4610      	mov	r0, r2
 800b70e:	f002 fa25 	bl	800db5c <SDMMC_CmdAppCommand>
 800b712:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71c:	e0a3      	b.n	800b866 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b71e:	f04f 33ff 	mov.w	r3, #4294967295
 800b722:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b724:	2308      	movs	r3, #8
 800b726:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b728:	2330      	movs	r3, #48	@ 0x30
 800b72a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b72c:	2302      	movs	r3, #2
 800b72e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b730:	2300      	movs	r3, #0
 800b732:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b734:	2301      	movs	r3, #1
 800b736:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f107 0210 	add.w	r2, r7, #16
 800b740:	4611      	mov	r1, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f002 f8b2 	bl	800d8ac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f002 fa6d 	bl	800dc2c <SDMMC_CmdSendSCR>
 800b752:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b756:	2b00      	cmp	r3, #0
 800b758:	d02a      	beq.n	800b7b0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75c:	e083      	b.n	800b866 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00f      	beq.n	800b78c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6819      	ldr	r1, [r3, #0]
 800b770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	f107 0208 	add.w	r2, r7, #8
 800b778:	18d4      	adds	r4, r2, r3
 800b77a:	4608      	mov	r0, r1
 800b77c:	f002 f822 	bl	800d7c4 <SDMMC_ReadFIFO>
 800b780:	4603      	mov	r3, r0
 800b782:	6023      	str	r3, [r4, #0]
      index++;
 800b784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b786:	3301      	adds	r3, #1
 800b788:	637b      	str	r3, [r7, #52]	@ 0x34
 800b78a:	e006      	b.n	800b79a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b792:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b796:	2b00      	cmp	r3, #0
 800b798:	d012      	beq.n	800b7c0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b79a:	f7f7 fd8d 	bl	80032b8 <HAL_GetTick>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a8:	d102      	bne.n	800b7b0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b7aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b7ae:	e05a      	b.n	800b866 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7b6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d0cf      	beq.n	800b75e <SD_FindSCR+0x96>
 800b7be:	e000      	b.n	800b7c2 <SD_FindSCR+0xfa>
      break;
 800b7c0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7c8:	f003 0308 	and.w	r3, r3, #8
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d005      	beq.n	800b7dc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2208      	movs	r2, #8
 800b7d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b7d8:	2308      	movs	r3, #8
 800b7da:	e044      	b.n	800b866 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7e2:	f003 0302 	and.w	r3, r3, #2
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d005      	beq.n	800b7f6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	e037      	b.n	800b866 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7fc:	f003 0320 	and.w	r3, r3, #32
 800b800:	2b00      	cmp	r3, #0
 800b802:	d005      	beq.n	800b810 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2220      	movs	r2, #32
 800b80a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b80c:	2320      	movs	r3, #32
 800b80e:	e02a      	b.n	800b866 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b818:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	061a      	lsls	r2, r3, #24
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	021b      	lsls	r3, r3, #8
 800b822:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b826:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	0a1b      	lsrs	r3, r3, #8
 800b82c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b830:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	0e1b      	lsrs	r3, r3, #24
 800b836:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83a:	601a      	str	r2, [r3, #0]
    scr++;
 800b83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83e:	3304      	adds	r3, #4
 800b840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	061a      	lsls	r2, r3, #24
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	021b      	lsls	r3, r3, #8
 800b84a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b84e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	0a1b      	lsrs	r3, r3, #8
 800b854:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b858:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	0e1b      	lsrs	r3, r3, #24
 800b85e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b862:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	373c      	adds	r7, #60	@ 0x3c
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd90      	pop	{r4, r7, pc}

0800b86e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d101      	bne.n	800b882 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e025      	b.n	800b8ce <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d106      	bne.n	800b89c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7f7 f906 	bl	8002aa8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2202      	movs	r2, #2
 800b8a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	f001 fe96 	bl	800d5e0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6818      	ldr	r0, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	f001 feea 	bl	800d698 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
	...

0800b8d8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e04c      	b.n	800b984 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d106      	bne.n	800b904 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f7f6 fd58 	bl	80023b4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2202      	movs	r2, #2
 800b908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f022 0203 	bic.w	r2, r2, #3
 800b91a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	4b19      	ldr	r3, [pc, #100]	@ (800b98c <HAL_SPDIFRX_Init+0xb4>)
 800b928:	4013      	ands	r3, r2
 800b92a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b934:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b93a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b940:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b946:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b94c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b952:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b958:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800b95e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800b964:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	4313      	orrs	r3, r2
 800b96a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	fff88407 	.word	0xfff88407

0800b990 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e09d      	b.n	800bade <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d108      	bne.n	800b9bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b9b2:	d009      	beq.n	800b9c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	61da      	str	r2, [r3, #28]
 800b9ba:	e005      	b.n	800b9c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d106      	bne.n	800b9e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7f6 fd4a 	bl	800247c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b9fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ba08:	d902      	bls.n	800ba10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	60fb      	str	r3, [r7, #12]
 800ba0e:	e002      	b.n	800ba16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ba10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ba1e:	d007      	beq.n	800ba30 <HAL_SPI_Init+0xa0>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ba28:	d002      	beq.n	800ba30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ba40:	431a      	orrs	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	695b      	ldr	r3, [r3, #20]
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	431a      	orrs	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba5e:	431a      	orrs	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	69db      	ldr	r3, [r3, #28]
 800ba64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba72:	ea42 0103 	orr.w	r1, r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	430a      	orrs	r2, r1
 800ba84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	0c1b      	lsrs	r3, r3, #16
 800ba8c:	f003 0204 	and.w	r2, r3, #4
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba94:	f003 0310 	and.w	r3, r3, #16
 800ba98:	431a      	orrs	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba9e:	f003 0308 	and.w	r3, r3, #8
 800baa2:	431a      	orrs	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800baac:	ea42 0103 	orr.w	r1, r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	69da      	ldr	r2, [r3, #28]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bacc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e049      	b.n	800bb8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d106      	bne.n	800bb12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7f6 fd17 	bl	8002540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2202      	movs	r2, #2
 800bb16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	3304      	adds	r3, #4
 800bb22:	4619      	mov	r1, r3
 800bb24:	4610      	mov	r0, r2
 800bb26:	f000 fc11 	bl	800c34c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2201      	movs	r2, #1
 800bb46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d001      	beq.n	800bbac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e054      	b.n	800bc56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68da      	ldr	r2, [r3, #12]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f042 0201 	orr.w	r2, r2, #1
 800bbc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a26      	ldr	r2, [pc, #152]	@ (800bc64 <HAL_TIM_Base_Start_IT+0xd0>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d022      	beq.n	800bc14 <HAL_TIM_Base_Start_IT+0x80>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbd6:	d01d      	beq.n	800bc14 <HAL_TIM_Base_Start_IT+0x80>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a22      	ldr	r2, [pc, #136]	@ (800bc68 <HAL_TIM_Base_Start_IT+0xd4>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d018      	beq.n	800bc14 <HAL_TIM_Base_Start_IT+0x80>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a21      	ldr	r2, [pc, #132]	@ (800bc6c <HAL_TIM_Base_Start_IT+0xd8>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d013      	beq.n	800bc14 <HAL_TIM_Base_Start_IT+0x80>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a1f      	ldr	r2, [pc, #124]	@ (800bc70 <HAL_TIM_Base_Start_IT+0xdc>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d00e      	beq.n	800bc14 <HAL_TIM_Base_Start_IT+0x80>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a1e      	ldr	r2, [pc, #120]	@ (800bc74 <HAL_TIM_Base_Start_IT+0xe0>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d009      	beq.n	800bc14 <HAL_TIM_Base_Start_IT+0x80>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a1c      	ldr	r2, [pc, #112]	@ (800bc78 <HAL_TIM_Base_Start_IT+0xe4>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d004      	beq.n	800bc14 <HAL_TIM_Base_Start_IT+0x80>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a1b      	ldr	r2, [pc, #108]	@ (800bc7c <HAL_TIM_Base_Start_IT+0xe8>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d115      	bne.n	800bc40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	689a      	ldr	r2, [r3, #8]
 800bc1a:	4b19      	ldr	r3, [pc, #100]	@ (800bc80 <HAL_TIM_Base_Start_IT+0xec>)
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2b06      	cmp	r3, #6
 800bc24:	d015      	beq.n	800bc52 <HAL_TIM_Base_Start_IT+0xbe>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc2c:	d011      	beq.n	800bc52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f042 0201 	orr.w	r2, r2, #1
 800bc3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc3e:	e008      	b.n	800bc52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f042 0201 	orr.w	r2, r2, #1
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	e000      	b.n	800bc54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	40010000 	.word	0x40010000
 800bc68:	40000400 	.word	0x40000400
 800bc6c:	40000800 	.word	0x40000800
 800bc70:	40000c00 	.word	0x40000c00
 800bc74:	40010400 	.word	0x40010400
 800bc78:	40014000 	.word	0x40014000
 800bc7c:	40001800 	.word	0x40001800
 800bc80:	00010007 	.word	0x00010007

0800bc84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d101      	bne.n	800bc96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e049      	b.n	800bd2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d106      	bne.n	800bcb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f7f6 fcb6 	bl	800261c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4610      	mov	r0, r2
 800bcc4:	f000 fb42 	bl	800c34c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f003 0302 	and.w	r3, r3, #2
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d020      	beq.n	800bd96 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f003 0302 	and.w	r3, r3, #2
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d01b      	beq.n	800bd96 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f06f 0202 	mvn.w	r2, #2
 800bd66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	f003 0303 	and.w	r3, r3, #3
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 fac7 	bl	800c310 <HAL_TIM_IC_CaptureCallback>
 800bd82:	e005      	b.n	800bd90 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fab9 	bl	800c2fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 faca 	bl	800c324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d020      	beq.n	800bde2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f003 0304 	and.w	r3, r3, #4
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d01b      	beq.n	800bde2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f06f 0204 	mvn.w	r2, #4
 800bdb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d003      	beq.n	800bdd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 faa1 	bl	800c310 <HAL_TIM_IC_CaptureCallback>
 800bdce:	e005      	b.n	800bddc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fa93 	bl	800c2fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 faa4 	bl	800c324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	f003 0308 	and.w	r3, r3, #8
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d020      	beq.n	800be2e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f003 0308 	and.w	r3, r3, #8
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d01b      	beq.n	800be2e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f06f 0208 	mvn.w	r2, #8
 800bdfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2204      	movs	r2, #4
 800be04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	69db      	ldr	r3, [r3, #28]
 800be0c:	f003 0303 	and.w	r3, r3, #3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fa7b 	bl	800c310 <HAL_TIM_IC_CaptureCallback>
 800be1a:	e005      	b.n	800be28 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fa6d 	bl	800c2fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fa7e 	bl	800c324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	f003 0310 	and.w	r3, r3, #16
 800be34:	2b00      	cmp	r3, #0
 800be36:	d020      	beq.n	800be7a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f003 0310 	and.w	r3, r3, #16
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d01b      	beq.n	800be7a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f06f 0210 	mvn.w	r2, #16
 800be4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2208      	movs	r2, #8
 800be50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	69db      	ldr	r3, [r3, #28]
 800be58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d003      	beq.n	800be68 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fa55 	bl	800c310 <HAL_TIM_IC_CaptureCallback>
 800be66:	e005      	b.n	800be74 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fa47 	bl	800c2fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fa58 	bl	800c324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	f003 0301 	and.w	r3, r3, #1
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00c      	beq.n	800be9e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d007      	beq.n	800be9e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f06f 0201 	mvn.w	r2, #1
 800be96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f7f5 fe5d 	bl	8001b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d104      	bne.n	800beb2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00c      	beq.n	800becc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d007      	beq.n	800becc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fefa 	bl	800ccc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00c      	beq.n	800bef0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d007      	beq.n	800bef0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fef2 	bl	800ccd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00c      	beq.n	800bf14 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d007      	beq.n	800bf14 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bf0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fa12 	bl	800c338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	f003 0320 	and.w	r3, r3, #32
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00c      	beq.n	800bf38 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f003 0320 	and.w	r3, r3, #32
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d007      	beq.n	800bf38 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f06f 0220 	mvn.w	r2, #32
 800bf30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 feba 	bl	800ccac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d101      	bne.n	800bf5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e0ff      	b.n	800c15e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b14      	cmp	r3, #20
 800bf6a:	f200 80f0 	bhi.w	800c14e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bf6e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf74:	0800bfc9 	.word	0x0800bfc9
 800bf78:	0800c14f 	.word	0x0800c14f
 800bf7c:	0800c14f 	.word	0x0800c14f
 800bf80:	0800c14f 	.word	0x0800c14f
 800bf84:	0800c009 	.word	0x0800c009
 800bf88:	0800c14f 	.word	0x0800c14f
 800bf8c:	0800c14f 	.word	0x0800c14f
 800bf90:	0800c14f 	.word	0x0800c14f
 800bf94:	0800c04b 	.word	0x0800c04b
 800bf98:	0800c14f 	.word	0x0800c14f
 800bf9c:	0800c14f 	.word	0x0800c14f
 800bfa0:	0800c14f 	.word	0x0800c14f
 800bfa4:	0800c08b 	.word	0x0800c08b
 800bfa8:	0800c14f 	.word	0x0800c14f
 800bfac:	0800c14f 	.word	0x0800c14f
 800bfb0:	0800c14f 	.word	0x0800c14f
 800bfb4:	0800c0cd 	.word	0x0800c0cd
 800bfb8:	0800c14f 	.word	0x0800c14f
 800bfbc:	0800c14f 	.word	0x0800c14f
 800bfc0:	0800c14f 	.word	0x0800c14f
 800bfc4:	0800c10d 	.word	0x0800c10d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68b9      	ldr	r1, [r7, #8]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 fa68 	bl	800c4a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	699a      	ldr	r2, [r3, #24]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f042 0208 	orr.w	r2, r2, #8
 800bfe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	699a      	ldr	r2, [r3, #24]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f022 0204 	bic.w	r2, r2, #4
 800bff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6999      	ldr	r1, [r3, #24]
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	691a      	ldr	r2, [r3, #16]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	619a      	str	r2, [r3, #24]
      break;
 800c006:	e0a5      	b.n	800c154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68b9      	ldr	r1, [r7, #8]
 800c00e:	4618      	mov	r0, r3
 800c010:	f000 faba 	bl	800c588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	699a      	ldr	r2, [r3, #24]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	699a      	ldr	r2, [r3, #24]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	6999      	ldr	r1, [r3, #24]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	021a      	lsls	r2, r3, #8
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	430a      	orrs	r2, r1
 800c046:	619a      	str	r2, [r3, #24]
      break;
 800c048:	e084      	b.n	800c154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68b9      	ldr	r1, [r7, #8]
 800c050:	4618      	mov	r0, r3
 800c052:	f000 fb11 	bl	800c678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	69da      	ldr	r2, [r3, #28]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f042 0208 	orr.w	r2, r2, #8
 800c064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	69da      	ldr	r2, [r3, #28]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f022 0204 	bic.w	r2, r2, #4
 800c074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	69d9      	ldr	r1, [r3, #28]
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	691a      	ldr	r2, [r3, #16]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	430a      	orrs	r2, r1
 800c086:	61da      	str	r2, [r3, #28]
      break;
 800c088:	e064      	b.n	800c154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68b9      	ldr	r1, [r7, #8]
 800c090:	4618      	mov	r0, r3
 800c092:	f000 fb67 	bl	800c764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69da      	ldr	r2, [r3, #28]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c0a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	69da      	ldr	r2, [r3, #28]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c0b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	69d9      	ldr	r1, [r3, #28]
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	021a      	lsls	r2, r3, #8
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	61da      	str	r2, [r3, #28]
      break;
 800c0ca:	e043      	b.n	800c154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68b9      	ldr	r1, [r7, #8]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 fb9e 	bl	800c814 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f042 0208 	orr.w	r2, r2, #8
 800c0e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f022 0204 	bic.w	r2, r2, #4
 800c0f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	691a      	ldr	r2, [r3, #16]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	430a      	orrs	r2, r1
 800c108:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c10a:	e023      	b.n	800c154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68b9      	ldr	r1, [r7, #8]
 800c112:	4618      	mov	r0, r3
 800c114:	f000 fbd0 	bl	800c8b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c126:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c136:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	021a      	lsls	r2, r3, #8
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	430a      	orrs	r2, r1
 800c14a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c14c:	e002      	b.n	800c154 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	75fb      	strb	r3, [r7, #23]
      break;
 800c152:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c15c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop

0800c168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d101      	bne.n	800c184 <HAL_TIM_ConfigClockSource+0x1c>
 800c180:	2302      	movs	r3, #2
 800c182:	e0b4      	b.n	800c2ee <HAL_TIM_ConfigClockSource+0x186>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2202      	movs	r2, #2
 800c190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	4b56      	ldr	r3, [pc, #344]	@ (800c2f8 <HAL_TIM_ConfigClockSource+0x190>)
 800c1a0:	4013      	ands	r3, r2
 800c1a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c1aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1bc:	d03e      	beq.n	800c23c <HAL_TIM_ConfigClockSource+0xd4>
 800c1be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1c2:	f200 8087 	bhi.w	800c2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c1c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1ca:	f000 8086 	beq.w	800c2da <HAL_TIM_ConfigClockSource+0x172>
 800c1ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1d2:	d87f      	bhi.n	800c2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c1d4:	2b70      	cmp	r3, #112	@ 0x70
 800c1d6:	d01a      	beq.n	800c20e <HAL_TIM_ConfigClockSource+0xa6>
 800c1d8:	2b70      	cmp	r3, #112	@ 0x70
 800c1da:	d87b      	bhi.n	800c2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c1dc:	2b60      	cmp	r3, #96	@ 0x60
 800c1de:	d050      	beq.n	800c282 <HAL_TIM_ConfigClockSource+0x11a>
 800c1e0:	2b60      	cmp	r3, #96	@ 0x60
 800c1e2:	d877      	bhi.n	800c2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c1e4:	2b50      	cmp	r3, #80	@ 0x50
 800c1e6:	d03c      	beq.n	800c262 <HAL_TIM_ConfigClockSource+0xfa>
 800c1e8:	2b50      	cmp	r3, #80	@ 0x50
 800c1ea:	d873      	bhi.n	800c2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c1ec:	2b40      	cmp	r3, #64	@ 0x40
 800c1ee:	d058      	beq.n	800c2a2 <HAL_TIM_ConfigClockSource+0x13a>
 800c1f0:	2b40      	cmp	r3, #64	@ 0x40
 800c1f2:	d86f      	bhi.n	800c2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c1f4:	2b30      	cmp	r3, #48	@ 0x30
 800c1f6:	d064      	beq.n	800c2c2 <HAL_TIM_ConfigClockSource+0x15a>
 800c1f8:	2b30      	cmp	r3, #48	@ 0x30
 800c1fa:	d86b      	bhi.n	800c2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c1fc:	2b20      	cmp	r3, #32
 800c1fe:	d060      	beq.n	800c2c2 <HAL_TIM_ConfigClockSource+0x15a>
 800c200:	2b20      	cmp	r3, #32
 800c202:	d867      	bhi.n	800c2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c204:	2b00      	cmp	r3, #0
 800c206:	d05c      	beq.n	800c2c2 <HAL_TIM_ConfigClockSource+0x15a>
 800c208:	2b10      	cmp	r3, #16
 800c20a:	d05a      	beq.n	800c2c2 <HAL_TIM_ConfigClockSource+0x15a>
 800c20c:	e062      	b.n	800c2d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c21e:	f000 fc19 	bl	800ca54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	609a      	str	r2, [r3, #8]
      break;
 800c23a:	e04f      	b.n	800c2dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c24c:	f000 fc02 	bl	800ca54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c25e:	609a      	str	r2, [r3, #8]
      break;
 800c260:	e03c      	b.n	800c2dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c26e:	461a      	mov	r2, r3
 800c270:	f000 fb76 	bl	800c960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2150      	movs	r1, #80	@ 0x50
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 fbcf 	bl	800ca1e <TIM_ITRx_SetConfig>
      break;
 800c280:	e02c      	b.n	800c2dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c28e:	461a      	mov	r2, r3
 800c290:	f000 fb95 	bl	800c9be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2160      	movs	r1, #96	@ 0x60
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 fbbf 	bl	800ca1e <TIM_ITRx_SetConfig>
      break;
 800c2a0:	e01c      	b.n	800c2dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	f000 fb56 	bl	800c960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2140      	movs	r1, #64	@ 0x40
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 fbaf 	bl	800ca1e <TIM_ITRx_SetConfig>
      break;
 800c2c0:	e00c      	b.n	800c2dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	f000 fba6 	bl	800ca1e <TIM_ITRx_SetConfig>
      break;
 800c2d2:	e003      	b.n	800c2dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2d8:	e000      	b.n	800c2dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c2da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	fffeff88 	.word	0xfffeff88

0800c2fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c304:	bf00      	nop
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c318:	bf00      	nop
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a46      	ldr	r2, [pc, #280]	@ (800c478 <TIM_Base_SetConfig+0x12c>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d013      	beq.n	800c38c <TIM_Base_SetConfig+0x40>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c36a:	d00f      	beq.n	800c38c <TIM_Base_SetConfig+0x40>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a43      	ldr	r2, [pc, #268]	@ (800c47c <TIM_Base_SetConfig+0x130>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d00b      	beq.n	800c38c <TIM_Base_SetConfig+0x40>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4a42      	ldr	r2, [pc, #264]	@ (800c480 <TIM_Base_SetConfig+0x134>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d007      	beq.n	800c38c <TIM_Base_SetConfig+0x40>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a41      	ldr	r2, [pc, #260]	@ (800c484 <TIM_Base_SetConfig+0x138>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d003      	beq.n	800c38c <TIM_Base_SetConfig+0x40>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a40      	ldr	r2, [pc, #256]	@ (800c488 <TIM_Base_SetConfig+0x13c>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d108      	bne.n	800c39e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a35      	ldr	r2, [pc, #212]	@ (800c478 <TIM_Base_SetConfig+0x12c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d02b      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ac:	d027      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a32      	ldr	r2, [pc, #200]	@ (800c47c <TIM_Base_SetConfig+0x130>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d023      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a31      	ldr	r2, [pc, #196]	@ (800c480 <TIM_Base_SetConfig+0x134>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d01f      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a30      	ldr	r2, [pc, #192]	@ (800c484 <TIM_Base_SetConfig+0x138>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d01b      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a2f      	ldr	r2, [pc, #188]	@ (800c488 <TIM_Base_SetConfig+0x13c>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d017      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4a2e      	ldr	r2, [pc, #184]	@ (800c48c <TIM_Base_SetConfig+0x140>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d013      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4a2d      	ldr	r2, [pc, #180]	@ (800c490 <TIM_Base_SetConfig+0x144>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d00f      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4a2c      	ldr	r2, [pc, #176]	@ (800c494 <TIM_Base_SetConfig+0x148>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d00b      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a2b      	ldr	r2, [pc, #172]	@ (800c498 <TIM_Base_SetConfig+0x14c>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d007      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4a2a      	ldr	r2, [pc, #168]	@ (800c49c <TIM_Base_SetConfig+0x150>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d003      	beq.n	800c3fe <TIM_Base_SetConfig+0xb2>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	4a29      	ldr	r2, [pc, #164]	@ (800c4a0 <TIM_Base_SetConfig+0x154>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d108      	bne.n	800c410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	689a      	ldr	r2, [r3, #8]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a10      	ldr	r2, [pc, #64]	@ (800c478 <TIM_Base_SetConfig+0x12c>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d003      	beq.n	800c444 <TIM_Base_SetConfig+0xf8>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a12      	ldr	r2, [pc, #72]	@ (800c488 <TIM_Base_SetConfig+0x13c>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d103      	bne.n	800c44c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	691a      	ldr	r2, [r3, #16]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d105      	bne.n	800c46a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	f023 0201 	bic.w	r2, r3, #1
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	611a      	str	r2, [r3, #16]
  }
}
 800c46a:	bf00      	nop
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	40010000 	.word	0x40010000
 800c47c:	40000400 	.word	0x40000400
 800c480:	40000800 	.word	0x40000800
 800c484:	40000c00 	.word	0x40000c00
 800c488:	40010400 	.word	0x40010400
 800c48c:	40014000 	.word	0x40014000
 800c490:	40014400 	.word	0x40014400
 800c494:	40014800 	.word	0x40014800
 800c498:	40001800 	.word	0x40001800
 800c49c:	40001c00 	.word	0x40001c00
 800c4a0:	40002000 	.word	0x40002000

0800c4a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b087      	sub	sp, #28
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a1b      	ldr	r3, [r3, #32]
 800c4b8:	f023 0201 	bic.w	r2, r3, #1
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4b2b      	ldr	r3, [pc, #172]	@ (800c57c <TIM_OC1_SetConfig+0xd8>)
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f023 0303 	bic.w	r3, r3, #3
 800c4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	f023 0302 	bic.w	r3, r3, #2
 800c4ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a21      	ldr	r2, [pc, #132]	@ (800c580 <TIM_OC1_SetConfig+0xdc>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d003      	beq.n	800c508 <TIM_OC1_SetConfig+0x64>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a20      	ldr	r2, [pc, #128]	@ (800c584 <TIM_OC1_SetConfig+0xe0>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d10c      	bne.n	800c522 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	f023 0308 	bic.w	r3, r3, #8
 800c50e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	697a      	ldr	r2, [r7, #20]
 800c516:	4313      	orrs	r3, r2
 800c518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	f023 0304 	bic.w	r3, r3, #4
 800c520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a16      	ldr	r2, [pc, #88]	@ (800c580 <TIM_OC1_SetConfig+0xdc>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d003      	beq.n	800c532 <TIM_OC1_SetConfig+0x8e>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a15      	ldr	r2, [pc, #84]	@ (800c584 <TIM_OC1_SetConfig+0xe0>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d111      	bne.n	800c556 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	695b      	ldr	r3, [r3, #20]
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	4313      	orrs	r3, r2
 800c54a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	4313      	orrs	r3, r2
 800c554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	621a      	str	r2, [r3, #32]
}
 800c570:	bf00      	nop
 800c572:	371c      	adds	r7, #28
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	fffeff8f 	.word	0xfffeff8f
 800c580:	40010000 	.word	0x40010000
 800c584:	40010400 	.word	0x40010400

0800c588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a1b      	ldr	r3, [r3, #32]
 800c59c:	f023 0210 	bic.w	r2, r3, #16
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	4b2e      	ldr	r3, [pc, #184]	@ (800c66c <TIM_OC2_SetConfig+0xe4>)
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c5be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	021b      	lsls	r3, r3, #8
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	f023 0320 	bic.w	r3, r3, #32
 800c5d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	011b      	lsls	r3, r3, #4
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a23      	ldr	r2, [pc, #140]	@ (800c670 <TIM_OC2_SetConfig+0xe8>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d003      	beq.n	800c5f0 <TIM_OC2_SetConfig+0x68>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a22      	ldr	r2, [pc, #136]	@ (800c674 <TIM_OC2_SetConfig+0xec>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d10d      	bne.n	800c60c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	011b      	lsls	r3, r3, #4
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	4313      	orrs	r3, r2
 800c602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c60a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a18      	ldr	r2, [pc, #96]	@ (800c670 <TIM_OC2_SetConfig+0xe8>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d003      	beq.n	800c61c <TIM_OC2_SetConfig+0x94>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a17      	ldr	r2, [pc, #92]	@ (800c674 <TIM_OC2_SetConfig+0xec>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d113      	bne.n	800c644 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c62a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	695b      	ldr	r3, [r3, #20]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	693a      	ldr	r2, [r7, #16]
 800c634:	4313      	orrs	r3, r2
 800c636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	4313      	orrs	r3, r2
 800c642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	685a      	ldr	r2, [r3, #4]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	697a      	ldr	r2, [r7, #20]
 800c65c:	621a      	str	r2, [r3, #32]
}
 800c65e:	bf00      	nop
 800c660:	371c      	adds	r7, #28
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	feff8fff 	.word	0xfeff8fff
 800c670:	40010000 	.word	0x40010000
 800c674:	40010400 	.word	0x40010400

0800c678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	69db      	ldr	r3, [r3, #28]
 800c69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	4b2d      	ldr	r3, [pc, #180]	@ (800c758 <TIM_OC3_SetConfig+0xe0>)
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f023 0303 	bic.w	r3, r3, #3
 800c6ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c6c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	021b      	lsls	r3, r3, #8
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a22      	ldr	r2, [pc, #136]	@ (800c75c <TIM_OC3_SetConfig+0xe4>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d003      	beq.n	800c6de <TIM_OC3_SetConfig+0x66>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a21      	ldr	r2, [pc, #132]	@ (800c760 <TIM_OC3_SetConfig+0xe8>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d10d      	bne.n	800c6fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c6e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	021b      	lsls	r3, r3, #8
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c6f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a17      	ldr	r2, [pc, #92]	@ (800c75c <TIM_OC3_SetConfig+0xe4>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d003      	beq.n	800c70a <TIM_OC3_SetConfig+0x92>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a16      	ldr	r2, [pc, #88]	@ (800c760 <TIM_OC3_SetConfig+0xe8>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d113      	bne.n	800c732 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	011b      	lsls	r3, r3, #4
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	4313      	orrs	r3, r2
 800c724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	011b      	lsls	r3, r3, #4
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	4313      	orrs	r3, r2
 800c730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	693a      	ldr	r2, [r7, #16]
 800c736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	621a      	str	r2, [r3, #32]
}
 800c74c:	bf00      	nop
 800c74e:	371c      	adds	r7, #28
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	fffeff8f 	.word	0xfffeff8f
 800c75c:	40010000 	.word	0x40010000
 800c760:	40010400 	.word	0x40010400

0800c764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6a1b      	ldr	r3, [r3, #32]
 800c778:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	4b1e      	ldr	r3, [pc, #120]	@ (800c808 <TIM_OC4_SetConfig+0xa4>)
 800c790:	4013      	ands	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c79a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	021b      	lsls	r3, r3, #8
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c7ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	031b      	lsls	r3, r3, #12
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a13      	ldr	r2, [pc, #76]	@ (800c80c <TIM_OC4_SetConfig+0xa8>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d003      	beq.n	800c7cc <TIM_OC4_SetConfig+0x68>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a12      	ldr	r2, [pc, #72]	@ (800c810 <TIM_OC4_SetConfig+0xac>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d109      	bne.n	800c7e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	695b      	ldr	r3, [r3, #20]
 800c7d8:	019b      	lsls	r3, r3, #6
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	621a      	str	r2, [r3, #32]
}
 800c7fa:	bf00      	nop
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	feff8fff 	.word	0xfeff8fff
 800c80c:	40010000 	.word	0x40010000
 800c810:	40010400 	.word	0x40010400

0800c814 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c814:	b480      	push	{r7}
 800c816:	b087      	sub	sp, #28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a1b      	ldr	r3, [r3, #32]
 800c828:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	4b1b      	ldr	r3, [pc, #108]	@ (800c8ac <TIM_OC5_SetConfig+0x98>)
 800c840:	4013      	ands	r3, r2
 800c842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c854:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	041b      	lsls	r3, r3, #16
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	4313      	orrs	r3, r2
 800c860:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a12      	ldr	r2, [pc, #72]	@ (800c8b0 <TIM_OC5_SetConfig+0x9c>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d003      	beq.n	800c872 <TIM_OC5_SetConfig+0x5e>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a11      	ldr	r2, [pc, #68]	@ (800c8b4 <TIM_OC5_SetConfig+0xa0>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d109      	bne.n	800c886 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c878:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	021b      	lsls	r3, r3, #8
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	4313      	orrs	r3, r2
 800c884:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	621a      	str	r2, [r3, #32]
}
 800c8a0:	bf00      	nop
 800c8a2:	371c      	adds	r7, #28
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	fffeff8f 	.word	0xfffeff8f
 800c8b0:	40010000 	.word	0x40010000
 800c8b4:	40010400 	.word	0x40010400

0800c8b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	4b1c      	ldr	r3, [pc, #112]	@ (800c954 <TIM_OC6_SetConfig+0x9c>)
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	021b      	lsls	r3, r3, #8
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c8fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	051b      	lsls	r3, r3, #20
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	4313      	orrs	r3, r2
 800c906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a13      	ldr	r2, [pc, #76]	@ (800c958 <TIM_OC6_SetConfig+0xa0>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d003      	beq.n	800c918 <TIM_OC6_SetConfig+0x60>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a12      	ldr	r2, [pc, #72]	@ (800c95c <TIM_OC6_SetConfig+0xa4>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d109      	bne.n	800c92c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c91e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	029b      	lsls	r3, r3, #10
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	4313      	orrs	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	621a      	str	r2, [r3, #32]
}
 800c946:	bf00      	nop
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	feff8fff 	.word	0xfeff8fff
 800c958:	40010000 	.word	0x40010000
 800c95c:	40010400 	.word	0x40010400

0800c960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c960:	b480      	push	{r7}
 800c962:	b087      	sub	sp, #28
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6a1b      	ldr	r3, [r3, #32]
 800c970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6a1b      	ldr	r3, [r3, #32]
 800c976:	f023 0201 	bic.w	r2, r3, #1
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c98a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	011b      	lsls	r3, r3, #4
 800c990:	693a      	ldr	r2, [r7, #16]
 800c992:	4313      	orrs	r3, r2
 800c994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	f023 030a 	bic.w	r3, r3, #10
 800c99c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	621a      	str	r2, [r3, #32]
}
 800c9b2:	bf00      	nop
 800c9b4:	371c      	adds	r7, #28
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr

0800c9be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9be:	b480      	push	{r7}
 800c9c0:	b087      	sub	sp, #28
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	60f8      	str	r0, [r7, #12]
 800c9c6:	60b9      	str	r1, [r7, #8]
 800c9c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	f023 0210 	bic.w	r2, r3, #16
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c9e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	031b      	lsls	r3, r3, #12
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	011b      	lsls	r3, r3, #4
 800ca00:	697a      	ldr	r2, [r7, #20]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	621a      	str	r2, [r3, #32]
}
 800ca12:	bf00      	nop
 800ca14:	371c      	adds	r7, #28
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca1e:	b480      	push	{r7}
 800ca20:	b085      	sub	sp, #20
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	f043 0307 	orr.w	r3, r3, #7
 800ca40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	609a      	str	r2, [r3, #8]
}
 800ca48:	bf00      	nop
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b087      	sub	sp, #28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
 800ca60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	021a      	lsls	r2, r3, #8
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	431a      	orrs	r2, r3
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	697a      	ldr	r2, [r7, #20]
 800ca86:	609a      	str	r2, [r3, #8]
}
 800ca88:	bf00      	nop
 800ca8a:	371c      	adds	r7, #28
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d101      	bne.n	800caac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caa8:	2302      	movs	r3, #2
 800caaa:	e06d      	b.n	800cb88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a30      	ldr	r2, [pc, #192]	@ (800cb94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d004      	beq.n	800cae0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a2f      	ldr	r2, [pc, #188]	@ (800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d108      	bne.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cae6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a20      	ldr	r2, [pc, #128]	@ (800cb94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d022      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb1e:	d01d      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a1d      	ldr	r2, [pc, #116]	@ (800cb9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d018      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a1c      	ldr	r2, [pc, #112]	@ (800cba0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d013      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a1a      	ldr	r2, [pc, #104]	@ (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d00e      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a15      	ldr	r2, [pc, #84]	@ (800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d009      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a16      	ldr	r2, [pc, #88]	@ (800cba8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d004      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a15      	ldr	r2, [pc, #84]	@ (800cbac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d10c      	bne.n	800cb76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	40010000 	.word	0x40010000
 800cb98:	40010400 	.word	0x40010400
 800cb9c:	40000400 	.word	0x40000400
 800cba0:	40000800 	.word	0x40000800
 800cba4:	40000c00 	.word	0x40000c00
 800cba8:	40014000 	.word	0x40014000
 800cbac:	40001800 	.word	0x40001800

0800cbb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d101      	bne.n	800cbcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cbc8:	2302      	movs	r3, #2
 800cbca:	e065      	b.n	800cc98 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	695b      	ldr	r3, [r3, #20]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc32:	4313      	orrs	r3, r2
 800cc34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	699b      	ldr	r3, [r3, #24]
 800cc40:	041b      	lsls	r3, r3, #16
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a16      	ldr	r2, [pc, #88]	@ (800cca4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d004      	beq.n	800cc5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a14      	ldr	r2, [pc, #80]	@ (800cca8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d115      	bne.n	800cc86 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc64:	051b      	lsls	r3, r3, #20
 800cc66:	4313      	orrs	r3, r2
 800cc68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	69db      	ldr	r3, [r3, #28]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr
 800cca4:	40010000 	.word	0x40010000
 800cca8:	40010400 	.word	0x40010400

0800ccac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ccb4:	bf00      	nop
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e040      	b.n	800cd7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d106      	bne.n	800cd10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7f5 fd74 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2224      	movs	r2, #36	@ 0x24
 800cd14:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f022 0201 	bic.w	r2, r2, #1
 800cd24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d002      	beq.n	800cd34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fa8c 	bl	800d24c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f825 	bl	800cd84 <UART_SetConfig>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d101      	bne.n	800cd44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	e01b      	b.n	800cd7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689a      	ldr	r2, [r3, #8]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f042 0201 	orr.w	r2, r2, #1
 800cd72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 fb0b 	bl	800d390 <UART_CheckIdleState>
 800cd7a:	4603      	mov	r3, r0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b088      	sub	sp, #32
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	689a      	ldr	r2, [r3, #8]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	431a      	orrs	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	69db      	ldr	r3, [r3, #28]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	4ba6      	ldr	r3, [pc, #664]	@ (800d048 <UART_SetConfig+0x2c4>)
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	6812      	ldr	r2, [r2, #0]
 800cdb6:	6979      	ldr	r1, [r7, #20]
 800cdb8:	430b      	orrs	r3, r1
 800cdba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68da      	ldr	r2, [r3, #12]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	430a      	orrs	r2, r1
 800cdd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a1b      	ldr	r3, [r3, #32]
 800cddc:	697a      	ldr	r2, [r7, #20]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	697a      	ldr	r2, [r7, #20]
 800cdf2:	430a      	orrs	r2, r1
 800cdf4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a94      	ldr	r2, [pc, #592]	@ (800d04c <UART_SetConfig+0x2c8>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d120      	bne.n	800ce42 <UART_SetConfig+0xbe>
 800ce00:	4b93      	ldr	r3, [pc, #588]	@ (800d050 <UART_SetConfig+0x2cc>)
 800ce02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce06:	f003 0303 	and.w	r3, r3, #3
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d816      	bhi.n	800ce3c <UART_SetConfig+0xb8>
 800ce0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce14 <UART_SetConfig+0x90>)
 800ce10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce14:	0800ce25 	.word	0x0800ce25
 800ce18:	0800ce31 	.word	0x0800ce31
 800ce1c:	0800ce2b 	.word	0x0800ce2b
 800ce20:	0800ce37 	.word	0x0800ce37
 800ce24:	2301      	movs	r3, #1
 800ce26:	77fb      	strb	r3, [r7, #31]
 800ce28:	e150      	b.n	800d0cc <UART_SetConfig+0x348>
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	77fb      	strb	r3, [r7, #31]
 800ce2e:	e14d      	b.n	800d0cc <UART_SetConfig+0x348>
 800ce30:	2304      	movs	r3, #4
 800ce32:	77fb      	strb	r3, [r7, #31]
 800ce34:	e14a      	b.n	800d0cc <UART_SetConfig+0x348>
 800ce36:	2308      	movs	r3, #8
 800ce38:	77fb      	strb	r3, [r7, #31]
 800ce3a:	e147      	b.n	800d0cc <UART_SetConfig+0x348>
 800ce3c:	2310      	movs	r3, #16
 800ce3e:	77fb      	strb	r3, [r7, #31]
 800ce40:	e144      	b.n	800d0cc <UART_SetConfig+0x348>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a83      	ldr	r2, [pc, #524]	@ (800d054 <UART_SetConfig+0x2d0>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d132      	bne.n	800ceb2 <UART_SetConfig+0x12e>
 800ce4c:	4b80      	ldr	r3, [pc, #512]	@ (800d050 <UART_SetConfig+0x2cc>)
 800ce4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce52:	f003 030c 	and.w	r3, r3, #12
 800ce56:	2b0c      	cmp	r3, #12
 800ce58:	d828      	bhi.n	800ceac <UART_SetConfig+0x128>
 800ce5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce60 <UART_SetConfig+0xdc>)
 800ce5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce60:	0800ce95 	.word	0x0800ce95
 800ce64:	0800cead 	.word	0x0800cead
 800ce68:	0800cead 	.word	0x0800cead
 800ce6c:	0800cead 	.word	0x0800cead
 800ce70:	0800cea1 	.word	0x0800cea1
 800ce74:	0800cead 	.word	0x0800cead
 800ce78:	0800cead 	.word	0x0800cead
 800ce7c:	0800cead 	.word	0x0800cead
 800ce80:	0800ce9b 	.word	0x0800ce9b
 800ce84:	0800cead 	.word	0x0800cead
 800ce88:	0800cead 	.word	0x0800cead
 800ce8c:	0800cead 	.word	0x0800cead
 800ce90:	0800cea7 	.word	0x0800cea7
 800ce94:	2300      	movs	r3, #0
 800ce96:	77fb      	strb	r3, [r7, #31]
 800ce98:	e118      	b.n	800d0cc <UART_SetConfig+0x348>
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	77fb      	strb	r3, [r7, #31]
 800ce9e:	e115      	b.n	800d0cc <UART_SetConfig+0x348>
 800cea0:	2304      	movs	r3, #4
 800cea2:	77fb      	strb	r3, [r7, #31]
 800cea4:	e112      	b.n	800d0cc <UART_SetConfig+0x348>
 800cea6:	2308      	movs	r3, #8
 800cea8:	77fb      	strb	r3, [r7, #31]
 800ceaa:	e10f      	b.n	800d0cc <UART_SetConfig+0x348>
 800ceac:	2310      	movs	r3, #16
 800ceae:	77fb      	strb	r3, [r7, #31]
 800ceb0:	e10c      	b.n	800d0cc <UART_SetConfig+0x348>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a68      	ldr	r2, [pc, #416]	@ (800d058 <UART_SetConfig+0x2d4>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d120      	bne.n	800cefe <UART_SetConfig+0x17a>
 800cebc:	4b64      	ldr	r3, [pc, #400]	@ (800d050 <UART_SetConfig+0x2cc>)
 800cebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cec2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cec6:	2b30      	cmp	r3, #48	@ 0x30
 800cec8:	d013      	beq.n	800cef2 <UART_SetConfig+0x16e>
 800ceca:	2b30      	cmp	r3, #48	@ 0x30
 800cecc:	d814      	bhi.n	800cef8 <UART_SetConfig+0x174>
 800cece:	2b20      	cmp	r3, #32
 800ced0:	d009      	beq.n	800cee6 <UART_SetConfig+0x162>
 800ced2:	2b20      	cmp	r3, #32
 800ced4:	d810      	bhi.n	800cef8 <UART_SetConfig+0x174>
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d002      	beq.n	800cee0 <UART_SetConfig+0x15c>
 800ceda:	2b10      	cmp	r3, #16
 800cedc:	d006      	beq.n	800ceec <UART_SetConfig+0x168>
 800cede:	e00b      	b.n	800cef8 <UART_SetConfig+0x174>
 800cee0:	2300      	movs	r3, #0
 800cee2:	77fb      	strb	r3, [r7, #31]
 800cee4:	e0f2      	b.n	800d0cc <UART_SetConfig+0x348>
 800cee6:	2302      	movs	r3, #2
 800cee8:	77fb      	strb	r3, [r7, #31]
 800ceea:	e0ef      	b.n	800d0cc <UART_SetConfig+0x348>
 800ceec:	2304      	movs	r3, #4
 800ceee:	77fb      	strb	r3, [r7, #31]
 800cef0:	e0ec      	b.n	800d0cc <UART_SetConfig+0x348>
 800cef2:	2308      	movs	r3, #8
 800cef4:	77fb      	strb	r3, [r7, #31]
 800cef6:	e0e9      	b.n	800d0cc <UART_SetConfig+0x348>
 800cef8:	2310      	movs	r3, #16
 800cefa:	77fb      	strb	r3, [r7, #31]
 800cefc:	e0e6      	b.n	800d0cc <UART_SetConfig+0x348>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a56      	ldr	r2, [pc, #344]	@ (800d05c <UART_SetConfig+0x2d8>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d120      	bne.n	800cf4a <UART_SetConfig+0x1c6>
 800cf08:	4b51      	ldr	r3, [pc, #324]	@ (800d050 <UART_SetConfig+0x2cc>)
 800cf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cf12:	2bc0      	cmp	r3, #192	@ 0xc0
 800cf14:	d013      	beq.n	800cf3e <UART_SetConfig+0x1ba>
 800cf16:	2bc0      	cmp	r3, #192	@ 0xc0
 800cf18:	d814      	bhi.n	800cf44 <UART_SetConfig+0x1c0>
 800cf1a:	2b80      	cmp	r3, #128	@ 0x80
 800cf1c:	d009      	beq.n	800cf32 <UART_SetConfig+0x1ae>
 800cf1e:	2b80      	cmp	r3, #128	@ 0x80
 800cf20:	d810      	bhi.n	800cf44 <UART_SetConfig+0x1c0>
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d002      	beq.n	800cf2c <UART_SetConfig+0x1a8>
 800cf26:	2b40      	cmp	r3, #64	@ 0x40
 800cf28:	d006      	beq.n	800cf38 <UART_SetConfig+0x1b4>
 800cf2a:	e00b      	b.n	800cf44 <UART_SetConfig+0x1c0>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	77fb      	strb	r3, [r7, #31]
 800cf30:	e0cc      	b.n	800d0cc <UART_SetConfig+0x348>
 800cf32:	2302      	movs	r3, #2
 800cf34:	77fb      	strb	r3, [r7, #31]
 800cf36:	e0c9      	b.n	800d0cc <UART_SetConfig+0x348>
 800cf38:	2304      	movs	r3, #4
 800cf3a:	77fb      	strb	r3, [r7, #31]
 800cf3c:	e0c6      	b.n	800d0cc <UART_SetConfig+0x348>
 800cf3e:	2308      	movs	r3, #8
 800cf40:	77fb      	strb	r3, [r7, #31]
 800cf42:	e0c3      	b.n	800d0cc <UART_SetConfig+0x348>
 800cf44:	2310      	movs	r3, #16
 800cf46:	77fb      	strb	r3, [r7, #31]
 800cf48:	e0c0      	b.n	800d0cc <UART_SetConfig+0x348>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a44      	ldr	r2, [pc, #272]	@ (800d060 <UART_SetConfig+0x2dc>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d125      	bne.n	800cfa0 <UART_SetConfig+0x21c>
 800cf54:	4b3e      	ldr	r3, [pc, #248]	@ (800d050 <UART_SetConfig+0x2cc>)
 800cf56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf62:	d017      	beq.n	800cf94 <UART_SetConfig+0x210>
 800cf64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf68:	d817      	bhi.n	800cf9a <UART_SetConfig+0x216>
 800cf6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf6e:	d00b      	beq.n	800cf88 <UART_SetConfig+0x204>
 800cf70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf74:	d811      	bhi.n	800cf9a <UART_SetConfig+0x216>
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <UART_SetConfig+0x1fe>
 800cf7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf7e:	d006      	beq.n	800cf8e <UART_SetConfig+0x20a>
 800cf80:	e00b      	b.n	800cf9a <UART_SetConfig+0x216>
 800cf82:	2300      	movs	r3, #0
 800cf84:	77fb      	strb	r3, [r7, #31]
 800cf86:	e0a1      	b.n	800d0cc <UART_SetConfig+0x348>
 800cf88:	2302      	movs	r3, #2
 800cf8a:	77fb      	strb	r3, [r7, #31]
 800cf8c:	e09e      	b.n	800d0cc <UART_SetConfig+0x348>
 800cf8e:	2304      	movs	r3, #4
 800cf90:	77fb      	strb	r3, [r7, #31]
 800cf92:	e09b      	b.n	800d0cc <UART_SetConfig+0x348>
 800cf94:	2308      	movs	r3, #8
 800cf96:	77fb      	strb	r3, [r7, #31]
 800cf98:	e098      	b.n	800d0cc <UART_SetConfig+0x348>
 800cf9a:	2310      	movs	r3, #16
 800cf9c:	77fb      	strb	r3, [r7, #31]
 800cf9e:	e095      	b.n	800d0cc <UART_SetConfig+0x348>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a2f      	ldr	r2, [pc, #188]	@ (800d064 <UART_SetConfig+0x2e0>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d125      	bne.n	800cff6 <UART_SetConfig+0x272>
 800cfaa:	4b29      	ldr	r3, [pc, #164]	@ (800d050 <UART_SetConfig+0x2cc>)
 800cfac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cfb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cfb8:	d017      	beq.n	800cfea <UART_SetConfig+0x266>
 800cfba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cfbe:	d817      	bhi.n	800cff0 <UART_SetConfig+0x26c>
 800cfc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfc4:	d00b      	beq.n	800cfde <UART_SetConfig+0x25a>
 800cfc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfca:	d811      	bhi.n	800cff0 <UART_SetConfig+0x26c>
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d003      	beq.n	800cfd8 <UART_SetConfig+0x254>
 800cfd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cfd4:	d006      	beq.n	800cfe4 <UART_SetConfig+0x260>
 800cfd6:	e00b      	b.n	800cff0 <UART_SetConfig+0x26c>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	77fb      	strb	r3, [r7, #31]
 800cfdc:	e076      	b.n	800d0cc <UART_SetConfig+0x348>
 800cfde:	2302      	movs	r3, #2
 800cfe0:	77fb      	strb	r3, [r7, #31]
 800cfe2:	e073      	b.n	800d0cc <UART_SetConfig+0x348>
 800cfe4:	2304      	movs	r3, #4
 800cfe6:	77fb      	strb	r3, [r7, #31]
 800cfe8:	e070      	b.n	800d0cc <UART_SetConfig+0x348>
 800cfea:	2308      	movs	r3, #8
 800cfec:	77fb      	strb	r3, [r7, #31]
 800cfee:	e06d      	b.n	800d0cc <UART_SetConfig+0x348>
 800cff0:	2310      	movs	r3, #16
 800cff2:	77fb      	strb	r3, [r7, #31]
 800cff4:	e06a      	b.n	800d0cc <UART_SetConfig+0x348>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a1b      	ldr	r2, [pc, #108]	@ (800d068 <UART_SetConfig+0x2e4>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d138      	bne.n	800d072 <UART_SetConfig+0x2ee>
 800d000:	4b13      	ldr	r3, [pc, #76]	@ (800d050 <UART_SetConfig+0x2cc>)
 800d002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d006:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d00a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d00e:	d017      	beq.n	800d040 <UART_SetConfig+0x2bc>
 800d010:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d014:	d82a      	bhi.n	800d06c <UART_SetConfig+0x2e8>
 800d016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d01a:	d00b      	beq.n	800d034 <UART_SetConfig+0x2b0>
 800d01c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d020:	d824      	bhi.n	800d06c <UART_SetConfig+0x2e8>
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <UART_SetConfig+0x2aa>
 800d026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d02a:	d006      	beq.n	800d03a <UART_SetConfig+0x2b6>
 800d02c:	e01e      	b.n	800d06c <UART_SetConfig+0x2e8>
 800d02e:	2300      	movs	r3, #0
 800d030:	77fb      	strb	r3, [r7, #31]
 800d032:	e04b      	b.n	800d0cc <UART_SetConfig+0x348>
 800d034:	2302      	movs	r3, #2
 800d036:	77fb      	strb	r3, [r7, #31]
 800d038:	e048      	b.n	800d0cc <UART_SetConfig+0x348>
 800d03a:	2304      	movs	r3, #4
 800d03c:	77fb      	strb	r3, [r7, #31]
 800d03e:	e045      	b.n	800d0cc <UART_SetConfig+0x348>
 800d040:	2308      	movs	r3, #8
 800d042:	77fb      	strb	r3, [r7, #31]
 800d044:	e042      	b.n	800d0cc <UART_SetConfig+0x348>
 800d046:	bf00      	nop
 800d048:	efff69f3 	.word	0xefff69f3
 800d04c:	40011000 	.word	0x40011000
 800d050:	40023800 	.word	0x40023800
 800d054:	40004400 	.word	0x40004400
 800d058:	40004800 	.word	0x40004800
 800d05c:	40004c00 	.word	0x40004c00
 800d060:	40005000 	.word	0x40005000
 800d064:	40011400 	.word	0x40011400
 800d068:	40007800 	.word	0x40007800
 800d06c:	2310      	movs	r3, #16
 800d06e:	77fb      	strb	r3, [r7, #31]
 800d070:	e02c      	b.n	800d0cc <UART_SetConfig+0x348>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a72      	ldr	r2, [pc, #456]	@ (800d240 <UART_SetConfig+0x4bc>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d125      	bne.n	800d0c8 <UART_SetConfig+0x344>
 800d07c:	4b71      	ldr	r3, [pc, #452]	@ (800d244 <UART_SetConfig+0x4c0>)
 800d07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d082:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d086:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d08a:	d017      	beq.n	800d0bc <UART_SetConfig+0x338>
 800d08c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d090:	d817      	bhi.n	800d0c2 <UART_SetConfig+0x33e>
 800d092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d096:	d00b      	beq.n	800d0b0 <UART_SetConfig+0x32c>
 800d098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d09c:	d811      	bhi.n	800d0c2 <UART_SetConfig+0x33e>
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d003      	beq.n	800d0aa <UART_SetConfig+0x326>
 800d0a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d0a6:	d006      	beq.n	800d0b6 <UART_SetConfig+0x332>
 800d0a8:	e00b      	b.n	800d0c2 <UART_SetConfig+0x33e>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	77fb      	strb	r3, [r7, #31]
 800d0ae:	e00d      	b.n	800d0cc <UART_SetConfig+0x348>
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	77fb      	strb	r3, [r7, #31]
 800d0b4:	e00a      	b.n	800d0cc <UART_SetConfig+0x348>
 800d0b6:	2304      	movs	r3, #4
 800d0b8:	77fb      	strb	r3, [r7, #31]
 800d0ba:	e007      	b.n	800d0cc <UART_SetConfig+0x348>
 800d0bc:	2308      	movs	r3, #8
 800d0be:	77fb      	strb	r3, [r7, #31]
 800d0c0:	e004      	b.n	800d0cc <UART_SetConfig+0x348>
 800d0c2:	2310      	movs	r3, #16
 800d0c4:	77fb      	strb	r3, [r7, #31]
 800d0c6:	e001      	b.n	800d0cc <UART_SetConfig+0x348>
 800d0c8:	2310      	movs	r3, #16
 800d0ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	69db      	ldr	r3, [r3, #28]
 800d0d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d0d4:	d15b      	bne.n	800d18e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d0d6:	7ffb      	ldrb	r3, [r7, #31]
 800d0d8:	2b08      	cmp	r3, #8
 800d0da:	d828      	bhi.n	800d12e <UART_SetConfig+0x3aa>
 800d0dc:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e4 <UART_SetConfig+0x360>)
 800d0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e2:	bf00      	nop
 800d0e4:	0800d109 	.word	0x0800d109
 800d0e8:	0800d111 	.word	0x0800d111
 800d0ec:	0800d119 	.word	0x0800d119
 800d0f0:	0800d12f 	.word	0x0800d12f
 800d0f4:	0800d11f 	.word	0x0800d11f
 800d0f8:	0800d12f 	.word	0x0800d12f
 800d0fc:	0800d12f 	.word	0x0800d12f
 800d100:	0800d12f 	.word	0x0800d12f
 800d104:	0800d127 	.word	0x0800d127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d108:	f7fb fffc 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 800d10c:	61b8      	str	r0, [r7, #24]
        break;
 800d10e:	e013      	b.n	800d138 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d110:	f7fc f80c 	bl	800912c <HAL_RCC_GetPCLK2Freq>
 800d114:	61b8      	str	r0, [r7, #24]
        break;
 800d116:	e00f      	b.n	800d138 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d118:	4b4b      	ldr	r3, [pc, #300]	@ (800d248 <UART_SetConfig+0x4c4>)
 800d11a:	61bb      	str	r3, [r7, #24]
        break;
 800d11c:	e00c      	b.n	800d138 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d11e:	f7fb ff1f 	bl	8008f60 <HAL_RCC_GetSysClockFreq>
 800d122:	61b8      	str	r0, [r7, #24]
        break;
 800d124:	e008      	b.n	800d138 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d12a:	61bb      	str	r3, [r7, #24]
        break;
 800d12c:	e004      	b.n	800d138 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d12e:	2300      	movs	r3, #0
 800d130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	77bb      	strb	r3, [r7, #30]
        break;
 800d136:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d074      	beq.n	800d228 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	005a      	lsls	r2, r3, #1
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	085b      	lsrs	r3, r3, #1
 800d148:	441a      	add	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d152:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	2b0f      	cmp	r3, #15
 800d158:	d916      	bls.n	800d188 <UART_SetConfig+0x404>
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d160:	d212      	bcs.n	800d188 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	b29b      	uxth	r3, r3
 800d166:	f023 030f 	bic.w	r3, r3, #15
 800d16a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	085b      	lsrs	r3, r3, #1
 800d170:	b29b      	uxth	r3, r3
 800d172:	f003 0307 	and.w	r3, r3, #7
 800d176:	b29a      	uxth	r2, r3
 800d178:	89fb      	ldrh	r3, [r7, #14]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	89fa      	ldrh	r2, [r7, #14]
 800d184:	60da      	str	r2, [r3, #12]
 800d186:	e04f      	b.n	800d228 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	77bb      	strb	r3, [r7, #30]
 800d18c:	e04c      	b.n	800d228 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d18e:	7ffb      	ldrb	r3, [r7, #31]
 800d190:	2b08      	cmp	r3, #8
 800d192:	d828      	bhi.n	800d1e6 <UART_SetConfig+0x462>
 800d194:	a201      	add	r2, pc, #4	@ (adr r2, 800d19c <UART_SetConfig+0x418>)
 800d196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19a:	bf00      	nop
 800d19c:	0800d1c1 	.word	0x0800d1c1
 800d1a0:	0800d1c9 	.word	0x0800d1c9
 800d1a4:	0800d1d1 	.word	0x0800d1d1
 800d1a8:	0800d1e7 	.word	0x0800d1e7
 800d1ac:	0800d1d7 	.word	0x0800d1d7
 800d1b0:	0800d1e7 	.word	0x0800d1e7
 800d1b4:	0800d1e7 	.word	0x0800d1e7
 800d1b8:	0800d1e7 	.word	0x0800d1e7
 800d1bc:	0800d1df 	.word	0x0800d1df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1c0:	f7fb ffa0 	bl	8009104 <HAL_RCC_GetPCLK1Freq>
 800d1c4:	61b8      	str	r0, [r7, #24]
        break;
 800d1c6:	e013      	b.n	800d1f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1c8:	f7fb ffb0 	bl	800912c <HAL_RCC_GetPCLK2Freq>
 800d1cc:	61b8      	str	r0, [r7, #24]
        break;
 800d1ce:	e00f      	b.n	800d1f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d248 <UART_SetConfig+0x4c4>)
 800d1d2:	61bb      	str	r3, [r7, #24]
        break;
 800d1d4:	e00c      	b.n	800d1f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d1d6:	f7fb fec3 	bl	8008f60 <HAL_RCC_GetSysClockFreq>
 800d1da:	61b8      	str	r0, [r7, #24]
        break;
 800d1dc:	e008      	b.n	800d1f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1e2:	61bb      	str	r3, [r7, #24]
        break;
 800d1e4:	e004      	b.n	800d1f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	77bb      	strb	r3, [r7, #30]
        break;
 800d1ee:	bf00      	nop
    }

    if (pclk != 0U)
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d018      	beq.n	800d228 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	085a      	lsrs	r2, r3, #1
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	441a      	add	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	fbb2 f3f3 	udiv	r3, r2, r3
 800d208:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b0f      	cmp	r3, #15
 800d20e:	d909      	bls.n	800d224 <UART_SetConfig+0x4a0>
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d216:	d205      	bcs.n	800d224 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	b29a      	uxth	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	60da      	str	r2, [r3, #12]
 800d222:	e001      	b.n	800d228 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d234:	7fbb      	ldrb	r3, [r7, #30]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3720      	adds	r7, #32
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	40007c00 	.word	0x40007c00
 800d244:	40023800 	.word	0x40023800
 800d248:	00f42400 	.word	0x00f42400

0800d24c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d258:	f003 0308 	and.w	r3, r3, #8
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00a      	beq.n	800d276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	430a      	orrs	r2, r1
 800d274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d27a:	f003 0301 	and.w	r3, r3, #1
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00a      	beq.n	800d298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	430a      	orrs	r2, r1
 800d296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d29c:	f003 0302 	and.w	r3, r3, #2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d00a      	beq.n	800d2ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	430a      	orrs	r2, r1
 800d2b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2be:	f003 0304 	and.w	r3, r3, #4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00a      	beq.n	800d2dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e0:	f003 0310 	and.w	r3, r3, #16
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00a      	beq.n	800d2fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	430a      	orrs	r2, r1
 800d2fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d302:	f003 0320 	and.w	r3, r3, #32
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00a      	beq.n	800d320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	430a      	orrs	r2, r1
 800d31e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d01a      	beq.n	800d362 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	430a      	orrs	r2, r1
 800d340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d34a:	d10a      	bne.n	800d362 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	430a      	orrs	r2, r1
 800d360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00a      	beq.n	800d384 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	430a      	orrs	r2, r1
 800d382:	605a      	str	r2, [r3, #4]
  }
}
 800d384:	bf00      	nop
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b08c      	sub	sp, #48	@ 0x30
 800d394:	af02      	add	r7, sp, #8
 800d396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3a0:	f7f5 ff8a 	bl	80032b8 <HAL_GetTick>
 800d3a4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f003 0308 	and.w	r3, r3, #8
 800d3b0:	2b08      	cmp	r3, #8
 800d3b2:	d12e      	bne.n	800d412 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f83b 	bl	800d43e <UART_WaitOnFlagUntilTimeout>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d021      	beq.n	800d412 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	e853 3f00 	ldrex	r3, [r3]
 800d3da:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3e2:	623b      	str	r3, [r7, #32]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	61fb      	str	r3, [r7, #28]
 800d3ee:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f0:	69b9      	ldr	r1, [r7, #24]
 800d3f2:	69fa      	ldr	r2, [r7, #28]
 800d3f4:	e841 2300 	strex	r3, r2, [r1]
 800d3f8:	617b      	str	r3, [r7, #20]
   return(result);
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1e6      	bne.n	800d3ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2220      	movs	r2, #32
 800d404:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d40e:	2303      	movs	r3, #3
 800d410:	e011      	b.n	800d436 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2220      	movs	r2, #32
 800d416:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2220      	movs	r2, #32
 800d41c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3728      	adds	r7, #40	@ 0x28
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b084      	sub	sp, #16
 800d442:	af00      	add	r7, sp, #0
 800d444:	60f8      	str	r0, [r7, #12]
 800d446:	60b9      	str	r1, [r7, #8]
 800d448:	603b      	str	r3, [r7, #0]
 800d44a:	4613      	mov	r3, r2
 800d44c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d44e:	e04f      	b.n	800d4f0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d456:	d04b      	beq.n	800d4f0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d458:	f7f5 ff2e 	bl	80032b8 <HAL_GetTick>
 800d45c:	4602      	mov	r2, r0
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	69ba      	ldr	r2, [r7, #24]
 800d464:	429a      	cmp	r2, r3
 800d466:	d302      	bcc.n	800d46e <UART_WaitOnFlagUntilTimeout+0x30>
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d101      	bne.n	800d472 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d46e:	2303      	movs	r3, #3
 800d470:	e04e      	b.n	800d510 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f003 0304 	and.w	r3, r3, #4
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d037      	beq.n	800d4f0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	2b80      	cmp	r3, #128	@ 0x80
 800d484:	d034      	beq.n	800d4f0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2b40      	cmp	r3, #64	@ 0x40
 800d48a:	d031      	beq.n	800d4f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	f003 0308 	and.w	r3, r3, #8
 800d496:	2b08      	cmp	r3, #8
 800d498:	d110      	bne.n	800d4bc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2208      	movs	r2, #8
 800d4a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f000 f838 	bl	800d518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2208      	movs	r2, #8
 800d4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e029      	b.n	800d510 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	69db      	ldr	r3, [r3, #28]
 800d4c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d4c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d4ca:	d111      	bne.n	800d4f0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d4d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f000 f81e 	bl	800d518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2220      	movs	r2, #32
 800d4e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	e00f      	b.n	800d510 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	69da      	ldr	r2, [r3, #28]
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	bf0c      	ite	eq
 800d500:	2301      	moveq	r3, #1
 800d502:	2300      	movne	r3, #0
 800d504:	b2db      	uxtb	r3, r3
 800d506:	461a      	mov	r2, r3
 800d508:	79fb      	ldrb	r3, [r7, #7]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d0a0      	beq.n	800d450 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d518:	b480      	push	{r7}
 800d51a:	b095      	sub	sp, #84	@ 0x54
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d528:	e853 3f00 	ldrex	r3, [r3]
 800d52c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	461a      	mov	r2, r3
 800d53c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d53e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d540:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d546:	e841 2300 	strex	r3, r2, [r1]
 800d54a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1e6      	bne.n	800d520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	3308      	adds	r3, #8
 800d558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	e853 3f00 	ldrex	r3, [r3]
 800d560:	61fb      	str	r3, [r7, #28]
   return(result);
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	f023 0301 	bic.w	r3, r3, #1
 800d568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	3308      	adds	r3, #8
 800d570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d574:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d57a:	e841 2300 	strex	r3, r2, [r1]
 800d57e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1e5      	bne.n	800d552 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d118      	bne.n	800d5c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	e853 3f00 	ldrex	r3, [r3]
 800d59a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	f023 0310 	bic.w	r3, r3, #16
 800d5a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5ac:	61bb      	str	r3, [r7, #24]
 800d5ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b0:	6979      	ldr	r1, [r7, #20]
 800d5b2:	69ba      	ldr	r2, [r7, #24]
 800d5b4:	e841 2300 	strex	r3, r2, [r1]
 800d5b8:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1e6      	bne.n	800d58e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2220      	movs	r2, #32
 800d5c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d5d4:	bf00      	nop
 800d5d6:	3754      	adds	r7, #84	@ 0x54
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d121      	bne.n	800d636 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	4b27      	ldr	r3, [pc, #156]	@ (800d694 <FMC_SDRAM_Init+0xb4>)
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	6851      	ldr	r1, [r2, #4]
 800d5fe:	683a      	ldr	r2, [r7, #0]
 800d600:	6892      	ldr	r2, [r2, #8]
 800d602:	4311      	orrs	r1, r2
 800d604:	683a      	ldr	r2, [r7, #0]
 800d606:	68d2      	ldr	r2, [r2, #12]
 800d608:	4311      	orrs	r1, r2
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	6912      	ldr	r2, [r2, #16]
 800d60e:	4311      	orrs	r1, r2
 800d610:	683a      	ldr	r2, [r7, #0]
 800d612:	6952      	ldr	r2, [r2, #20]
 800d614:	4311      	orrs	r1, r2
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	6992      	ldr	r2, [r2, #24]
 800d61a:	4311      	orrs	r1, r2
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	69d2      	ldr	r2, [r2, #28]
 800d620:	4311      	orrs	r1, r2
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	6a12      	ldr	r2, [r2, #32]
 800d626:	4311      	orrs	r1, r2
 800d628:	683a      	ldr	r2, [r7, #0]
 800d62a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d62c:	430a      	orrs	r2, r1
 800d62e:	431a      	orrs	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	e026      	b.n	800d684 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	69d9      	ldr	r1, [r3, #28]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	4319      	orrs	r1, r3
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d64c:	430b      	orrs	r3, r1
 800d64e:	431a      	orrs	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	4b0e      	ldr	r3, [pc, #56]	@ (800d694 <FMC_SDRAM_Init+0xb4>)
 800d65a:	4013      	ands	r3, r2
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	6851      	ldr	r1, [r2, #4]
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	6892      	ldr	r2, [r2, #8]
 800d664:	4311      	orrs	r1, r2
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	68d2      	ldr	r2, [r2, #12]
 800d66a:	4311      	orrs	r1, r2
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	6912      	ldr	r2, [r2, #16]
 800d670:	4311      	orrs	r1, r2
 800d672:	683a      	ldr	r2, [r7, #0]
 800d674:	6952      	ldr	r2, [r2, #20]
 800d676:	4311      	orrs	r1, r2
 800d678:	683a      	ldr	r2, [r7, #0]
 800d67a:	6992      	ldr	r2, [r2, #24]
 800d67c:	430a      	orrs	r2, r1
 800d67e:	431a      	orrs	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	ffff8000 	.word	0xffff8000

0800d698 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d128      	bne.n	800d6fc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	1e59      	subs	r1, r3, #1
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	011b      	lsls	r3, r3, #4
 800d6c0:	4319      	orrs	r1, r3
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	021b      	lsls	r3, r3, #8
 800d6ca:	4319      	orrs	r1, r3
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	031b      	lsls	r3, r3, #12
 800d6d4:	4319      	orrs	r1, r3
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	041b      	lsls	r3, r3, #16
 800d6de:	4319      	orrs	r1, r3
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	051b      	lsls	r3, r3, #20
 800d6e8:	4319      	orrs	r1, r3
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	699b      	ldr	r3, [r3, #24]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	061b      	lsls	r3, r3, #24
 800d6f2:	430b      	orrs	r3, r1
 800d6f4:	431a      	orrs	r2, r3
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	609a      	str	r2, [r3, #8]
 800d6fa:	e02d      	b.n	800d758 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	689a      	ldr	r2, [r3, #8]
 800d700:	4b19      	ldr	r3, [pc, #100]	@ (800d768 <FMC_SDRAM_Timing_Init+0xd0>)
 800d702:	4013      	ands	r3, r2
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	68d2      	ldr	r2, [r2, #12]
 800d708:	3a01      	subs	r2, #1
 800d70a:	0311      	lsls	r1, r2, #12
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	6952      	ldr	r2, [r2, #20]
 800d710:	3a01      	subs	r2, #1
 800d712:	0512      	lsls	r2, r2, #20
 800d714:	430a      	orrs	r2, r1
 800d716:	431a      	orrs	r2, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	1e59      	subs	r1, r3, #1
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	3b01      	subs	r3, #1
 800d730:	011b      	lsls	r3, r3, #4
 800d732:	4319      	orrs	r1, r3
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	3b01      	subs	r3, #1
 800d73a:	021b      	lsls	r3, r3, #8
 800d73c:	4319      	orrs	r1, r3
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	691b      	ldr	r3, [r3, #16]
 800d742:	3b01      	subs	r3, #1
 800d744:	041b      	lsls	r3, r3, #16
 800d746:	4319      	orrs	r1, r3
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	699b      	ldr	r3, [r3, #24]
 800d74c:	3b01      	subs	r3, #1
 800d74e:	061b      	lsls	r3, r3, #24
 800d750:	430b      	orrs	r3, r1
 800d752:	431a      	orrs	r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d758:	2300      	movs	r3, #0
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3714      	adds	r7, #20
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	ff0f0fff 	.word	0xff0f0fff

0800d76c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d76c:	b084      	sub	sp, #16
 800d76e:	b480      	push	{r7}
 800d770:	b085      	sub	sp, #20
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	f107 001c 	add.w	r0, r7, #28
 800d77a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d782:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d784:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d786:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d78a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d78e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d792:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d796:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	685a      	ldr	r2, [r3, #4]
 800d7a2:	4b07      	ldr	r3, [pc, #28]	@ (800d7c0 <SDMMC_Init+0x54>)
 800d7a4:	4013      	ands	r3, r2
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	431a      	orrs	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3714      	adds	r7, #20
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	b004      	add	sp, #16
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop
 800d7c0:	ffff8100 	.word	0xffff8100

0800d7c4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	370c      	adds	r7, #12
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr

0800d7de <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d7de:	b480      	push	{r7}
 800d7e0:	b083      	sub	sp, #12
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2203      	movs	r2, #3
 800d7ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	370c      	adds	r7, #12
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d7fa:	b480      	push	{r7}
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f003 0303 	and.w	r3, r3, #3
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
	...

0800d818 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d836:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d83c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d842:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	4313      	orrs	r3, r2
 800d848:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68da      	ldr	r2, [r3, #12]
 800d84e:	4b06      	ldr	r3, [pc, #24]	@ (800d868 <SDMMC_SendCommand+0x50>)
 800d850:	4013      	ands	r3, r2
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	431a      	orrs	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	fffff000 	.word	0xfffff000

0800d86c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	b2db      	uxtb	r3, r3
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d886:	b480      	push	{r7}
 800d888:	b085      	sub	sp, #20
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	3314      	adds	r3, #20
 800d894:	461a      	mov	r2, r3
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	4413      	add	r3, r2
 800d89a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
}  
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	685a      	ldr	r2, [r3, #4]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d8d2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d8d8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d8de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ea:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	431a      	orrs	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d8f6:	2300      	movs	r3, #0

}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b088      	sub	sp, #32
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d912:	2310      	movs	r3, #16
 800d914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d916:	2340      	movs	r3, #64	@ 0x40
 800d918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d91a:	2300      	movs	r3, #0
 800d91c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d91e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d922:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d924:	f107 0308 	add.w	r3, r7, #8
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff ff74 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d930:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d934:	2110      	movs	r1, #16
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 fa1a 	bl	800dd70 <SDMMC_GetCmdResp1>
 800d93c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d93e:	69fb      	ldr	r3, [r7, #28]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b088      	sub	sp, #32
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d956:	2311      	movs	r3, #17
 800d958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d95a:	2340      	movs	r3, #64	@ 0x40
 800d95c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d95e:	2300      	movs	r3, #0
 800d960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d968:	f107 0308 	add.w	r3, r7, #8
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff ff52 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d974:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d978:	2111      	movs	r1, #17
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f9f8 	bl	800dd70 <SDMMC_GetCmdResp1>
 800d980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d982:	69fb      	ldr	r3, [r7, #28]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3720      	adds	r7, #32
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b088      	sub	sp, #32
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d99a:	2312      	movs	r3, #18
 800d99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d99e:	2340      	movs	r3, #64	@ 0x40
 800d9a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9ac:	f107 0308 	add.w	r3, r7, #8
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7ff ff30 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d9b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9bc:	2112      	movs	r1, #18
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 f9d6 	bl	800dd70 <SDMMC_GetCmdResp1>
 800d9c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9c6:	69fb      	ldr	r3, [r7, #28]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3720      	adds	r7, #32
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b088      	sub	sp, #32
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d9de:	2318      	movs	r3, #24
 800d9e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9e2:	2340      	movs	r3, #64	@ 0x40
 800d9e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9f0:	f107 0308 	add.w	r3, r7, #8
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff ff0e 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d9fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da00:	2118      	movs	r1, #24
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f9b4 	bl	800dd70 <SDMMC_GetCmdResp1>
 800da08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da0a:	69fb      	ldr	r3, [r7, #28]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3720      	adds	r7, #32
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800da22:	2319      	movs	r3, #25
 800da24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da26:	2340      	movs	r3, #64	@ 0x40
 800da28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da2a:	2300      	movs	r3, #0
 800da2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da34:	f107 0308 	add.w	r3, r7, #8
 800da38:	4619      	mov	r1, r3
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7ff feec 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800da40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da44:	2119      	movs	r1, #25
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f992 	bl	800dd70 <SDMMC_GetCmdResp1>
 800da4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da4e:	69fb      	ldr	r3, [r7, #28]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3720      	adds	r7, #32
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b088      	sub	sp, #32
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800da60:	2300      	movs	r3, #0
 800da62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800da64:	230c      	movs	r3, #12
 800da66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da68:	2340      	movs	r3, #64	@ 0x40
 800da6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da6c:	2300      	movs	r3, #0
 800da6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da76:	f107 0308 	add.w	r3, r7, #8
 800da7a:	4619      	mov	r1, r3
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7ff fecb 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800da82:	4a05      	ldr	r2, [pc, #20]	@ (800da98 <SDMMC_CmdStopTransfer+0x40>)
 800da84:	210c      	movs	r1, #12
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 f972 	bl	800dd70 <SDMMC_GetCmdResp1>
 800da8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da8e:	69fb      	ldr	r3, [r7, #28]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3720      	adds	r7, #32
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	05f5e100 	.word	0x05f5e100

0800da9c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b08a      	sub	sp, #40	@ 0x28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800daac:	2307      	movs	r3, #7
 800daae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dab0:	2340      	movs	r3, #64	@ 0x40
 800dab2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dab4:	2300      	movs	r3, #0
 800dab6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dabc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dabe:	f107 0310 	add.w	r3, r7, #16
 800dac2:	4619      	mov	r1, r3
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f7ff fea7 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800daca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dace:	2107      	movs	r1, #7
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f000 f94d 	bl	800dd70 <SDMMC_GetCmdResp1>
 800dad6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800dad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3728      	adds	r7, #40	@ 0x28
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b088      	sub	sp, #32
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800daea:	2300      	movs	r3, #0
 800daec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800daee:	2300      	movs	r3, #0
 800daf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800daf2:	2300      	movs	r3, #0
 800daf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daf6:	2300      	movs	r3, #0
 800daf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dafa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dafe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db00:	f107 0308 	add.w	r3, r7, #8
 800db04:	4619      	mov	r1, r3
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f7ff fe86 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 fb67 	bl	800e1e0 <SDMMC_GetCmdError>
 800db12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db14:	69fb      	ldr	r3, [r7, #28]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3720      	adds	r7, #32
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b088      	sub	sp, #32
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800db26:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800db2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800db2c:	2308      	movs	r3, #8
 800db2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db30:	2340      	movs	r3, #64	@ 0x40
 800db32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db34:	2300      	movs	r3, #0
 800db36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db3e:	f107 0308 	add.w	r3, r7, #8
 800db42:	4619      	mov	r1, r3
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f7ff fe67 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 fafa 	bl	800e144 <SDMMC_GetCmdResp7>
 800db50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db52:	69fb      	ldr	r3, [r7, #28]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3720      	adds	r7, #32
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b088      	sub	sp, #32
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800db6a:	2337      	movs	r3, #55	@ 0x37
 800db6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db6e:	2340      	movs	r3, #64	@ 0x40
 800db70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db72:	2300      	movs	r3, #0
 800db74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db7c:	f107 0308 	add.w	r3, r7, #8
 800db80:	4619      	mov	r1, r3
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f7ff fe48 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800db88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db8c:	2137      	movs	r1, #55	@ 0x37
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f8ee 	bl	800dd70 <SDMMC_GetCmdResp1>
 800db94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db96:	69fb      	ldr	r3, [r7, #28]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3720      	adds	r7, #32
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b088      	sub	sp, #32
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800dbaa:	683a      	ldr	r2, [r7, #0]
 800dbac:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe4 <SDMMC_CmdAppOperCommand+0x44>)
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dbb2:	2329      	movs	r3, #41	@ 0x29
 800dbb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbb6:	2340      	movs	r3, #64	@ 0x40
 800dbb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbc4:	f107 0308 	add.w	r3, r7, #8
 800dbc8:	4619      	mov	r1, r3
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff fe24 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 fa03 	bl	800dfdc <SDMMC_GetCmdResp3>
 800dbd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbd8:	69fb      	ldr	r3, [r7, #28]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3720      	adds	r7, #32
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	80100000 	.word	0x80100000

0800dbe8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b088      	sub	sp, #32
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dbf6:	2306      	movs	r3, #6
 800dbf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbfa:	2340      	movs	r3, #64	@ 0x40
 800dbfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc08:	f107 0308 	add.w	r3, r7, #8
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7ff fe02 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dc14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc18:	2106      	movs	r1, #6
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 f8a8 	bl	800dd70 <SDMMC_GetCmdResp1>
 800dc20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc22:	69fb      	ldr	r3, [r7, #28]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3720      	adds	r7, #32
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dc34:	2300      	movs	r3, #0
 800dc36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dc38:	2333      	movs	r3, #51	@ 0x33
 800dc3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc3c:	2340      	movs	r3, #64	@ 0x40
 800dc3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc40:	2300      	movs	r3, #0
 800dc42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc4a:	f107 0308 	add.w	r3, r7, #8
 800dc4e:	4619      	mov	r1, r3
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7ff fde1 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dc56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc5a:	2133      	movs	r1, #51	@ 0x33
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 f887 	bl	800dd70 <SDMMC_GetCmdResp1>
 800dc62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc64:	69fb      	ldr	r3, [r7, #28]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3720      	adds	r7, #32
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b088      	sub	sp, #32
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dc76:	2300      	movs	r3, #0
 800dc78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dc7a:	2302      	movs	r3, #2
 800dc7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dc7e:	23c0      	movs	r3, #192	@ 0xc0
 800dc80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc82:	2300      	movs	r3, #0
 800dc84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc8c:	f107 0308 	add.w	r3, r7, #8
 800dc90:	4619      	mov	r1, r3
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7ff fdc0 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f957 	bl	800df4c <SDMMC_GetCmdResp2>
 800dc9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dca0:	69fb      	ldr	r3, [r7, #28]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3720      	adds	r7, #32
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b088      	sub	sp, #32
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800dcb8:	2309      	movs	r3, #9
 800dcba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dcbc:	23c0      	movs	r3, #192	@ 0xc0
 800dcbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcca:	f107 0308 	add.w	r3, r7, #8
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff fda1 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f938 	bl	800df4c <SDMMC_GetCmdResp2>
 800dcdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcde:	69fb      	ldr	r3, [r7, #28]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3720      	adds	r7, #32
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b088      	sub	sp, #32
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dcf6:	2303      	movs	r3, #3
 800dcf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcfa:	2340      	movs	r3, #64	@ 0x40
 800dcfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd08:	f107 0308 	add.w	r3, r7, #8
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7ff fd82 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dd14:	683a      	ldr	r2, [r7, #0]
 800dd16:	2103      	movs	r1, #3
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f99d 	bl	800e058 <SDMMC_GetCmdResp6>
 800dd1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd20:	69fb      	ldr	r3, [r7, #28]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3720      	adds	r7, #32
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b088      	sub	sp, #32
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dd38:	230d      	movs	r3, #13
 800dd3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd3c:	2340      	movs	r3, #64	@ 0x40
 800dd3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd40:	2300      	movs	r3, #0
 800dd42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd4a:	f107 0308 	add.w	r3, r7, #8
 800dd4e:	4619      	mov	r1, r3
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff fd61 	bl	800d818 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dd56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd5a:	210d      	movs	r1, #13
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f807 	bl	800dd70 <SDMMC_GetCmdResp1>
 800dd62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd64:	69fb      	ldr	r3, [r7, #28]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3720      	adds	r7, #32
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
	...

0800dd70 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b088      	sub	sp, #32
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	607a      	str	r2, [r7, #4]
 800dd7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dd7e:	4b70      	ldr	r3, [pc, #448]	@ (800df40 <SDMMC_GetCmdResp1+0x1d0>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a70      	ldr	r2, [pc, #448]	@ (800df44 <SDMMC_GetCmdResp1+0x1d4>)
 800dd84:	fba2 2303 	umull	r2, r3, r2, r3
 800dd88:	0a5a      	lsrs	r2, r3, #9
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	fb02 f303 	mul.w	r3, r2, r3
 800dd90:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	1e5a      	subs	r2, r3, #1
 800dd96:	61fa      	str	r2, [r7, #28]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d102      	bne.n	800dda2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dda0:	e0c9      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dda6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d0ef      	beq.n	800dd92 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1ea      	bne.n	800dd92 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddc0:	f003 0304 	and.w	r3, r3, #4
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d004      	beq.n	800ddd2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2204      	movs	r2, #4
 800ddcc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddce:	2304      	movs	r3, #4
 800ddd0:	e0b1      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddd6:	f003 0301 	and.w	r3, r3, #1
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d004      	beq.n	800dde8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2201      	movs	r2, #1
 800dde2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dde4:	2301      	movs	r3, #1
 800dde6:	e0a6      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	22c5      	movs	r2, #197	@ 0xc5
 800ddec:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f7ff fd3c 	bl	800d86c <SDMMC_GetCommandResponse>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	7afb      	ldrb	r3, [r7, #11]
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d001      	beq.n	800de02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e099      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800de02:	2100      	movs	r1, #0
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f7ff fd3e 	bl	800d886 <SDMMC_GetResponse>
 800de0a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800de0c:	697a      	ldr	r2, [r7, #20]
 800de0e:	4b4e      	ldr	r3, [pc, #312]	@ (800df48 <SDMMC_GetCmdResp1+0x1d8>)
 800de10:	4013      	ands	r3, r2
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800de16:	2300      	movs	r3, #0
 800de18:	e08d      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	da02      	bge.n	800de26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800de20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800de24:	e087      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d001      	beq.n	800de34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800de30:	2340      	movs	r3, #64	@ 0x40
 800de32:	e080      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d001      	beq.n	800de42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800de3e:	2380      	movs	r3, #128	@ 0x80
 800de40:	e079      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800de4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de50:	e071      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800de5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de60:	e069      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d002      	beq.n	800de72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800de6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de70:	e061      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d002      	beq.n	800de82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800de7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800de80:	e059      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de90:	e051      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d002      	beq.n	800dea2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dea0:	e049      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800deac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800deb0:	e041      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800debc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dec0:	e039      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d002      	beq.n	800ded2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800decc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ded0:	e031      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dedc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800dee0:	e029      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800deec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800def0:	e021      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800def8:	2b00      	cmp	r3, #0
 800defa:	d002      	beq.n	800df02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800defc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800df00:	e019      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d002      	beq.n	800df12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800df0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800df10:	e011      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800df1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800df20:	e009      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	f003 0308 	and.w	r3, r3, #8
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d002      	beq.n	800df32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800df2c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800df30:	e001      	b.n	800df36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800df32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800df36:	4618      	mov	r0, r3
 800df38:	3720      	adds	r7, #32
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	20000000 	.word	0x20000000
 800df44:	10624dd3 	.word	0x10624dd3
 800df48:	fdffe008 	.word	0xfdffe008

0800df4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df54:	4b1f      	ldr	r3, [pc, #124]	@ (800dfd4 <SDMMC_GetCmdResp2+0x88>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a1f      	ldr	r2, [pc, #124]	@ (800dfd8 <SDMMC_GetCmdResp2+0x8c>)
 800df5a:	fba2 2303 	umull	r2, r3, r2, r3
 800df5e:	0a5b      	lsrs	r3, r3, #9
 800df60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df64:	fb02 f303 	mul.w	r3, r2, r3
 800df68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	1e5a      	subs	r2, r3, #1
 800df6e:	60fa      	str	r2, [r7, #12]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d102      	bne.n	800df7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800df78:	e026      	b.n	800dfc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800df86:	2b00      	cmp	r3, #0
 800df88:	d0ef      	beq.n	800df6a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1ea      	bne.n	800df6a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df98:	f003 0304 	and.w	r3, r3, #4
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d004      	beq.n	800dfaa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2204      	movs	r2, #4
 800dfa4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dfa6:	2304      	movs	r3, #4
 800dfa8:	e00e      	b.n	800dfc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfae:	f003 0301 	and.w	r3, r3, #1
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d004      	beq.n	800dfc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e003      	b.n	800dfc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	22c5      	movs	r2, #197	@ 0xc5
 800dfc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr
 800dfd4:	20000000 	.word	0x20000000
 800dfd8:	10624dd3 	.word	0x10624dd3

0800dfdc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dfe4:	4b1a      	ldr	r3, [pc, #104]	@ (800e050 <SDMMC_GetCmdResp3+0x74>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4a1a      	ldr	r2, [pc, #104]	@ (800e054 <SDMMC_GetCmdResp3+0x78>)
 800dfea:	fba2 2303 	umull	r2, r3, r2, r3
 800dfee:	0a5b      	lsrs	r3, r3, #9
 800dff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dff4:	fb02 f303 	mul.w	r3, r2, r3
 800dff8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	1e5a      	subs	r2, r3, #1
 800dffe:	60fa      	str	r2, [r7, #12]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d102      	bne.n	800e00a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e004:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e008:	e01b      	b.n	800e042 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e00e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0ef      	beq.n	800dffa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1ea      	bne.n	800dffa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e028:	f003 0304 	and.w	r3, r3, #4
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d004      	beq.n	800e03a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2204      	movs	r2, #4
 800e034:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e036:	2304      	movs	r3, #4
 800e038:	e003      	b.n	800e042 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	22c5      	movs	r2, #197	@ 0xc5
 800e03e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e040:	2300      	movs	r3, #0
}
 800e042:	4618      	mov	r0, r3
 800e044:	3714      	adds	r7, #20
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop
 800e050:	20000000 	.word	0x20000000
 800e054:	10624dd3 	.word	0x10624dd3

0800e058 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b088      	sub	sp, #32
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	460b      	mov	r3, r1
 800e062:	607a      	str	r2, [r7, #4]
 800e064:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e066:	4b35      	ldr	r3, [pc, #212]	@ (800e13c <SDMMC_GetCmdResp6+0xe4>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a35      	ldr	r2, [pc, #212]	@ (800e140 <SDMMC_GetCmdResp6+0xe8>)
 800e06c:	fba2 2303 	umull	r2, r3, r2, r3
 800e070:	0a5b      	lsrs	r3, r3, #9
 800e072:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e076:	fb02 f303 	mul.w	r3, r2, r3
 800e07a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	1e5a      	subs	r2, r3, #1
 800e080:	61fa      	str	r2, [r7, #28]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d102      	bne.n	800e08c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e086:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e08a:	e052      	b.n	800e132 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e090:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d0ef      	beq.n	800e07c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1ea      	bne.n	800e07c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0aa:	f003 0304 	and.w	r3, r3, #4
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d004      	beq.n	800e0bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2204      	movs	r2, #4
 800e0b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0b8:	2304      	movs	r3, #4
 800e0ba:	e03a      	b.n	800e132 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d004      	beq.n	800e0d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e02f      	b.n	800e132 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f7ff fbca 	bl	800d86c <SDMMC_GetCommandResponse>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	461a      	mov	r2, r3
 800e0dc:	7afb      	ldrb	r3, [r7, #11]
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d001      	beq.n	800e0e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e025      	b.n	800e132 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	22c5      	movs	r2, #197	@ 0xc5
 800e0ea:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	68f8      	ldr	r0, [r7, #12]
 800e0f0:	f7ff fbc9 	bl	800d886 <SDMMC_GetResponse>
 800e0f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d106      	bne.n	800e10e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	0c1b      	lsrs	r3, r3, #16
 800e104:	b29a      	uxth	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e10a:	2300      	movs	r3, #0
 800e10c:	e011      	b.n	800e132 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e11c:	e009      	b.n	800e132 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e12c:	e001      	b.n	800e132 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e12e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e132:	4618      	mov	r0, r3
 800e134:	3720      	adds	r7, #32
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	20000000 	.word	0x20000000
 800e140:	10624dd3 	.word	0x10624dd3

0800e144 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e14c:	4b22      	ldr	r3, [pc, #136]	@ (800e1d8 <SDMMC_GetCmdResp7+0x94>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a22      	ldr	r2, [pc, #136]	@ (800e1dc <SDMMC_GetCmdResp7+0x98>)
 800e152:	fba2 2303 	umull	r2, r3, r2, r3
 800e156:	0a5b      	lsrs	r3, r3, #9
 800e158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e15c:	fb02 f303 	mul.w	r3, r2, r3
 800e160:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	1e5a      	subs	r2, r3, #1
 800e166:	60fa      	str	r2, [r7, #12]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d102      	bne.n	800e172 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e16c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e170:	e02c      	b.n	800e1cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e176:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d0ef      	beq.n	800e162 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1ea      	bne.n	800e162 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e190:	f003 0304 	and.w	r3, r3, #4
 800e194:	2b00      	cmp	r3, #0
 800e196:	d004      	beq.n	800e1a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2204      	movs	r2, #4
 800e19c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e19e:	2304      	movs	r3, #4
 800e1a0:	e014      	b.n	800e1cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1a6:	f003 0301 	and.w	r3, r3, #1
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d004      	beq.n	800e1b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e009      	b.n	800e1cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2240      	movs	r2, #64	@ 0x40
 800e1c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e1ca:	2300      	movs	r3, #0
  
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3714      	adds	r7, #20
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr
 800e1d8:	20000000 	.word	0x20000000
 800e1dc:	10624dd3 	.word	0x10624dd3

0800e1e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1e8:	4b11      	ldr	r3, [pc, #68]	@ (800e230 <SDMMC_GetCmdError+0x50>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a11      	ldr	r2, [pc, #68]	@ (800e234 <SDMMC_GetCmdError+0x54>)
 800e1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e1f2:	0a5b      	lsrs	r3, r3, #9
 800e1f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1f8:	fb02 f303 	mul.w	r3, r2, r3
 800e1fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	1e5a      	subs	r2, r3, #1
 800e202:	60fa      	str	r2, [r7, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d102      	bne.n	800e20e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e208:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e20c:	e009      	b.n	800e222 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e216:	2b00      	cmp	r3, #0
 800e218:	d0f1      	beq.n	800e1fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	22c5      	movs	r2, #197	@ 0xc5
 800e21e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800e220:	2300      	movs	r3, #0
}
 800e222:	4618      	mov	r0, r3
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	20000000 	.word	0x20000000
 800e234:	10624dd3 	.word	0x10624dd3

0800e238 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e238:	b084      	sub	sp, #16
 800e23a:	b580      	push	{r7, lr}
 800e23c:	b084      	sub	sp, #16
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	f107 001c 	add.w	r0, r7, #28
 800e246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e24a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d121      	bne.n	800e296 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e256:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	68da      	ldr	r2, [r3, #12]
 800e262:	4b21      	ldr	r3, [pc, #132]	@ (800e2e8 <USB_CoreInit+0xb0>)
 800e264:	4013      	ands	r3, r2
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e276:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d105      	bne.n	800e28a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 f9d4 	bl	800e638 <USB_CoreReset>
 800e290:	4603      	mov	r3, r0
 800e292:	73fb      	strb	r3, [r7, #15]
 800e294:	e010      	b.n	800e2b8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 f9c8 	bl	800e638 <USB_CoreReset>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800e2b8:	7fbb      	ldrb	r3, [r7, #30]
 800e2ba:	2b01      	cmp	r3, #1
 800e2bc:	d10b      	bne.n	800e2d6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	f043 0206 	orr.w	r2, r3, #6
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	f043 0220 	orr.w	r2, r3, #32
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2e2:	b004      	add	sp, #16
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	ffbdffbf 	.word	0xffbdffbf

0800e2ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	f043 0201 	orr.w	r2, r3, #1
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	370c      	adds	r7, #12
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e30e:	b480      	push	{r7}
 800e310:	b083      	sub	sp, #12
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	689b      	ldr	r3, [r3, #8]
 800e31a:	f023 0201 	bic.w	r2, r3, #1
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e33c:	2300      	movs	r3, #0
 800e33e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e34c:	78fb      	ldrb	r3, [r7, #3]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d115      	bne.n	800e37e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e35e:	200a      	movs	r0, #10
 800e360:	f7f4 ffb6 	bl	80032d0 <HAL_Delay>
      ms += 10U;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	330a      	adds	r3, #10
 800e368:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 f956 	bl	800e61c <USB_GetMode>
 800e370:	4603      	mov	r3, r0
 800e372:	2b01      	cmp	r3, #1
 800e374:	d01e      	beq.n	800e3b4 <USB_SetCurrentMode+0x84>
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2bc7      	cmp	r3, #199	@ 0xc7
 800e37a:	d9f0      	bls.n	800e35e <USB_SetCurrentMode+0x2e>
 800e37c:	e01a      	b.n	800e3b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e37e:	78fb      	ldrb	r3, [r7, #3]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d115      	bne.n	800e3b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e390:	200a      	movs	r0, #10
 800e392:	f7f4 ff9d 	bl	80032d0 <HAL_Delay>
      ms += 10U;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	330a      	adds	r3, #10
 800e39a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 f93d 	bl	800e61c <USB_GetMode>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d005      	beq.n	800e3b4 <USB_SetCurrentMode+0x84>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2bc7      	cmp	r3, #199	@ 0xc7
 800e3ac:	d9f0      	bls.n	800e390 <USB_SetCurrentMode+0x60>
 800e3ae:	e001      	b.n	800e3b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	e005      	b.n	800e3c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2bc8      	cmp	r3, #200	@ 0xc8
 800e3b8:	d101      	bne.n	800e3be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e000      	b.n	800e3c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e3be:	2300      	movs	r3, #0
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3710      	adds	r7, #16
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e3e2:	d901      	bls.n	800e3e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e3e4:	2303      	movs	r3, #3
 800e3e6:	e01b      	b.n	800e420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	daf2      	bge.n	800e3d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	019b      	lsls	r3, r3, #6
 800e3f8:	f043 0220 	orr.w	r2, r3, #32
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	3301      	adds	r3, #1
 800e404:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e40c:	d901      	bls.n	800e412 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e40e:	2303      	movs	r3, #3
 800e410:	e006      	b.n	800e420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	f003 0320 	and.w	r3, r3, #32
 800e41a:	2b20      	cmp	r3, #32
 800e41c:	d0f0      	beq.n	800e400 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e41e:	2300      	movs	r3, #0
}
 800e420:	4618      	mov	r0, r3
 800e422:	3714      	adds	r7, #20
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b085      	sub	sp, #20
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e434:	2300      	movs	r3, #0
 800e436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	3301      	adds	r3, #1
 800e43c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e444:	d901      	bls.n	800e44a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e446:	2303      	movs	r3, #3
 800e448:	e018      	b.n	800e47c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	691b      	ldr	r3, [r3, #16]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	daf2      	bge.n	800e438 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e452:	2300      	movs	r3, #0
 800e454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2210      	movs	r2, #16
 800e45a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	3301      	adds	r3, #1
 800e460:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e468:	d901      	bls.n	800e46e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e46a:	2303      	movs	r3, #3
 800e46c:	e006      	b.n	800e47c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	f003 0310 	and.w	r3, r3, #16
 800e476:	2b10      	cmp	r3, #16
 800e478:	d0f0      	beq.n	800e45c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e488:	b480      	push	{r7}
 800e48a:	b089      	sub	sp, #36	@ 0x24
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	4611      	mov	r1, r2
 800e494:	461a      	mov	r2, r3
 800e496:	460b      	mov	r3, r1
 800e498:	71fb      	strb	r3, [r7, #7]
 800e49a:	4613      	mov	r3, r2
 800e49c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e4a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d123      	bne.n	800e4f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e4ae:	88bb      	ldrh	r3, [r7, #4]
 800e4b0:	3303      	adds	r3, #3
 800e4b2:	089b      	lsrs	r3, r3, #2
 800e4b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	61bb      	str	r3, [r7, #24]
 800e4ba:	e018      	b.n	800e4ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e4bc:	79fb      	ldrb	r3, [r7, #7]
 800e4be:	031a      	lsls	r2, r3, #12
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	61bb      	str	r3, [r7, #24]
 800e4ee:	69ba      	ldr	r2, [r7, #24]
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d3e2      	bcc.n	800e4bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3724      	adds	r7, #36	@ 0x24
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e504:	b480      	push	{r7}
 800e506:	b08b      	sub	sp, #44	@ 0x2c
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	4613      	mov	r3, r2
 800e510:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e51a:	88fb      	ldrh	r3, [r7, #6]
 800e51c:	089b      	lsrs	r3, r3, #2
 800e51e:	b29b      	uxth	r3, r3
 800e520:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e522:	88fb      	ldrh	r3, [r7, #6]
 800e524:	f003 0303 	and.w	r3, r3, #3
 800e528:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e52a:	2300      	movs	r3, #0
 800e52c:	623b      	str	r3, [r7, #32]
 800e52e:	e014      	b.n	800e55a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e53a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e53e:	3301      	adds	r3, #1
 800e540:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e544:	3301      	adds	r3, #1
 800e546:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e54a:	3301      	adds	r3, #1
 800e54c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e550:	3301      	adds	r3, #1
 800e552:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	3301      	adds	r3, #1
 800e558:	623b      	str	r3, [r7, #32]
 800e55a:	6a3a      	ldr	r2, [r7, #32]
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d3e6      	bcc.n	800e530 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e562:	8bfb      	ldrh	r3, [r7, #30]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d01e      	beq.n	800e5a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e568:	2300      	movs	r3, #0
 800e56a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e572:	461a      	mov	r2, r3
 800e574:	f107 0310 	add.w	r3, r7, #16
 800e578:	6812      	ldr	r2, [r2, #0]
 800e57a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	6a3b      	ldr	r3, [r7, #32]
 800e580:	b2db      	uxtb	r3, r3
 800e582:	00db      	lsls	r3, r3, #3
 800e584:	fa22 f303 	lsr.w	r3, r2, r3
 800e588:	b2da      	uxtb	r2, r3
 800e58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e58c:	701a      	strb	r2, [r3, #0]
      i++;
 800e58e:	6a3b      	ldr	r3, [r7, #32]
 800e590:	3301      	adds	r3, #1
 800e592:	623b      	str	r3, [r7, #32]
      pDest++;
 800e594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e596:	3301      	adds	r3, #1
 800e598:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e59a:	8bfb      	ldrh	r3, [r7, #30]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e5a0:	8bfb      	ldrh	r3, [r7, #30]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1ea      	bne.n	800e57c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	372c      	adds	r7, #44	@ 0x2c
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	695b      	ldr	r3, [r3, #20]
 800e5c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	699b      	ldr	r3, [r3, #24]
 800e5c6:	68fa      	ldr	r2, [r7, #12]
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3714      	adds	r7, #20
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800e5da:	b480      	push	{r7}
 800e5dc:	b085      	sub	sp, #20
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800e5ea:	78fb      	ldrb	r3, [r7, #3]
 800e5ec:	015a      	lsls	r2, r3, #5
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800e5fa:	78fb      	ldrb	r3, [r7, #3]
 800e5fc:	015a      	lsls	r2, r3, #5
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	4413      	add	r3, r2
 800e602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	68ba      	ldr	r2, [r7, #8]
 800e60a:	4013      	ands	r3, r2
 800e60c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e60e:	68bb      	ldr	r3, [r7, #8]
}
 800e610:	4618      	mov	r0, r3
 800e612:	3714      	adds	r7, #20
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	695b      	ldr	r3, [r3, #20]
 800e628:	f003 0301 	and.w	r3, r3, #1
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e640:	2300      	movs	r3, #0
 800e642:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	3301      	adds	r3, #1
 800e648:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e650:	d901      	bls.n	800e656 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e652:	2303      	movs	r3, #3
 800e654:	e01b      	b.n	800e68e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	691b      	ldr	r3, [r3, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	daf2      	bge.n	800e644 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e65e:	2300      	movs	r3, #0
 800e660:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	f043 0201 	orr.w	r2, r3, #1
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	3301      	adds	r3, #1
 800e672:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e67a:	d901      	bls.n	800e680 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e67c:	2303      	movs	r3, #3
 800e67e:	e006      	b.n	800e68e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	691b      	ldr	r3, [r3, #16]
 800e684:	f003 0301 	and.w	r3, r3, #1
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d0f0      	beq.n	800e66e <USB_CoreReset+0x36>

  return HAL_OK;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3714      	adds	r7, #20
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
	...

0800e69c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e69c:	b084      	sub	sp, #16
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b086      	sub	sp, #24
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e6aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e6bc:	461a      	mov	r2, r3
 800e6be:	2300      	movs	r3, #0
 800e6c0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	68db      	ldr	r3, [r3, #12]
 800e6d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d119      	bne.n	800e70e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e6da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d10a      	bne.n	800e6f8 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e6f0:	f043 0304 	orr.w	r3, r3, #4
 800e6f4:	6013      	str	r3, [r2, #0]
 800e6f6:	e014      	b.n	800e722 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e706:	f023 0304 	bic.w	r3, r3, #4
 800e70a:	6013      	str	r3, [r2, #0]
 800e70c:	e009      	b.n	800e722 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e71c:	f023 0304 	bic.w	r3, r3, #4
 800e720:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e722:	2110      	movs	r1, #16
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7ff fe4f 	bl	800e3c8 <USB_FlushTxFifo>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800e730:	2301      	movs	r3, #1
 800e732:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7ff fe79 	bl	800e42c <USB_FlushRxFifo>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800e740:	2301      	movs	r3, #1
 800e742:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e744:	2300      	movs	r3, #0
 800e746:	613b      	str	r3, [r7, #16]
 800e748:	e015      	b.n	800e776 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	015a      	lsls	r2, r3, #5
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	4413      	add	r3, r2
 800e752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e756:	461a      	mov	r2, r3
 800e758:	f04f 33ff 	mov.w	r3, #4294967295
 800e75c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	015a      	lsls	r2, r3, #5
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	4413      	add	r3, r2
 800e766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e76a:	461a      	mov	r2, r3
 800e76c:	2300      	movs	r3, #0
 800e76e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	3301      	adds	r3, #1
 800e774:	613b      	str	r3, [r7, #16]
 800e776:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e77a:	461a      	mov	r2, r3
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	4293      	cmp	r3, r2
 800e780:	d3e3      	bcc.n	800e74a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f04f 32ff 	mov.w	r2, #4294967295
 800e78e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4a18      	ldr	r2, [pc, #96]	@ (800e7f4 <USB_HostInit+0x158>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d10b      	bne.n	800e7b0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e79e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	4a15      	ldr	r2, [pc, #84]	@ (800e7f8 <USB_HostInit+0x15c>)
 800e7a4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a14      	ldr	r2, [pc, #80]	@ (800e7fc <USB_HostInit+0x160>)
 800e7aa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800e7ae:	e009      	b.n	800e7c4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2280      	movs	r2, #128	@ 0x80
 800e7b4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a11      	ldr	r2, [pc, #68]	@ (800e800 <USB_HostInit+0x164>)
 800e7ba:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4a11      	ldr	r2, [pc, #68]	@ (800e804 <USB_HostInit+0x168>)
 800e7c0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e7c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d105      	bne.n	800e7d8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	699b      	ldr	r3, [r3, #24]
 800e7d0:	f043 0210 	orr.w	r2, r3, #16
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	699a      	ldr	r2, [r3, #24]
 800e7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e808 <USB_HostInit+0x16c>)
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3718      	adds	r7, #24
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7f0:	b004      	add	sp, #16
 800e7f2:	4770      	bx	lr
 800e7f4:	40040000 	.word	0x40040000
 800e7f8:	01000200 	.word	0x01000200
 800e7fc:	00e00300 	.word	0x00e00300
 800e800:	00600080 	.word	0x00600080
 800e804:	004000e0 	.word	0x004000e0
 800e808:	a3200008 	.word	0xa3200008

0800e80c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b085      	sub	sp, #20
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	460b      	mov	r3, r1
 800e816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e82a:	f023 0303 	bic.w	r3, r3, #3
 800e82e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	78fb      	ldrb	r3, [r7, #3]
 800e83a:	f003 0303 	and.w	r3, r3, #3
 800e83e:	68f9      	ldr	r1, [r7, #12]
 800e840:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e844:	4313      	orrs	r3, r2
 800e846:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e848:	78fb      	ldrb	r3, [r7, #3]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d107      	bne.n	800e85e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e854:	461a      	mov	r2, r3
 800e856:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e85a:	6053      	str	r3, [r2, #4]
 800e85c:	e00c      	b.n	800e878 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800e85e:	78fb      	ldrb	r3, [r7, #3]
 800e860:	2b02      	cmp	r3, #2
 800e862:	d107      	bne.n	800e874 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e86a:	461a      	mov	r2, r3
 800e86c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e870:	6053      	str	r3, [r2, #4]
 800e872:	e001      	b.n	800e878 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	e000      	b.n	800e87a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800e878:	2300      	movs	r3, #0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3714      	adds	r7, #20
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr

0800e886 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b084      	sub	sp, #16
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e892:	2300      	movs	r3, #0
 800e894:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e8a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e8b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e8b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e8b6:	2064      	movs	r0, #100	@ 0x64
 800e8b8:	f7f4 fd0a 	bl	80032d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	68fa      	ldr	r2, [r7, #12]
 800e8c0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e8c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8c8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e8ca:	200a      	movs	r0, #10
 800e8cc:	f7f4 fd00 	bl	80032d0 <HAL_Delay>

  return HAL_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e8da:	b480      	push	{r7}
 800e8dc:	b085      	sub	sp, #20
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	460b      	mov	r3, r1
 800e8e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e8fe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e906:	2b00      	cmp	r3, #0
 800e908:	d109      	bne.n	800e91e <USB_DriveVbus+0x44>
 800e90a:	78fb      	ldrb	r3, [r7, #3]
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d106      	bne.n	800e91e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	68fa      	ldr	r2, [r7, #12]
 800e914:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e918:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e91c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e928:	d109      	bne.n	800e93e <USB_DriveVbus+0x64>
 800e92a:	78fb      	ldrb	r3, [r7, #3]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d106      	bne.n	800e93e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	68fa      	ldr	r2, [r7, #12]
 800e934:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e938:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e93c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e93e:	2300      	movs	r3, #0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3714      	adds	r7, #20
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e958:	2300      	movs	r3, #0
 800e95a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	0c5b      	lsrs	r3, r3, #17
 800e96a:	f003 0303 	and.w	r3, r3, #3
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3714      	adds	r7, #20
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr

0800e97a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800e97a:	b480      	push	{r7}
 800e97c:	b085      	sub	sp, #20
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	b29b      	uxth	r3, r3
}
 800e990:	4618      	mov	r0, r3
 800e992:	3714      	adds	r7, #20
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b088      	sub	sp, #32
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	4611      	mov	r1, r2
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	70fb      	strb	r3, [r7, #3]
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	70bb      	strb	r3, [r7, #2]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800e9be:	78fb      	ldrb	r3, [r7, #3]
 800e9c0:	015a      	lsls	r2, r3, #5
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e9d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e9d6:	2b03      	cmp	r3, #3
 800e9d8:	d87c      	bhi.n	800ead4 <USB_HC_Init+0x138>
 800e9da:	a201      	add	r2, pc, #4	@ (adr r2, 800e9e0 <USB_HC_Init+0x44>)
 800e9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e0:	0800e9f1 	.word	0x0800e9f1
 800e9e4:	0800ea97 	.word	0x0800ea97
 800e9e8:	0800e9f1 	.word	0x0800e9f1
 800e9ec:	0800ea59 	.word	0x0800ea59
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e9f0:	78fb      	ldrb	r3, [r7, #3]
 800e9f2:	015a      	lsls	r2, r3, #5
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	f240 439d 	movw	r3, #1181	@ 0x49d
 800ea02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ea04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	da10      	bge.n	800ea2e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ea0c:	78fb      	ldrb	r3, [r7, #3]
 800ea0e:	015a      	lsls	r2, r3, #5
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	4413      	add	r3, r2
 800ea14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	78fa      	ldrb	r2, [r7, #3]
 800ea1c:	0151      	lsls	r1, r2, #5
 800ea1e:	693a      	ldr	r2, [r7, #16]
 800ea20:	440a      	add	r2, r1
 800ea22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea2a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800ea2c:	e055      	b.n	800eada <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4a6f      	ldr	r2, [pc, #444]	@ (800ebf0 <USB_HC_Init+0x254>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d151      	bne.n	800eada <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ea36:	78fb      	ldrb	r3, [r7, #3]
 800ea38:	015a      	lsls	r2, r3, #5
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea42:	68db      	ldr	r3, [r3, #12]
 800ea44:	78fa      	ldrb	r2, [r7, #3]
 800ea46:	0151      	lsls	r1, r2, #5
 800ea48:	693a      	ldr	r2, [r7, #16]
 800ea4a:	440a      	add	r2, r1
 800ea4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea50:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ea54:	60d3      	str	r3, [r2, #12]
      break;
 800ea56:	e040      	b.n	800eada <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ea58:	78fb      	ldrb	r3, [r7, #3]
 800ea5a:	015a      	lsls	r2, r3, #5
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	4413      	add	r3, r2
 800ea60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea64:	461a      	mov	r2, r3
 800ea66:	f240 639d 	movw	r3, #1693	@ 0x69d
 800ea6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ea6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	da34      	bge.n	800eade <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ea74:	78fb      	ldrb	r3, [r7, #3]
 800ea76:	015a      	lsls	r2, r3, #5
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	78fa      	ldrb	r2, [r7, #3]
 800ea84:	0151      	lsls	r1, r2, #5
 800ea86:	693a      	ldr	r2, [r7, #16]
 800ea88:	440a      	add	r2, r1
 800ea8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea92:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ea94:	e023      	b.n	800eade <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ea96:	78fb      	ldrb	r3, [r7, #3]
 800ea98:	015a      	lsls	r2, r3, #5
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	f240 2325 	movw	r3, #549	@ 0x225
 800eaa8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800eaaa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	da17      	bge.n	800eae2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800eab2:	78fb      	ldrb	r3, [r7, #3]
 800eab4:	015a      	lsls	r2, r3, #5
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	4413      	add	r3, r2
 800eaba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	78fa      	ldrb	r2, [r7, #3]
 800eac2:	0151      	lsls	r1, r2, #5
 800eac4:	693a      	ldr	r2, [r7, #16]
 800eac6:	440a      	add	r2, r1
 800eac8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eacc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800ead0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ead2:	e006      	b.n	800eae2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800ead4:	2301      	movs	r3, #1
 800ead6:	77fb      	strb	r3, [r7, #31]
      break;
 800ead8:	e004      	b.n	800eae4 <USB_HC_Init+0x148>
      break;
 800eada:	bf00      	nop
 800eadc:	e002      	b.n	800eae4 <USB_HC_Init+0x148>
      break;
 800eade:	bf00      	nop
 800eae0:	e000      	b.n	800eae4 <USB_HC_Init+0x148>
      break;
 800eae2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800eae4:	78fb      	ldrb	r3, [r7, #3]
 800eae6:	015a      	lsls	r2, r3, #5
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	4413      	add	r3, r2
 800eaec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800eaf6:	78fb      	ldrb	r3, [r7, #3]
 800eaf8:	015a      	lsls	r2, r3, #5
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	4413      	add	r3, r2
 800eafe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb02:	68db      	ldr	r3, [r3, #12]
 800eb04:	78fa      	ldrb	r2, [r7, #3]
 800eb06:	0151      	lsls	r1, r2, #5
 800eb08:	693a      	ldr	r2, [r7, #16]
 800eb0a:	440a      	add	r2, r1
 800eb0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eb10:	f043 0302 	orr.w	r3, r3, #2
 800eb14:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb1c:	699a      	ldr	r2, [r3, #24]
 800eb1e:	78fb      	ldrb	r3, [r7, #3]
 800eb20:	f003 030f 	and.w	r3, r3, #15
 800eb24:	2101      	movs	r1, #1
 800eb26:	fa01 f303 	lsl.w	r3, r1, r3
 800eb2a:	6939      	ldr	r1, [r7, #16]
 800eb2c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800eb30:	4313      	orrs	r3, r2
 800eb32:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	699b      	ldr	r3, [r3, #24]
 800eb38:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800eb40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	da03      	bge.n	800eb50 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800eb48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb4c:	61bb      	str	r3, [r7, #24]
 800eb4e:	e001      	b.n	800eb54 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800eb50:	2300      	movs	r3, #0
 800eb52:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff fef9 	bl	800e94c <USB_GetHostSpeed>
 800eb5a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800eb5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d106      	bne.n	800eb72 <USB_HC_Init+0x1d6>
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	d003      	beq.n	800eb72 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800eb6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800eb6e:	617b      	str	r3, [r7, #20]
 800eb70:	e001      	b.n	800eb76 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800eb72:	2300      	movs	r3, #0
 800eb74:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800eb76:	787b      	ldrb	r3, [r7, #1]
 800eb78:	059b      	lsls	r3, r3, #22
 800eb7a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800eb7e:	78bb      	ldrb	r3, [r7, #2]
 800eb80:	02db      	lsls	r3, r3, #11
 800eb82:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800eb86:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800eb88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800eb8c:	049b      	lsls	r3, r3, #18
 800eb8e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800eb92:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800eb94:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800eb96:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800eb9a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800eb9c:	69bb      	ldr	r3, [r7, #24]
 800eb9e:	431a      	orrs	r2, r3
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800eba4:	78fa      	ldrb	r2, [r7, #3]
 800eba6:	0151      	lsls	r1, r2, #5
 800eba8:	693a      	ldr	r2, [r7, #16]
 800ebaa:	440a      	add	r2, r1
 800ebac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ebb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ebb4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ebb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ebba:	2b03      	cmp	r3, #3
 800ebbc:	d003      	beq.n	800ebc6 <USB_HC_Init+0x22a>
 800ebbe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d10f      	bne.n	800ebe6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ebc6:	78fb      	ldrb	r3, [r7, #3]
 800ebc8:	015a      	lsls	r2, r3, #5
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	4413      	add	r3, r2
 800ebce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	78fa      	ldrb	r2, [r7, #3]
 800ebd6:	0151      	lsls	r1, r2, #5
 800ebd8:	693a      	ldr	r2, [r7, #16]
 800ebda:	440a      	add	r2, r1
 800ebdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ebe0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ebe4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ebe6:	7ffb      	ldrb	r3, [r7, #31]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3720      	adds	r7, #32
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	40040000 	.word	0x40040000

0800ebf4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b08c      	sub	sp, #48	@ 0x30
 800ebf8:	af02      	add	r7, sp, #8
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	785b      	ldrb	r3, [r3, #1]
 800ec0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ec0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ec10:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	4a5d      	ldr	r2, [pc, #372]	@ (800ed8c <USB_HC_StartXfer+0x198>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d12f      	bne.n	800ec7a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800ec1a:	79fb      	ldrb	r3, [r7, #7]
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d11c      	bne.n	800ec5a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	7c9b      	ldrb	r3, [r3, #18]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d003      	beq.n	800ec30 <USB_HC_StartXfer+0x3c>
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	7c9b      	ldrb	r3, [r3, #18]
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d124      	bne.n	800ec7a <USB_HC_StartXfer+0x86>
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	799b      	ldrb	r3, [r3, #6]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d120      	bne.n	800ec7a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	015a      	lsls	r2, r3, #5
 800ec3c:	6a3b      	ldr	r3, [r7, #32]
 800ec3e:	4413      	add	r3, r2
 800ec40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	69fa      	ldr	r2, [r7, #28]
 800ec48:	0151      	lsls	r1, r2, #5
 800ec4a:	6a3a      	ldr	r2, [r7, #32]
 800ec4c:	440a      	add	r2, r1
 800ec4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec56:	60d3      	str	r3, [r2, #12]
 800ec58:	e00f      	b.n	800ec7a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	791b      	ldrb	r3, [r3, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d10b      	bne.n	800ec7a <USB_HC_StartXfer+0x86>
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	795b      	ldrb	r3, [r3, #5]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d107      	bne.n	800ec7a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	785b      	ldrb	r3, [r3, #1]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f000 fb6b 	bl	800f34c <USB_DoPing>
        return HAL_OK;
 800ec76:	2300      	movs	r3, #0
 800ec78:	e232      	b.n	800f0e0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	799b      	ldrb	r3, [r3, #6]
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d158      	bne.n	800ed34 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800ec82:	2301      	movs	r3, #1
 800ec84:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	78db      	ldrb	r3, [r3, #3]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d007      	beq.n	800ec9e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ec8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec90:	68ba      	ldr	r2, [r7, #8]
 800ec92:	8a92      	ldrh	r2, [r2, #20]
 800ec94:	fb03 f202 	mul.w	r2, r3, r2
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	61da      	str	r2, [r3, #28]
 800ec9c:	e07c      	b.n	800ed98 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	7c9b      	ldrb	r3, [r3, #18]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d130      	bne.n	800ed08 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	2bbc      	cmp	r3, #188	@ 0xbc
 800ecac:	d918      	bls.n	800ece0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	8a9b      	ldrh	r3, [r3, #20]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	69da      	ldr	r2, [r3, #28]
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d003      	beq.n	800ecd0 <USB_HC_StartXfer+0xdc>
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d103      	bne.n	800ecd8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	2202      	movs	r2, #2
 800ecd4:	60da      	str	r2, [r3, #12]
 800ecd6:	e05f      	b.n	800ed98 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	60da      	str	r2, [r3, #12]
 800ecde:	e05b      	b.n	800ed98 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	6a1a      	ldr	r2, [r3, #32]
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d007      	beq.n	800ed00 <USB_HC_StartXfer+0x10c>
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d003      	beq.n	800ed00 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	2204      	movs	r2, #4
 800ecfc:	60da      	str	r2, [r3, #12]
 800ecfe:	e04b      	b.n	800ed98 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	2203      	movs	r2, #3
 800ed04:	60da      	str	r2, [r3, #12]
 800ed06:	e047      	b.n	800ed98 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ed08:	79fb      	ldrb	r3, [r7, #7]
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d10d      	bne.n	800ed2a <USB_HC_StartXfer+0x136>
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	6a1b      	ldr	r3, [r3, #32]
 800ed12:	68ba      	ldr	r2, [r7, #8]
 800ed14:	8a92      	ldrh	r2, [r2, #20]
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d907      	bls.n	800ed2a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ed1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	8a92      	ldrh	r2, [r2, #20]
 800ed20:	fb03 f202 	mul.w	r2, r3, r2
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	61da      	str	r2, [r3, #28]
 800ed28:	e036      	b.n	800ed98 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	6a1a      	ldr	r2, [r3, #32]
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	61da      	str	r2, [r3, #28]
 800ed32:	e031      	b.n	800ed98 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	6a1b      	ldr	r3, [r3, #32]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d018      	beq.n	800ed6e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	6a1b      	ldr	r3, [r3, #32]
 800ed40:	68ba      	ldr	r2, [r7, #8]
 800ed42:	8a92      	ldrh	r2, [r2, #20]
 800ed44:	4413      	add	r3, r2
 800ed46:	3b01      	subs	r3, #1
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	8a92      	ldrh	r2, [r2, #20]
 800ed4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed50:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800ed52:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ed54:	8b7b      	ldrh	r3, [r7, #26]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d90b      	bls.n	800ed72 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800ed5a:	8b7b      	ldrh	r3, [r7, #26]
 800ed5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ed5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	8a92      	ldrh	r2, [r2, #20]
 800ed64:	fb03 f202 	mul.w	r2, r3, r2
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	61da      	str	r2, [r3, #28]
 800ed6c:	e001      	b.n	800ed72 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	78db      	ldrb	r3, [r3, #3]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00a      	beq.n	800ed90 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ed7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	8a92      	ldrh	r2, [r2, #20]
 800ed80:	fb03 f202 	mul.w	r2, r3, r2
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	61da      	str	r2, [r3, #28]
 800ed88:	e006      	b.n	800ed98 <USB_HC_StartXfer+0x1a4>
 800ed8a:	bf00      	nop
 800ed8c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	6a1a      	ldr	r2, [r3, #32]
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	69db      	ldr	r3, [r3, #28]
 800ed9c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800eda0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eda2:	04d9      	lsls	r1, r3, #19
 800eda4:	4ba3      	ldr	r3, [pc, #652]	@ (800f034 <USB_HC_StartXfer+0x440>)
 800eda6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800eda8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	7d9b      	ldrb	r3, [r3, #22]
 800edae:	075b      	lsls	r3, r3, #29
 800edb0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800edb4:	69f9      	ldr	r1, [r7, #28]
 800edb6:	0148      	lsls	r0, r1, #5
 800edb8:	6a39      	ldr	r1, [r7, #32]
 800edba:	4401      	add	r1, r0
 800edbc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800edc0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800edc2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800edc4:	79fb      	ldrb	r3, [r7, #7]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d009      	beq.n	800edde <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	6999      	ldr	r1, [r3, #24]
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	015a      	lsls	r2, r3, #5
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	4413      	add	r3, r2
 800edd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edda:	460a      	mov	r2, r1
 800eddc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800edde:	6a3b      	ldr	r3, [r7, #32]
 800ede0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	f003 0301 	and.w	r3, r3, #1
 800edea:	2b00      	cmp	r3, #0
 800edec:	bf0c      	ite	eq
 800edee:	2301      	moveq	r3, #1
 800edf0:	2300      	movne	r3, #0
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	015a      	lsls	r2, r3, #5
 800edfa:	6a3b      	ldr	r3, [r7, #32]
 800edfc:	4413      	add	r3, r2
 800edfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	69fa      	ldr	r2, [r7, #28]
 800ee06:	0151      	lsls	r1, r2, #5
 800ee08:	6a3a      	ldr	r2, [r7, #32]
 800ee0a:	440a      	add	r2, r1
 800ee0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ee14:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	015a      	lsls	r2, r3, #5
 800ee1a:	6a3b      	ldr	r3, [r7, #32]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	7e7b      	ldrb	r3, [r7, #25]
 800ee26:	075b      	lsls	r3, r3, #29
 800ee28:	69f9      	ldr	r1, [r7, #28]
 800ee2a:	0148      	lsls	r0, r1, #5
 800ee2c:	6a39      	ldr	r1, [r7, #32]
 800ee2e:	4401      	add	r1, r0
 800ee30:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800ee34:	4313      	orrs	r3, r2
 800ee36:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	799b      	ldrb	r3, [r3, #6]
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	f040 80c3 	bne.w	800efc8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	7c5b      	ldrb	r3, [r3, #17]
 800ee46:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ee48:	68ba      	ldr	r2, [r7, #8]
 800ee4a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	69fa      	ldr	r2, [r7, #28]
 800ee50:	0151      	lsls	r1, r2, #5
 800ee52:	6a3a      	ldr	r2, [r7, #32]
 800ee54:	440a      	add	r2, r1
 800ee56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ee5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ee5e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	015a      	lsls	r2, r3, #5
 800ee64:	6a3b      	ldr	r3, [r7, #32]
 800ee66:	4413      	add	r3, r2
 800ee68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	69fa      	ldr	r2, [r7, #28]
 800ee70:	0151      	lsls	r1, r2, #5
 800ee72:	6a3a      	ldr	r2, [r7, #32]
 800ee74:	440a      	add	r2, r1
 800ee76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee7a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ee7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	79db      	ldrb	r3, [r3, #7]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d123      	bne.n	800eed0 <USB_HC_StartXfer+0x2dc>
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	78db      	ldrb	r3, [r3, #3]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d11f      	bne.n	800eed0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	015a      	lsls	r2, r3, #5
 800ee94:	6a3b      	ldr	r3, [r7, #32]
 800ee96:	4413      	add	r3, r2
 800ee98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	69fa      	ldr	r2, [r7, #28]
 800eea0:	0151      	lsls	r1, r2, #5
 800eea2:	6a3a      	ldr	r2, [r7, #32]
 800eea4:	440a      	add	r2, r1
 800eea6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eeaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eeae:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	015a      	lsls	r2, r3, #5
 800eeb4:	6a3b      	ldr	r3, [r7, #32]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	69fa      	ldr	r2, [r7, #28]
 800eec0:	0151      	lsls	r1, r2, #5
 800eec2:	6a3a      	ldr	r2, [r7, #32]
 800eec4:	440a      	add	r2, r1
 800eec6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eeca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eece:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	7c9b      	ldrb	r3, [r3, #18]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d003      	beq.n	800eee0 <USB_HC_StartXfer+0x2ec>
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	7c9b      	ldrb	r3, [r3, #18]
 800eedc:	2b03      	cmp	r3, #3
 800eede:	d117      	bne.n	800ef10 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d113      	bne.n	800ef10 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	78db      	ldrb	r3, [r3, #3]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d10f      	bne.n	800ef10 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	015a      	lsls	r2, r3, #5
 800eef4:	6a3b      	ldr	r3, [r7, #32]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	69fa      	ldr	r2, [r7, #28]
 800ef00:	0151      	lsls	r1, r2, #5
 800ef02:	6a3a      	ldr	r2, [r7, #32]
 800ef04:	440a      	add	r2, r1
 800ef06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ef0e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	7c9b      	ldrb	r3, [r3, #18]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d162      	bne.n	800efde <USB_HC_StartXfer+0x3ea>
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	78db      	ldrb	r3, [r3, #3]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d15e      	bne.n	800efde <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	3b01      	subs	r3, #1
 800ef26:	2b03      	cmp	r3, #3
 800ef28:	d858      	bhi.n	800efdc <USB_HC_StartXfer+0x3e8>
 800ef2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef30 <USB_HC_StartXfer+0x33c>)
 800ef2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef30:	0800ef41 	.word	0x0800ef41
 800ef34:	0800ef63 	.word	0x0800ef63
 800ef38:	0800ef85 	.word	0x0800ef85
 800ef3c:	0800efa7 	.word	0x0800efa7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	015a      	lsls	r2, r3, #5
 800ef44:	6a3b      	ldr	r3, [r7, #32]
 800ef46:	4413      	add	r3, r2
 800ef48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	69fa      	ldr	r2, [r7, #28]
 800ef50:	0151      	lsls	r1, r2, #5
 800ef52:	6a3a      	ldr	r2, [r7, #32]
 800ef54:	440a      	add	r2, r1
 800ef56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef5e:	6053      	str	r3, [r2, #4]
          break;
 800ef60:	e03d      	b.n	800efde <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800ef62:	69fb      	ldr	r3, [r7, #28]
 800ef64:	015a      	lsls	r2, r3, #5
 800ef66:	6a3b      	ldr	r3, [r7, #32]
 800ef68:	4413      	add	r3, r2
 800ef6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	69fa      	ldr	r2, [r7, #28]
 800ef72:	0151      	lsls	r1, r2, #5
 800ef74:	6a3a      	ldr	r2, [r7, #32]
 800ef76:	440a      	add	r2, r1
 800ef78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef7c:	f043 030e 	orr.w	r3, r3, #14
 800ef80:	6053      	str	r3, [r2, #4]
          break;
 800ef82:	e02c      	b.n	800efde <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	015a      	lsls	r2, r3, #5
 800ef88:	6a3b      	ldr	r3, [r7, #32]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	69fa      	ldr	r2, [r7, #28]
 800ef94:	0151      	lsls	r1, r2, #5
 800ef96:	6a3a      	ldr	r2, [r7, #32]
 800ef98:	440a      	add	r2, r1
 800ef9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ef9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800efa2:	6053      	str	r3, [r2, #4]
          break;
 800efa4:	e01b      	b.n	800efde <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	015a      	lsls	r2, r3, #5
 800efaa:	6a3b      	ldr	r3, [r7, #32]
 800efac:	4413      	add	r3, r2
 800efae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	69fa      	ldr	r2, [r7, #28]
 800efb6:	0151      	lsls	r1, r2, #5
 800efb8:	6a3a      	ldr	r2, [r7, #32]
 800efba:	440a      	add	r2, r1
 800efbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800efc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800efc4:	6053      	str	r3, [r2, #4]
          break;
 800efc6:	e00a      	b.n	800efde <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	015a      	lsls	r2, r3, #5
 800efcc:	6a3b      	ldr	r3, [r7, #32]
 800efce:	4413      	add	r3, r2
 800efd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efd4:	461a      	mov	r2, r3
 800efd6:	2300      	movs	r3, #0
 800efd8:	6053      	str	r3, [r2, #4]
 800efda:	e000      	b.n	800efde <USB_HC_StartXfer+0x3ea>
          break;
 800efdc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	015a      	lsls	r2, r3, #5
 800efe2:	6a3b      	ldr	r3, [r7, #32]
 800efe4:	4413      	add	r3, r2
 800efe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eff4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	78db      	ldrb	r3, [r3, #3]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d004      	beq.n	800f008 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f004:	613b      	str	r3, [r7, #16]
 800f006:	e003      	b.n	800f010 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f00e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f016:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	015a      	lsls	r2, r3, #5
 800f01c:	6a3b      	ldr	r3, [r7, #32]
 800f01e:	4413      	add	r3, r2
 800f020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f024:	461a      	mov	r2, r3
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800f02a:	79fb      	ldrb	r3, [r7, #7]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d003      	beq.n	800f038 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800f030:	2300      	movs	r3, #0
 800f032:	e055      	b.n	800f0e0 <USB_HC_StartXfer+0x4ec>
 800f034:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	78db      	ldrb	r3, [r3, #3]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d14e      	bne.n	800f0de <USB_HC_StartXfer+0x4ea>
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	6a1b      	ldr	r3, [r3, #32]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d04a      	beq.n	800f0de <USB_HC_StartXfer+0x4ea>
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	79db      	ldrb	r3, [r3, #7]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d146      	bne.n	800f0de <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	7c9b      	ldrb	r3, [r3, #18]
 800f054:	2b03      	cmp	r3, #3
 800f056:	d831      	bhi.n	800f0bc <USB_HC_StartXfer+0x4c8>
 800f058:	a201      	add	r2, pc, #4	@ (adr r2, 800f060 <USB_HC_StartXfer+0x46c>)
 800f05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05e:	bf00      	nop
 800f060:	0800f071 	.word	0x0800f071
 800f064:	0800f095 	.word	0x0800f095
 800f068:	0800f071 	.word	0x0800f071
 800f06c:	0800f095 	.word	0x0800f095
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	6a1b      	ldr	r3, [r3, #32]
 800f074:	3303      	adds	r3, #3
 800f076:	089b      	lsrs	r3, r3, #2
 800f078:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800f07a:	8afa      	ldrh	r2, [r7, #22]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f080:	b29b      	uxth	r3, r3
 800f082:	429a      	cmp	r2, r3
 800f084:	d91c      	bls.n	800f0c0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	699b      	ldr	r3, [r3, #24]
 800f08a:	f043 0220 	orr.w	r2, r3, #32
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	619a      	str	r2, [r3, #24]
        }
        break;
 800f092:	e015      	b.n	800f0c0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	6a1b      	ldr	r3, [r3, #32]
 800f098:	3303      	adds	r3, #3
 800f09a:	089b      	lsrs	r3, r3, #2
 800f09c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800f09e:	8afa      	ldrh	r2, [r7, #22]
 800f0a0:	6a3b      	ldr	r3, [r7, #32]
 800f0a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f0a6:	691b      	ldr	r3, [r3, #16]
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d90a      	bls.n	800f0c4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	699b      	ldr	r3, [r3, #24]
 800f0b2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	619a      	str	r2, [r3, #24]
        }
        break;
 800f0ba:	e003      	b.n	800f0c4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800f0bc:	bf00      	nop
 800f0be:	e002      	b.n	800f0c6 <USB_HC_StartXfer+0x4d2>
        break;
 800f0c0:	bf00      	nop
 800f0c2:	e000      	b.n	800f0c6 <USB_HC_StartXfer+0x4d2>
        break;
 800f0c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	6999      	ldr	r1, [r3, #24]
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	785a      	ldrb	r2, [r3, #1]
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	6a1b      	ldr	r3, [r3, #32]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	9000      	str	r0, [sp, #0]
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f7ff f9d5 	bl	800e488 <USB_WritePacket>
  }

  return HAL_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3728      	adds	r7, #40	@ 0x28
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b085      	sub	sp, #20
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f0fa:	695b      	ldr	r3, [r3, #20]
 800f0fc:	b29b      	uxth	r3, r3
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3714      	adds	r7, #20
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr

0800f10a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f10a:	b480      	push	{r7}
 800f10c:	b089      	sub	sp, #36	@ 0x24
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
 800f112:	460b      	mov	r3, r1
 800f114:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800f11a:	78fb      	ldrb	r3, [r7, #3]
 800f11c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800f11e:	2300      	movs	r3, #0
 800f120:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	015a      	lsls	r2, r3, #5
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	4413      	add	r3, r2
 800f12a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	0c9b      	lsrs	r3, r3, #18
 800f132:	f003 0303 	and.w	r3, r3, #3
 800f136:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800f138:	69bb      	ldr	r3, [r7, #24]
 800f13a:	015a      	lsls	r2, r3, #5
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	4413      	add	r3, r2
 800f140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	0fdb      	lsrs	r3, r3, #31
 800f148:	f003 0301 	and.w	r3, r3, #1
 800f14c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	015a      	lsls	r2, r3, #5
 800f152:	69fb      	ldr	r3, [r7, #28]
 800f154:	4413      	add	r3, r2
 800f156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	0fdb      	lsrs	r3, r3, #31
 800f15e:	f003 0301 	and.w	r3, r3, #1
 800f162:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	f003 0320 	and.w	r3, r3, #32
 800f16c:	2b20      	cmp	r3, #32
 800f16e:	d10d      	bne.n	800f18c <USB_HC_Halt+0x82>
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d10a      	bne.n	800f18c <USB_HC_Halt+0x82>
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d005      	beq.n	800f188 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d002      	beq.n	800f188 <USB_HC_Halt+0x7e>
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	2b03      	cmp	r3, #3
 800f186:	d101      	bne.n	800f18c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800f188:	2300      	movs	r3, #0
 800f18a:	e0d8      	b.n	800f33e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d002      	beq.n	800f198 <USB_HC_Halt+0x8e>
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	2b02      	cmp	r3, #2
 800f196:	d173      	bne.n	800f280 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	015a      	lsls	r2, r3, #5
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	4413      	add	r3, r2
 800f1a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	69ba      	ldr	r2, [r7, #24]
 800f1a8:	0151      	lsls	r1, r2, #5
 800f1aa:	69fa      	ldr	r2, [r7, #28]
 800f1ac:	440a      	add	r2, r1
 800f1ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f1b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f1b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	689b      	ldr	r3, [r3, #8]
 800f1bc:	f003 0320 	and.w	r3, r3, #32
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d14a      	bne.n	800f25a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d133      	bne.n	800f238 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	69ba      	ldr	r2, [r7, #24]
 800f1e0:	0151      	lsls	r1, r2, #5
 800f1e2:	69fa      	ldr	r2, [r7, #28]
 800f1e4:	440a      	add	r2, r1
 800f1e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f1ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f1ee:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	015a      	lsls	r2, r3, #5
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	69ba      	ldr	r2, [r7, #24]
 800f200:	0151      	lsls	r1, r2, #5
 800f202:	69fa      	ldr	r2, [r7, #28]
 800f204:	440a      	add	r2, r1
 800f206:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f20a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f20e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	3301      	adds	r3, #1
 800f214:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f21c:	d82e      	bhi.n	800f27c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	015a      	lsls	r2, r3, #5
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	4413      	add	r3, r2
 800f226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f234:	d0ec      	beq.n	800f210 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f236:	e081      	b.n	800f33c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	015a      	lsls	r2, r3, #5
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	4413      	add	r3, r2
 800f240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	69ba      	ldr	r2, [r7, #24]
 800f248:	0151      	lsls	r1, r2, #5
 800f24a:	69fa      	ldr	r2, [r7, #28]
 800f24c:	440a      	add	r2, r1
 800f24e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f252:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f256:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f258:	e070      	b.n	800f33c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	015a      	lsls	r2, r3, #5
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	4413      	add	r3, r2
 800f262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	69ba      	ldr	r2, [r7, #24]
 800f26a:	0151      	lsls	r1, r2, #5
 800f26c:	69fa      	ldr	r2, [r7, #28]
 800f26e:	440a      	add	r2, r1
 800f270:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f274:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f278:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f27a:	e05f      	b.n	800f33c <USB_HC_Halt+0x232>
            break;
 800f27c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f27e:	e05d      	b.n	800f33c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	015a      	lsls	r2, r3, #5
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	4413      	add	r3, r2
 800f288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	69ba      	ldr	r2, [r7, #24]
 800f290:	0151      	lsls	r1, r2, #5
 800f292:	69fa      	ldr	r2, [r7, #28]
 800f294:	440a      	add	r2, r1
 800f296:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f29a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f29e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d133      	bne.n	800f318 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	015a      	lsls	r2, r3, #5
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	69ba      	ldr	r2, [r7, #24]
 800f2c0:	0151      	lsls	r1, r2, #5
 800f2c2:	69fa      	ldr	r2, [r7, #28]
 800f2c4:	440a      	add	r2, r1
 800f2c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f2ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f2ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f2d0:	69bb      	ldr	r3, [r7, #24]
 800f2d2:	015a      	lsls	r2, r3, #5
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	69ba      	ldr	r2, [r7, #24]
 800f2e0:	0151      	lsls	r1, r2, #5
 800f2e2:	69fa      	ldr	r2, [r7, #28]
 800f2e4:	440a      	add	r2, r1
 800f2e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f2ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f2ee:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f2fc:	d81d      	bhi.n	800f33a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	015a      	lsls	r2, r3, #5
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	4413      	add	r3, r2
 800f306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f314:	d0ec      	beq.n	800f2f0 <USB_HC_Halt+0x1e6>
 800f316:	e011      	b.n	800f33c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	015a      	lsls	r2, r3, #5
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	4413      	add	r3, r2
 800f320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	69ba      	ldr	r2, [r7, #24]
 800f328:	0151      	lsls	r1, r2, #5
 800f32a:	69fa      	ldr	r2, [r7, #28]
 800f32c:	440a      	add	r2, r1
 800f32e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f332:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	e000      	b.n	800f33c <USB_HC_Halt+0x232>
          break;
 800f33a:	bf00      	nop
    }
  }

  return HAL_OK;
 800f33c:	2300      	movs	r3, #0
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3724      	adds	r7, #36	@ 0x24
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
	...

0800f34c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b087      	sub	sp, #28
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	460b      	mov	r3, r1
 800f356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800f35c:	78fb      	ldrb	r3, [r7, #3]
 800f35e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800f360:	2301      	movs	r3, #1
 800f362:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	04da      	lsls	r2, r3, #19
 800f368:	4b15      	ldr	r3, [pc, #84]	@ (800f3c0 <USB_DoPing+0x74>)
 800f36a:	4013      	ands	r3, r2
 800f36c:	693a      	ldr	r2, [r7, #16]
 800f36e:	0151      	lsls	r1, r2, #5
 800f370:	697a      	ldr	r2, [r7, #20]
 800f372:	440a      	add	r2, r1
 800f374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f378:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f37c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	015a      	lsls	r2, r3, #5
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	4413      	add	r3, r2
 800f386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f394:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f39c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	015a      	lsls	r2, r3, #5
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800f3b0:	2300      	movs	r3, #0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	371c      	adds	r7, #28
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	1ff80000 	.word	0x1ff80000

0800f3c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7fe ff98 	bl	800e30e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f3de:	2110      	movs	r1, #16
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7fe fff1 	bl	800e3c8 <USB_FlushTxFifo>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d001      	beq.n	800f3f0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7ff f81b 	bl	800e42c <USB_FlushRxFifo>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d001      	beq.n	800f400 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f400:	2300      	movs	r3, #0
 800f402:	61bb      	str	r3, [r7, #24]
 800f404:	e01f      	b.n	800f446 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	015a      	lsls	r2, r3, #5
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	4413      	add	r3, r2
 800f40e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f41c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f424:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f42c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	015a      	lsls	r2, r3, #5
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	4413      	add	r3, r2
 800f436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f43a:	461a      	mov	r2, r3
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	3301      	adds	r3, #1
 800f444:	61bb      	str	r3, [r7, #24]
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	2b0f      	cmp	r3, #15
 800f44a:	d9dc      	bls.n	800f406 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f44c:	2300      	movs	r3, #0
 800f44e:	61bb      	str	r3, [r7, #24]
 800f450:	e034      	b.n	800f4bc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	015a      	lsls	r2, r3, #5
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	4413      	add	r3, r2
 800f45a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f468:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f470:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f478:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	015a      	lsls	r2, r3, #5
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	4413      	add	r3, r2
 800f482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f486:	461a      	mov	r2, r3
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	3301      	adds	r3, #1
 800f490:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f498:	d80c      	bhi.n	800f4b4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	015a      	lsls	r2, r3, #5
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f4ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f4b0:	d0ec      	beq.n	800f48c <USB_StopHost+0xc8>
 800f4b2:	e000      	b.n	800f4b6 <USB_StopHost+0xf2>
        break;
 800f4b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	61bb      	str	r3, [r7, #24]
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	2b0f      	cmp	r3, #15
 800f4c0:	d9c7      	bls.n	800f452 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7fe ff07 	bl	800e2ec <USB_EnableGlobalInt>

  return ret;
 800f4de:	7ffb      	ldrb	r3, [r7, #31]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3720      	adds	r7, #32
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f4ec:	4904      	ldr	r1, [pc, #16]	@ (800f500 <MX_FATFS_Init+0x18>)
 800f4ee:	4805      	ldr	r0, [pc, #20]	@ (800f504 <MX_FATFS_Init+0x1c>)
 800f4f0:	f003 fafe 	bl	8012af0 <FATFS_LinkDriver>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	4b03      	ldr	r3, [pc, #12]	@ (800f508 <MX_FATFS_Init+0x20>)
 800f4fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f4fc:	bf00      	nop
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	20000d18 	.word	0x20000d18
 800f504:	0802c400 	.word	0x0802c400
 800f508:	20000d14 	.word	0x20000d14

0800f50c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f512:	2300      	movs	r3, #0
 800f514:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f516:	f000 f87b 	bl	800f610 <BSP_SD_IsDetected>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d001      	beq.n	800f524 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f520:	2302      	movs	r3, #2
 800f522:	e012      	b.n	800f54a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f524:	480b      	ldr	r0, [pc, #44]	@ (800f554 <BSP_SD_Init+0x48>)
 800f526:	f7fb f901 	bl	800a72c <HAL_SD_Init>
 800f52a:	4603      	mov	r3, r0
 800f52c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f52e:	79fb      	ldrb	r3, [r7, #7]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d109      	bne.n	800f548 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f534:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f538:	4806      	ldr	r0, [pc, #24]	@ (800f554 <BSP_SD_Init+0x48>)
 800f53a:	f7fb fd51 	bl	800afe0 <HAL_SD_ConfigWideBusOperation>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d001      	beq.n	800f548 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f544:	2301      	movs	r3, #1
 800f546:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f548:	79fb      	ldrb	r3, [r7, #7]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	20000870 	.word	0x20000870

0800f558 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f564:	2300      	movs	r3, #0
 800f566:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	68f9      	ldr	r1, [r7, #12]
 800f56e:	4806      	ldr	r0, [pc, #24]	@ (800f588 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f570:	f7fb f994 	bl	800a89c <HAL_SD_ReadBlocks_DMA>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f57a:	2301      	movs	r3, #1
 800f57c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3718      	adds	r7, #24
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	20000870 	.word	0x20000870

0800f58c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b086      	sub	sp, #24
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f598:	2300      	movs	r3, #0
 800f59a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	68f9      	ldr	r1, [r7, #12]
 800f5a2:	4806      	ldr	r0, [pc, #24]	@ (800f5bc <BSP_SD_WriteBlocks_DMA+0x30>)
 800f5a4:	f7fb fa5c 	bl	800aa60 <HAL_SD_WriteBlocks_DMA>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d001      	beq.n	800f5b2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3718      	adds	r7, #24
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	20000870 	.word	0x20000870

0800f5c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f5c4:	4805      	ldr	r0, [pc, #20]	@ (800f5dc <BSP_SD_GetCardState+0x1c>)
 800f5c6:	f7fb fda5 	bl	800b114 <HAL_SD_GetCardState>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b04      	cmp	r3, #4
 800f5ce:	bf14      	ite	ne
 800f5d0:	2301      	movne	r3, #1
 800f5d2:	2300      	moveq	r3, #0
 800f5d4:	b2db      	uxtb	r3, r3
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	20000870 	.word	0x20000870

0800f5e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f5e8:	6879      	ldr	r1, [r7, #4]
 800f5ea:	4803      	ldr	r0, [pc, #12]	@ (800f5f8 <BSP_SD_GetCardInfo+0x18>)
 800f5ec:	f7fb fccc 	bl	800af88 <HAL_SD_GetCardInfo>
}
 800f5f0:	bf00      	nop
 800f5f2:	3708      	adds	r7, #8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	20000870 	.word	0x20000870

0800f5fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f604:	f000 f9b2 	bl	800f96c <BSP_SD_ReadCpltCallback>
}
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f616:	2301      	movs	r3, #1
 800f618:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f61a:	f000 f80b 	bl	800f634 <BSP_PlatformIsDetected>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d101      	bne.n	800f628 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f624:	2300      	movs	r3, #0
 800f626:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f628:	79fb      	ldrb	r3, [r7, #7]
 800f62a:	b2db      	uxtb	r3, r3
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f63a:	2301      	movs	r3, #1
 800f63c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f63e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f642:	4806      	ldr	r0, [pc, #24]	@ (800f65c <BSP_PlatformIsDetected+0x28>)
 800f644:	f7f6 f9f0 	bl	8005a28 <HAL_GPIO_ReadPin>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f64e:	2300      	movs	r3, #0
 800f650:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f652:	79fb      	ldrb	r3, [r7, #7]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	40020800 	.word	0x40020800

0800f660 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800f668:	f003 fa8e 	bl	8012b88 <osKernelSysTick>
 800f66c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800f66e:	e006      	b.n	800f67e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f670:	f7ff ffa6 	bl	800f5c0 <BSP_SD_GetCardState>
 800f674:	4603      	mov	r3, r0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d101      	bne.n	800f67e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	e009      	b.n	800f692 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800f67e:	f003 fa83 	bl	8012b88 <osKernelSysTick>
 800f682:	4602      	mov	r2, r0
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	1ad3      	subs	r3, r2, r3
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d8f0      	bhi.n	800f670 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f68e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
	...

0800f69c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f6d4 <SD_CheckStatus+0x38>)
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f6ac:	f7ff ff88 	bl	800f5c0 <BSP_SD_GetCardState>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d107      	bne.n	800f6c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f6b6:	4b07      	ldr	r3, [pc, #28]	@ (800f6d4 <SD_CheckStatus+0x38>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	f023 0301 	bic.w	r3, r3, #1
 800f6c0:	b2da      	uxtb	r2, r3
 800f6c2:	4b04      	ldr	r3, [pc, #16]	@ (800f6d4 <SD_CheckStatus+0x38>)
 800f6c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f6c6:	4b03      	ldr	r3, [pc, #12]	@ (800f6d4 <SD_CheckStatus+0x38>)
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	b2db      	uxtb	r3, r3
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	20000009 	.word	0x20000009

0800f6d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f6d8:	b590      	push	{r4, r7, lr}
 800f6da:	b087      	sub	sp, #28
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	4603      	mov	r3, r0
 800f6e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f6e2:	4b20      	ldr	r3, [pc, #128]	@ (800f764 <SD_initialize+0x8c>)
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800f6e8:	f003 fa42 	bl	8012b70 <osKernelRunning>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d030      	beq.n	800f754 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f6f2:	f7ff ff0b 	bl	800f50c <BSP_SD_Init>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d107      	bne.n	800f70c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f6fc:	79fb      	ldrb	r3, [r7, #7]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7ff ffcc 	bl	800f69c <SD_CheckStatus>
 800f704:	4603      	mov	r3, r0
 800f706:	461a      	mov	r2, r3
 800f708:	4b16      	ldr	r3, [pc, #88]	@ (800f764 <SD_initialize+0x8c>)
 800f70a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f70c:	4b15      	ldr	r3, [pc, #84]	@ (800f764 <SD_initialize+0x8c>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	b2db      	uxtb	r3, r3
 800f712:	2b01      	cmp	r3, #1
 800f714:	d01e      	beq.n	800f754 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800f716:	4b14      	ldr	r3, [pc, #80]	@ (800f768 <SD_initialize+0x90>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d10e      	bne.n	800f73c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800f71e:	4b13      	ldr	r3, [pc, #76]	@ (800f76c <SD_initialize+0x94>)
 800f720:	f107 0408 	add.w	r4, r7, #8
 800f724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800f72a:	f107 0308 	add.w	r3, r7, #8
 800f72e:	2100      	movs	r1, #0
 800f730:	4618      	mov	r0, r3
 800f732:	f003 fc18 	bl	8012f66 <osMessageCreate>
 800f736:	4603      	mov	r3, r0
 800f738:	4a0b      	ldr	r2, [pc, #44]	@ (800f768 <SD_initialize+0x90>)
 800f73a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800f73c:	4b0a      	ldr	r3, [pc, #40]	@ (800f768 <SD_initialize+0x90>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d107      	bne.n	800f754 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800f744:	4b07      	ldr	r3, [pc, #28]	@ (800f764 <SD_initialize+0x8c>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	f043 0301 	orr.w	r3, r3, #1
 800f74e:	b2da      	uxtb	r2, r3
 800f750:	4b04      	ldr	r3, [pc, #16]	@ (800f764 <SD_initialize+0x8c>)
 800f752:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f754:	4b03      	ldr	r3, [pc, #12]	@ (800f764 <SD_initialize+0x8c>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	b2db      	uxtb	r3, r3
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	371c      	adds	r7, #28
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd90      	pop	{r4, r7, pc}
 800f762:	bf00      	nop
 800f764:	20000009 	.word	0x20000009
 800f768:	20000d1c 	.word	0x20000d1c
 800f76c:	0802868c 	.word	0x0802868c

0800f770 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	4603      	mov	r3, r0
 800f778:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f77a:	79fb      	ldrb	r3, [r7, #7]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7ff ff8d 	bl	800f69c <SD_CheckStatus>
 800f782:	4603      	mov	r3, r0
}
 800f784:	4618      	mov	r0, r3
 800f786:	3708      	adds	r7, #8
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08a      	sub	sp, #40	@ 0x28
 800f790:	af00      	add	r7, sp, #0
 800f792:	60b9      	str	r1, [r7, #8]
 800f794:	607a      	str	r2, [r7, #4]
 800f796:	603b      	str	r3, [r7, #0]
 800f798:	4603      	mov	r3, r0
 800f79a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f79c:	2301      	movs	r3, #1
 800f79e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f7a2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f7a6:	f7ff ff5b 	bl	800f660 <SD_CheckStatusWithTimeout>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	da02      	bge.n	800f7b6 <SD_read+0x2a>
  {
    return res;
 800f7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f7b4:	e032      	b.n	800f81c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f7b6:	683a      	ldr	r2, [r7, #0]
 800f7b8:	6879      	ldr	r1, [r7, #4]
 800f7ba:	68b8      	ldr	r0, [r7, #8]
 800f7bc:	f7ff fecc 	bl	800f558 <BSP_SD_ReadBlocks_DMA>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800f7c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d124      	bne.n	800f818 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f7ce:	4b15      	ldr	r3, [pc, #84]	@ (800f824 <SD_read+0x98>)
 800f7d0:	6819      	ldr	r1, [r3, #0]
 800f7d2:	f107 0314 	add.w	r3, r7, #20
 800f7d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f003 fc2c 	bl	8013038 <osMessageGet>

    if (event.status == osEventMessage)
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	2b10      	cmp	r3, #16
 800f7e4:	d118      	bne.n	800f818 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800f7e6:	69bb      	ldr	r3, [r7, #24]
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d115      	bne.n	800f818 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800f7ec:	f003 f9cc 	bl	8012b88 <osKernelSysTick>
 800f7f0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f7f2:	e008      	b.n	800f806 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f7f4:	f7ff fee4 	bl	800f5c0 <BSP_SD_GetCardState>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d103      	bne.n	800f806 <SD_read+0x7a>
              {
                res = RES_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f804:	e008      	b.n	800f818 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f806:	f003 f9bf 	bl	8012b88 <osKernelSysTick>
 800f80a:	4602      	mov	r2, r0
 800f80c:	6a3b      	ldr	r3, [r7, #32]
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f814:	4293      	cmp	r3, r2
 800f816:	d9ed      	bls.n	800f7f4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3728      	adds	r7, #40	@ 0x28
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	20000d1c 	.word	0x20000d1c

0800f828 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b08a      	sub	sp, #40	@ 0x28
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60b9      	str	r1, [r7, #8]
 800f830:	607a      	str	r2, [r7, #4]
 800f832:	603b      	str	r3, [r7, #0]
 800f834:	4603      	mov	r3, r0
 800f836:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f838:	2301      	movs	r3, #1
 800f83a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f83e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f842:	f7ff ff0d 	bl	800f660 <SD_CheckStatusWithTimeout>
 800f846:	4603      	mov	r3, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	da02      	bge.n	800f852 <SD_write+0x2a>
  {
    return res;
 800f84c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f850:	e02e      	b.n	800f8b0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f852:	683a      	ldr	r2, [r7, #0]
 800f854:	6879      	ldr	r1, [r7, #4]
 800f856:	68b8      	ldr	r0, [r7, #8]
 800f858:	f7ff fe98 	bl	800f58c <BSP_SD_WriteBlocks_DMA>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d124      	bne.n	800f8ac <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f862:	4b15      	ldr	r3, [pc, #84]	@ (800f8b8 <SD_write+0x90>)
 800f864:	6819      	ldr	r1, [r3, #0]
 800f866:	f107 0314 	add.w	r3, r7, #20
 800f86a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f86e:	4618      	mov	r0, r3
 800f870:	f003 fbe2 	bl	8013038 <osMessageGet>

    if (event.status == osEventMessage)
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	2b10      	cmp	r3, #16
 800f878:	d118      	bne.n	800f8ac <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800f87a:	69bb      	ldr	r3, [r7, #24]
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	d115      	bne.n	800f8ac <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800f880:	f003 f982 	bl	8012b88 <osKernelSysTick>
 800f884:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f886:	e008      	b.n	800f89a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f888:	f7ff fe9a 	bl	800f5c0 <BSP_SD_GetCardState>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d103      	bne.n	800f89a <SD_write+0x72>
          {
            res = RES_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f898:	e008      	b.n	800f8ac <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f89a:	f003 f975 	bl	8012b88 <osKernelSysTick>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	6a3b      	ldr	r3, [r7, #32]
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d9ed      	bls.n	800f888 <SD_write+0x60>
    }

  }
#endif

  return res;
 800f8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3728      	adds	r7, #40	@ 0x28
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	20000d1c 	.word	0x20000d1c

0800f8bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b08c      	sub	sp, #48	@ 0x30
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	603a      	str	r2, [r7, #0]
 800f8c6:	71fb      	strb	r3, [r7, #7]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f8d2:	4b25      	ldr	r3, [pc, #148]	@ (800f968 <SD_ioctl+0xac>)
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	f003 0301 	and.w	r3, r3, #1
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d001      	beq.n	800f8e4 <SD_ioctl+0x28>
 800f8e0:	2303      	movs	r3, #3
 800f8e2:	e03c      	b.n	800f95e <SD_ioctl+0xa2>

  switch (cmd)
 800f8e4:	79bb      	ldrb	r3, [r7, #6]
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d834      	bhi.n	800f954 <SD_ioctl+0x98>
 800f8ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f8f0 <SD_ioctl+0x34>)
 800f8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f0:	0800f901 	.word	0x0800f901
 800f8f4:	0800f909 	.word	0x0800f909
 800f8f8:	0800f921 	.word	0x0800f921
 800f8fc:	0800f93b 	.word	0x0800f93b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f900:	2300      	movs	r3, #0
 800f902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f906:	e028      	b.n	800f95a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f908:	f107 030c 	add.w	r3, r7, #12
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7ff fe67 	bl	800f5e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f918:	2300      	movs	r3, #0
 800f91a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f91e:	e01c      	b.n	800f95a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f920:	f107 030c 	add.w	r3, r7, #12
 800f924:	4618      	mov	r0, r3
 800f926:	f7ff fe5b 	bl	800f5e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f932:	2300      	movs	r3, #0
 800f934:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f938:	e00f      	b.n	800f95a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f93a:	f107 030c 	add.w	r3, r7, #12
 800f93e:	4618      	mov	r0, r3
 800f940:	f7ff fe4e 	bl	800f5e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f946:	0a5a      	lsrs	r2, r3, #9
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f94c:	2300      	movs	r3, #0
 800f94e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f952:	e002      	b.n	800f95a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f954:	2304      	movs	r3, #4
 800f956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f95a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3730      	adds	r7, #48	@ 0x30
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	20000009 	.word	0x20000009

0800f96c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800f970:	4b04      	ldr	r3, [pc, #16]	@ (800f984 <BSP_SD_ReadCpltCallback+0x18>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	2200      	movs	r2, #0
 800f976:	2101      	movs	r1, #1
 800f978:	4618      	mov	r0, r3
 800f97a:	f003 fb1d 	bl	8012fb8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800f97e:	bf00      	nop
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	20000d1c 	.word	0x20000d1c

0800f988 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f988:	b5b0      	push	{r4, r5, r7, lr}
 800f98a:	b08c      	sub	sp, #48	@ 0x30
 800f98c:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800f98e:	2100      	movs	r1, #0
 800f990:	2000      	movs	r0, #0
 800f992:	f00a f865 	bl	8019a60 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800f996:	4b1a      	ldr	r3, [pc, #104]	@ (800fa00 <MX_LWIP_Init+0x78>)
 800f998:	2200      	movs	r2, #0
 800f99a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800f99c:	4b19      	ldr	r3, [pc, #100]	@ (800fa04 <MX_LWIP_Init+0x7c>)
 800f99e:	2200      	movs	r2, #0
 800f9a0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800f9a2:	4b19      	ldr	r3, [pc, #100]	@ (800fa08 <MX_LWIP_Init+0x80>)
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f9a8:	4b18      	ldr	r3, [pc, #96]	@ (800fa0c <MX_LWIP_Init+0x84>)
 800f9aa:	9302      	str	r3, [sp, #8]
 800f9ac:	4b18      	ldr	r3, [pc, #96]	@ (800fa10 <MX_LWIP_Init+0x88>)
 800f9ae:	9301      	str	r3, [sp, #4]
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	9300      	str	r3, [sp, #0]
 800f9b4:	4b14      	ldr	r3, [pc, #80]	@ (800fa08 <MX_LWIP_Init+0x80>)
 800f9b6:	4a13      	ldr	r2, [pc, #76]	@ (800fa04 <MX_LWIP_Init+0x7c>)
 800f9b8:	4911      	ldr	r1, [pc, #68]	@ (800fa00 <MX_LWIP_Init+0x78>)
 800f9ba:	4816      	ldr	r0, [pc, #88]	@ (800fa14 <MX_LWIP_Init+0x8c>)
 800f9bc:	f00a fe1a 	bl	801a5f4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f9c0:	4814      	ldr	r0, [pc, #80]	@ (800fa14 <MX_LWIP_Init+0x8c>)
 800f9c2:	f00a ffd1 	bl	801a968 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800f9c6:	4813      	ldr	r0, [pc, #76]	@ (800fa14 <MX_LWIP_Init+0x8c>)
 800f9c8:	f00a ffde 	bl	801a988 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f9cc:	4912      	ldr	r1, [pc, #72]	@ (800fa18 <MX_LWIP_Init+0x90>)
 800f9ce:	4811      	ldr	r0, [pc, #68]	@ (800fa14 <MX_LWIP_Init+0x8c>)
 800f9d0:	f00b f8e0 	bl	801ab94 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800f9d4:	4b11      	ldr	r3, [pc, #68]	@ (800fa1c <MX_LWIP_Init+0x94>)
 800f9d6:	1d3c      	adds	r4, r7, #4
 800f9d8:	461d      	mov	r5, r3
 800f9da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f9e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800f9e6:	1d3b      	adds	r3, r7, #4
 800f9e8:	490a      	ldr	r1, [pc, #40]	@ (800fa14 <MX_LWIP_Init+0x8c>)
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f003 f8dc 	bl	8012ba8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800f9f0:	4808      	ldr	r0, [pc, #32]	@ (800fa14 <MX_LWIP_Init+0x8c>)
 800f9f2:	f013 fa2b 	bl	8022e4c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f9f6:	bf00      	nop
 800f9f8:	3720      	adds	r7, #32
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bdb0      	pop	{r4, r5, r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	20000d58 	.word	0x20000d58
 800fa04:	20000d5c 	.word	0x20000d5c
 800fa08:	20000d60 	.word	0x20000d60
 800fa0c:	08019971 	.word	0x08019971
 800fa10:	0800ff91 	.word	0x0800ff91
 800fa14:	20000d20 	.word	0x20000d20
 800fa18:	0800fa21 	.word	0x0800fa21
 800fa1c:	080286a4 	.word	0x080286a4

0800fa20 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800fa28:	bf00      	nop
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b087      	sub	sp, #28
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800fa46:	2320      	movs	r3, #32
 800fa48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800fa4a:	f3bf 8f4f 	dsb	sy
}
 800fa4e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800fa50:	e00b      	b.n	800fa6a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800fa52:	4a0d      	ldr	r2, [pc, #52]	@ (800fa88 <SCB_InvalidateDCache_by_Addr+0x54>)
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	693a      	ldr	r2, [r7, #16]
 800fa5e:	4413      	add	r3, r2
 800fa60:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800fa62:	697a      	ldr	r2, [r7, #20]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	1ad3      	subs	r3, r2, r3
 800fa68:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	dcf0      	bgt.n	800fa52 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800fa70:	f3bf 8f4f 	dsb	sy
}
 800fa74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fa76:	f3bf 8f6f 	isb	sy
}
 800fa7a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800fa7c:	bf00      	nop
 800fa7e:	371c      	adds	r7, #28
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr
 800fa88:	e000ed00 	.word	0xe000ed00

0800fa8c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800fa94:	4b04      	ldr	r3, [pc, #16]	@ (800faa8 <HAL_ETH_RxCpltCallback+0x1c>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f003 fa1b 	bl	8012ed4 <osSemaphoreRelease>
}
 800fa9e:	bf00      	nop
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	200056f0 	.word	0x200056f0

0800faac <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800fab4:	4b04      	ldr	r3, [pc, #16]	@ (800fac8 <HAL_ETH_TxCpltCallback+0x1c>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4618      	mov	r0, r3
 800faba:	f003 fa0b 	bl	8012ed4 <osSemaphoreRelease>
}
 800fabe:	bf00      	nop
 800fac0:	3708      	adds	r7, #8
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	200056f4 	.word	0x200056f4

0800facc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7f5 f9cf 	bl	8004e78 <HAL_ETH_GetDMAError>
 800fada:	4603      	mov	r3, r0
 800fadc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fae0:	2b80      	cmp	r3, #128	@ 0x80
 800fae2:	d104      	bne.n	800faee <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800fae4:	4b04      	ldr	r3, [pc, #16]	@ (800faf8 <HAL_ETH_ErrorCallback+0x2c>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4618      	mov	r0, r3
 800faea:	f003 f9f3 	bl	8012ed4 <osSemaphoreRelease>
  }
}
 800faee:	bf00      	nop
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	200056f0 	.word	0x200056f0

0800fafc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800fafc:	b5b0      	push	{r4, r5, r7, lr}
 800fafe:	b0b4      	sub	sp, #208	@ 0xd0
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 800fb10:	2300      	movs	r3, #0
 800fb12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 800fb16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800fb1a:	2264      	movs	r2, #100	@ 0x64
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f017 ff7c 	bl	8027a1c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800fb24:	4b9f      	ldr	r3, [pc, #636]	@ (800fda4 <low_level_init+0x2a8>)
 800fb26:	4aa0      	ldr	r2, [pc, #640]	@ (800fda8 <low_level_init+0x2ac>)
 800fb28:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 800fb30:	2380      	movs	r3, #128	@ 0x80
 800fb32:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 800fb36:	23e1      	movs	r3, #225	@ 0xe1
 800fb38:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 800fb42:	2300      	movs	r3, #0
 800fb44:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x80;
 800fb48:	2380      	movs	r3, #128	@ 0x80
 800fb4a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 800fb4e:	4a95      	ldr	r2, [pc, #596]	@ (800fda4 <low_level_init+0x2a8>)
 800fb50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800fb54:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800fb56:	4b93      	ldr	r3, [pc, #588]	@ (800fda4 <low_level_init+0x2a8>)
 800fb58:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800fb5c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800fb5e:	4b91      	ldr	r3, [pc, #580]	@ (800fda4 <low_level_init+0x2a8>)
 800fb60:	4a92      	ldr	r2, [pc, #584]	@ (800fdac <low_level_init+0x2b0>)
 800fb62:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800fb64:	4b8f      	ldr	r3, [pc, #572]	@ (800fda4 <low_level_init+0x2a8>)
 800fb66:	4a92      	ldr	r2, [pc, #584]	@ (800fdb0 <low_level_init+0x2b4>)
 800fb68:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800fb6a:	4b8e      	ldr	r3, [pc, #568]	@ (800fda4 <low_level_init+0x2a8>)
 800fb6c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800fb70:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800fb72:	488c      	ldr	r0, [pc, #560]	@ (800fda4 <low_level_init+0x2a8>)
 800fb74:	f7f4 fb44 	bl	8004200 <HAL_ETH_Init>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800fb7e:	2238      	movs	r2, #56	@ 0x38
 800fb80:	2100      	movs	r1, #0
 800fb82:	488c      	ldr	r0, [pc, #560]	@ (800fdb4 <low_level_init+0x2b8>)
 800fb84:	f017 ff4a 	bl	8027a1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800fb88:	4b8a      	ldr	r3, [pc, #552]	@ (800fdb4 <low_level_init+0x2b8>)
 800fb8a:	2221      	movs	r2, #33	@ 0x21
 800fb8c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800fb8e:	4b89      	ldr	r3, [pc, #548]	@ (800fdb4 <low_level_init+0x2b8>)
 800fb90:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800fb94:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800fb96:	4b87      	ldr	r3, [pc, #540]	@ (800fdb4 <low_level_init+0x2b8>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800fb9c:	4886      	ldr	r0, [pc, #536]	@ (800fdb8 <low_level_init+0x2bc>)
 800fb9e:	f00a fbe3 	bl	801a368 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2206      	movs	r2, #6
 800fba6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800fbaa:	4b7e      	ldr	r3, [pc, #504]	@ (800fda4 <low_level_init+0x2a8>)
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	781a      	ldrb	r2, [r3, #0]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800fbb6:	4b7b      	ldr	r3, [pc, #492]	@ (800fda4 <low_level_init+0x2a8>)
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	785a      	ldrb	r2, [r3, #1]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800fbc2:	4b78      	ldr	r3, [pc, #480]	@ (800fda4 <low_level_init+0x2a8>)
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	789a      	ldrb	r2, [r3, #2]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800fbce:	4b75      	ldr	r3, [pc, #468]	@ (800fda4 <low_level_init+0x2a8>)
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	78da      	ldrb	r2, [r3, #3]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800fbda:	4b72      	ldr	r3, [pc, #456]	@ (800fda4 <low_level_init+0x2a8>)
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	791a      	ldrb	r2, [r3, #4]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800fbe6:	4b6f      	ldr	r3, [pc, #444]	@ (800fda4 <low_level_init+0x2a8>)
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	795a      	ldrb	r2, [r3, #5]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800fbf8:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fc00:	f043 030a 	orr.w	r3, r3, #10
 800fc04:	b2da      	uxtb	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc10:	2300      	movs	r3, #0
 800fc12:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800fc14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800fc18:	2101      	movs	r1, #1
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f003 f8cc 	bl	8012db8 <osSemaphoreCreate>
 800fc20:	4603      	mov	r3, r0
 800fc22:	4a66      	ldr	r2, [pc, #408]	@ (800fdbc <low_level_init+0x2c0>)
 800fc24:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800fc26:	2300      	movs	r3, #0
 800fc28:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800fc2e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800fc32:	2101      	movs	r1, #1
 800fc34:	4618      	mov	r0, r3
 800fc36:	f003 f8bf 	bl	8012db8 <osSemaphoreCreate>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	4a60      	ldr	r2, [pc, #384]	@ (800fdc0 <low_level_init+0x2c4>)
 800fc3e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800fc40:	4b5e      	ldr	r3, [pc, #376]	@ (800fdbc <low_level_init+0x2c0>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2100      	movs	r1, #0
 800fc46:	4618      	mov	r0, r3
 800fc48:	f003 f8f6 	bl	8012e38 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800fc4c:	4b5c      	ldr	r3, [pc, #368]	@ (800fdc0 <low_level_init+0x2c4>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2100      	movs	r1, #0
 800fc52:	4618      	mov	r0, r3
 800fc54:	f003 f8f0 	bl	8012e38 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800fc58:	4b5a      	ldr	r3, [pc, #360]	@ (800fdc4 <low_level_init+0x2c8>)
 800fc5a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800fc5e:	461d      	mov	r5, r3
 800fc60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800fc6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc70:	6879      	ldr	r1, [r7, #4]
 800fc72:	4618      	mov	r0, r3
 800fc74:	f002 ff98 	bl	8012ba8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800fc78:	4953      	ldr	r1, [pc, #332]	@ (800fdc8 <low_level_init+0x2cc>)
 800fc7a:	4854      	ldr	r0, [pc, #336]	@ (800fdcc <low_level_init+0x2d0>)
 800fc7c:	f7f3 f9f5 	bl	800306a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800fc80:	4852      	ldr	r0, [pc, #328]	@ (800fdcc <low_level_init+0x2d0>)
 800fc82:	f7f3 fa24 	bl	80030ce <LAN8742_Init>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d006      	beq.n	800fc9a <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f00a ff51 	bl	801ab34 <netif_set_link_down>
    netif_set_down(netif);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f00a fee4 	bl	801aa60 <netif_set_down>
 800fc98:	e081      	b.n	800fd9e <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800fc9a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d165      	bne.n	800fd6e <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fca2:	484a      	ldr	r0, [pc, #296]	@ (800fdcc <low_level_init+0x2d0>)
 800fca4:	f7f3 fa60 	bl	8003168 <LAN8742_GetLinkState>
 800fca8:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800fcac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	dc06      	bgt.n	800fcc2 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f00a ff3d 	bl	801ab34 <netif_set_link_down>
      netif_set_down(netif);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f00a fed0 	bl	801aa60 <netif_set_down>
 800fcc0:	e057      	b.n	800fd72 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 800fcc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fcc6:	3b02      	subs	r3, #2
 800fcc8:	2b03      	cmp	r3, #3
 800fcca:	d82b      	bhi.n	800fd24 <low_level_init+0x228>
 800fccc:	a201      	add	r2, pc, #4	@ (adr r2, 800fcd4 <low_level_init+0x1d8>)
 800fcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd2:	bf00      	nop
 800fcd4:	0800fce5 	.word	0x0800fce5
 800fcd8:	0800fcf7 	.word	0x0800fcf7
 800fcdc:	0800fd07 	.word	0x0800fd07
 800fce0:	0800fd17 	.word	0x0800fd17
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800fce4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fce8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800fcec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fcf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fcf4:	e01f      	b.n	800fd36 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800fcfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fd00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fd04:	e017      	b.n	800fd36 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800fd06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fd0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fd14:	e00f      	b.n	800fd36 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800fd16:	2300      	movs	r3, #0
 800fd18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fd22:	e008      	b.n	800fd36 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800fd24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fd28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 800fd2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fd30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800fd34:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fd36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	4819      	ldr	r0, [pc, #100]	@ (800fda4 <low_level_init+0x2a8>)
 800fd3e:	f7f4 ff47 	bl	8004bd0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800fd42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800fd46:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 800fd48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fd4c:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fd4e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800fd52:	4619      	mov	r1, r3
 800fd54:	4813      	ldr	r0, [pc, #76]	@ (800fda4 <low_level_init+0x2a8>)
 800fd56:	f7f5 f832 	bl	8004dbe <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800fd5a:	4812      	ldr	r0, [pc, #72]	@ (800fda4 <low_level_init+0x2a8>)
 800fd5c:	f7f4 faea 	bl	8004334 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f00a fe11 	bl	801a988 <netif_set_up>
    netif_set_link_up(netif);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f00a feac 	bl	801aac4 <netif_set_link_up>
 800fd6c:	e001      	b.n	800fd72 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 800fd6e:	f7f1 ff05 	bl	8001b7c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 800fd72:	f7f3 fad1 	bl	8003318 <HAL_GetREVID>
 800fd76:	4603      	mov	r3, r0
 800fd78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd7c:	d10f      	bne.n	800fd9e <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800fd7e:	4b14      	ldr	r3, [pc, #80]	@ (800fdd0 <low_level_init+0x2d4>)
 800fd80:	f107 040c 	add.w	r4, r7, #12
 800fd84:	461d      	mov	r5, r3
 800fd86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fd8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 800fd92:	f107 030c 	add.w	r3, r7, #12
 800fd96:	2100      	movs	r1, #0
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f002 ff05 	bl	8012ba8 <osThreadCreate>
  }
}
 800fd9e:	37d0      	adds	r7, #208	@ 0xd0
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bdb0      	pop	{r4, r5, r7, pc}
 800fda4:	200056f8 	.word	0x200056f8
 800fda8:	40028000 	.word	0x40028000
 800fdac:	20000150 	.word	0x20000150
 800fdb0:	200000b0 	.word	0x200000b0
 800fdb4:	200057a8 	.word	0x200057a8
 800fdb8:	0802c414 	.word	0x0802c414
 800fdbc:	200056f0 	.word	0x200056f0
 800fdc0:	200056f4 	.word	0x200056f4
 800fdc4:	080286c8 	.word	0x080286c8
 800fdc8:	2000000c 	.word	0x2000000c
 800fdcc:	200057e0 	.word	0x200057e0
 800fdd0:	080286f4 	.word	0x080286f4

0800fdd4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b092      	sub	sp, #72	@ 0x48
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800fdde:	2300      	movs	r3, #0
 800fde0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800fde2:	2300      	movs	r3, #0
 800fde4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800fde6:	2300      	movs	r3, #0
 800fde8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800fdec:	f107 030c 	add.w	r3, r7, #12
 800fdf0:	2230      	movs	r2, #48	@ 0x30
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f017 fe11 	bl	8027a1c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800fdfa:	f107 030c 	add.w	r3, r7, #12
 800fdfe:	2230      	movs	r2, #48	@ 0x30
 800fe00:	2100      	movs	r1, #0
 800fe02:	4618      	mov	r0, r3
 800fe04:	f017 fe0a 	bl	8027a1c <memset>

  for(q = p; q != NULL; q = q->next)
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe0c:	e045      	b.n	800fe9a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800fe0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe10:	2b03      	cmp	r3, #3
 800fe12:	d902      	bls.n	800fe1a <low_level_output+0x46>
      return ERR_IF;
 800fe14:	f06f 030b 	mvn.w	r3, #11
 800fe18:	e06c      	b.n	800fef4 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800fe1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe1c:	6859      	ldr	r1, [r3, #4]
 800fe1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe20:	4613      	mov	r3, r2
 800fe22:	005b      	lsls	r3, r3, #1
 800fe24:	4413      	add	r3, r2
 800fe26:	009b      	lsls	r3, r3, #2
 800fe28:	3348      	adds	r3, #72	@ 0x48
 800fe2a:	443b      	add	r3, r7
 800fe2c:	3b3c      	subs	r3, #60	@ 0x3c
 800fe2e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800fe30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe32:	895b      	ldrh	r3, [r3, #10]
 800fe34:	4619      	mov	r1, r3
 800fe36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe38:	4613      	mov	r3, r2
 800fe3a:	005b      	lsls	r3, r3, #1
 800fe3c:	4413      	add	r3, r2
 800fe3e:	009b      	lsls	r3, r3, #2
 800fe40:	3348      	adds	r3, #72	@ 0x48
 800fe42:	443b      	add	r3, r7
 800fe44:	3b38      	subs	r3, #56	@ 0x38
 800fe46:	6019      	str	r1, [r3, #0]

    if(i>0)
 800fe48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d011      	beq.n	800fe72 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800fe4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe50:	1e5a      	subs	r2, r3, #1
 800fe52:	f107 000c 	add.w	r0, r7, #12
 800fe56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe58:	460b      	mov	r3, r1
 800fe5a:	005b      	lsls	r3, r3, #1
 800fe5c:	440b      	add	r3, r1
 800fe5e:	009b      	lsls	r3, r3, #2
 800fe60:	18c1      	adds	r1, r0, r3
 800fe62:	4613      	mov	r3, r2
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	4413      	add	r3, r2
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	3348      	adds	r3, #72	@ 0x48
 800fe6c:	443b      	add	r3, r7
 800fe6e:	3b34      	subs	r3, #52	@ 0x34
 800fe70:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800fe72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d109      	bne.n	800fe8e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800fe7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe7c:	4613      	mov	r3, r2
 800fe7e:	005b      	lsls	r3, r3, #1
 800fe80:	4413      	add	r3, r2
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	3348      	adds	r3, #72	@ 0x48
 800fe86:	443b      	add	r3, r7
 800fe88:	3b34      	subs	r3, #52	@ 0x34
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800fe8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe90:	3301      	adds	r3, #1
 800fe92:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800fe94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d1b6      	bne.n	800fe0e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	891b      	ldrh	r3, [r3, #8]
 800fea4:	461a      	mov	r2, r3
 800fea6:	4b15      	ldr	r3, [pc, #84]	@ (800fefc <low_level_output+0x128>)
 800fea8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800feaa:	4a14      	ldr	r2, [pc, #80]	@ (800fefc <low_level_output+0x128>)
 800feac:	f107 030c 	add.w	r3, r7, #12
 800feb0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800feb2:	4a12      	ldr	r2, [pc, #72]	@ (800fefc <low_level_output+0x128>)
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800feb8:	6838      	ldr	r0, [r7, #0]
 800feba:	f00b faf1 	bl	801b4a0 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800febe:	490f      	ldr	r1, [pc, #60]	@ (800fefc <low_level_output+0x128>)
 800fec0:	480f      	ldr	r0, [pc, #60]	@ (800ff00 <low_level_output+0x12c>)
 800fec2:	f7f4 fb27 	bl	8004514 <HAL_ETH_Transmit_IT>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d10e      	bne.n	800feea <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800fecc:	bf00      	nop
 800fece:	4b0d      	ldr	r3, [pc, #52]	@ (800ff04 <low_level_output+0x130>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	f04f 31ff 	mov.w	r1, #4294967295
 800fed6:	4618      	mov	r0, r3
 800fed8:	f002 ffae 	bl	8012e38 <osSemaphoreWait>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1f5      	bne.n	800fece <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800fee2:	4807      	ldr	r0, [pc, #28]	@ (800ff00 <low_level_output+0x12c>)
 800fee4:	f7f4 fcb6 	bl	8004854 <HAL_ETH_ReleaseTxPacket>
 800fee8:	e002      	b.n	800fef0 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800feea:	6838      	ldr	r0, [r7, #0]
 800feec:	f00b fa32 	bl	801b354 <pbuf_free>
  }

  return errval;
 800fef0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3748      	adds	r7, #72	@ 0x48
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	200057a8 	.word	0x200057a8
 800ff00:	200056f8 	.word	0x200056f8
 800ff04:	200056f4 	.word	0x200056f4

0800ff08 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ff10:	2300      	movs	r3, #0
 800ff12:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800ff14:	4b07      	ldr	r3, [pc, #28]	@ (800ff34 <low_level_input+0x2c>)
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d105      	bne.n	800ff28 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800ff1c:	f107 030c 	add.w	r3, r7, #12
 800ff20:	4619      	mov	r1, r3
 800ff22:	4805      	ldr	r0, [pc, #20]	@ (800ff38 <low_level_input+0x30>)
 800ff24:	f7f4 fb52 	bl	80045cc <HAL_ETH_ReadData>
  }

  return p;
 800ff28:	68fb      	ldr	r3, [r7, #12]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	200056ec 	.word	0x200056ec
 800ff38:	200056f8 	.word	0x200056f8

0800ff3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ff44:	2300      	movs	r3, #0
 800ff46:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ff4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ff8c <ethernetif_input+0x50>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f04f 31ff 	mov.w	r1, #4294967295
 800ff54:	4618      	mov	r0, r3
 800ff56:	f002 ff6f 	bl	8012e38 <osSemaphoreWait>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1f5      	bne.n	800ff4c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800ff60:	68b8      	ldr	r0, [r7, #8]
 800ff62:	f7ff ffd1 	bl	800ff08 <low_level_input>
 800ff66:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d00a      	beq.n	800ff84 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	691b      	ldr	r3, [r3, #16]
 800ff72:	68b9      	ldr	r1, [r7, #8]
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	4798      	blx	r3
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d002      	beq.n	800ff84 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f00b f9e8 	bl	801b354 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d1ea      	bne.n	800ff60 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ff8a:	e7df      	b.n	800ff4c <ethernetif_input+0x10>
 800ff8c:	200056f0 	.word	0x200056f0

0800ff90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d106      	bne.n	800ffac <ethernetif_init+0x1c>
 800ff9e:	4b0e      	ldr	r3, [pc, #56]	@ (800ffd8 <ethernetif_init+0x48>)
 800ffa0:	f240 2207 	movw	r2, #519	@ 0x207
 800ffa4:	490d      	ldr	r1, [pc, #52]	@ (800ffdc <ethernetif_init+0x4c>)
 800ffa6:	480e      	ldr	r0, [pc, #56]	@ (800ffe0 <ethernetif_init+0x50>)
 800ffa8:	f017 fbe0 	bl	802776c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2273      	movs	r2, #115	@ 0x73
 800ffb0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2274      	movs	r2, #116	@ 0x74
 800ffb8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4a09      	ldr	r2, [pc, #36]	@ (800ffe4 <ethernetif_init+0x54>)
 800ffc0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4a08      	ldr	r2, [pc, #32]	@ (800ffe8 <ethernetif_init+0x58>)
 800ffc6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7ff fd97 	bl	800fafc <low_level_init>

  return ERR_OK;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	08028710 	.word	0x08028710
 800ffdc:	0802872c 	.word	0x0802872c
 800ffe0:	0802873c 	.word	0x0802873c
 800ffe4:	08024d0d 	.word	0x08024d0d
 800ffe8:	0800fdd5 	.word	0x0800fdd5

0800ffec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800fff8:	68f9      	ldr	r1, [r7, #12]
 800fffa:	4809      	ldr	r0, [pc, #36]	@ (8010020 <pbuf_free_custom+0x34>)
 800fffc:	f00a faa4 	bl	801a548 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8010000:	4b08      	ldr	r3, [pc, #32]	@ (8010024 <pbuf_free_custom+0x38>)
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	2b01      	cmp	r3, #1
 8010006:	d107      	bne.n	8010018 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8010008:	4b06      	ldr	r3, [pc, #24]	@ (8010024 <pbuf_free_custom+0x38>)
 801000a:	2200      	movs	r2, #0
 801000c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 801000e:	4b06      	ldr	r3, [pc, #24]	@ (8010028 <pbuf_free_custom+0x3c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4618      	mov	r0, r3
 8010014:	f002 ff5e 	bl	8012ed4 <osSemaphoreRelease>
  }
}
 8010018:	bf00      	nop
 801001a:	3710      	adds	r7, #16
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	0802c414 	.word	0x0802c414
 8010024:	200056ec 	.word	0x200056ec
 8010028:	200056f0 	.word	0x200056f0

0801002c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8010030:	f7f3 f942 	bl	80032b8 <HAL_GetTick>
 8010034:	4603      	mov	r3, r0
}
 8010036:	4618      	mov	r0, r3
 8010038:	bd80      	pop	{r7, pc}
	...

0801003c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b08e      	sub	sp, #56	@ 0x38
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010048:	2200      	movs	r2, #0
 801004a:	601a      	str	r2, [r3, #0]
 801004c:	605a      	str	r2, [r3, #4]
 801004e:	609a      	str	r2, [r3, #8]
 8010050:	60da      	str	r2, [r3, #12]
 8010052:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a44      	ldr	r2, [pc, #272]	@ (801016c <HAL_ETH_MspInit+0x130>)
 801005a:	4293      	cmp	r3, r2
 801005c:	f040 8081 	bne.w	8010162 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8010060:	4b43      	ldr	r3, [pc, #268]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 8010062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010064:	4a42      	ldr	r2, [pc, #264]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 8010066:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801006a:	6313      	str	r3, [r2, #48]	@ 0x30
 801006c:	4b40      	ldr	r3, [pc, #256]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 801006e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010074:	623b      	str	r3, [r7, #32]
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	4b3d      	ldr	r3, [pc, #244]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 801007a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801007c:	4a3c      	ldr	r2, [pc, #240]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 801007e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010082:	6313      	str	r3, [r2, #48]	@ 0x30
 8010084:	4b3a      	ldr	r3, [pc, #232]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 8010086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010088:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801008c:	61fb      	str	r3, [r7, #28]
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	4b37      	ldr	r3, [pc, #220]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 8010092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010094:	4a36      	ldr	r2, [pc, #216]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 8010096:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801009a:	6313      	str	r3, [r2, #48]	@ 0x30
 801009c:	4b34      	ldr	r3, [pc, #208]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 801009e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80100a4:	61bb      	str	r3, [r7, #24]
 80100a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80100a8:	4b31      	ldr	r3, [pc, #196]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 80100aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100ac:	4a30      	ldr	r2, [pc, #192]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 80100ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80100b4:	4b2e      	ldr	r3, [pc, #184]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 80100b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100bc:	617b      	str	r3, [r7, #20]
 80100be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80100c0:	4b2b      	ldr	r3, [pc, #172]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 80100c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100c4:	4a2a      	ldr	r2, [pc, #168]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 80100c6:	f043 0304 	orr.w	r3, r3, #4
 80100ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80100cc:	4b28      	ldr	r3, [pc, #160]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 80100ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100d0:	f003 0304 	and.w	r3, r3, #4
 80100d4:	613b      	str	r3, [r7, #16]
 80100d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100d8:	4b25      	ldr	r3, [pc, #148]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 80100da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100dc:	4a24      	ldr	r2, [pc, #144]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 80100de:	f043 0301 	orr.w	r3, r3, #1
 80100e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80100e4:	4b22      	ldr	r3, [pc, #136]	@ (8010170 <HAL_ETH_MspInit+0x134>)
 80100e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100e8:	f003 0301 	and.w	r3, r3, #1
 80100ec:	60fb      	str	r3, [r7, #12]
 80100ee:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80100f0:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80100f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100f6:	2302      	movs	r3, #2
 80100f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100fa:	2300      	movs	r3, #0
 80100fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80100fe:	2303      	movs	r3, #3
 8010100:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010102:	230b      	movs	r3, #11
 8010104:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801010a:	4619      	mov	r1, r3
 801010c:	4819      	ldr	r0, [pc, #100]	@ (8010174 <HAL_ETH_MspInit+0x138>)
 801010e:	f7f5 fadf 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8010112:	2332      	movs	r3, #50	@ 0x32
 8010114:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010116:	2302      	movs	r3, #2
 8010118:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801011a:	2300      	movs	r3, #0
 801011c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801011e:	2303      	movs	r3, #3
 8010120:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010122:	230b      	movs	r3, #11
 8010124:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801012a:	4619      	mov	r1, r3
 801012c:	4812      	ldr	r0, [pc, #72]	@ (8010178 <HAL_ETH_MspInit+0x13c>)
 801012e:	f7f5 facf 	bl	80056d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8010132:	2386      	movs	r3, #134	@ 0x86
 8010134:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010136:	2302      	movs	r3, #2
 8010138:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801013a:	2300      	movs	r3, #0
 801013c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801013e:	2303      	movs	r3, #3
 8010140:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010142:	230b      	movs	r3, #11
 8010144:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801014a:	4619      	mov	r1, r3
 801014c:	480b      	ldr	r0, [pc, #44]	@ (801017c <HAL_ETH_MspInit+0x140>)
 801014e:	f7f5 fabf 	bl	80056d0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8010152:	2200      	movs	r2, #0
 8010154:	2105      	movs	r1, #5
 8010156:	203d      	movs	r0, #61	@ 0x3d
 8010158:	f7f3 fc36 	bl	80039c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801015c:	203d      	movs	r0, #61	@ 0x3d
 801015e:	f7f3 fc4f 	bl	8003a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8010162:	bf00      	nop
 8010164:	3738      	adds	r7, #56	@ 0x38
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	40028000 	.word	0x40028000
 8010170:	40023800 	.word	0x40023800
 8010174:	40021800 	.word	0x40021800
 8010178:	40020800 	.word	0x40020800
 801017c:	40020000 	.word	0x40020000

08010180 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8010184:	4802      	ldr	r0, [pc, #8]	@ (8010190 <ETH_PHY_IO_Init+0x10>)
 8010186:	f7f4 fe35 	bl	8004df4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	bd80      	pop	{r7, pc}
 8010190:	200056f8 	.word	0x200056f8

08010194 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8010194:	b480      	push	{r7}
 8010196:	af00      	add	r7, sp, #0
  return 0;
 8010198:	2300      	movs	r3, #0
}
 801019a:	4618      	mov	r0, r3
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr

080101a4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	68ba      	ldr	r2, [r7, #8]
 80101b4:	68f9      	ldr	r1, [r7, #12]
 80101b6:	4807      	ldr	r0, [pc, #28]	@ (80101d4 <ETH_PHY_IO_ReadReg+0x30>)
 80101b8:	f7f4 fc76 	bl	8004aa8 <HAL_ETH_ReadPHYRegister>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d002      	beq.n	80101c8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80101c2:	f04f 33ff 	mov.w	r3, #4294967295
 80101c6:	e000      	b.n	80101ca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80101c8:	2300      	movs	r3, #0
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	200056f8 	.word	0x200056f8

080101d8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	68f9      	ldr	r1, [r7, #12]
 80101ea:	4807      	ldr	r0, [pc, #28]	@ (8010208 <ETH_PHY_IO_WriteReg+0x30>)
 80101ec:	f7f4 fca7 	bl	8004b3e <HAL_ETH_WritePHYRegister>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d002      	beq.n	80101fc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80101f6:	f04f 33ff 	mov.w	r3, #4294967295
 80101fa:	e000      	b.n	80101fe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	200056f8 	.word	0x200056f8

0801020c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8010210:	f7f3 f852 	bl	80032b8 <HAL_GetTick>
 8010214:	4603      	mov	r3, r0
}
 8010216:	4618      	mov	r0, r3
 8010218:	bd80      	pop	{r7, pc}
	...

0801021c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b0a0      	sub	sp, #128	@ 0x80
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8010224:	f107 0308 	add.w	r3, r7, #8
 8010228:	2264      	movs	r2, #100	@ 0x64
 801022a:	2100      	movs	r1, #0
 801022c:	4618      	mov	r0, r3
 801022e:	f017 fbf5 	bl	8027a1c <memset>
  int32_t PHYLinkState = 0;
 8010232:	2300      	movs	r3, #0
 8010234:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8010236:	2300      	movs	r3, #0
 8010238:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801023a:	2300      	movs	r3, #0
 801023c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801023e:	2300      	movs	r3, #0
 8010240:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8010246:	483a      	ldr	r0, [pc, #232]	@ (8010330 <ethernet_link_thread+0x114>)
 8010248:	f7f2 ff8e 	bl	8003168 <LAN8742_GetLinkState>
 801024c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 801024e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010250:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010254:	089b      	lsrs	r3, r3, #2
 8010256:	f003 0301 	and.w	r3, r3, #1
 801025a:	b2db      	uxtb	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00c      	beq.n	801027a <ethernet_link_thread+0x5e>
 8010260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010262:	2b01      	cmp	r3, #1
 8010264:	dc09      	bgt.n	801027a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8010266:	4833      	ldr	r0, [pc, #204]	@ (8010334 <ethernet_link_thread+0x118>)
 8010268:	f7f4 f8d4 	bl	8004414 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 801026c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801026e:	f00a fbf7 	bl	801aa60 <netif_set_down>
    netif_set_link_down(netif);
 8010272:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010274:	f00a fc5e 	bl	801ab34 <netif_set_link_down>
 8010278:	e055      	b.n	8010326 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 801027a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801027c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010280:	f003 0304 	and.w	r3, r3, #4
 8010284:	2b00      	cmp	r3, #0
 8010286:	d14e      	bne.n	8010326 <ethernet_link_thread+0x10a>
 8010288:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801028a:	2b01      	cmp	r3, #1
 801028c:	dd4b      	ble.n	8010326 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 801028e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010290:	3b02      	subs	r3, #2
 8010292:	2b03      	cmp	r3, #3
 8010294:	d82a      	bhi.n	80102ec <ethernet_link_thread+0xd0>
 8010296:	a201      	add	r2, pc, #4	@ (adr r2, 801029c <ethernet_link_thread+0x80>)
 8010298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029c:	080102ad 	.word	0x080102ad
 80102a0:	080102bf 	.word	0x080102bf
 80102a4:	080102cf 	.word	0x080102cf
 80102a8:	080102df 	.word	0x080102df
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80102ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80102b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80102b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80102b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80102b8:	2301      	movs	r3, #1
 80102ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80102bc:	e017      	b.n	80102ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80102be:	2300      	movs	r3, #0
 80102c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80102c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80102c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80102c8:	2301      	movs	r3, #1
 80102ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80102cc:	e00f      	b.n	80102ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80102ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80102d2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80102d4:	2300      	movs	r3, #0
 80102d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80102d8:	2301      	movs	r3, #1
 80102da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80102dc:	e007      	b.n	80102ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80102de:	2300      	movs	r3, #0
 80102e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80102e2:	2300      	movs	r3, #0
 80102e4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80102e6:	2301      	movs	r3, #1
 80102e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80102ea:	e000      	b.n	80102ee <ethernet_link_thread+0xd2>
    default:
      break;
 80102ec:	bf00      	nop
    }

    if(linkchanged)
 80102ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d018      	beq.n	8010326 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80102f4:	f107 0308 	add.w	r3, r7, #8
 80102f8:	4619      	mov	r1, r3
 80102fa:	480e      	ldr	r0, [pc, #56]	@ (8010334 <ethernet_link_thread+0x118>)
 80102fc:	f7f4 fc68 	bl	8004bd0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8010300:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010302:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8010304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010306:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8010308:	f107 0308 	add.w	r3, r7, #8
 801030c:	4619      	mov	r1, r3
 801030e:	4809      	ldr	r0, [pc, #36]	@ (8010334 <ethernet_link_thread+0x118>)
 8010310:	f7f4 fd55 	bl	8004dbe <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8010314:	4807      	ldr	r0, [pc, #28]	@ (8010334 <ethernet_link_thread+0x118>)
 8010316:	f7f4 f80d 	bl	8004334 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 801031a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801031c:	f00a fb34 	bl	801a988 <netif_set_up>
      netif_set_link_up(netif);
 8010320:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010322:	f00a fbcf 	bl	801aac4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8010326:	2064      	movs	r0, #100	@ 0x64
 8010328:	f002 fc96 	bl	8012c58 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 801032c:	e78b      	b.n	8010246 <ethernet_link_thread+0x2a>
 801032e:	bf00      	nop
 8010330:	200057e0 	.word	0x200057e0
 8010334:	200056f8 	.word	0x200056f8

08010338 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b086      	sub	sp, #24
 801033c:	af02      	add	r7, sp, #8
 801033e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8010340:	4812      	ldr	r0, [pc, #72]	@ (801038c <HAL_ETH_RxAllocateCallback+0x54>)
 8010342:	f00a f88d 	bl	801a460 <memp_malloc_pool>
 8010346:	60f8      	str	r0, [r7, #12]
  if (p)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d014      	beq.n	8010378 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f103 0220 	add.w	r2, r3, #32
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	4a0d      	ldr	r2, [pc, #52]	@ (8010390 <HAL_ETH_RxAllocateCallback+0x58>)
 801035c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8010366:	9201      	str	r2, [sp, #4]
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2241      	movs	r2, #65	@ 0x41
 801036e:	2100      	movs	r1, #0
 8010370:	2000      	movs	r0, #0
 8010372:	f00a fe03 	bl	801af7c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8010376:	e005      	b.n	8010384 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8010378:	4b06      	ldr	r3, [pc, #24]	@ (8010394 <HAL_ETH_RxAllocateCallback+0x5c>)
 801037a:	2201      	movs	r2, #1
 801037c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2200      	movs	r2, #0
 8010382:	601a      	str	r2, [r3, #0]
}
 8010384:	bf00      	nop
 8010386:	3710      	adds	r7, #16
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	0802c414 	.word	0x0802c414
 8010390:	0800ffed 	.word	0x0800ffed
 8010394:	200056ec 	.word	0x200056ec

08010398 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b088      	sub	sp, #32
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
 80103a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	3b20      	subs	r3, #32
 80103b6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	2200      	movs	r2, #0
 80103bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	2200      	movs	r2, #0
 80103c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	887a      	ldrh	r2, [r7, #2]
 80103c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d103      	bne.n	80103da <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	69fa      	ldr	r2, [r7, #28]
 80103d6:	601a      	str	r2, [r3, #0]
 80103d8:	e003      	b.n	80103e2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	69fa      	ldr	r2, [r7, #28]
 80103e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	69fa      	ldr	r2, [r7, #28]
 80103e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	61fb      	str	r3, [r7, #28]
 80103ee:	e009      	b.n	8010404 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	891a      	ldrh	r2, [r3, #8]
 80103f4:	887b      	ldrh	r3, [r7, #2]
 80103f6:	4413      	add	r3, r2
 80103f8:	b29a      	uxth	r2, r3
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	61fb      	str	r3, [r7, #28]
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d1f2      	bne.n	80103f0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801040a:	887b      	ldrh	r3, [r7, #2]
 801040c:	4619      	mov	r1, r3
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7ff fb10 	bl	800fa34 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8010414:	bf00      	nop
 8010416:	3720      	adds	r7, #32
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f00a ff95 	bl	801b354 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 801042a:	bf00      	nop
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
	...

08010434 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 801043c:	4b15      	ldr	r3, [pc, #84]	@ (8010494 <RMII_Thread+0x60>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8010444:	2b00      	cmp	r3, #0
 8010446:	d003      	beq.n	8010450 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8010448:	2000      	movs	r0, #0
 801044a:	f002 fbf9 	bl	8012c40 <osThreadTerminate>
 801044e:	e7f5      	b.n	801043c <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8010450:	4b10      	ldr	r3, [pc, #64]	@ (8010494 <RMII_Thread+0x60>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8010458:	2b0a      	cmp	r3, #10
 801045a:	d916      	bls.n	801048a <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 801045c:	4b0e      	ldr	r3, [pc, #56]	@ (8010498 <RMII_Thread+0x64>)
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	4a0d      	ldr	r2, [pc, #52]	@ (8010498 <RMII_Thread+0x64>)
 8010462:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010466:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8010468:	4b0b      	ldr	r3, [pc, #44]	@ (8010498 <RMII_Thread+0x64>)
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	4a0a      	ldr	r2, [pc, #40]	@ (8010498 <RMII_Thread+0x64>)
 801046e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010472:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8010474:	4b07      	ldr	r3, [pc, #28]	@ (8010494 <RMII_Thread+0x60>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801047c:	4b05      	ldr	r3, [pc, #20]	@ (8010494 <RMII_Thread+0x60>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f042 0201 	orr.w	r2, r2, #1
 8010484:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8010488:	e7d8      	b.n	801043c <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 801048a:	20c8      	movs	r0, #200	@ 0xc8
 801048c:	f002 fbe4 	bl	8012c58 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8010490:	e7d4      	b.n	801043c <RMII_Thread+0x8>
 8010492:	bf00      	nop
 8010494:	200056f8 	.word	0x200056f8
 8010498:	40013800 	.word	0x40013800

0801049c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801049c:	b590      	push	{r4, r7, lr}
 801049e:	b089      	sub	sp, #36	@ 0x24
 80104a0:	af04      	add	r7, sp, #16
 80104a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80104a4:	2301      	movs	r3, #1
 80104a6:	2202      	movs	r2, #2
 80104a8:	2102      	movs	r1, #2
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f000 fcd7 	bl	8010e5e <USBH_FindInterface>
 80104b0:	4603      	mov	r3, r0
 80104b2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80104b4:	7bfb      	ldrb	r3, [r7, #15]
 80104b6:	2bff      	cmp	r3, #255	@ 0xff
 80104b8:	d002      	beq.n	80104c0 <USBH_CDC_InterfaceInit+0x24>
 80104ba:	7bfb      	ldrb	r3, [r7, #15]
 80104bc:	2b01      	cmp	r3, #1
 80104be:	d901      	bls.n	80104c4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80104c0:	2302      	movs	r3, #2
 80104c2:	e13d      	b.n	8010740 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80104c4:	7bfb      	ldrb	r3, [r7, #15]
 80104c6:	4619      	mov	r1, r3
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f000 fcac 	bl	8010e26 <USBH_SelectInterface>
 80104ce:	4603      	mov	r3, r0
 80104d0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80104d2:	7bbb      	ldrb	r3, [r7, #14]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d001      	beq.n	80104dc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80104d8:	2302      	movs	r3, #2
 80104da:	e131      	b.n	8010740 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80104e2:	2050      	movs	r0, #80	@ 0x50
 80104e4:	f016 ff84 	bl	80273f0 <malloc>
 80104e8:	4603      	mov	r3, r0
 80104ea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80104f2:	69db      	ldr	r3, [r3, #28]
 80104f4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d101      	bne.n	8010500 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80104fc:	2302      	movs	r3, #2
 80104fe:	e11f      	b.n	8010740 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8010500:	2250      	movs	r2, #80	@ 0x50
 8010502:	2100      	movs	r1, #0
 8010504:	68b8      	ldr	r0, [r7, #8]
 8010506:	f017 fa89 	bl	8027a1c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801050a:	7bfb      	ldrb	r3, [r7, #15]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	211a      	movs	r1, #26
 8010510:	fb01 f303 	mul.w	r3, r1, r3
 8010514:	4413      	add	r3, r2
 8010516:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	b25b      	sxtb	r3, r3
 801051e:	2b00      	cmp	r3, #0
 8010520:	da15      	bge.n	801054e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010522:	7bfb      	ldrb	r3, [r7, #15]
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	211a      	movs	r1, #26
 8010528:	fb01 f303 	mul.w	r3, r1, r3
 801052c:	4413      	add	r3, r2
 801052e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010532:	781a      	ldrb	r2, [r3, #0]
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010538:	7bfb      	ldrb	r3, [r7, #15]
 801053a:	687a      	ldr	r2, [r7, #4]
 801053c:	211a      	movs	r1, #26
 801053e:	fb01 f303 	mul.w	r3, r1, r3
 8010542:	4413      	add	r3, r2
 8010544:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8010548:	881a      	ldrh	r2, [r3, #0]
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	785b      	ldrb	r3, [r3, #1]
 8010552:	4619      	mov	r1, r3
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f002 fa1c 	bl	8012992 <USBH_AllocPipe>
 801055a:	4603      	mov	r3, r0
 801055c:	461a      	mov	r2, r3
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	7819      	ldrb	r1, [r3, #0]
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	7858      	ldrb	r0, [r3, #1]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010576:	68ba      	ldr	r2, [r7, #8]
 8010578:	8952      	ldrh	r2, [r2, #10]
 801057a:	9202      	str	r2, [sp, #8]
 801057c:	2203      	movs	r2, #3
 801057e:	9201      	str	r2, [sp, #4]
 8010580:	9300      	str	r3, [sp, #0]
 8010582:	4623      	mov	r3, r4
 8010584:	4602      	mov	r2, r0
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f002 f9d4 	bl	8012934 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	2200      	movs	r2, #0
 8010592:	4619      	mov	r1, r3
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f016 fea5 	bl	80272e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801059a:	2300      	movs	r3, #0
 801059c:	2200      	movs	r2, #0
 801059e:	210a      	movs	r1, #10
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fc5c 	bl	8010e5e <USBH_FindInterface>
 80105a6:	4603      	mov	r3, r0
 80105a8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80105aa:	7bfb      	ldrb	r3, [r7, #15]
 80105ac:	2bff      	cmp	r3, #255	@ 0xff
 80105ae:	d002      	beq.n	80105b6 <USBH_CDC_InterfaceInit+0x11a>
 80105b0:	7bfb      	ldrb	r3, [r7, #15]
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d901      	bls.n	80105ba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80105b6:	2302      	movs	r3, #2
 80105b8:	e0c2      	b.n	8010740 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80105ba:	7bfb      	ldrb	r3, [r7, #15]
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	211a      	movs	r1, #26
 80105c0:	fb01 f303 	mul.w	r3, r1, r3
 80105c4:	4413      	add	r3, r2
 80105c6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	b25b      	sxtb	r3, r3
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	da16      	bge.n	8010600 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80105d2:	7bfb      	ldrb	r3, [r7, #15]
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	211a      	movs	r1, #26
 80105d8:	fb01 f303 	mul.w	r3, r1, r3
 80105dc:	4413      	add	r3, r2
 80105de:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80105e2:	781a      	ldrb	r2, [r3, #0]
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80105e8:	7bfb      	ldrb	r3, [r7, #15]
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	211a      	movs	r1, #26
 80105ee:	fb01 f303 	mul.w	r3, r1, r3
 80105f2:	4413      	add	r3, r2
 80105f4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80105f8:	881a      	ldrh	r2, [r3, #0]
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	835a      	strh	r2, [r3, #26]
 80105fe:	e015      	b.n	801062c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010600:	7bfb      	ldrb	r3, [r7, #15]
 8010602:	687a      	ldr	r2, [r7, #4]
 8010604:	211a      	movs	r1, #26
 8010606:	fb01 f303 	mul.w	r3, r1, r3
 801060a:	4413      	add	r3, r2
 801060c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010610:	781a      	ldrb	r2, [r3, #0]
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010616:	7bfb      	ldrb	r3, [r7, #15]
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	211a      	movs	r1, #26
 801061c:	fb01 f303 	mul.w	r3, r1, r3
 8010620:	4413      	add	r3, r2
 8010622:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8010626:	881a      	ldrh	r2, [r3, #0]
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 801062c:	7bfb      	ldrb	r3, [r7, #15]
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	211a      	movs	r1, #26
 8010632:	fb01 f303 	mul.w	r3, r1, r3
 8010636:	4413      	add	r3, r2
 8010638:	f203 3356 	addw	r3, r3, #854	@ 0x356
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	b25b      	sxtb	r3, r3
 8010640:	2b00      	cmp	r3, #0
 8010642:	da16      	bge.n	8010672 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010644:	7bfb      	ldrb	r3, [r7, #15]
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	211a      	movs	r1, #26
 801064a:	fb01 f303 	mul.w	r3, r1, r3
 801064e:	4413      	add	r3, r2
 8010650:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8010654:	781a      	ldrb	r2, [r3, #0]
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801065a:	7bfb      	ldrb	r3, [r7, #15]
 801065c:	687a      	ldr	r2, [r7, #4]
 801065e:	211a      	movs	r1, #26
 8010660:	fb01 f303 	mul.w	r3, r1, r3
 8010664:	4413      	add	r3, r2
 8010666:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 801066a:	881a      	ldrh	r2, [r3, #0]
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	835a      	strh	r2, [r3, #26]
 8010670:	e015      	b.n	801069e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010672:	7bfb      	ldrb	r3, [r7, #15]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	211a      	movs	r1, #26
 8010678:	fb01 f303 	mul.w	r3, r1, r3
 801067c:	4413      	add	r3, r2
 801067e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8010682:	781a      	ldrb	r2, [r3, #0]
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010688:	7bfb      	ldrb	r3, [r7, #15]
 801068a:	687a      	ldr	r2, [r7, #4]
 801068c:	211a      	movs	r1, #26
 801068e:	fb01 f303 	mul.w	r3, r1, r3
 8010692:	4413      	add	r3, r2
 8010694:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8010698:	881a      	ldrh	r2, [r3, #0]
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	7b9b      	ldrb	r3, [r3, #14]
 80106a2:	4619      	mov	r1, r3
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f002 f974 	bl	8012992 <USBH_AllocPipe>
 80106aa:	4603      	mov	r3, r0
 80106ac:	461a      	mov	r2, r3
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	7bdb      	ldrb	r3, [r3, #15]
 80106b6:	4619      	mov	r1, r3
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f002 f96a 	bl	8012992 <USBH_AllocPipe>
 80106be:	4603      	mov	r3, r0
 80106c0:	461a      	mov	r2, r3
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	7b59      	ldrb	r1, [r3, #13]
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	7b98      	ldrb	r0, [r3, #14]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80106da:	68ba      	ldr	r2, [r7, #8]
 80106dc:	8b12      	ldrh	r2, [r2, #24]
 80106de:	9202      	str	r2, [sp, #8]
 80106e0:	2202      	movs	r2, #2
 80106e2:	9201      	str	r2, [sp, #4]
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	4623      	mov	r3, r4
 80106e8:	4602      	mov	r2, r0
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f002 f922 	bl	8012934 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	7b19      	ldrb	r1, [r3, #12]
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	7bd8      	ldrb	r0, [r3, #15]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010704:	68ba      	ldr	r2, [r7, #8]
 8010706:	8b52      	ldrh	r2, [r2, #26]
 8010708:	9202      	str	r2, [sp, #8]
 801070a:	2202      	movs	r2, #2
 801070c:	9201      	str	r2, [sp, #4]
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	4623      	mov	r3, r4
 8010712:	4602      	mov	r2, r0
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f002 f90d 	bl	8012934 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	2200      	movs	r2, #0
 801071e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	7b5b      	ldrb	r3, [r3, #13]
 8010726:	2200      	movs	r2, #0
 8010728:	4619      	mov	r1, r3
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f016 fdda 	bl	80272e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	7b1b      	ldrb	r3, [r3, #12]
 8010734:	2200      	movs	r2, #0
 8010736:	4619      	mov	r1, r3
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f016 fdd3 	bl	80272e4 <USBH_LL_SetToggle>

  return USBH_OK;
 801073e:	2300      	movs	r3, #0
}
 8010740:	4618      	mov	r0, r3
 8010742:	3714      	adds	r7, #20
 8010744:	46bd      	mov	sp, r7
 8010746:	bd90      	pop	{r4, r7, pc}

08010748 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b084      	sub	sp, #16
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010756:	69db      	ldr	r3, [r3, #28]
 8010758:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d00e      	beq.n	8010780 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	4619      	mov	r1, r3
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f002 f902 	bl	8012972 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	4619      	mov	r1, r3
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f002 f92d 	bl	80129d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2200      	movs	r2, #0
 801077e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	7b1b      	ldrb	r3, [r3, #12]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d00e      	beq.n	80107a6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	7b1b      	ldrb	r3, [r3, #12]
 801078c:	4619      	mov	r1, r3
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f002 f8ef 	bl	8012972 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	7b1b      	ldrb	r3, [r3, #12]
 8010798:	4619      	mov	r1, r3
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f002 f91a 	bl	80129d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2200      	movs	r2, #0
 80107a4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	7b5b      	ldrb	r3, [r3, #13]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00e      	beq.n	80107cc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	7b5b      	ldrb	r3, [r3, #13]
 80107b2:	4619      	mov	r1, r3
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f002 f8dc 	bl	8012972 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	7b5b      	ldrb	r3, [r3, #13]
 80107be:	4619      	mov	r1, r3
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f002 f907 	bl	80129d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2200      	movs	r2, #0
 80107ca:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80107d2:	69db      	ldr	r3, [r3, #28]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d00b      	beq.n	80107f0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80107de:	69db      	ldr	r3, [r3, #28]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f016 fe0d 	bl	8027400 <free>
    phost->pActiveClass->pData = 0U;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80107ec:	2200      	movs	r2, #0
 80107ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80107f0:	2300      	movs	r3, #0
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3710      	adds	r7, #16
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b084      	sub	sp, #16
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010808:	69db      	ldr	r3, [r3, #28]
 801080a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	3340      	adds	r3, #64	@ 0x40
 8010810:	4619      	mov	r1, r3
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f8b1 	bl	801097a <GetLineCoding>
 8010818:	4603      	mov	r3, r0
 801081a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 801081c:	7afb      	ldrb	r3, [r7, #11]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d105      	bne.n	801082e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010828:	2102      	movs	r1, #2
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 801082e:	7afb      	ldrb	r3, [r7, #11]
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8010840:	2301      	movs	r3, #1
 8010842:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8010844:	2300      	movs	r3, #0
 8010846:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801084e:	69db      	ldr	r3, [r3, #28]
 8010850:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8010858:	2b04      	cmp	r3, #4
 801085a:	d877      	bhi.n	801094c <USBH_CDC_Process+0x114>
 801085c:	a201      	add	r2, pc, #4	@ (adr r2, 8010864 <USBH_CDC_Process+0x2c>)
 801085e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010862:	bf00      	nop
 8010864:	08010879 	.word	0x08010879
 8010868:	0801087f 	.word	0x0801087f
 801086c:	080108af 	.word	0x080108af
 8010870:	08010923 	.word	0x08010923
 8010874:	08010931 	.word	0x08010931
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8010878:	2300      	movs	r3, #0
 801087a:	73fb      	strb	r3, [r7, #15]
      break;
 801087c:	e06d      	b.n	801095a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010882:	4619      	mov	r1, r3
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f000 f897 	bl	80109b8 <SetLineCoding>
 801088a:	4603      	mov	r3, r0
 801088c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801088e:	7bbb      	ldrb	r3, [r7, #14]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d104      	bne.n	801089e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2202      	movs	r2, #2
 8010898:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 801089c:	e058      	b.n	8010950 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801089e:	7bbb      	ldrb	r3, [r7, #14]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d055      	beq.n	8010950 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	2204      	movs	r2, #4
 80108a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80108ac:	e050      	b.n	8010950 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	3340      	adds	r3, #64	@ 0x40
 80108b2:	4619      	mov	r1, r3
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f000 f860 	bl	801097a <GetLineCoding>
 80108ba:	4603      	mov	r3, r0
 80108bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80108be:	7bbb      	ldrb	r3, [r7, #14]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d126      	bne.n	8010912 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	2200      	movs	r2, #0
 80108c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108d6:	791b      	ldrb	r3, [r3, #4]
 80108d8:	429a      	cmp	r2, r3
 80108da:	d13b      	bne.n	8010954 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108e6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d133      	bne.n	8010954 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108f6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d12b      	bne.n	8010954 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010904:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010906:	429a      	cmp	r2, r3
 8010908:	d124      	bne.n	8010954 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f000 f982 	bl	8010c14 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010910:	e020      	b.n	8010954 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8010912:	7bbb      	ldrb	r3, [r7, #14]
 8010914:	2b01      	cmp	r3, #1
 8010916:	d01d      	beq.n	8010954 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	2204      	movs	r2, #4
 801091c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8010920:	e018      	b.n	8010954 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f000 f867 	bl	80109f6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 f8f6 	bl	8010b1a <CDC_ProcessReception>
      break;
 801092e:	e014      	b.n	801095a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8010930:	2100      	movs	r1, #0
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f001 f988 	bl	8011c48 <USBH_ClrFeature>
 8010938:	4603      	mov	r3, r0
 801093a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801093c:	7bbb      	ldrb	r3, [r7, #14]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d10a      	bne.n	8010958 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	2200      	movs	r2, #0
 8010946:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 801094a:	e005      	b.n	8010958 <USBH_CDC_Process+0x120>

    default:
      break;
 801094c:	bf00      	nop
 801094e:	e004      	b.n	801095a <USBH_CDC_Process+0x122>
      break;
 8010950:	bf00      	nop
 8010952:	e002      	b.n	801095a <USBH_CDC_Process+0x122>
      break;
 8010954:	bf00      	nop
 8010956:	e000      	b.n	801095a <USBH_CDC_Process+0x122>
      break;
 8010958:	bf00      	nop

  }

  return status;
 801095a:	7bfb      	ldrb	r3, [r7, #15]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3710      	adds	r7, #16
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	370c      	adds	r7, #12
 8010972:	46bd      	mov	sp, r7
 8010974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010978:	4770      	bx	lr

0801097a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 801097a:	b580      	push	{r7, lr}
 801097c:	b082      	sub	sp, #8
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	22a1      	movs	r2, #161	@ 0xa1
 8010988:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2221      	movs	r2, #33	@ 0x21
 801098e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2200      	movs	r2, #0
 801099a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2207      	movs	r2, #7
 80109a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2207      	movs	r2, #7
 80109a6:	4619      	mov	r1, r3
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f001 fc82 	bl	80122b2 <USBH_CtlReq>
 80109ae:	4603      	mov	r3, r0
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3708      	adds	r7, #8
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}

080109b8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2221      	movs	r2, #33	@ 0x21
 80109c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2220      	movs	r2, #32
 80109cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2200      	movs	r2, #0
 80109d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2207      	movs	r2, #7
 80109de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	2207      	movs	r2, #7
 80109e4:	4619      	mov	r1, r3
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f001 fc63 	bl	80122b2 <USBH_CtlReq>
 80109ec:	4603      	mov	r3, r0
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}

080109f6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b086      	sub	sp, #24
 80109fa:	af02      	add	r7, sp, #8
 80109fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010a04:	69db      	ldr	r3, [r3, #28]
 8010a06:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d002      	beq.n	8010a1c <CDC_ProcessTransmission+0x26>
 8010a16:	2b02      	cmp	r3, #2
 8010a18:	d023      	beq.n	8010a62 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8010a1a:	e07a      	b.n	8010b12 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a20:	68fa      	ldr	r2, [r7, #12]
 8010a22:	8b12      	ldrh	r2, [r2, #24]
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d90b      	bls.n	8010a40 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	69d9      	ldr	r1, [r3, #28]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	8b1a      	ldrh	r2, [r3, #24]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	7b5b      	ldrb	r3, [r3, #13]
 8010a34:	2001      	movs	r0, #1
 8010a36:	9000      	str	r0, [sp, #0]
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f001 ff38 	bl	80128ae <USBH_BulkSendData>
 8010a3e:	e00b      	b.n	8010a58 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	7b5b      	ldrb	r3, [r3, #13]
 8010a4e:	2001      	movs	r0, #1
 8010a50:	9000      	str	r0, [sp, #0]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f001 ff2b 	bl	80128ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2202      	movs	r2, #2
 8010a5c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8010a60:	e057      	b.n	8010b12 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	7b5b      	ldrb	r3, [r3, #13]
 8010a66:	4619      	mov	r1, r3
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f016 fc11 	bl	8027290 <USBH_LL_GetURBState>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8010a72:	7afb      	ldrb	r3, [r7, #11]
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d136      	bne.n	8010ae6 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	8b12      	ldrh	r2, [r2, #24]
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d90e      	bls.n	8010aa2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	8b12      	ldrh	r2, [r2, #24]
 8010a8c:	1a9a      	subs	r2, r3, r2
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	69db      	ldr	r3, [r3, #28]
 8010a96:	68fa      	ldr	r2, [r7, #12]
 8010a98:	8b12      	ldrh	r2, [r2, #24]
 8010a9a:	441a      	add	r2, r3
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	61da      	str	r2, [r3, #28]
 8010aa0:	e002      	b.n	8010aa8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d004      	beq.n	8010aba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8010ab8:	e006      	b.n	8010ac8 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2200      	movs	r2, #0
 8010abe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 f892 	bl	8010bec <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2204      	movs	r2, #4
 8010acc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010adc:	2200      	movs	r2, #0
 8010ade:	4619      	mov	r1, r3
 8010ae0:	f002 fa6a 	bl	8012fb8 <osMessagePut>
      break;
 8010ae4:	e014      	b.n	8010b10 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8010ae6:	7afb      	ldrb	r3, [r7, #11]
 8010ae8:	2b02      	cmp	r3, #2
 8010aea:	d111      	bne.n	8010b10 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2201      	movs	r2, #1
 8010af0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2204      	movs	r2, #4
 8010af8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010b08:	2200      	movs	r2, #0
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	f002 fa54 	bl	8012fb8 <osMessagePut>
      break;
 8010b10:	bf00      	nop
  }
}
 8010b12:	bf00      	nop
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b086      	sub	sp, #24
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010b28:	69db      	ldr	r3, [r3, #28]
 8010b2a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8010b36:	2b03      	cmp	r3, #3
 8010b38:	d002      	beq.n	8010b40 <CDC_ProcessReception+0x26>
 8010b3a:	2b04      	cmp	r3, #4
 8010b3c:	d00e      	beq.n	8010b5c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8010b3e:	e051      	b.n	8010be4 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	6a19      	ldr	r1, [r3, #32]
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	8b5a      	ldrh	r2, [r3, #26]
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	7b1b      	ldrb	r3, [r3, #12]
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f001 fed3 	bl	80128f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	2204      	movs	r2, #4
 8010b56:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8010b5a:	e043      	b.n	8010be4 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	7b1b      	ldrb	r3, [r3, #12]
 8010b60:	4619      	mov	r1, r3
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f016 fb94 	bl	8027290 <USBH_LL_GetURBState>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010b6c:	7cfb      	ldrb	r3, [r7, #19]
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d137      	bne.n	8010be2 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	7b1b      	ldrb	r3, [r3, #12]
 8010b76:	4619      	mov	r1, r3
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f016 faf7 	bl	802716c <USBH_LL_GetLastXferSize>
 8010b7e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b84:	68fa      	ldr	r2, [r7, #12]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d016      	beq.n	8010bb8 <CDC_ProcessReception+0x9e>
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	8b5b      	ldrh	r3, [r3, #26]
 8010b8e:	461a      	mov	r2, r3
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d110      	bne.n	8010bb8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	1ad2      	subs	r2, r2, r3
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	6a1a      	ldr	r2, [r3, #32]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	441a      	add	r2, r3
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	2203      	movs	r2, #3
 8010bb2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8010bb6:	e006      	b.n	8010bc6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 f81d 	bl	8010c00 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2204      	movs	r2, #4
 8010bca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010bda:	2200      	movs	r2, #0
 8010bdc:	4619      	mov	r1, r3
 8010bde:	f002 f9eb 	bl	8012fb8 <osMessagePut>
      break;
 8010be2:	bf00      	nop
  }
}
 8010be4:	bf00      	nop
 8010be6:	3718      	adds	r7, #24
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010bf4:	bf00      	nop
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010c08:	bf00      	nop
 8010c0a:	370c      	adds	r7, #12
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr

08010c14 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010c1c:	bf00      	nop
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr

08010c28 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8010c28:	b5b0      	push	{r4, r5, r7, lr}
 8010c2a:	b090      	sub	sp, #64	@ 0x40
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	4613      	mov	r3, r2
 8010c34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d101      	bne.n	8010c40 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010c3c:	2302      	movs	r3, #2
 8010c3e:	e04d      	b.n	8010cdc <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	79fa      	ldrb	r2, [r7, #7]
 8010c44:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2200      	movs	r2, #0
 8010c54:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	f000 f847 	bl	8010cec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	2200      	movs	r2, #0
 8010c62:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d003      	beq.n	8010c8c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8010c8c:	4b15      	ldr	r3, [pc, #84]	@ (8010ce4 <USBH_Init+0xbc>)
 8010c8e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8010c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8010c98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f002 f961 	bl	8012f66 <osMessageCreate>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8010cac:	4b0e      	ldr	r3, [pc, #56]	@ (8010ce8 <USBH_Init+0xc0>)
 8010cae:	f107 0414 	add.w	r4, r7, #20
 8010cb2:	461d      	mov	r5, r3
 8010cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8010cc0:	f107 0314 	add.w	r3, r7, #20
 8010cc4:	68f9      	ldr	r1, [r7, #12]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f001 ff6e 	bl	8012ba8 <osThreadCreate>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8010cd4:	68f8      	ldr	r0, [r7, #12]
 8010cd6:	f016 f995 	bl	8027004 <USBH_LL_Init>

  return USBH_OK;
 8010cda:	2300      	movs	r3, #0
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3740      	adds	r7, #64	@ 0x40
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8010ce4:	08028768 	.word	0x08028768
 8010ce8:	08028784 	.word	0x08028784

08010cec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	60fb      	str	r3, [r7, #12]
 8010cfc:	e009      	b.n	8010d12 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	33e0      	adds	r3, #224	@ 0xe0
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	4413      	add	r3, r2
 8010d08:	2200      	movs	r2, #0
 8010d0a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	3301      	adds	r3, #1
 8010d10:	60fb      	str	r3, [r7, #12]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	2b0f      	cmp	r3, #15
 8010d16:	d9f2      	bls.n	8010cfe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010d18:	2300      	movs	r3, #0
 8010d1a:	60fb      	str	r3, [r7, #12]
 8010d1c:	e009      	b.n	8010d32 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	4413      	add	r3, r2
 8010d24:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010d28:	2200      	movs	r2, #0
 8010d2a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	60fb      	str	r3, [r7, #12]
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d38:	d3f1      	bcc.n	8010d1e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2200      	movs	r2, #0
 8010d44:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2201      	movs	r2, #1
 8010d4a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2201      	movs	r2, #1
 8010d58:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2240      	movs	r2, #64	@ 0x40
 8010d5e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2201      	movs	r2, #1
 8010d72:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2200      	movs	r2, #0
 8010d82:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	331c      	adds	r3, #28
 8010d8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d8e:	2100      	movs	r1, #0
 8010d90:	4618      	mov	r0, r3
 8010d92:	f016 fe43 	bl	8027a1c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010da0:	2100      	movs	r1, #0
 8010da2:	4618      	mov	r0, r3
 8010da4:	f016 fe3a 	bl	8027a1c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010dae:	2212      	movs	r2, #18
 8010db0:	2100      	movs	r1, #0
 8010db2:	4618      	mov	r0, r3
 8010db4:	f016 fe32 	bl	8027a1c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010dbe:	223e      	movs	r2, #62	@ 0x3e
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f016 fe2a 	bl	8027a1c <memset>

  return USBH_OK;
 8010dc8:	2300      	movs	r3, #0
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010dd2:	b480      	push	{r7}
 8010dd4:	b085      	sub	sp, #20
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
 8010dda:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d016      	beq.n	8010e14 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d10e      	bne.n	8010e0e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010df6:	1c59      	adds	r1, r3, #1
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	33de      	adds	r3, #222	@ 0xde
 8010e02:	6839      	ldr	r1, [r7, #0]
 8010e04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	73fb      	strb	r3, [r7, #15]
 8010e0c:	e004      	b.n	8010e18 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010e0e:	2302      	movs	r3, #2
 8010e10:	73fb      	strb	r3, [r7, #15]
 8010e12:	e001      	b.n	8010e18 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010e14:	2302      	movs	r3, #2
 8010e16:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3714      	adds	r7, #20
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e24:	4770      	bx	lr

08010e26 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010e26:	b480      	push	{r7}
 8010e28:	b085      	sub	sp, #20
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	460b      	mov	r3, r1
 8010e30:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8010e3c:	78fa      	ldrb	r2, [r7, #3]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d204      	bcs.n	8010e4c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	78fa      	ldrb	r2, [r7, #3]
 8010e46:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8010e4a:	e001      	b.n	8010e50 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010e4c:	2302      	movs	r3, #2
 8010e4e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3714      	adds	r7, #20
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr

08010e5e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010e5e:	b480      	push	{r7}
 8010e60:	b087      	sub	sp, #28
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
 8010e66:	4608      	mov	r0, r1
 8010e68:	4611      	mov	r1, r2
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	70fb      	strb	r3, [r7, #3]
 8010e70:	460b      	mov	r3, r1
 8010e72:	70bb      	strb	r3, [r7, #2]
 8010e74:	4613      	mov	r3, r2
 8010e76:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010e86:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010e88:	e025      	b.n	8010ed6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
 8010e8c:	221a      	movs	r2, #26
 8010e8e:	fb02 f303 	mul.w	r3, r2, r3
 8010e92:	3308      	adds	r3, #8
 8010e94:	68fa      	ldr	r2, [r7, #12]
 8010e96:	4413      	add	r3, r2
 8010e98:	3302      	adds	r3, #2
 8010e9a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	795b      	ldrb	r3, [r3, #5]
 8010ea0:	78fa      	ldrb	r2, [r7, #3]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d002      	beq.n	8010eac <USBH_FindInterface+0x4e>
 8010ea6:	78fb      	ldrb	r3, [r7, #3]
 8010ea8:	2bff      	cmp	r3, #255	@ 0xff
 8010eaa:	d111      	bne.n	8010ed0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010eb0:	78ba      	ldrb	r2, [r7, #2]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d002      	beq.n	8010ebc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010eb6:	78bb      	ldrb	r3, [r7, #2]
 8010eb8:	2bff      	cmp	r3, #255	@ 0xff
 8010eba:	d109      	bne.n	8010ed0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010ec0:	787a      	ldrb	r2, [r7, #1]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d002      	beq.n	8010ecc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010ec6:	787b      	ldrb	r3, [r7, #1]
 8010ec8:	2bff      	cmp	r3, #255	@ 0xff
 8010eca:	d101      	bne.n	8010ed0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010ecc:	7dfb      	ldrb	r3, [r7, #23]
 8010ece:	e006      	b.n	8010ede <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010ed0:	7dfb      	ldrb	r3, [r7, #23]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010ed6:	7dfb      	ldrb	r3, [r7, #23]
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d9d6      	bls.n	8010e8a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010edc:	23ff      	movs	r3, #255	@ 0xff
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	371c      	adds	r7, #28
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr

08010eea <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b082      	sub	sp, #8
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f016 f8c2 	bl	802707c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8010ef8:	2101      	movs	r1, #1
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f016 f9db 	bl	80272b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010f00:	2300      	movs	r3, #0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
	...

08010f0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b088      	sub	sp, #32
 8010f10:	af04      	add	r7, sp, #16
 8010f12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010f14:	2302      	movs	r3, #2
 8010f16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	2b01      	cmp	r3, #1
 8010f26:	d102      	bne.n	8010f2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2203      	movs	r2, #3
 8010f2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	2b0b      	cmp	r3, #11
 8010f36:	f200 8244 	bhi.w	80113c2 <USBH_Process+0x4b6>
 8010f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8010f40 <USBH_Process+0x34>)
 8010f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f40:	08010f71 	.word	0x08010f71
 8010f44:	08010fbf 	.word	0x08010fbf
 8010f48:	08011043 	.word	0x08011043
 8010f4c:	08011341 	.word	0x08011341
 8010f50:	080113c3 	.word	0x080113c3
 8010f54:	080110ff 	.word	0x080110ff
 8010f58:	080112cb 	.word	0x080112cb
 8010f5c:	08011151 	.word	0x08011151
 8010f60:	0801118d 	.word	0x0801118d
 8010f64:	080111c5 	.word	0x080111c5
 8010f68:	08011223 	.word	0x08011223
 8010f6c:	08011329 	.word	0x08011329
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	f000 8224 	beq.w	80113c6 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010f84:	20c8      	movs	r0, #200	@ 0xc8
 8010f86:	f016 f9e0 	bl	802734a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f016 f8d3 	bl	8027136 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2200      	movs	r2, #0
 8010f94:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	f001 fffe 	bl	8012fb8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010fbc:	e203      	b.n	80113c6 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d107      	bne.n	8010fd8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2202      	movs	r2, #2
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	e025      	b.n	8011024 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010fde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010fe2:	d914      	bls.n	801100e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010fea:	3301      	adds	r3, #1
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010ffa:	2b03      	cmp	r3, #3
 8010ffc:	d903      	bls.n	8011006 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	220d      	movs	r2, #13
 8011002:	701a      	strb	r2, [r3, #0]
 8011004:	e00e      	b.n	8011024 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2200      	movs	r2, #0
 801100a:	701a      	strb	r2, [r3, #0]
 801100c:	e00a      	b.n	8011024 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8011014:	f103 020a 	add.w	r2, r3, #10
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 801101e:	200a      	movs	r0, #10
 8011020:	f016 f993 	bl	802734a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2201      	movs	r2, #1
 8011028:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011038:	2200      	movs	r2, #0
 801103a:	4619      	mov	r1, r3
 801103c:	f001 ffbc 	bl	8012fb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011040:	e1c8      	b.n	80113d4 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011048:	2b00      	cmp	r3, #0
 801104a:	d005      	beq.n	8011058 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011052:	2104      	movs	r1, #4
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8011058:	2064      	movs	r0, #100	@ 0x64
 801105a:	f016 f976 	bl	802734a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f016 f842 	bl	80270e8 <USBH_LL_GetSpeed>
 8011064:	4603      	mov	r3, r0
 8011066:	461a      	mov	r2, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2205      	movs	r2, #5
 8011072:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8011074:	2100      	movs	r1, #0
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f001 fc8b 	bl	8012992 <USBH_AllocPipe>
 801107c:	4603      	mov	r3, r0
 801107e:	461a      	mov	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8011084:	2180      	movs	r1, #128	@ 0x80
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f001 fc83 	bl	8012992 <USBH_AllocPipe>
 801108c:	4603      	mov	r3, r0
 801108e:	461a      	mov	r2, r3
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	7919      	ldrb	r1, [r3, #4]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80110a8:	9202      	str	r2, [sp, #8]
 80110aa:	2200      	movs	r2, #0
 80110ac:	9201      	str	r2, [sp, #4]
 80110ae:	9300      	str	r3, [sp, #0]
 80110b0:	4603      	mov	r3, r0
 80110b2:	2280      	movs	r2, #128	@ 0x80
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f001 fc3d 	bl	8012934 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	7959      	ldrb	r1, [r3, #5]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80110ca:	687a      	ldr	r2, [r7, #4]
 80110cc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80110ce:	9202      	str	r2, [sp, #8]
 80110d0:	2200      	movs	r2, #0
 80110d2:	9201      	str	r2, [sp, #4]
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	4603      	mov	r3, r0
 80110d8:	2200      	movs	r2, #0
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f001 fc2a 	bl	8012934 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2201      	movs	r2, #1
 80110e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80110f4:	2200      	movs	r2, #0
 80110f6:	4619      	mov	r1, r3
 80110f8:	f001 ff5e 	bl	8012fb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80110fc:	e16a      	b.n	80113d4 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f000 f96e 	bl	80113e0 <USBH_HandleEnum>
 8011104:	4603      	mov	r3, r0
 8011106:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8011108:	7bbb      	ldrb	r3, [r7, #14]
 801110a:	b2db      	uxtb	r3, r3
 801110c:	2b00      	cmp	r3, #0
 801110e:	f040 815c 	bne.w	80113ca <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2200      	movs	r2, #0
 8011116:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8011120:	2b01      	cmp	r3, #1
 8011122:	d103      	bne.n	801112c <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2208      	movs	r2, #8
 8011128:	701a      	strb	r2, [r3, #0]
 801112a:	e002      	b.n	8011132 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2207      	movs	r2, #7
 8011130:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2205      	movs	r2, #5
 8011136:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011146:	2200      	movs	r2, #0
 8011148:	4619      	mov	r1, r3
 801114a:	f001 ff35 	bl	8012fb8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801114e:	e13c      	b.n	80113ca <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011156:	2b00      	cmp	r3, #0
 8011158:	f000 8139 	beq.w	80113ce <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011162:	2101      	movs	r1, #1
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2208      	movs	r2, #8
 801116c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2205      	movs	r2, #5
 8011172:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011182:	2200      	movs	r2, #0
 8011184:	4619      	mov	r1, r3
 8011186:	f001 ff17 	bl	8012fb8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 801118a:	e120      	b.n	80113ce <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8011192:	4619      	mov	r1, r3
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 fd10 	bl	8011bba <USBH_SetCfg>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d102      	bne.n	80111a6 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2209      	movs	r2, #9
 80111a4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2201      	movs	r2, #1
 80111aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80111ba:	2200      	movs	r2, #0
 80111bc:	4619      	mov	r1, r3
 80111be:	f001 fefb 	bl	8012fb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80111c2:	e107      	b.n	80113d4 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80111ca:	f003 0320 	and.w	r3, r3, #32
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d015      	beq.n	80111fe <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80111d2:	2101      	movs	r1, #1
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fd13 	bl	8011c00 <USBH_SetFeature>
 80111da:	4603      	mov	r3, r0
 80111dc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80111de:	7bbb      	ldrb	r3, [r7, #14]
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d103      	bne.n	80111ee <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	220a      	movs	r2, #10
 80111ea:	701a      	strb	r2, [r3, #0]
 80111ec:	e00a      	b.n	8011204 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80111ee:	7bbb      	ldrb	r3, [r7, #14]
 80111f0:	b2db      	uxtb	r3, r3
 80111f2:	2b03      	cmp	r3, #3
 80111f4:	d106      	bne.n	8011204 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	220a      	movs	r2, #10
 80111fa:	701a      	strb	r2, [r3, #0]
 80111fc:	e002      	b.n	8011204 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	220a      	movs	r2, #10
 8011202:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2201      	movs	r2, #1
 8011208:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011218:	2200      	movs	r2, #0
 801121a:	4619      	mov	r1, r3
 801121c:	f001 fecc 	bl	8012fb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011220:	e0d8      	b.n	80113d4 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8011228:	2b00      	cmp	r3, #0
 801122a:	d03f      	beq.n	80112ac <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2200      	movs	r2, #0
 8011230:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8011234:	2300      	movs	r3, #0
 8011236:	73fb      	strb	r3, [r7, #15]
 8011238:	e016      	b.n	8011268 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801123a:	7bfa      	ldrb	r2, [r7, #15]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	32de      	adds	r2, #222	@ 0xde
 8011240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011244:	791a      	ldrb	r2, [r3, #4]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 801124c:	429a      	cmp	r2, r3
 801124e:	d108      	bne.n	8011262 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8011250:	7bfa      	ldrb	r2, [r7, #15]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	32de      	adds	r2, #222	@ 0xde
 8011256:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8011260:	e005      	b.n	801126e <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8011262:	7bfb      	ldrb	r3, [r7, #15]
 8011264:	3301      	adds	r3, #1
 8011266:	73fb      	strb	r3, [r7, #15]
 8011268:	7bfb      	ldrb	r3, [r7, #15]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d0e5      	beq.n	801123a <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011274:	2b00      	cmp	r3, #0
 8011276:	d016      	beq.n	80112a6 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801127e:	689b      	ldr	r3, [r3, #8]
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	4798      	blx	r3
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d109      	bne.n	801129e <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2206      	movs	r2, #6
 801128e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011296:	2103      	movs	r1, #3
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	4798      	blx	r3
 801129c:	e006      	b.n	80112ac <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	220d      	movs	r2, #13
 80112a2:	701a      	strb	r2, [r3, #0]
 80112a4:	e002      	b.n	80112ac <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	220d      	movs	r2, #13
 80112aa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2205      	movs	r2, #5
 80112b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80112c0:	2200      	movs	r2, #0
 80112c2:	4619      	mov	r1, r3
 80112c4:	f001 fe78 	bl	8012fb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80112c8:	e084      	b.n	80113d4 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d017      	beq.n	8011304 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80112da:	691b      	ldr	r3, [r3, #16]
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	4798      	blx	r3
 80112e0:	4603      	mov	r3, r0
 80112e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80112e4:	7bbb      	ldrb	r3, [r7, #14]
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d103      	bne.n	80112f4 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	220b      	movs	r2, #11
 80112f0:	701a      	strb	r2, [r3, #0]
 80112f2:	e00a      	b.n	801130a <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80112f4:	7bbb      	ldrb	r3, [r7, #14]
 80112f6:	b2db      	uxtb	r3, r3
 80112f8:	2b02      	cmp	r3, #2
 80112fa:	d106      	bne.n	801130a <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	220d      	movs	r2, #13
 8011300:	701a      	strb	r2, [r3, #0]
 8011302:	e002      	b.n	801130a <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	220d      	movs	r2, #13
 8011308:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2205      	movs	r2, #5
 801130e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801131e:	2200      	movs	r2, #0
 8011320:	4619      	mov	r1, r3
 8011322:	f001 fe49 	bl	8012fb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011326:	e055      	b.n	80113d4 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801132e:	2b00      	cmp	r3, #0
 8011330:	d04f      	beq.n	80113d2 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011338:	695b      	ldr	r3, [r3, #20]
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	4798      	blx	r3
      }
      break;
 801133e:	e048      	b.n	80113d2 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2200      	movs	r2, #0
 8011344:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f7ff fccf 	bl	8010cec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011354:	2b00      	cmp	r3, #0
 8011356:	d009      	beq.n	801136c <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2200      	movs	r2, #0
 8011368:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011372:	2b00      	cmp	r3, #0
 8011374:	d005      	beq.n	8011382 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801137c:	2105      	movs	r1, #5
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8011388:	b2db      	uxtb	r3, r3
 801138a:	2b01      	cmp	r3, #1
 801138c:	d107      	bne.n	801139e <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2200      	movs	r2, #0
 8011392:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f7ff fda7 	bl	8010eea <USBH_Start>
 801139c:	e002      	b.n	80113a4 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f015 fe6c 	bl	802707c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2201      	movs	r2, #1
 80113a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80113b8:	2200      	movs	r2, #0
 80113ba:	4619      	mov	r1, r3
 80113bc:	f001 fdfc 	bl	8012fb8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80113c0:	e008      	b.n	80113d4 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80113c2:	bf00      	nop
 80113c4:	e006      	b.n	80113d4 <USBH_Process+0x4c8>
      break;
 80113c6:	bf00      	nop
 80113c8:	e004      	b.n	80113d4 <USBH_Process+0x4c8>
      break;
 80113ca:	bf00      	nop
 80113cc:	e002      	b.n	80113d4 <USBH_Process+0x4c8>
    break;
 80113ce:	bf00      	nop
 80113d0:	e000      	b.n	80113d4 <USBH_Process+0x4c8>
      break;
 80113d2:	bf00      	nop
  }
  return USBH_OK;
 80113d4:	2300      	movs	r3, #0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3710      	adds	r7, #16
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop

080113e0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b088      	sub	sp, #32
 80113e4:	af04      	add	r7, sp, #16
 80113e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80113e8:	2301      	movs	r3, #1
 80113ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80113ec:	2301      	movs	r3, #1
 80113ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	785b      	ldrb	r3, [r3, #1]
 80113f4:	2b07      	cmp	r3, #7
 80113f6:	f200 8204 	bhi.w	8011802 <USBH_HandleEnum+0x422>
 80113fa:	a201      	add	r2, pc, #4	@ (adr r2, 8011400 <USBH_HandleEnum+0x20>)
 80113fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011400:	08011421 	.word	0x08011421
 8011404:	080114db 	.word	0x080114db
 8011408:	08011545 	.word	0x08011545
 801140c:	080115cf 	.word	0x080115cf
 8011410:	08011639 	.word	0x08011639
 8011414:	080116a9 	.word	0x080116a9
 8011418:	08011745 	.word	0x08011745
 801141c:	080117c3 	.word	0x080117c3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8011420:	2108      	movs	r1, #8
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f000 fae6 	bl	80119f4 <USBH_Get_DevDesc>
 8011428:	4603      	mov	r3, r0
 801142a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801142c:	7bbb      	ldrb	r3, [r7, #14]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d12e      	bne.n	8011490 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2201      	movs	r2, #1
 8011440:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	7919      	ldrb	r1, [r3, #4]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8011456:	9202      	str	r2, [sp, #8]
 8011458:	2200      	movs	r2, #0
 801145a:	9201      	str	r2, [sp, #4]
 801145c:	9300      	str	r3, [sp, #0]
 801145e:	4603      	mov	r3, r0
 8011460:	2280      	movs	r2, #128	@ 0x80
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f001 fa66 	bl	8012934 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	7959      	ldrb	r1, [r3, #5]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011478:	687a      	ldr	r2, [r7, #4]
 801147a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801147c:	9202      	str	r2, [sp, #8]
 801147e:	2200      	movs	r2, #0
 8011480:	9201      	str	r2, [sp, #4]
 8011482:	9300      	str	r3, [sp, #0]
 8011484:	4603      	mov	r3, r0
 8011486:	2200      	movs	r2, #0
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f001 fa53 	bl	8012934 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801148e:	e1ba      	b.n	8011806 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011490:	7bbb      	ldrb	r3, [r7, #14]
 8011492:	2b03      	cmp	r3, #3
 8011494:	f040 81b7 	bne.w	8011806 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801149e:	3301      	adds	r3, #1
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80114ae:	2b03      	cmp	r3, #3
 80114b0:	d903      	bls.n	80114ba <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	220d      	movs	r2, #13
 80114b6:	701a      	strb	r2, [r3, #0]
      break;
 80114b8:	e1a5      	b.n	8011806 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	795b      	ldrb	r3, [r3, #5]
 80114be:	4619      	mov	r1, r3
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f001 fa87 	bl	80129d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	791b      	ldrb	r3, [r3, #4]
 80114ca:	4619      	mov	r1, r3
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f001 fa81 	bl	80129d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2200      	movs	r2, #0
 80114d6:	701a      	strb	r2, [r3, #0]
      break;
 80114d8:	e195      	b.n	8011806 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80114da:	2112      	movs	r1, #18
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f000 fa89 	bl	80119f4 <USBH_Get_DevDesc>
 80114e2:	4603      	mov	r3, r0
 80114e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80114e6:	7bbb      	ldrb	r3, [r7, #14]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d103      	bne.n	80114f4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2202      	movs	r2, #2
 80114f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80114f2:	e18a      	b.n	801180a <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80114f4:	7bbb      	ldrb	r3, [r7, #14]
 80114f6:	2b03      	cmp	r3, #3
 80114f8:	f040 8187 	bne.w	801180a <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011502:	3301      	adds	r3, #1
 8011504:	b2da      	uxtb	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011512:	2b03      	cmp	r3, #3
 8011514:	d903      	bls.n	801151e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	220d      	movs	r2, #13
 801151a:	701a      	strb	r2, [r3, #0]
      break;
 801151c:	e175      	b.n	801180a <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	795b      	ldrb	r3, [r3, #5]
 8011522:	4619      	mov	r1, r3
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f001 fa55 	bl	80129d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	791b      	ldrb	r3, [r3, #4]
 801152e:	4619      	mov	r1, r3
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f001 fa4f 	bl	80129d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2200      	movs	r2, #0
 8011540:	701a      	strb	r2, [r3, #0]
      break;
 8011542:	e162      	b.n	801180a <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8011544:	2101      	movs	r1, #1
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 fb13 	bl	8011b72 <USBH_SetAddress>
 801154c:	4603      	mov	r3, r0
 801154e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011550:	7bbb      	ldrb	r3, [r7, #14]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d130      	bne.n	80115b8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8011556:	2002      	movs	r0, #2
 8011558:	f015 fef7 	bl	802734a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2201      	movs	r2, #1
 8011560:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2203      	movs	r2, #3
 8011568:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	7919      	ldrb	r1, [r3, #4]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801157e:	9202      	str	r2, [sp, #8]
 8011580:	2200      	movs	r2, #0
 8011582:	9201      	str	r2, [sp, #4]
 8011584:	9300      	str	r3, [sp, #0]
 8011586:	4603      	mov	r3, r0
 8011588:	2280      	movs	r2, #128	@ 0x80
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f001 f9d2 	bl	8012934 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	7959      	ldrb	r1, [r3, #5]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80115a4:	9202      	str	r2, [sp, #8]
 80115a6:	2200      	movs	r2, #0
 80115a8:	9201      	str	r2, [sp, #4]
 80115aa:	9300      	str	r3, [sp, #0]
 80115ac:	4603      	mov	r3, r0
 80115ae:	2200      	movs	r2, #0
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f001 f9bf 	bl	8012934 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80115b6:	e12a      	b.n	801180e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80115b8:	7bbb      	ldrb	r3, [r7, #14]
 80115ba:	2b03      	cmp	r3, #3
 80115bc:	f040 8127 	bne.w	801180e <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	220d      	movs	r2, #13
 80115c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	705a      	strb	r2, [r3, #1]
      break;
 80115cc:	e11f      	b.n	801180e <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80115ce:	2109      	movs	r1, #9
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f000 fa3b 	bl	8011a4c <USBH_Get_CfgDesc>
 80115d6:	4603      	mov	r3, r0
 80115d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80115da:	7bbb      	ldrb	r3, [r7, #14]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d103      	bne.n	80115e8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2204      	movs	r2, #4
 80115e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80115e6:	e114      	b.n	8011812 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80115e8:	7bbb      	ldrb	r3, [r7, #14]
 80115ea:	2b03      	cmp	r3, #3
 80115ec:	f040 8111 	bne.w	8011812 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80115f6:	3301      	adds	r3, #1
 80115f8:	b2da      	uxtb	r2, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011606:	2b03      	cmp	r3, #3
 8011608:	d903      	bls.n	8011612 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	220d      	movs	r2, #13
 801160e:	701a      	strb	r2, [r3, #0]
      break;
 8011610:	e0ff      	b.n	8011812 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	795b      	ldrb	r3, [r3, #5]
 8011616:	4619      	mov	r1, r3
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f001 f9db 	bl	80129d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	791b      	ldrb	r3, [r3, #4]
 8011622:	4619      	mov	r1, r3
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f001 f9d5 	bl	80129d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2200      	movs	r2, #0
 8011634:	701a      	strb	r2, [r3, #0]
      break;
 8011636:	e0ec      	b.n	8011812 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 801163e:	4619      	mov	r1, r3
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f000 fa03 	bl	8011a4c <USBH_Get_CfgDesc>
 8011646:	4603      	mov	r3, r0
 8011648:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801164a:	7bbb      	ldrb	r3, [r7, #14]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d103      	bne.n	8011658 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2205      	movs	r2, #5
 8011654:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011656:	e0de      	b.n	8011816 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011658:	7bbb      	ldrb	r3, [r7, #14]
 801165a:	2b03      	cmp	r3, #3
 801165c:	f040 80db 	bne.w	8011816 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011666:	3301      	adds	r3, #1
 8011668:	b2da      	uxtb	r2, r3
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011676:	2b03      	cmp	r3, #3
 8011678:	d903      	bls.n	8011682 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	220d      	movs	r2, #13
 801167e:	701a      	strb	r2, [r3, #0]
      break;
 8011680:	e0c9      	b.n	8011816 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	795b      	ldrb	r3, [r3, #5]
 8011686:	4619      	mov	r1, r3
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f001 f9a3 	bl	80129d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	791b      	ldrb	r3, [r3, #4]
 8011692:	4619      	mov	r1, r3
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f001 f99d 	bl	80129d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2200      	movs	r2, #0
 801169e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	701a      	strb	r2, [r3, #0]
      break;
 80116a6:	e0b6      	b.n	8011816 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d036      	beq.n	8011720 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80116be:	23ff      	movs	r3, #255	@ 0xff
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f000 f9ed 	bl	8011aa0 <USBH_Get_StringDesc>
 80116c6:	4603      	mov	r3, r0
 80116c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80116ca:	7bbb      	ldrb	r3, [r7, #14]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d111      	bne.n	80116f4 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2206      	movs	r2, #6
 80116d4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2205      	movs	r2, #5
 80116da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80116ea:	2200      	movs	r2, #0
 80116ec:	4619      	mov	r1, r3
 80116ee:	f001 fc63 	bl	8012fb8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80116f2:	e092      	b.n	801181a <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80116f4:	7bbb      	ldrb	r3, [r7, #14]
 80116f6:	2b03      	cmp	r3, #3
 80116f8:	f040 808f 	bne.w	801181a <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2206      	movs	r2, #6
 8011700:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2205      	movs	r2, #5
 8011706:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011716:	2200      	movs	r2, #0
 8011718:	4619      	mov	r1, r3
 801171a:	f001 fc4d 	bl	8012fb8 <osMessagePut>
      break;
 801171e:	e07c      	b.n	801181a <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2206      	movs	r2, #6
 8011724:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2205      	movs	r2, #5
 801172a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801173a:	2200      	movs	r2, #0
 801173c:	4619      	mov	r1, r3
 801173e:	f001 fc3b 	bl	8012fb8 <osMessagePut>
      break;
 8011742:	e06a      	b.n	801181a <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 801174a:	2b00      	cmp	r3, #0
 801174c:	d027      	beq.n	801179e <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801175a:	23ff      	movs	r3, #255	@ 0xff
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 f99f 	bl	8011aa0 <USBH_Get_StringDesc>
 8011762:	4603      	mov	r3, r0
 8011764:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011766:	7bbb      	ldrb	r3, [r7, #14]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d103      	bne.n	8011774 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2207      	movs	r2, #7
 8011770:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8011772:	e054      	b.n	801181e <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011774:	7bbb      	ldrb	r3, [r7, #14]
 8011776:	2b03      	cmp	r3, #3
 8011778:	d151      	bne.n	801181e <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2207      	movs	r2, #7
 801177e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2205      	movs	r2, #5
 8011784:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011794:	2200      	movs	r2, #0
 8011796:	4619      	mov	r1, r3
 8011798:	f001 fc0e 	bl	8012fb8 <osMessagePut>
      break;
 801179c:	e03f      	b.n	801181e <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2207      	movs	r2, #7
 80117a2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2205      	movs	r2, #5
 80117a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80117b8:	2200      	movs	r2, #0
 80117ba:	4619      	mov	r1, r3
 80117bc:	f001 fbfc 	bl	8012fb8 <osMessagePut>
      break;
 80117c0:	e02d      	b.n	801181e <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d017      	beq.n	80117fc <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80117d8:	23ff      	movs	r3, #255	@ 0xff
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f000 f960 	bl	8011aa0 <USBH_Get_StringDesc>
 80117e0:	4603      	mov	r3, r0
 80117e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80117e4:	7bbb      	ldrb	r3, [r7, #14]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d102      	bne.n	80117f0 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80117ea:	2300      	movs	r3, #0
 80117ec:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80117ee:	e018      	b.n	8011822 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80117f0:	7bbb      	ldrb	r3, [r7, #14]
 80117f2:	2b03      	cmp	r3, #3
 80117f4:	d115      	bne.n	8011822 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 80117f6:	2300      	movs	r3, #0
 80117f8:	73fb      	strb	r3, [r7, #15]
      break;
 80117fa:	e012      	b.n	8011822 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 80117fc:	2300      	movs	r3, #0
 80117fe:	73fb      	strb	r3, [r7, #15]
      break;
 8011800:	e00f      	b.n	8011822 <USBH_HandleEnum+0x442>

    default:
      break;
 8011802:	bf00      	nop
 8011804:	e00e      	b.n	8011824 <USBH_HandleEnum+0x444>
      break;
 8011806:	bf00      	nop
 8011808:	e00c      	b.n	8011824 <USBH_HandleEnum+0x444>
      break;
 801180a:	bf00      	nop
 801180c:	e00a      	b.n	8011824 <USBH_HandleEnum+0x444>
      break;
 801180e:	bf00      	nop
 8011810:	e008      	b.n	8011824 <USBH_HandleEnum+0x444>
      break;
 8011812:	bf00      	nop
 8011814:	e006      	b.n	8011824 <USBH_HandleEnum+0x444>
      break;
 8011816:	bf00      	nop
 8011818:	e004      	b.n	8011824 <USBH_HandleEnum+0x444>
      break;
 801181a:	bf00      	nop
 801181c:	e002      	b.n	8011824 <USBH_HandleEnum+0x444>
      break;
 801181e:	bf00      	nop
 8011820:	e000      	b.n	8011824 <USBH_HandleEnum+0x444>
      break;
 8011822:	bf00      	nop
  }
  return Status;
 8011824:	7bfb      	ldrb	r3, [r7, #15]
}
 8011826:	4618      	mov	r0, r3
 8011828:	3710      	adds	r7, #16
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop

08011830 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	683a      	ldr	r2, [r7, #0]
 801183e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8011842:	bf00      	nop
 8011844:	370c      	adds	r7, #12
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr

0801184e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801184e:	b580      	push	{r7, lr}
 8011850:	b082      	sub	sp, #8
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801185c:	1c5a      	adds	r2, r3, #1
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 f804 	bl	8011872 <USBH_HandleSof>
}
 801186a:	bf00      	nop
 801186c:	3708      	adds	r7, #8
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011872:	b580      	push	{r7, lr}
 8011874:	b082      	sub	sp, #8
 8011876:	af00      	add	r7, sp, #0
 8011878:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	b2db      	uxtb	r3, r3
 8011880:	2b0b      	cmp	r3, #11
 8011882:	d10a      	bne.n	801189a <USBH_HandleSof+0x28>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801188a:	2b00      	cmp	r3, #0
 801188c:	d005      	beq.n	801189a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011894:	699b      	ldr	r3, [r3, #24]
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	4798      	blx	r3
  }
}
 801189a:	bf00      	nop
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b082      	sub	sp, #8
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2201      	movs	r2, #1
 80118ae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2201      	movs	r2, #1
 80118b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80118c6:	2200      	movs	r2, #0
 80118c8:	4619      	mov	r1, r3
 80118ca:	f001 fb75 	bl	8012fb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80118ce:	bf00      	nop
}
 80118d0:	3708      	adds	r7, #8
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}

080118d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80118d6:	b480      	push	{r7}
 80118d8:	b083      	sub	sp, #12
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2200      	movs	r2, #0
 80118e2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80118e6:	bf00      	nop
}
 80118e8:	370c      	adds	r7, #12
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr

080118f2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b082      	sub	sp, #8
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2201      	movs	r2, #1
 80118fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2200      	movs	r2, #0
 801190e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2201      	movs	r2, #1
 8011916:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011926:	2200      	movs	r2, #0
 8011928:	4619      	mov	r1, r3
 801192a:	f001 fb45 	bl	8012fb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801192e:	2300      	movs	r3, #0
}
 8011930:	4618      	mov	r0, r3
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2201      	movs	r2, #1
 8011944:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2200      	movs	r2, #0
 801194c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2200      	movs	r2, #0
 8011954:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f015 fbaa 	bl	80270b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	791b      	ldrb	r3, [r3, #4]
 8011962:	4619      	mov	r1, r3
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f001 f835 	bl	80129d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	795b      	ldrb	r3, [r3, #5]
 801196e:	4619      	mov	r1, r3
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f001 f82f 	bl	80129d4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2201      	movs	r2, #1
 801197a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801198a:	2200      	movs	r2, #0
 801198c:	4619      	mov	r1, r3
 801198e:	f001 fb13 	bl	8012fb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8011992:	2300      	movs	r3, #0
}
 8011994:	4618      	mov	r0, r3
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b086      	sub	sp, #24
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 80119aa:	f107 030c 	add.w	r3, r7, #12
 80119ae:	f04f 32ff 	mov.w	r2, #4294967295
 80119b2:	4618      	mov	r0, r3
 80119b4:	f001 fb40 	bl	8013038 <osMessageGet>
    if (event.status == osEventMessage)
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2b10      	cmp	r3, #16
 80119bc:	d1f2      	bne.n	80119a4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f7ff faa4 	bl	8010f0c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80119c4:	e7ee      	b.n	80119a4 <USBH_Process_OS+0x8>

080119c6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80119c6:	b580      	push	{r7, lr}
 80119c8:	b082      	sub	sp, #8
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2201      	movs	r2, #1
 80119d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80119e2:	2200      	movs	r2, #0
 80119e4:	4619      	mov	r1, r3
 80119e6:	f001 fae7 	bl	8012fb8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80119ea:	2300      	movs	r3, #0
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3708      	adds	r7, #8
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b086      	sub	sp, #24
 80119f8:	af02      	add	r7, sp, #8
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8011a00:	887b      	ldrh	r3, [r7, #2]
 8011a02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a06:	d901      	bls.n	8011a0c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8011a08:	2303      	movs	r3, #3
 8011a0a:	e01b      	b.n	8011a44 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8011a12:	887b      	ldrh	r3, [r7, #2]
 8011a14:	9300      	str	r3, [sp, #0]
 8011a16:	4613      	mov	r3, r2
 8011a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f000 f872 	bl	8011b08 <USBH_GetDescriptor>
 8011a24:	4603      	mov	r3, r0
 8011a26:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8011a28:	7bfb      	ldrb	r3, [r7, #15]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d109      	bne.n	8011a42 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8011a34:	887a      	ldrh	r2, [r7, #2]
 8011a36:	4619      	mov	r1, r3
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 f929 	bl	8011c90 <USBH_ParseDevDesc>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3710      	adds	r7, #16
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b086      	sub	sp, #24
 8011a50:	af02      	add	r7, sp, #8
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	460b      	mov	r3, r1
 8011a56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	331c      	adds	r3, #28
 8011a5c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8011a5e:	887b      	ldrh	r3, [r7, #2]
 8011a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a64:	d901      	bls.n	8011a6a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8011a66:	2303      	movs	r3, #3
 8011a68:	e016      	b.n	8011a98 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8011a6a:	887b      	ldrh	r3, [r7, #2]
 8011a6c:	9300      	str	r3, [sp, #0]
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a74:	2100      	movs	r1, #0
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 f846 	bl	8011b08 <USBH_GetDescriptor>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8011a80:	7bfb      	ldrb	r3, [r7, #15]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d107      	bne.n	8011a96 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8011a86:	887b      	ldrh	r3, [r7, #2]
 8011a88:	461a      	mov	r2, r3
 8011a8a:	68b9      	ldr	r1, [r7, #8]
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f000 f9af 	bl	8011df0 <USBH_ParseCfgDesc>
 8011a92:	4603      	mov	r3, r0
 8011a94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3710      	adds	r7, #16
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b088      	sub	sp, #32
 8011aa4:	af02      	add	r7, sp, #8
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	607a      	str	r2, [r7, #4]
 8011aaa:	461a      	mov	r2, r3
 8011aac:	460b      	mov	r3, r1
 8011aae:	72fb      	strb	r3, [r7, #11]
 8011ab0:	4613      	mov	r3, r2
 8011ab2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8011ab4:	893b      	ldrh	r3, [r7, #8]
 8011ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011aba:	d802      	bhi.n	8011ac2 <USBH_Get_StringDesc+0x22>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d101      	bne.n	8011ac6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8011ac2:	2303      	movs	r3, #3
 8011ac4:	e01c      	b.n	8011b00 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8011ac6:	7afb      	ldrb	r3, [r7, #11]
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8011ace:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8011ad6:	893b      	ldrh	r3, [r7, #8]
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	460b      	mov	r3, r1
 8011adc:	2100      	movs	r1, #0
 8011ade:	68f8      	ldr	r0, [r7, #12]
 8011ae0:	f000 f812 	bl	8011b08 <USBH_GetDescriptor>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8011ae8:	7dfb      	ldrb	r3, [r7, #23]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d107      	bne.n	8011afe <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8011af4:	893a      	ldrh	r2, [r7, #8]
 8011af6:	6879      	ldr	r1, [r7, #4]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f000 fb8d 	bl	8012218 <USBH_ParseStringDesc>
  }

  return status;
 8011afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3718      	adds	r7, #24
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	60f8      	str	r0, [r7, #12]
 8011b10:	607b      	str	r3, [r7, #4]
 8011b12:	460b      	mov	r3, r1
 8011b14:	72fb      	strb	r3, [r7, #11]
 8011b16:	4613      	mov	r3, r2
 8011b18:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	789b      	ldrb	r3, [r3, #2]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	d11c      	bne.n	8011b5c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8011b22:	7afb      	ldrb	r3, [r7, #11]
 8011b24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2206      	movs	r2, #6
 8011b32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	893a      	ldrh	r2, [r7, #8]
 8011b38:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8011b3a:	893b      	ldrh	r3, [r7, #8]
 8011b3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011b44:	d104      	bne.n	8011b50 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	f240 4209 	movw	r2, #1033	@ 0x409
 8011b4c:	829a      	strh	r2, [r3, #20]
 8011b4e:	e002      	b.n	8011b56 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	2200      	movs	r2, #0
 8011b54:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	8b3a      	ldrh	r2, [r7, #24]
 8011b5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8011b5c:	8b3b      	ldrh	r3, [r7, #24]
 8011b5e:	461a      	mov	r2, r3
 8011b60:	6879      	ldr	r1, [r7, #4]
 8011b62:	68f8      	ldr	r0, [r7, #12]
 8011b64:	f000 fba5 	bl	80122b2 <USBH_CtlReq>
 8011b68:	4603      	mov	r3, r0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b082      	sub	sp, #8
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	789b      	ldrb	r3, [r3, #2]
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d10f      	bne.n	8011ba6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2205      	movs	r2, #5
 8011b90:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011b92:	78fb      	ldrb	r3, [r7, #3]
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	2100      	movs	r1, #0
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f000 fb81 	bl	80122b2 <USBH_CtlReq>
 8011bb0:	4603      	mov	r3, r0
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3708      	adds	r7, #8
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}

08011bba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011bba:	b580      	push	{r7, lr}
 8011bbc:	b082      	sub	sp, #8
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
 8011bc2:	460b      	mov	r3, r1
 8011bc4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	789b      	ldrb	r3, [r3, #2]
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d10e      	bne.n	8011bec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2209      	movs	r2, #9
 8011bd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	887a      	ldrh	r2, [r7, #2]
 8011bde:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2200      	movs	r2, #0
 8011be4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2200      	movs	r2, #0
 8011bea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011bec:	2200      	movs	r2, #0
 8011bee:	2100      	movs	r1, #0
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f000 fb5e 	bl	80122b2 <USBH_CtlReq>
 8011bf6:	4603      	mov	r3, r0
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	789b      	ldrb	r3, [r3, #2]
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d10f      	bne.n	8011c34 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2200      	movs	r2, #0
 8011c18:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2203      	movs	r2, #3
 8011c1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011c20:	78fb      	ldrb	r3, [r7, #3]
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2200      	movs	r2, #0
 8011c32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011c34:	2200      	movs	r2, #0
 8011c36:	2100      	movs	r1, #0
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f000 fb3a 	bl	80122b2 <USBH_CtlReq>
 8011c3e:	4603      	mov	r3, r0
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3708      	adds	r7, #8
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b082      	sub	sp, #8
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	460b      	mov	r3, r1
 8011c52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	789b      	ldrb	r3, [r3, #2]
 8011c58:	2b01      	cmp	r3, #1
 8011c5a:	d10f      	bne.n	8011c7c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2202      	movs	r2, #2
 8011c60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2201      	movs	r2, #1
 8011c66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011c6e:	78fb      	ldrb	r3, [r7, #3]
 8011c70:	b29a      	uxth	r2, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2200      	movs	r2, #0
 8011c7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	2100      	movs	r1, #0
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f000 fb16 	bl	80122b2 <USBH_CtlReq>
 8011c86:	4603      	mov	r3, r0
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b087      	sub	sp, #28
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8011ca4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d101      	bne.n	8011cb4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8011cb0:	2302      	movs	r3, #2
 8011cb2:	e094      	b.n	8011dde <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	781a      	ldrb	r2, [r3, #0]
 8011cb8:	693b      	ldr	r3, [r7, #16]
 8011cba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	785a      	ldrb	r2, [r3, #1]
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	3302      	adds	r3, #2
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	461a      	mov	r2, r3
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	3303      	adds	r3, #3
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	021b      	lsls	r3, r3, #8
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	4313      	orrs	r3, r2
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	791a      	ldrb	r2, [r3, #4]
 8011ce2:	693b      	ldr	r3, [r7, #16]
 8011ce4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	795a      	ldrb	r2, [r3, #5]
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	799a      	ldrb	r2, [r3, #6]
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	79da      	ldrb	r2, [r3, #7]
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d004      	beq.n	8011d12 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d11b      	bne.n	8011d4a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	79db      	ldrb	r3, [r3, #7]
 8011d16:	2b20      	cmp	r3, #32
 8011d18:	dc0f      	bgt.n	8011d3a <USBH_ParseDevDesc+0xaa>
 8011d1a:	2b08      	cmp	r3, #8
 8011d1c:	db0f      	blt.n	8011d3e <USBH_ParseDevDesc+0xae>
 8011d1e:	3b08      	subs	r3, #8
 8011d20:	4a32      	ldr	r2, [pc, #200]	@ (8011dec <USBH_ParseDevDesc+0x15c>)
 8011d22:	fa22 f303 	lsr.w	r3, r2, r3
 8011d26:	f003 0301 	and.w	r3, r3, #1
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	bf14      	ite	ne
 8011d2e:	2301      	movne	r3, #1
 8011d30:	2300      	moveq	r3, #0
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d106      	bne.n	8011d46 <USBH_ParseDevDesc+0xb6>
 8011d38:	e001      	b.n	8011d3e <USBH_ParseDevDesc+0xae>
 8011d3a:	2b40      	cmp	r3, #64	@ 0x40
 8011d3c:	d003      	beq.n	8011d46 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	2208      	movs	r2, #8
 8011d42:	71da      	strb	r2, [r3, #7]
        break;
 8011d44:	e000      	b.n	8011d48 <USBH_ParseDevDesc+0xb8>
        break;
 8011d46:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8011d48:	e00e      	b.n	8011d68 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011d50:	2b02      	cmp	r3, #2
 8011d52:	d107      	bne.n	8011d64 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	79db      	ldrb	r3, [r3, #7]
 8011d58:	2b08      	cmp	r3, #8
 8011d5a:	d005      	beq.n	8011d68 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	2208      	movs	r2, #8
 8011d60:	71da      	strb	r2, [r3, #7]
 8011d62:	e001      	b.n	8011d68 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8011d64:	2303      	movs	r3, #3
 8011d66:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8011d68:	88fb      	ldrh	r3, [r7, #6]
 8011d6a:	2b08      	cmp	r3, #8
 8011d6c:	d936      	bls.n	8011ddc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	3308      	adds	r3, #8
 8011d72:	781b      	ldrb	r3, [r3, #0]
 8011d74:	461a      	mov	r2, r3
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	3309      	adds	r3, #9
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	021b      	lsls	r3, r3, #8
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	4313      	orrs	r3, r2
 8011d82:	b29a      	uxth	r2, r3
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	330a      	adds	r3, #10
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	461a      	mov	r2, r3
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	330b      	adds	r3, #11
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	021b      	lsls	r3, r3, #8
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	330c      	adds	r3, #12
 8011da6:	781b      	ldrb	r3, [r3, #0]
 8011da8:	461a      	mov	r2, r3
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	330d      	adds	r3, #13
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	021b      	lsls	r3, r3, #8
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	4313      	orrs	r3, r2
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	7b9a      	ldrb	r2, [r3, #14]
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	7bda      	ldrb	r2, [r3, #15]
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	7c1a      	ldrb	r2, [r3, #16]
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	7c5a      	ldrb	r2, [r3, #17]
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8011ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	371c      	adds	r7, #28
 8011de2:	46bd      	mov	sp, r7
 8011de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de8:	4770      	bx	lr
 8011dea:	bf00      	nop
 8011dec:	01000101 	.word	0x01000101

08011df0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b08c      	sub	sp, #48	@ 0x30
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	60f8      	str	r0, [r7, #12]
 8011df8:	60b9      	str	r1, [r7, #8]
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8011e04:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011e06:	2300      	movs	r3, #0
 8011e08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8011e12:	2300      	movs	r3, #0
 8011e14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d101      	bne.n	8011e22 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8011e1e:	2302      	movs	r3, #2
 8011e20:	e0da      	b.n	8011fd8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8011e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	2b09      	cmp	r3, #9
 8011e2c:	d002      	beq.n	8011e34 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e30:	2209      	movs	r2, #9
 8011e32:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	781a      	ldrb	r2, [r3, #0]
 8011e38:	6a3b      	ldr	r3, [r7, #32]
 8011e3a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	785a      	ldrb	r2, [r3, #1]
 8011e40:	6a3b      	ldr	r3, [r7, #32]
 8011e42:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	3302      	adds	r3, #2
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	461a      	mov	r2, r3
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	3303      	adds	r3, #3
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	021b      	lsls	r3, r3, #8
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	4313      	orrs	r3, r2
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e5e:	bf28      	it	cs
 8011e60:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	6a3b      	ldr	r3, [r7, #32]
 8011e68:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	791a      	ldrb	r2, [r3, #4]
 8011e6e:	6a3b      	ldr	r3, [r7, #32]
 8011e70:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	795a      	ldrb	r2, [r3, #5]
 8011e76:	6a3b      	ldr	r3, [r7, #32]
 8011e78:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	799a      	ldrb	r2, [r3, #6]
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	79da      	ldrb	r2, [r3, #7]
 8011e86:	6a3b      	ldr	r3, [r7, #32]
 8011e88:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	7a1a      	ldrb	r2, [r3, #8]
 8011e8e:	6a3b      	ldr	r3, [r7, #32]
 8011e90:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011e92:	88fb      	ldrh	r3, [r7, #6]
 8011e94:	2b09      	cmp	r3, #9
 8011e96:	f240 809d 	bls.w	8011fd4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8011e9a:	2309      	movs	r3, #9
 8011e9c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011ea2:	e081      	b.n	8011fa8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011ea4:	f107 0316 	add.w	r3, r7, #22
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011eac:	f000 f9e7 	bl	801227e <USBH_GetNextDesc>
 8011eb0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8011eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb4:	785b      	ldrb	r3, [r3, #1]
 8011eb6:	2b04      	cmp	r3, #4
 8011eb8:	d176      	bne.n	8011fa8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	2b09      	cmp	r3, #9
 8011ec0:	d002      	beq.n	8011ec8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8011ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec4:	2209      	movs	r2, #9
 8011ec6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ecc:	221a      	movs	r2, #26
 8011ece:	fb02 f303 	mul.w	r3, r2, r3
 8011ed2:	3308      	adds	r3, #8
 8011ed4:	6a3a      	ldr	r2, [r7, #32]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	3302      	adds	r3, #2
 8011eda:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ede:	69f8      	ldr	r0, [r7, #28]
 8011ee0:	f000 f87e 	bl	8011fe0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011eea:	2300      	movs	r3, #0
 8011eec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011eee:	e043      	b.n	8011f78 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011ef0:	f107 0316 	add.w	r3, r7, #22
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ef8:	f000 f9c1 	bl	801227e <USBH_GetNextDesc>
 8011efc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f00:	785b      	ldrb	r3, [r3, #1]
 8011f02:	2b05      	cmp	r3, #5
 8011f04:	d138      	bne.n	8011f78 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	795b      	ldrb	r3, [r3, #5]
 8011f0a:	2b01      	cmp	r3, #1
 8011f0c:	d113      	bne.n	8011f36 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011f0e:	69fb      	ldr	r3, [r7, #28]
 8011f10:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8011f12:	2b02      	cmp	r3, #2
 8011f14:	d003      	beq.n	8011f1e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	799b      	ldrb	r3, [r3, #6]
 8011f1a:	2b03      	cmp	r3, #3
 8011f1c:	d10b      	bne.n	8011f36 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	79db      	ldrb	r3, [r3, #7]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d10b      	bne.n	8011f3e <USBH_ParseCfgDesc+0x14e>
 8011f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	2b09      	cmp	r3, #9
 8011f2c:	d007      	beq.n	8011f3e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8011f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f30:	2209      	movs	r2, #9
 8011f32:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011f34:	e003      	b.n	8011f3e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8011f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f38:	2207      	movs	r2, #7
 8011f3a:	701a      	strb	r2, [r3, #0]
 8011f3c:	e000      	b.n	8011f40 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011f3e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f44:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011f48:	3201      	adds	r2, #1
 8011f4a:	00d2      	lsls	r2, r2, #3
 8011f4c:	211a      	movs	r1, #26
 8011f4e:	fb01 f303 	mul.w	r3, r1, r3
 8011f52:	4413      	add	r3, r2
 8011f54:	3308      	adds	r3, #8
 8011f56:	6a3a      	ldr	r2, [r7, #32]
 8011f58:	4413      	add	r3, r2
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8011f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f60:	69b9      	ldr	r1, [r7, #24]
 8011f62:	68f8      	ldr	r0, [r7, #12]
 8011f64:	f000 f870 	bl	8012048 <USBH_ParseEPDesc>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8011f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011f72:	3301      	adds	r3, #1
 8011f74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	791b      	ldrb	r3, [r3, #4]
 8011f7c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d204      	bcs.n	8011f8e <USBH_ParseCfgDesc+0x19e>
 8011f84:	6a3b      	ldr	r3, [r7, #32]
 8011f86:	885a      	ldrh	r2, [r3, #2]
 8011f88:	8afb      	ldrh	r3, [r7, #22]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d8b0      	bhi.n	8011ef0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8011f8e:	69fb      	ldr	r3, [r7, #28]
 8011f90:	791b      	ldrb	r3, [r3, #4]
 8011f92:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d201      	bcs.n	8011f9e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8011f9a:	2303      	movs	r3, #3
 8011f9c:	e01c      	b.n	8011fd8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8011f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d805      	bhi.n	8011fbc <USBH_ParseCfgDesc+0x1cc>
 8011fb0:	6a3b      	ldr	r3, [r7, #32]
 8011fb2:	885a      	ldrh	r2, [r3, #2]
 8011fb4:	8afb      	ldrh	r3, [r7, #22]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	f63f af74 	bhi.w	8011ea4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011fbc:	6a3b      	ldr	r3, [r7, #32]
 8011fbe:	791b      	ldrb	r3, [r3, #4]
 8011fc0:	2b02      	cmp	r3, #2
 8011fc2:	bf28      	it	cs
 8011fc4:	2302      	movcs	r3, #2
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d201      	bcs.n	8011fd4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8011fd0:	2303      	movs	r3, #3
 8011fd2:	e001      	b.n	8011fd8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8011fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3730      	adds	r7, #48	@ 0x30
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}

08011fe0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	781a      	ldrb	r2, [r3, #0]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	785a      	ldrb	r2, [r3, #1]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	789a      	ldrb	r2, [r3, #2]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	78da      	ldrb	r2, [r3, #3]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	3304      	adds	r3, #4
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	2b02      	cmp	r3, #2
 8012012:	bf28      	it	cs
 8012014:	2302      	movcs	r3, #2
 8012016:	b2da      	uxtb	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	795a      	ldrb	r2, [r3, #5]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	799a      	ldrb	r2, [r3, #6]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	79da      	ldrb	r2, [r3, #7]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	7a1a      	ldrb	r2, [r3, #8]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	721a      	strb	r2, [r3, #8]
}
 801203c:	bf00      	nop
 801203e:	370c      	adds	r7, #12
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8012048:	b480      	push	{r7}
 801204a:	b087      	sub	sp, #28
 801204c:	af00      	add	r7, sp, #0
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8012054:	2300      	movs	r3, #0
 8012056:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	781a      	ldrb	r2, [r3, #0]
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	785a      	ldrb	r2, [r3, #1]
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	789a      	ldrb	r2, [r3, #2]
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	78da      	ldrb	r2, [r3, #3]
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	3304      	adds	r3, #4
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	461a      	mov	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	3305      	adds	r3, #5
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	021b      	lsls	r3, r3, #8
 8012088:	b29b      	uxth	r3, r3
 801208a:	4313      	orrs	r3, r2
 801208c:	b29a      	uxth	r2, r3
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	799a      	ldrb	r2, [r3, #6]
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	889b      	ldrh	r3, [r3, #4]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d009      	beq.n	80120b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80120a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80120aa:	d804      	bhi.n	80120b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80120b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120b4:	d901      	bls.n	80120ba <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80120b6:	2303      	movs	r3, #3
 80120b8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d136      	bne.n	8012132 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	78db      	ldrb	r3, [r3, #3]
 80120c8:	f003 0303 	and.w	r3, r3, #3
 80120cc:	2b02      	cmp	r3, #2
 80120ce:	d108      	bne.n	80120e2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	889b      	ldrh	r3, [r3, #4]
 80120d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120d8:	f240 8097 	bls.w	801220a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80120dc:	2303      	movs	r3, #3
 80120de:	75fb      	strb	r3, [r7, #23]
 80120e0:	e093      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	78db      	ldrb	r3, [r3, #3]
 80120e6:	f003 0303 	and.w	r3, r3, #3
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d107      	bne.n	80120fe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	889b      	ldrh	r3, [r3, #4]
 80120f2:	2b40      	cmp	r3, #64	@ 0x40
 80120f4:	f240 8089 	bls.w	801220a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80120f8:	2303      	movs	r3, #3
 80120fa:	75fb      	strb	r3, [r7, #23]
 80120fc:	e085      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	78db      	ldrb	r3, [r3, #3]
 8012102:	f003 0303 	and.w	r3, r3, #3
 8012106:	2b01      	cmp	r3, #1
 8012108:	d005      	beq.n	8012116 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	78db      	ldrb	r3, [r3, #3]
 801210e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8012112:	2b03      	cmp	r3, #3
 8012114:	d10a      	bne.n	801212c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	799b      	ldrb	r3, [r3, #6]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d003      	beq.n	8012126 <USBH_ParseEPDesc+0xde>
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	799b      	ldrb	r3, [r3, #6]
 8012122:	2b10      	cmp	r3, #16
 8012124:	d970      	bls.n	8012208 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8012126:	2303      	movs	r3, #3
 8012128:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801212a:	e06d      	b.n	8012208 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801212c:	2303      	movs	r3, #3
 801212e:	75fb      	strb	r3, [r7, #23]
 8012130:	e06b      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012138:	2b01      	cmp	r3, #1
 801213a:	d13c      	bne.n	80121b6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	78db      	ldrb	r3, [r3, #3]
 8012140:	f003 0303 	and.w	r3, r3, #3
 8012144:	2b02      	cmp	r3, #2
 8012146:	d005      	beq.n	8012154 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	78db      	ldrb	r3, [r3, #3]
 801214c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8012150:	2b00      	cmp	r3, #0
 8012152:	d106      	bne.n	8012162 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	889b      	ldrh	r3, [r3, #4]
 8012158:	2b40      	cmp	r3, #64	@ 0x40
 801215a:	d956      	bls.n	801220a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801215c:	2303      	movs	r3, #3
 801215e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8012160:	e053      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	78db      	ldrb	r3, [r3, #3]
 8012166:	f003 0303 	and.w	r3, r3, #3
 801216a:	2b01      	cmp	r3, #1
 801216c:	d10e      	bne.n	801218c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	799b      	ldrb	r3, [r3, #6]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d007      	beq.n	8012186 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801217a:	2b10      	cmp	r3, #16
 801217c:	d803      	bhi.n	8012186 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8012182:	2b40      	cmp	r3, #64	@ 0x40
 8012184:	d941      	bls.n	801220a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8012186:	2303      	movs	r3, #3
 8012188:	75fb      	strb	r3, [r7, #23]
 801218a:	e03e      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	78db      	ldrb	r3, [r3, #3]
 8012190:	f003 0303 	and.w	r3, r3, #3
 8012194:	2b03      	cmp	r3, #3
 8012196:	d10b      	bne.n	80121b0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	799b      	ldrb	r3, [r3, #6]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d004      	beq.n	80121aa <USBH_ParseEPDesc+0x162>
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	889b      	ldrh	r3, [r3, #4]
 80121a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80121a8:	d32f      	bcc.n	801220a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80121aa:	2303      	movs	r3, #3
 80121ac:	75fb      	strb	r3, [r7, #23]
 80121ae:	e02c      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80121b0:	2303      	movs	r3, #3
 80121b2:	75fb      	strb	r3, [r7, #23]
 80121b4:	e029      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80121bc:	2b02      	cmp	r3, #2
 80121be:	d120      	bne.n	8012202 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	78db      	ldrb	r3, [r3, #3]
 80121c4:	f003 0303 	and.w	r3, r3, #3
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d106      	bne.n	80121da <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	889b      	ldrh	r3, [r3, #4]
 80121d0:	2b08      	cmp	r3, #8
 80121d2:	d01a      	beq.n	801220a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80121d4:	2303      	movs	r3, #3
 80121d6:	75fb      	strb	r3, [r7, #23]
 80121d8:	e017      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	78db      	ldrb	r3, [r3, #3]
 80121de:	f003 0303 	and.w	r3, r3, #3
 80121e2:	2b03      	cmp	r3, #3
 80121e4:	d10a      	bne.n	80121fc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	799b      	ldrb	r3, [r3, #6]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d003      	beq.n	80121f6 <USBH_ParseEPDesc+0x1ae>
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	889b      	ldrh	r3, [r3, #4]
 80121f2:	2b08      	cmp	r3, #8
 80121f4:	d909      	bls.n	801220a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80121f6:	2303      	movs	r3, #3
 80121f8:	75fb      	strb	r3, [r7, #23]
 80121fa:	e006      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80121fc:	2303      	movs	r3, #3
 80121fe:	75fb      	strb	r3, [r7, #23]
 8012200:	e003      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8012202:	2303      	movs	r3, #3
 8012204:	75fb      	strb	r3, [r7, #23]
 8012206:	e000      	b.n	801220a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8012208:	bf00      	nop
  }

  return status;
 801220a:	7dfb      	ldrb	r3, [r7, #23]
}
 801220c:	4618      	mov	r0, r3
 801220e:	371c      	adds	r7, #28
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8012218:	b480      	push	{r7}
 801221a:	b087      	sub	sp, #28
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	4613      	mov	r3, r2
 8012224:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	3301      	adds	r3, #1
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	2b03      	cmp	r3, #3
 801222e:	d120      	bne.n	8012272 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	1e9a      	subs	r2, r3, #2
 8012236:	88fb      	ldrh	r3, [r7, #6]
 8012238:	4293      	cmp	r3, r2
 801223a:	bf28      	it	cs
 801223c:	4613      	movcs	r3, r2
 801223e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	3302      	adds	r3, #2
 8012244:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8012246:	2300      	movs	r3, #0
 8012248:	82fb      	strh	r3, [r7, #22]
 801224a:	e00b      	b.n	8012264 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801224c:	8afb      	ldrh	r3, [r7, #22]
 801224e:	68fa      	ldr	r2, [r7, #12]
 8012250:	4413      	add	r3, r2
 8012252:	781a      	ldrb	r2, [r3, #0]
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	701a      	strb	r2, [r3, #0]
      pdest++;
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	3301      	adds	r3, #1
 801225c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801225e:	8afb      	ldrh	r3, [r7, #22]
 8012260:	3302      	adds	r3, #2
 8012262:	82fb      	strh	r3, [r7, #22]
 8012264:	8afa      	ldrh	r2, [r7, #22]
 8012266:	8abb      	ldrh	r3, [r7, #20]
 8012268:	429a      	cmp	r2, r3
 801226a:	d3ef      	bcc.n	801224c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	2200      	movs	r2, #0
 8012270:	701a      	strb	r2, [r3, #0]
  }
}
 8012272:	bf00      	nop
 8012274:	371c      	adds	r7, #28
 8012276:	46bd      	mov	sp, r7
 8012278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227c:	4770      	bx	lr

0801227e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801227e:	b480      	push	{r7}
 8012280:	b085      	sub	sp, #20
 8012282:	af00      	add	r7, sp, #0
 8012284:	6078      	str	r0, [r7, #4]
 8012286:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	881b      	ldrh	r3, [r3, #0]
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	7812      	ldrb	r2, [r2, #0]
 8012290:	4413      	add	r3, r2
 8012292:	b29a      	uxth	r2, r3
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	4413      	add	r3, r2
 80122a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80122a4:	68fb      	ldr	r3, [r7, #12]
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3714      	adds	r7, #20
 80122aa:	46bd      	mov	sp, r7
 80122ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b0:	4770      	bx	lr

080122b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80122b2:	b580      	push	{r7, lr}
 80122b4:	b086      	sub	sp, #24
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	60f8      	str	r0, [r7, #12]
 80122ba:	60b9      	str	r1, [r7, #8]
 80122bc:	4613      	mov	r3, r2
 80122be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80122c0:	2301      	movs	r3, #1
 80122c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	789b      	ldrb	r3, [r3, #2]
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	d002      	beq.n	80122d2 <USBH_CtlReq+0x20>
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d01d      	beq.n	801230c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80122d0:	e043      	b.n	801235a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	68ba      	ldr	r2, [r7, #8]
 80122d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	88fa      	ldrh	r2, [r7, #6]
 80122dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2201      	movs	r2, #1
 80122e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2202      	movs	r2, #2
 80122e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80122ea:	2301      	movs	r3, #1
 80122ec:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	2203      	movs	r2, #3
 80122f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012302:	2200      	movs	r2, #0
 8012304:	4619      	mov	r1, r3
 8012306:	f000 fe57 	bl	8012fb8 <osMessagePut>
      break;
 801230a:	e026      	b.n	801235a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 801230c:	68f8      	ldr	r0, [r7, #12]
 801230e:	f000 f829 	bl	8012364 <USBH_HandleControl>
 8012312:	4603      	mov	r3, r0
 8012314:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8012316:	7dfb      	ldrb	r3, [r7, #23]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d002      	beq.n	8012322 <USBH_CtlReq+0x70>
 801231c:	7dfb      	ldrb	r3, [r7, #23]
 801231e:	2b03      	cmp	r3, #3
 8012320:	d106      	bne.n	8012330 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	2201      	movs	r2, #1
 8012326:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2200      	movs	r2, #0
 801232c:	761a      	strb	r2, [r3, #24]
 801232e:	e005      	b.n	801233c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8012330:	7dfb      	ldrb	r3, [r7, #23]
 8012332:	2b02      	cmp	r3, #2
 8012334:	d102      	bne.n	801233c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2201      	movs	r2, #1
 801233a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2203      	movs	r2, #3
 8012340:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012350:	2200      	movs	r2, #0
 8012352:	4619      	mov	r1, r3
 8012354:	f000 fe30 	bl	8012fb8 <osMessagePut>
      break;
 8012358:	bf00      	nop
  }
  return status;
 801235a:	7dfb      	ldrb	r3, [r7, #23]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3718      	adds	r7, #24
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b086      	sub	sp, #24
 8012368:	af02      	add	r7, sp, #8
 801236a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801236c:	2301      	movs	r3, #1
 801236e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012370:	2300      	movs	r3, #0
 8012372:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	7e1b      	ldrb	r3, [r3, #24]
 8012378:	3b01      	subs	r3, #1
 801237a:	2b0a      	cmp	r3, #10
 801237c:	f200 8229 	bhi.w	80127d2 <USBH_HandleControl+0x46e>
 8012380:	a201      	add	r2, pc, #4	@ (adr r2, 8012388 <USBH_HandleControl+0x24>)
 8012382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012386:	bf00      	nop
 8012388:	080123b5 	.word	0x080123b5
 801238c:	080123cf 	.word	0x080123cf
 8012390:	08012471 	.word	0x08012471
 8012394:	08012497 	.word	0x08012497
 8012398:	08012523 	.word	0x08012523
 801239c:	0801254d 	.word	0x0801254d
 80123a0:	0801260f 	.word	0x0801260f
 80123a4:	08012631 	.word	0x08012631
 80123a8:	080126c3 	.word	0x080126c3
 80123ac:	080126e9 	.word	0x080126e9
 80123b0:	0801277b 	.word	0x0801277b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f103 0110 	add.w	r1, r3, #16
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	795b      	ldrb	r3, [r3, #5]
 80123be:	461a      	mov	r2, r3
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f000 fa17 	bl	80127f4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2202      	movs	r2, #2
 80123ca:	761a      	strb	r2, [r3, #24]
      break;
 80123cc:	e20c      	b.n	80127e8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	795b      	ldrb	r3, [r3, #5]
 80123d2:	4619      	mov	r1, r3
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f014 ff5b 	bl	8027290 <USBH_LL_GetURBState>
 80123da:	4603      	mov	r3, r0
 80123dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80123de:	7bbb      	ldrb	r3, [r7, #14]
 80123e0:	2b01      	cmp	r3, #1
 80123e2:	d12c      	bne.n	801243e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	7c1b      	ldrb	r3, [r3, #16]
 80123e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80123ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	8adb      	ldrh	r3, [r3, #22]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d00a      	beq.n	801240c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80123f6:	7b7b      	ldrb	r3, [r7, #13]
 80123f8:	2b80      	cmp	r3, #128	@ 0x80
 80123fa:	d103      	bne.n	8012404 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2203      	movs	r2, #3
 8012400:	761a      	strb	r2, [r3, #24]
 8012402:	e00d      	b.n	8012420 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2205      	movs	r2, #5
 8012408:	761a      	strb	r2, [r3, #24]
 801240a:	e009      	b.n	8012420 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 801240c:	7b7b      	ldrb	r3, [r7, #13]
 801240e:	2b80      	cmp	r3, #128	@ 0x80
 8012410:	d103      	bne.n	801241a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2209      	movs	r2, #9
 8012416:	761a      	strb	r2, [r3, #24]
 8012418:	e002      	b.n	8012420 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2207      	movs	r2, #7
 801241e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2203      	movs	r2, #3
 8012424:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012434:	2200      	movs	r2, #0
 8012436:	4619      	mov	r1, r3
 8012438:	f000 fdbe 	bl	8012fb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801243c:	e1cb      	b.n	80127d6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801243e:	7bbb      	ldrb	r3, [r7, #14]
 8012440:	2b04      	cmp	r3, #4
 8012442:	d003      	beq.n	801244c <USBH_HandleControl+0xe8>
 8012444:	7bbb      	ldrb	r3, [r7, #14]
 8012446:	2b02      	cmp	r3, #2
 8012448:	f040 81c5 	bne.w	80127d6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	220b      	movs	r2, #11
 8012450:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2203      	movs	r2, #3
 8012456:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012466:	2200      	movs	r2, #0
 8012468:	4619      	mov	r1, r3
 801246a:	f000 fda5 	bl	8012fb8 <osMessagePut>
      break;
 801246e:	e1b2      	b.n	80127d6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012476:	b29a      	uxth	r2, r3
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6899      	ldr	r1, [r3, #8]
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	899a      	ldrh	r2, [r3, #12]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	791b      	ldrb	r3, [r3, #4]
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f000 f9f2 	bl	8012872 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2204      	movs	r2, #4
 8012492:	761a      	strb	r2, [r3, #24]
      break;
 8012494:	e1a8      	b.n	80127e8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	791b      	ldrb	r3, [r3, #4]
 801249a:	4619      	mov	r1, r3
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f014 fef7 	bl	8027290 <USBH_LL_GetURBState>
 80124a2:	4603      	mov	r3, r0
 80124a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80124a6:	7bbb      	ldrb	r3, [r7, #14]
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	d110      	bne.n	80124ce <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2209      	movs	r2, #9
 80124b0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2203      	movs	r2, #3
 80124b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80124c6:	2200      	movs	r2, #0
 80124c8:	4619      	mov	r1, r3
 80124ca:	f000 fd75 	bl	8012fb8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80124ce:	7bbb      	ldrb	r3, [r7, #14]
 80124d0:	2b05      	cmp	r3, #5
 80124d2:	d110      	bne.n	80124f6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80124d4:	2303      	movs	r3, #3
 80124d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2203      	movs	r2, #3
 80124dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80124ec:	2200      	movs	r2, #0
 80124ee:	4619      	mov	r1, r3
 80124f0:	f000 fd62 	bl	8012fb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80124f4:	e171      	b.n	80127da <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80124f6:	7bbb      	ldrb	r3, [r7, #14]
 80124f8:	2b04      	cmp	r3, #4
 80124fa:	f040 816e 	bne.w	80127da <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	220b      	movs	r2, #11
 8012502:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2203      	movs	r2, #3
 8012508:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012518:	2200      	movs	r2, #0
 801251a:	4619      	mov	r1, r3
 801251c:	f000 fd4c 	bl	8012fb8 <osMessagePut>
      break;
 8012520:	e15b      	b.n	80127da <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6899      	ldr	r1, [r3, #8]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	899a      	ldrh	r2, [r3, #12]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	795b      	ldrb	r3, [r3, #5]
 801252e:	2001      	movs	r0, #1
 8012530:	9000      	str	r0, [sp, #0]
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f000 f978 	bl	8012828 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801253e:	b29a      	uxth	r2, r3
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2206      	movs	r2, #6
 8012548:	761a      	strb	r2, [r3, #24]
      break;
 801254a:	e14d      	b.n	80127e8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	795b      	ldrb	r3, [r3, #5]
 8012550:	4619      	mov	r1, r3
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f014 fe9c 	bl	8027290 <USBH_LL_GetURBState>
 8012558:	4603      	mov	r3, r0
 801255a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801255c:	7bbb      	ldrb	r3, [r7, #14]
 801255e:	2b01      	cmp	r3, #1
 8012560:	d111      	bne.n	8012586 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2207      	movs	r2, #7
 8012566:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2203      	movs	r2, #3
 801256c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801257c:	2200      	movs	r2, #0
 801257e:	4619      	mov	r1, r3
 8012580:	f000 fd1a 	bl	8012fb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012584:	e12b      	b.n	80127de <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8012586:	7bbb      	ldrb	r3, [r7, #14]
 8012588:	2b05      	cmp	r3, #5
 801258a:	d113      	bne.n	80125b4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	220c      	movs	r2, #12
 8012590:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8012592:	2303      	movs	r3, #3
 8012594:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2203      	movs	r2, #3
 801259a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80125aa:	2200      	movs	r2, #0
 80125ac:	4619      	mov	r1, r3
 80125ae:	f000 fd03 	bl	8012fb8 <osMessagePut>
      break;
 80125b2:	e114      	b.n	80127de <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80125b4:	7bbb      	ldrb	r3, [r7, #14]
 80125b6:	2b02      	cmp	r3, #2
 80125b8:	d111      	bne.n	80125de <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2205      	movs	r2, #5
 80125be:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2203      	movs	r2, #3
 80125c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80125d4:	2200      	movs	r2, #0
 80125d6:	4619      	mov	r1, r3
 80125d8:	f000 fcee 	bl	8012fb8 <osMessagePut>
      break;
 80125dc:	e0ff      	b.n	80127de <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80125de:	7bbb      	ldrb	r3, [r7, #14]
 80125e0:	2b04      	cmp	r3, #4
 80125e2:	f040 80fc 	bne.w	80127de <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	220b      	movs	r2, #11
 80125ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80125ec:	2302      	movs	r3, #2
 80125ee:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2203      	movs	r2, #3
 80125f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012604:	2200      	movs	r2, #0
 8012606:	4619      	mov	r1, r3
 8012608:	f000 fcd6 	bl	8012fb8 <osMessagePut>
      break;
 801260c:	e0e7      	b.n	80127de <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	791b      	ldrb	r3, [r3, #4]
 8012612:	2200      	movs	r2, #0
 8012614:	2100      	movs	r1, #0
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 f92b 	bl	8012872 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012622:	b29a      	uxth	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2208      	movs	r2, #8
 801262c:	761a      	strb	r2, [r3, #24]

      break;
 801262e:	e0db      	b.n	80127e8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	791b      	ldrb	r3, [r3, #4]
 8012634:	4619      	mov	r1, r3
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f014 fe2a 	bl	8027290 <USBH_LL_GetURBState>
 801263c:	4603      	mov	r3, r0
 801263e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012640:	7bbb      	ldrb	r3, [r7, #14]
 8012642:	2b01      	cmp	r3, #1
 8012644:	d113      	bne.n	801266e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	220d      	movs	r2, #13
 801264a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801264c:	2300      	movs	r3, #0
 801264e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2203      	movs	r2, #3
 8012654:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012664:	2200      	movs	r2, #0
 8012666:	4619      	mov	r1, r3
 8012668:	f000 fca6 	bl	8012fb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801266c:	e0b9      	b.n	80127e2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 801266e:	7bbb      	ldrb	r3, [r7, #14]
 8012670:	2b04      	cmp	r3, #4
 8012672:	d111      	bne.n	8012698 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	220b      	movs	r2, #11
 8012678:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2203      	movs	r2, #3
 801267e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801268e:	2200      	movs	r2, #0
 8012690:	4619      	mov	r1, r3
 8012692:	f000 fc91 	bl	8012fb8 <osMessagePut>
      break;
 8012696:	e0a4      	b.n	80127e2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8012698:	7bbb      	ldrb	r3, [r7, #14]
 801269a:	2b05      	cmp	r3, #5
 801269c:	f040 80a1 	bne.w	80127e2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80126a0:	2303      	movs	r3, #3
 80126a2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2203      	movs	r2, #3
 80126a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80126b8:	2200      	movs	r2, #0
 80126ba:	4619      	mov	r1, r3
 80126bc:	f000 fc7c 	bl	8012fb8 <osMessagePut>
      break;
 80126c0:	e08f      	b.n	80127e2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	795b      	ldrb	r3, [r3, #5]
 80126c6:	2201      	movs	r2, #1
 80126c8:	9200      	str	r2, [sp, #0]
 80126ca:	2200      	movs	r2, #0
 80126cc:	2100      	movs	r1, #0
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 f8aa 	bl	8012828 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80126da:	b29a      	uxth	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	220a      	movs	r2, #10
 80126e4:	761a      	strb	r2, [r3, #24]
      break;
 80126e6:	e07f      	b.n	80127e8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	795b      	ldrb	r3, [r3, #5]
 80126ec:	4619      	mov	r1, r3
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f014 fdce 	bl	8027290 <USBH_LL_GetURBState>
 80126f4:	4603      	mov	r3, r0
 80126f6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80126f8:	7bbb      	ldrb	r3, [r7, #14]
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	d113      	bne.n	8012726 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80126fe:	2300      	movs	r3, #0
 8012700:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	220d      	movs	r2, #13
 8012706:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2203      	movs	r2, #3
 801270c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801271c:	2200      	movs	r2, #0
 801271e:	4619      	mov	r1, r3
 8012720:	f000 fc4a 	bl	8012fb8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012724:	e05f      	b.n	80127e6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8012726:	7bbb      	ldrb	r3, [r7, #14]
 8012728:	2b02      	cmp	r3, #2
 801272a:	d111      	bne.n	8012750 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2209      	movs	r2, #9
 8012730:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2203      	movs	r2, #3
 8012736:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012746:	2200      	movs	r2, #0
 8012748:	4619      	mov	r1, r3
 801274a:	f000 fc35 	bl	8012fb8 <osMessagePut>
      break;
 801274e:	e04a      	b.n	80127e6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8012750:	7bbb      	ldrb	r3, [r7, #14]
 8012752:	2b04      	cmp	r3, #4
 8012754:	d147      	bne.n	80127e6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	220b      	movs	r2, #11
 801275a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2203      	movs	r2, #3
 8012760:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012770:	2200      	movs	r2, #0
 8012772:	4619      	mov	r1, r3
 8012774:	f000 fc20 	bl	8012fb8 <osMessagePut>
      break;
 8012778:	e035      	b.n	80127e6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	7e5b      	ldrb	r3, [r3, #25]
 801277e:	3301      	adds	r3, #1
 8012780:	b2da      	uxtb	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	765a      	strb	r2, [r3, #25]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	7e5b      	ldrb	r3, [r3, #25]
 801278a:	2b02      	cmp	r3, #2
 801278c:	d806      	bhi.n	801279c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2201      	movs	r2, #1
 8012792:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2201      	movs	r2, #1
 8012798:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801279a:	e025      	b.n	80127e8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80127a2:	2106      	movs	r1, #6
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2200      	movs	r2, #0
 80127ac:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	795b      	ldrb	r3, [r3, #5]
 80127b2:	4619      	mov	r1, r3
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f000 f90d 	bl	80129d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	791b      	ldrb	r3, [r3, #4]
 80127be:	4619      	mov	r1, r3
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f000 f907 	bl	80129d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2200      	movs	r2, #0
 80127ca:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80127cc:	2302      	movs	r3, #2
 80127ce:	73fb      	strb	r3, [r7, #15]
      break;
 80127d0:	e00a      	b.n	80127e8 <USBH_HandleControl+0x484>

    default:
      break;
 80127d2:	bf00      	nop
 80127d4:	e008      	b.n	80127e8 <USBH_HandleControl+0x484>
      break;
 80127d6:	bf00      	nop
 80127d8:	e006      	b.n	80127e8 <USBH_HandleControl+0x484>
      break;
 80127da:	bf00      	nop
 80127dc:	e004      	b.n	80127e8 <USBH_HandleControl+0x484>
      break;
 80127de:	bf00      	nop
 80127e0:	e002      	b.n	80127e8 <USBH_HandleControl+0x484>
      break;
 80127e2:	bf00      	nop
 80127e4:	e000      	b.n	80127e8 <USBH_HandleControl+0x484>
      break;
 80127e6:	bf00      	nop
  }

  return status;
 80127e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop

080127f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b088      	sub	sp, #32
 80127f8:	af04      	add	r7, sp, #16
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	60b9      	str	r1, [r7, #8]
 80127fe:	4613      	mov	r3, r2
 8012800:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012802:	79f9      	ldrb	r1, [r7, #7]
 8012804:	2300      	movs	r3, #0
 8012806:	9303      	str	r3, [sp, #12]
 8012808:	2308      	movs	r3, #8
 801280a:	9302      	str	r3, [sp, #8]
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	9301      	str	r3, [sp, #4]
 8012810:	2300      	movs	r3, #0
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	2300      	movs	r3, #0
 8012816:	2200      	movs	r2, #0
 8012818:	68f8      	ldr	r0, [r7, #12]
 801281a:	f014 fd08 	bl	802722e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801281e:	2300      	movs	r3, #0
}
 8012820:	4618      	mov	r0, r3
 8012822:	3710      	adds	r7, #16
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b088      	sub	sp, #32
 801282c:	af04      	add	r7, sp, #16
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	60b9      	str	r1, [r7, #8]
 8012832:	4611      	mov	r1, r2
 8012834:	461a      	mov	r2, r3
 8012836:	460b      	mov	r3, r1
 8012838:	80fb      	strh	r3, [r7, #6]
 801283a:	4613      	mov	r3, r2
 801283c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012844:	2b00      	cmp	r3, #0
 8012846:	d001      	beq.n	801284c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8012848:	2300      	movs	r3, #0
 801284a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801284c:	7979      	ldrb	r1, [r7, #5]
 801284e:	7e3b      	ldrb	r3, [r7, #24]
 8012850:	9303      	str	r3, [sp, #12]
 8012852:	88fb      	ldrh	r3, [r7, #6]
 8012854:	9302      	str	r3, [sp, #8]
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	9301      	str	r3, [sp, #4]
 801285a:	2301      	movs	r3, #1
 801285c:	9300      	str	r3, [sp, #0]
 801285e:	2300      	movs	r3, #0
 8012860:	2200      	movs	r2, #0
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	f014 fce3 	bl	802722e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b088      	sub	sp, #32
 8012876:	af04      	add	r7, sp, #16
 8012878:	60f8      	str	r0, [r7, #12]
 801287a:	60b9      	str	r1, [r7, #8]
 801287c:	4611      	mov	r1, r2
 801287e:	461a      	mov	r2, r3
 8012880:	460b      	mov	r3, r1
 8012882:	80fb      	strh	r3, [r7, #6]
 8012884:	4613      	mov	r3, r2
 8012886:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012888:	7979      	ldrb	r1, [r7, #5]
 801288a:	2300      	movs	r3, #0
 801288c:	9303      	str	r3, [sp, #12]
 801288e:	88fb      	ldrh	r3, [r7, #6]
 8012890:	9302      	str	r3, [sp, #8]
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	9301      	str	r3, [sp, #4]
 8012896:	2301      	movs	r3, #1
 8012898:	9300      	str	r3, [sp, #0]
 801289a:	2300      	movs	r3, #0
 801289c:	2201      	movs	r2, #1
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f014 fcc5 	bl	802722e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80128a4:	2300      	movs	r3, #0

}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3710      	adds	r7, #16
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}

080128ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80128ae:	b580      	push	{r7, lr}
 80128b0:	b088      	sub	sp, #32
 80128b2:	af04      	add	r7, sp, #16
 80128b4:	60f8      	str	r0, [r7, #12]
 80128b6:	60b9      	str	r1, [r7, #8]
 80128b8:	4611      	mov	r1, r2
 80128ba:	461a      	mov	r2, r3
 80128bc:	460b      	mov	r3, r1
 80128be:	80fb      	strh	r3, [r7, #6]
 80128c0:	4613      	mov	r3, r2
 80128c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d001      	beq.n	80128d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80128ce:	2300      	movs	r3, #0
 80128d0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80128d2:	7979      	ldrb	r1, [r7, #5]
 80128d4:	7e3b      	ldrb	r3, [r7, #24]
 80128d6:	9303      	str	r3, [sp, #12]
 80128d8:	88fb      	ldrh	r3, [r7, #6]
 80128da:	9302      	str	r3, [sp, #8]
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	9301      	str	r3, [sp, #4]
 80128e0:	2301      	movs	r3, #1
 80128e2:	9300      	str	r3, [sp, #0]
 80128e4:	2302      	movs	r3, #2
 80128e6:	2200      	movs	r2, #0
 80128e8:	68f8      	ldr	r0, [r7, #12]
 80128ea:	f014 fca0 	bl	802722e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80128ee:	2300      	movs	r3, #0
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3710      	adds	r7, #16
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b088      	sub	sp, #32
 80128fc:	af04      	add	r7, sp, #16
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	4611      	mov	r1, r2
 8012904:	461a      	mov	r2, r3
 8012906:	460b      	mov	r3, r1
 8012908:	80fb      	strh	r3, [r7, #6]
 801290a:	4613      	mov	r3, r2
 801290c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801290e:	7979      	ldrb	r1, [r7, #5]
 8012910:	2300      	movs	r3, #0
 8012912:	9303      	str	r3, [sp, #12]
 8012914:	88fb      	ldrh	r3, [r7, #6]
 8012916:	9302      	str	r3, [sp, #8]
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	9301      	str	r3, [sp, #4]
 801291c:	2301      	movs	r3, #1
 801291e:	9300      	str	r3, [sp, #0]
 8012920:	2302      	movs	r3, #2
 8012922:	2201      	movs	r2, #1
 8012924:	68f8      	ldr	r0, [r7, #12]
 8012926:	f014 fc82 	bl	802722e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801292a:	2300      	movs	r3, #0
}
 801292c:	4618      	mov	r0, r3
 801292e:	3710      	adds	r7, #16
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b086      	sub	sp, #24
 8012938:	af04      	add	r7, sp, #16
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	4608      	mov	r0, r1
 801293e:	4611      	mov	r1, r2
 8012940:	461a      	mov	r2, r3
 8012942:	4603      	mov	r3, r0
 8012944:	70fb      	strb	r3, [r7, #3]
 8012946:	460b      	mov	r3, r1
 8012948:	70bb      	strb	r3, [r7, #2]
 801294a:	4613      	mov	r3, r2
 801294c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801294e:	7878      	ldrb	r0, [r7, #1]
 8012950:	78ba      	ldrb	r2, [r7, #2]
 8012952:	78f9      	ldrb	r1, [r7, #3]
 8012954:	8b3b      	ldrh	r3, [r7, #24]
 8012956:	9302      	str	r3, [sp, #8]
 8012958:	7d3b      	ldrb	r3, [r7, #20]
 801295a:	9301      	str	r3, [sp, #4]
 801295c:	7c3b      	ldrb	r3, [r7, #16]
 801295e:	9300      	str	r3, [sp, #0]
 8012960:	4603      	mov	r3, r0
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f014 fc15 	bl	8027192 <USBH_LL_OpenPipe>

  return USBH_OK;
 8012968:	2300      	movs	r3, #0
}
 801296a:	4618      	mov	r0, r3
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b082      	sub	sp, #8
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
 801297a:	460b      	mov	r3, r1
 801297c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801297e:	78fb      	ldrb	r3, [r7, #3]
 8012980:	4619      	mov	r1, r3
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f014 fc34 	bl	80271f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8012988:	2300      	movs	r3, #0
}
 801298a:	4618      	mov	r0, r3
 801298c:	3708      	adds	r7, #8
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}

08012992 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8012992:	b580      	push	{r7, lr}
 8012994:	b084      	sub	sp, #16
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
 801299a:	460b      	mov	r3, r1
 801299c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f000 f836 	bl	8012a10 <USBH_GetFreePipe>
 80129a4:	4603      	mov	r3, r0
 80129a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80129a8:	89fb      	ldrh	r3, [r7, #14]
 80129aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129ae:	4293      	cmp	r3, r2
 80129b0:	d00a      	beq.n	80129c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80129b2:	78fa      	ldrb	r2, [r7, #3]
 80129b4:	89fb      	ldrh	r3, [r7, #14]
 80129b6:	f003 030f 	and.w	r3, r3, #15
 80129ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80129be:	6879      	ldr	r1, [r7, #4]
 80129c0:	33e0      	adds	r3, #224	@ 0xe0
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	440b      	add	r3, r1
 80129c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80129c8:	89fb      	ldrh	r3, [r7, #14]
 80129ca:	b2db      	uxtb	r3, r3
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3710      	adds	r7, #16
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80129d4:	b480      	push	{r7}
 80129d6:	b083      	sub	sp, #12
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	460b      	mov	r3, r1
 80129de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80129e0:	78fb      	ldrb	r3, [r7, #3]
 80129e2:	2b0f      	cmp	r3, #15
 80129e4:	d80d      	bhi.n	8012a02 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80129e6:	78fb      	ldrb	r3, [r7, #3]
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	33e0      	adds	r3, #224	@ 0xe0
 80129ec:	009b      	lsls	r3, r3, #2
 80129ee:	4413      	add	r3, r2
 80129f0:	685a      	ldr	r2, [r3, #4]
 80129f2:	78fb      	ldrb	r3, [r7, #3]
 80129f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80129f8:	6879      	ldr	r1, [r7, #4]
 80129fa:	33e0      	adds	r3, #224	@ 0xe0
 80129fc:	009b      	lsls	r3, r3, #2
 80129fe:	440b      	add	r3, r1
 8012a00:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	370c      	adds	r7, #12
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr

08012a10 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8012a10:	b480      	push	{r7}
 8012a12:	b085      	sub	sp, #20
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	73fb      	strb	r3, [r7, #15]
 8012a20:	e00f      	b.n	8012a42 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8012a22:	7bfb      	ldrb	r3, [r7, #15]
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	33e0      	adds	r3, #224	@ 0xe0
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	4413      	add	r3, r2
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d102      	bne.n	8012a3c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8012a36:	7bfb      	ldrb	r3, [r7, #15]
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	e007      	b.n	8012a4c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8012a3c:	7bfb      	ldrb	r3, [r7, #15]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	73fb      	strb	r3, [r7, #15]
 8012a42:	7bfb      	ldrb	r3, [r7, #15]
 8012a44:	2b0f      	cmp	r3, #15
 8012a46:	d9ec      	bls.n	8012a22 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8012a48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3714      	adds	r7, #20
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr

08012a58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b087      	sub	sp, #28
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	60f8      	str	r0, [r7, #12]
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	4613      	mov	r3, r2
 8012a64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012a66:	2301      	movs	r3, #1
 8012a68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8012aec <FATFS_LinkDriverEx+0x94>)
 8012a70:	7a5b      	ldrb	r3, [r3, #9]
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d131      	bne.n	8012adc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012a78:	4b1c      	ldr	r3, [pc, #112]	@ (8012aec <FATFS_LinkDriverEx+0x94>)
 8012a7a:	7a5b      	ldrb	r3, [r3, #9]
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	461a      	mov	r2, r3
 8012a80:	4b1a      	ldr	r3, [pc, #104]	@ (8012aec <FATFS_LinkDriverEx+0x94>)
 8012a82:	2100      	movs	r1, #0
 8012a84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012a86:	4b19      	ldr	r3, [pc, #100]	@ (8012aec <FATFS_LinkDriverEx+0x94>)
 8012a88:	7a5b      	ldrb	r3, [r3, #9]
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	4a17      	ldr	r2, [pc, #92]	@ (8012aec <FATFS_LinkDriverEx+0x94>)
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	4413      	add	r3, r2
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012a96:	4b15      	ldr	r3, [pc, #84]	@ (8012aec <FATFS_LinkDriverEx+0x94>)
 8012a98:	7a5b      	ldrb	r3, [r3, #9]
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	4b13      	ldr	r3, [pc, #76]	@ (8012aec <FATFS_LinkDriverEx+0x94>)
 8012aa0:	4413      	add	r3, r2
 8012aa2:	79fa      	ldrb	r2, [r7, #7]
 8012aa4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012aa6:	4b11      	ldr	r3, [pc, #68]	@ (8012aec <FATFS_LinkDriverEx+0x94>)
 8012aa8:	7a5b      	ldrb	r3, [r3, #9]
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	b2d1      	uxtb	r1, r2
 8012ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8012aec <FATFS_LinkDriverEx+0x94>)
 8012ab2:	7251      	strb	r1, [r2, #9]
 8012ab4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012ab6:	7dbb      	ldrb	r3, [r7, #22]
 8012ab8:	3330      	adds	r3, #48	@ 0x30
 8012aba:	b2da      	uxtb	r2, r3
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	223a      	movs	r2, #58	@ 0x3a
 8012ac6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	3302      	adds	r3, #2
 8012acc:	222f      	movs	r2, #47	@ 0x2f
 8012ace:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	3303      	adds	r3, #3
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	371c      	adds	r7, #28
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae8:	4770      	bx	lr
 8012aea:	bf00      	nop
 8012aec:	20005800 	.word	0x20005800

08012af0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012afa:	2200      	movs	r2, #0
 8012afc:	6839      	ldr	r1, [r7, #0]
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f7ff ffaa 	bl	8012a58 <FATFS_LinkDriverEx>
 8012b04:	4603      	mov	r3, r0
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	3708      	adds	r7, #8
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bd80      	pop	{r7, pc}

08012b0e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012b0e:	b480      	push	{r7}
 8012b10:	b085      	sub	sp, #20
 8012b12:	af00      	add	r7, sp, #0
 8012b14:	4603      	mov	r3, r0
 8012b16:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b20:	2b84      	cmp	r3, #132	@ 0x84
 8012b22:	d005      	beq.n	8012b30 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012b24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	3303      	adds	r3, #3
 8012b2e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012b30:	68fb      	ldr	r3, [r7, #12]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3714      	adds	r7, #20
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr

08012b3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012b3e:	b480      	push	{r7}
 8012b40:	b083      	sub	sp, #12
 8012b42:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b44:	f3ef 8305 	mrs	r3, IPSR
 8012b48:	607b      	str	r3, [r7, #4]
  return(result);
 8012b4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	bf14      	ite	ne
 8012b50:	2301      	movne	r3, #1
 8012b52:	2300      	moveq	r3, #0
 8012b54:	b2db      	uxtb	r3, r3
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	370c      	adds	r7, #12
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr

08012b62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012b62:	b580      	push	{r7, lr}
 8012b64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012b66:	f001 fee5 	bl	8014934 <vTaskStartScheduler>
  
  return osOK;
 8012b6a:	2300      	movs	r3, #0
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012b74:	f002 fb5a 	bl	801522c <xTaskGetSchedulerState>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b01      	cmp	r3, #1
 8012b7c:	d101      	bne.n	8012b82 <osKernelRunning+0x12>
    return 0;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	e000      	b.n	8012b84 <osKernelRunning+0x14>
  else
    return 1;
 8012b82:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012b8c:	f7ff ffd7 	bl	8012b3e <inHandlerMode>
 8012b90:	4603      	mov	r3, r0
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d003      	beq.n	8012b9e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8012b96:	f001 fff9 	bl	8014b8c <xTaskGetTickCountFromISR>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	e002      	b.n	8012ba4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8012b9e:	f001 ffe5 	bl	8014b6c <xTaskGetTickCount>
 8012ba2:	4603      	mov	r3, r0
  }
}
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	bd80      	pop	{r7, pc}

08012ba8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012baa:	b089      	sub	sp, #36	@ 0x24
 8012bac:	af04      	add	r7, sp, #16
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	695b      	ldr	r3, [r3, #20]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d020      	beq.n	8012bfc <osThreadCreate+0x54>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	699b      	ldr	r3, [r3, #24]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d01c      	beq.n	8012bfc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	685c      	ldr	r4, [r3, #4]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	691e      	ldr	r6, [r3, #16]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7ff ff9a 	bl	8012b0e <makeFreeRtosPriority>
 8012bda:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	695b      	ldr	r3, [r3, #20]
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012be4:	9202      	str	r2, [sp, #8]
 8012be6:	9301      	str	r3, [sp, #4]
 8012be8:	9100      	str	r1, [sp, #0]
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	4632      	mov	r2, r6
 8012bee:	4629      	mov	r1, r5
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f001 fc13 	bl	801441c <xTaskCreateStatic>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	60fb      	str	r3, [r7, #12]
 8012bfa:	e01c      	b.n	8012c36 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	685c      	ldr	r4, [r3, #4]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012c08:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7ff ff7c 	bl	8012b0e <makeFreeRtosPriority>
 8012c16:	4602      	mov	r2, r0
 8012c18:	f107 030c 	add.w	r3, r7, #12
 8012c1c:	9301      	str	r3, [sp, #4]
 8012c1e:	9200      	str	r2, [sp, #0]
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	4632      	mov	r2, r6
 8012c24:	4629      	mov	r1, r5
 8012c26:	4620      	mov	r0, r4
 8012c28:	f001 fc5e 	bl	80144e8 <xTaskCreate>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b01      	cmp	r3, #1
 8012c30:	d001      	beq.n	8012c36 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012c32:	2300      	movs	r3, #0
 8012c34:	e000      	b.n	8012c38 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012c36:	68fb      	ldr	r3, [r7, #12]
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3714      	adds	r7, #20
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c40 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f001 fda9 	bl	80147a0 <vTaskDelete>
  return osOK;
 8012c4e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b084      	sub	sp, #16
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d001      	beq.n	8012c6e <osDelay+0x16>
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	e000      	b.n	8012c70 <osDelay+0x18>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	4618      	mov	r0, r3
 8012c72:	f001 fe27 	bl	80148c4 <vTaskDelay>
  
  return osOK;
 8012c76:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	685b      	ldr	r3, [r3, #4]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d007      	beq.n	8012ca0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	4619      	mov	r1, r3
 8012c96:	2001      	movs	r0, #1
 8012c98:	f000 fca7 	bl	80135ea <xQueueCreateMutexStatic>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	e003      	b.n	8012ca8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8012ca0:	2001      	movs	r0, #1
 8012ca2:	f000 fc8a 	bl	80135ba <xQueueCreateMutex>
 8012ca6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b084      	sub	sp, #16
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012cba:	2300      	movs	r3, #0
 8012cbc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d101      	bne.n	8012cc8 <osMutexWait+0x18>
    return osErrorParameter;
 8012cc4:	2380      	movs	r3, #128	@ 0x80
 8012cc6:	e03a      	b.n	8012d3e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cd2:	d103      	bne.n	8012cdc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8012cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012cd8:	60fb      	str	r3, [r7, #12]
 8012cda:	e009      	b.n	8012cf0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d006      	beq.n	8012cf0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d101      	bne.n	8012cf0 <osMutexWait+0x40>
      ticks = 1;
 8012cec:	2301      	movs	r3, #1
 8012cee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012cf0:	f7ff ff25 	bl	8012b3e <inHandlerMode>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d017      	beq.n	8012d2a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012cfa:	f107 0308 	add.w	r3, r7, #8
 8012cfe:	461a      	mov	r2, r3
 8012d00:	2100      	movs	r1, #0
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f001 f948 	bl	8013f98 <xQueueReceiveFromISR>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b01      	cmp	r3, #1
 8012d0c:	d001      	beq.n	8012d12 <osMutexWait+0x62>
      return osErrorOS;
 8012d0e:	23ff      	movs	r3, #255	@ 0xff
 8012d10:	e015      	b.n	8012d3e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d011      	beq.n	8012d3c <osMutexWait+0x8c>
 8012d18:	4b0b      	ldr	r3, [pc, #44]	@ (8012d48 <osMutexWait+0x98>)
 8012d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d1e:	601a      	str	r2, [r3, #0]
 8012d20:	f3bf 8f4f 	dsb	sy
 8012d24:	f3bf 8f6f 	isb	sy
 8012d28:	e008      	b.n	8012d3c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8012d2a:	68f9      	ldr	r1, [r7, #12]
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f001 f81b 	bl	8013d68 <xQueueSemaphoreTake>
 8012d32:	4603      	mov	r3, r0
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d001      	beq.n	8012d3c <osMutexWait+0x8c>
    return osErrorOS;
 8012d38:	23ff      	movs	r3, #255	@ 0xff
 8012d3a:	e000      	b.n	8012d3e <osMutexWait+0x8e>
  }
  
  return osOK;
 8012d3c:	2300      	movs	r3, #0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3710      	adds	r7, #16
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	e000ed04 	.word	0xe000ed04

08012d4c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b084      	sub	sp, #16
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012d54:	2300      	movs	r3, #0
 8012d56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8012d5c:	f7ff feef 	bl	8012b3e <inHandlerMode>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d016      	beq.n	8012d94 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012d66:	f107 0308 	add.w	r3, r7, #8
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f000 fe7a 	bl	8013a66 <xQueueGiveFromISR>
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d001      	beq.n	8012d7c <osMutexRelease+0x30>
      return osErrorOS;
 8012d78:	23ff      	movs	r3, #255	@ 0xff
 8012d7a:	e017      	b.n	8012dac <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d013      	beq.n	8012daa <osMutexRelease+0x5e>
 8012d82:	4b0c      	ldr	r3, [pc, #48]	@ (8012db4 <osMutexRelease+0x68>)
 8012d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d88:	601a      	str	r2, [r3, #0]
 8012d8a:	f3bf 8f4f 	dsb	sy
 8012d8e:	f3bf 8f6f 	isb	sy
 8012d92:	e00a      	b.n	8012daa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012d94:	2300      	movs	r3, #0
 8012d96:	2200      	movs	r2, #0
 8012d98:	2100      	movs	r1, #0
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f000 fcb6 	bl	801370c <xQueueGenericSend>
 8012da0:	4603      	mov	r3, r0
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d001      	beq.n	8012daa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8012da6:	23ff      	movs	r3, #255	@ 0xff
 8012da8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8012daa:	68fb      	ldr	r3, [r7, #12]
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3710      	adds	r7, #16
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	e000ed04 	.word	0xe000ed04

08012db8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b086      	sub	sp, #24
 8012dbc:	af02      	add	r7, sp, #8
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d016      	beq.n	8012df8 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	2b01      	cmp	r3, #1
 8012dce:	d10a      	bne.n	8012de6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	685b      	ldr	r3, [r3, #4]
 8012dd4:	2203      	movs	r2, #3
 8012dd6:	9200      	str	r2, [sp, #0]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	2100      	movs	r1, #0
 8012ddc:	2001      	movs	r0, #1
 8012dde:	f000 fae9 	bl	80133b4 <xQueueGenericCreateStatic>
 8012de2:	4603      	mov	r3, r0
 8012de4:	e023      	b.n	8012e2e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8012de6:	6838      	ldr	r0, [r7, #0]
 8012de8:	6839      	ldr	r1, [r7, #0]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	685b      	ldr	r3, [r3, #4]
 8012dee:	461a      	mov	r2, r3
 8012df0:	f000 fc16 	bl	8013620 <xQueueCreateCountingSemaphoreStatic>
 8012df4:	4603      	mov	r3, r0
 8012df6:	e01a      	b.n	8012e2e <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	d110      	bne.n	8012e20 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8012dfe:	2203      	movs	r2, #3
 8012e00:	2100      	movs	r1, #0
 8012e02:	2001      	movs	r0, #1
 8012e04:	f000 fb5d 	bl	80134c2 <xQueueGenericCreate>
 8012e08:	60f8      	str	r0, [r7, #12]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d005      	beq.n	8012e1c <osSemaphoreCreate+0x64>
 8012e10:	2300      	movs	r3, #0
 8012e12:	2200      	movs	r2, #0
 8012e14:	2100      	movs	r1, #0
 8012e16:	68f8      	ldr	r0, [r7, #12]
 8012e18:	f000 fc78 	bl	801370c <xQueueGenericSend>
      return sema;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	e006      	b.n	8012e2e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	683a      	ldr	r2, [r7, #0]
 8012e24:	4611      	mov	r1, r2
 8012e26:	4618      	mov	r0, r3
 8012e28:	f000 fc37 	bl	801369a <xQueueCreateCountingSemaphore>
 8012e2c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3710      	adds	r7, #16
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
	...

08012e38 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012e42:	2300      	movs	r3, #0
 8012e44:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d101      	bne.n	8012e50 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012e4c:	2380      	movs	r3, #128	@ 0x80
 8012e4e:	e03a      	b.n	8012ec6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012e50:	2300      	movs	r3, #0
 8012e52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e5a:	d103      	bne.n	8012e64 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e60:	60fb      	str	r3, [r7, #12]
 8012e62:	e009      	b.n	8012e78 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d006      	beq.n	8012e78 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d101      	bne.n	8012e78 <osSemaphoreWait+0x40>
      ticks = 1;
 8012e74:	2301      	movs	r3, #1
 8012e76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012e78:	f7ff fe61 	bl	8012b3e <inHandlerMode>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d017      	beq.n	8012eb2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012e82:	f107 0308 	add.w	r3, r7, #8
 8012e86:	461a      	mov	r2, r3
 8012e88:	2100      	movs	r1, #0
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f001 f884 	bl	8013f98 <xQueueReceiveFromISR>
 8012e90:	4603      	mov	r3, r0
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d001      	beq.n	8012e9a <osSemaphoreWait+0x62>
      return osErrorOS;
 8012e96:	23ff      	movs	r3, #255	@ 0xff
 8012e98:	e015      	b.n	8012ec6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d011      	beq.n	8012ec4 <osSemaphoreWait+0x8c>
 8012ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8012ed0 <osSemaphoreWait+0x98>)
 8012ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ea6:	601a      	str	r2, [r3, #0]
 8012ea8:	f3bf 8f4f 	dsb	sy
 8012eac:	f3bf 8f6f 	isb	sy
 8012eb0:	e008      	b.n	8012ec4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012eb2:	68f9      	ldr	r1, [r7, #12]
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 ff57 	bl	8013d68 <xQueueSemaphoreTake>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2b01      	cmp	r3, #1
 8012ebe:	d001      	beq.n	8012ec4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012ec0:	23ff      	movs	r3, #255	@ 0xff
 8012ec2:	e000      	b.n	8012ec6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012ec4:	2300      	movs	r3, #0
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3710      	adds	r7, #16
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	e000ed04 	.word	0xe000ed04

08012ed4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012edc:	2300      	movs	r3, #0
 8012ede:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012ee4:	f7ff fe2b 	bl	8012b3e <inHandlerMode>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d016      	beq.n	8012f1c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012eee:	f107 0308 	add.w	r3, r7, #8
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 fdb6 	bl	8013a66 <xQueueGiveFromISR>
 8012efa:	4603      	mov	r3, r0
 8012efc:	2b01      	cmp	r3, #1
 8012efe:	d001      	beq.n	8012f04 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012f00:	23ff      	movs	r3, #255	@ 0xff
 8012f02:	e017      	b.n	8012f34 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d013      	beq.n	8012f32 <osSemaphoreRelease+0x5e>
 8012f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8012f3c <osSemaphoreRelease+0x68>)
 8012f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f10:	601a      	str	r2, [r3, #0]
 8012f12:	f3bf 8f4f 	dsb	sy
 8012f16:	f3bf 8f6f 	isb	sy
 8012f1a:	e00a      	b.n	8012f32 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	2200      	movs	r2, #0
 8012f20:	2100      	movs	r1, #0
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f000 fbf2 	bl	801370c <xQueueGenericSend>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d001      	beq.n	8012f32 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012f2e:	23ff      	movs	r3, #255	@ 0xff
 8012f30:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012f32:	68fb      	ldr	r3, [r7, #12]
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3710      	adds	r7, #16
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	e000ed04 	.word	0xe000ed04

08012f40 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012f48:	f7ff fdf9 	bl	8012b3e <inHandlerMode>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d001      	beq.n	8012f56 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012f52:	2382      	movs	r3, #130	@ 0x82
 8012f54:	e003      	b.n	8012f5e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f001 f8e8 	bl	801412c <vQueueDelete>

  return osOK; 
 8012f5c:	2300      	movs	r3, #0
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3708      	adds	r7, #8
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8012f66:	b590      	push	{r4, r7, lr}
 8012f68:	b085      	sub	sp, #20
 8012f6a:	af02      	add	r7, sp, #8
 8012f6c:	6078      	str	r0, [r7, #4]
 8012f6e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	689b      	ldr	r3, [r3, #8]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d011      	beq.n	8012f9c <osMessageCreate+0x36>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	68db      	ldr	r3, [r3, #12]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d00d      	beq.n	8012f9c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	6818      	ldr	r0, [r3, #0]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6859      	ldr	r1, [r3, #4]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	689a      	ldr	r2, [r3, #8]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	68db      	ldr	r3, [r3, #12]
 8012f90:	2400      	movs	r4, #0
 8012f92:	9400      	str	r4, [sp, #0]
 8012f94:	f000 fa0e 	bl	80133b4 <xQueueGenericCreateStatic>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	e008      	b.n	8012fae <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	6818      	ldr	r0, [r3, #0]
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	4619      	mov	r1, r3
 8012fa8:	f000 fa8b 	bl	80134c2 <xQueueGenericCreate>
 8012fac:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	370c      	adds	r7, #12
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd90      	pop	{r4, r7, pc}
	...

08012fb8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b086      	sub	sp, #24
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	60b9      	str	r1, [r7, #8]
 8012fc2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d101      	bne.n	8012fd6 <osMessagePut+0x1e>
    ticks = 1;
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012fd6:	f7ff fdb2 	bl	8012b3e <inHandlerMode>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d018      	beq.n	8013012 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012fe0:	f107 0210 	add.w	r2, r7, #16
 8012fe4:	f107 0108 	add.w	r1, r7, #8
 8012fe8:	2300      	movs	r3, #0
 8012fea:	68f8      	ldr	r0, [r7, #12]
 8012fec:	f000 fc98 	bl	8013920 <xQueueGenericSendFromISR>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d001      	beq.n	8012ffa <osMessagePut+0x42>
      return osErrorOS;
 8012ff6:	23ff      	movs	r3, #255	@ 0xff
 8012ff8:	e018      	b.n	801302c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d014      	beq.n	801302a <osMessagePut+0x72>
 8013000:	4b0c      	ldr	r3, [pc, #48]	@ (8013034 <osMessagePut+0x7c>)
 8013002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013006:	601a      	str	r2, [r3, #0]
 8013008:	f3bf 8f4f 	dsb	sy
 801300c:	f3bf 8f6f 	isb	sy
 8013010:	e00b      	b.n	801302a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8013012:	f107 0108 	add.w	r1, r7, #8
 8013016:	2300      	movs	r3, #0
 8013018:	697a      	ldr	r2, [r7, #20]
 801301a:	68f8      	ldr	r0, [r7, #12]
 801301c:	f000 fb76 	bl	801370c <xQueueGenericSend>
 8013020:	4603      	mov	r3, r0
 8013022:	2b01      	cmp	r3, #1
 8013024:	d001      	beq.n	801302a <osMessagePut+0x72>
      return osErrorOS;
 8013026:	23ff      	movs	r3, #255	@ 0xff
 8013028:	e000      	b.n	801302c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801302a:	2300      	movs	r3, #0
}
 801302c:	4618      	mov	r0, r3
 801302e:	3718      	adds	r7, #24
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}
 8013034:	e000ed04 	.word	0xe000ed04

08013038 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8013038:	b590      	push	{r4, r7, lr}
 801303a:	b08b      	sub	sp, #44	@ 0x2c
 801303c:	af00      	add	r7, sp, #0
 801303e:	60f8      	str	r0, [r7, #12]
 8013040:	60b9      	str	r1, [r7, #8]
 8013042:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8013048:	2300      	movs	r3, #0
 801304a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d10a      	bne.n	8013068 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8013052:	2380      	movs	r3, #128	@ 0x80
 8013054:	617b      	str	r3, [r7, #20]
    return event;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	461c      	mov	r4, r3
 801305a:	f107 0314 	add.w	r3, r7, #20
 801305e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013062:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013066:	e054      	b.n	8013112 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8013068:	2300      	movs	r3, #0
 801306a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801306c:	2300      	movs	r3, #0
 801306e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013076:	d103      	bne.n	8013080 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8013078:	f04f 33ff 	mov.w	r3, #4294967295
 801307c:	627b      	str	r3, [r7, #36]	@ 0x24
 801307e:	e009      	b.n	8013094 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d006      	beq.n	8013094 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 801308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801308c:	2b00      	cmp	r3, #0
 801308e:	d101      	bne.n	8013094 <osMessageGet+0x5c>
      ticks = 1;
 8013090:	2301      	movs	r3, #1
 8013092:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8013094:	f7ff fd53 	bl	8012b3e <inHandlerMode>
 8013098:	4603      	mov	r3, r0
 801309a:	2b00      	cmp	r3, #0
 801309c:	d01c      	beq.n	80130d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801309e:	f107 0220 	add.w	r2, r7, #32
 80130a2:	f107 0314 	add.w	r3, r7, #20
 80130a6:	3304      	adds	r3, #4
 80130a8:	4619      	mov	r1, r3
 80130aa:	68b8      	ldr	r0, [r7, #8]
 80130ac:	f000 ff74 	bl	8013f98 <xQueueReceiveFromISR>
 80130b0:	4603      	mov	r3, r0
 80130b2:	2b01      	cmp	r3, #1
 80130b4:	d102      	bne.n	80130bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80130b6:	2310      	movs	r3, #16
 80130b8:	617b      	str	r3, [r7, #20]
 80130ba:	e001      	b.n	80130c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80130bc:	2300      	movs	r3, #0
 80130be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80130c0:	6a3b      	ldr	r3, [r7, #32]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d01d      	beq.n	8013102 <osMessageGet+0xca>
 80130c6:	4b15      	ldr	r3, [pc, #84]	@ (801311c <osMessageGet+0xe4>)
 80130c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130cc:	601a      	str	r2, [r3, #0]
 80130ce:	f3bf 8f4f 	dsb	sy
 80130d2:	f3bf 8f6f 	isb	sy
 80130d6:	e014      	b.n	8013102 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80130d8:	f107 0314 	add.w	r3, r7, #20
 80130dc:	3304      	adds	r3, #4
 80130de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130e0:	4619      	mov	r1, r3
 80130e2:	68b8      	ldr	r0, [r7, #8]
 80130e4:	f000 fd58 	bl	8013b98 <xQueueReceive>
 80130e8:	4603      	mov	r3, r0
 80130ea:	2b01      	cmp	r3, #1
 80130ec:	d102      	bne.n	80130f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80130ee:	2310      	movs	r3, #16
 80130f0:	617b      	str	r3, [r7, #20]
 80130f2:	e006      	b.n	8013102 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80130f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d101      	bne.n	80130fe <osMessageGet+0xc6>
 80130fa:	2300      	movs	r3, #0
 80130fc:	e000      	b.n	8013100 <osMessageGet+0xc8>
 80130fe:	2340      	movs	r3, #64	@ 0x40
 8013100:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	461c      	mov	r4, r3
 8013106:	f107 0314 	add.w	r3, r7, #20
 801310a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801310e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8013112:	68f8      	ldr	r0, [r7, #12]
 8013114:	372c      	adds	r7, #44	@ 0x2c
 8013116:	46bd      	mov	sp, r7
 8013118:	bd90      	pop	{r4, r7, pc}
 801311a:	bf00      	nop
 801311c:	e000ed04 	.word	0xe000ed04

08013120 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8013128:	f7ff fd09 	bl	8012b3e <inHandlerMode>
 801312c:	4603      	mov	r3, r0
 801312e:	2b00      	cmp	r3, #0
 8013130:	d004      	beq.n	801313c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f000 ffd9 	bl	80140ea <uxQueueMessagesWaitingFromISR>
 8013138:	4603      	mov	r3, r0
 801313a:	e003      	b.n	8013144 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 801313c:	6878      	ldr	r0, [r7, #4]
 801313e:	f000 ffb3 	bl	80140a8 <uxQueueMessagesWaiting>
 8013142:	4603      	mov	r3, r0
  }
}
 8013144:	4618      	mov	r0, r3
 8013146:	3708      	adds	r7, #8
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8013154:	f7ff fcf3 	bl	8012b3e <inHandlerMode>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d001      	beq.n	8013162 <osMessageDelete+0x16>
    return osErrorISR;
 801315e:	2382      	movs	r3, #130	@ 0x82
 8013160:	e003      	b.n	801316a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f000 ffe2 	bl	801412c <vQueueDelete>

  return osOK; 
 8013168:	2300      	movs	r3, #0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3708      	adds	r7, #8
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013172:	b480      	push	{r7}
 8013174:	b083      	sub	sp, #12
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f103 0208 	add.w	r2, r3, #8
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f04f 32ff 	mov.w	r2, #4294967295
 801318a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f103 0208 	add.w	r2, r3, #8
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	f103 0208 	add.w	r2, r3, #8
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2200      	movs	r2, #0
 80131a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80131a6:	bf00      	nop
 80131a8:	370c      	adds	r7, #12
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr

080131b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80131b2:	b480      	push	{r7}
 80131b4:	b083      	sub	sp, #12
 80131b6:	af00      	add	r7, sp, #0
 80131b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80131c0:	bf00      	nop
 80131c2:	370c      	adds	r7, #12
 80131c4:	46bd      	mov	sp, r7
 80131c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ca:	4770      	bx	lr

080131cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80131cc:	b480      	push	{r7}
 80131ce:	b085      	sub	sp, #20
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	68fa      	ldr	r2, [r7, #12]
 80131e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	689a      	ldr	r2, [r3, #8]
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	689b      	ldr	r3, [r3, #8]
 80131ee:	683a      	ldr	r2, [r7, #0]
 80131f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	683a      	ldr	r2, [r7, #0]
 80131f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	1c5a      	adds	r2, r3, #1
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	601a      	str	r2, [r3, #0]
}
 8013208:	bf00      	nop
 801320a:	3714      	adds	r7, #20
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr

08013214 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013214:	b480      	push	{r7}
 8013216:	b085      	sub	sp, #20
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801322a:	d103      	bne.n	8013234 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	691b      	ldr	r3, [r3, #16]
 8013230:	60fb      	str	r3, [r7, #12]
 8013232:	e00c      	b.n	801324e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	3308      	adds	r3, #8
 8013238:	60fb      	str	r3, [r7, #12]
 801323a:	e002      	b.n	8013242 <vListInsert+0x2e>
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	60fb      	str	r3, [r7, #12]
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	685b      	ldr	r3, [r3, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	68ba      	ldr	r2, [r7, #8]
 801324a:	429a      	cmp	r2, r3
 801324c:	d2f6      	bcs.n	801323c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	685a      	ldr	r2, [r3, #4]
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	683a      	ldr	r2, [r7, #0]
 801325c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	68fa      	ldr	r2, [r7, #12]
 8013262:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	683a      	ldr	r2, [r7, #0]
 8013268:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	687a      	ldr	r2, [r7, #4]
 801326e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	1c5a      	adds	r2, r3, #1
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	601a      	str	r2, [r3, #0]
}
 801327a:	bf00      	nop
 801327c:	3714      	adds	r7, #20
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr

08013286 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013286:	b480      	push	{r7}
 8013288:	b085      	sub	sp, #20
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	691b      	ldr	r3, [r3, #16]
 8013292:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	6892      	ldr	r2, [r2, #8]
 801329c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	689b      	ldr	r3, [r3, #8]
 80132a2:	687a      	ldr	r2, [r7, #4]
 80132a4:	6852      	ldr	r2, [r2, #4]
 80132a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	685b      	ldr	r3, [r3, #4]
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d103      	bne.n	80132ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	689a      	ldr	r2, [r3, #8]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2200      	movs	r2, #0
 80132be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	1e5a      	subs	r2, r3, #1
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	681b      	ldr	r3, [r3, #0]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3714      	adds	r7, #20
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr
	...

080132dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d10d      	bne.n	801330c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80132f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132f4:	b672      	cpsid	i
 80132f6:	f383 8811 	msr	BASEPRI, r3
 80132fa:	f3bf 8f6f 	isb	sy
 80132fe:	f3bf 8f4f 	dsb	sy
 8013302:	b662      	cpsie	i
 8013304:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013306:	bf00      	nop
 8013308:	bf00      	nop
 801330a:	e7fd      	b.n	8013308 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801330c:	f002 fade 	bl	80158cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	681a      	ldr	r2, [r3, #0]
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013318:	68f9      	ldr	r1, [r7, #12]
 801331a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801331c:	fb01 f303 	mul.w	r3, r1, r3
 8013320:	441a      	add	r2, r3
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	2200      	movs	r2, #0
 801332a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	681a      	ldr	r2, [r3, #0]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681a      	ldr	r2, [r3, #0]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801333c:	3b01      	subs	r3, #1
 801333e:	68f9      	ldr	r1, [r7, #12]
 8013340:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013342:	fb01 f303 	mul.w	r3, r1, r3
 8013346:	441a      	add	r2, r3
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	22ff      	movs	r2, #255	@ 0xff
 8013350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	22ff      	movs	r2, #255	@ 0xff
 8013358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d114      	bne.n	801338c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	691b      	ldr	r3, [r3, #16]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d01a      	beq.n	80133a0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	3310      	adds	r3, #16
 801336e:	4618      	mov	r0, r3
 8013370:	f001 fd8c 	bl	8014e8c <xTaskRemoveFromEventList>
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d012      	beq.n	80133a0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801337a:	4b0d      	ldr	r3, [pc, #52]	@ (80133b0 <xQueueGenericReset+0xd4>)
 801337c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013380:	601a      	str	r2, [r3, #0]
 8013382:	f3bf 8f4f 	dsb	sy
 8013386:	f3bf 8f6f 	isb	sy
 801338a:	e009      	b.n	80133a0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	3310      	adds	r3, #16
 8013390:	4618      	mov	r0, r3
 8013392:	f7ff feee 	bl	8013172 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	3324      	adds	r3, #36	@ 0x24
 801339a:	4618      	mov	r0, r3
 801339c:	f7ff fee9 	bl	8013172 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80133a0:	f002 faca 	bl	8015938 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80133a4:	2301      	movs	r3, #1
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3710      	adds	r7, #16
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop
 80133b0:	e000ed04 	.word	0xe000ed04

080133b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b08e      	sub	sp, #56	@ 0x38
 80133b8:	af02      	add	r7, sp, #8
 80133ba:	60f8      	str	r0, [r7, #12]
 80133bc:	60b9      	str	r1, [r7, #8]
 80133be:	607a      	str	r2, [r7, #4]
 80133c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d10d      	bne.n	80133e4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80133c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133cc:	b672      	cpsid	i
 80133ce:	f383 8811 	msr	BASEPRI, r3
 80133d2:	f3bf 8f6f 	isb	sy
 80133d6:	f3bf 8f4f 	dsb	sy
 80133da:	b662      	cpsie	i
 80133dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80133de:	bf00      	nop
 80133e0:	bf00      	nop
 80133e2:	e7fd      	b.n	80133e0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d10d      	bne.n	8013406 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80133ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ee:	b672      	cpsid	i
 80133f0:	f383 8811 	msr	BASEPRI, r3
 80133f4:	f3bf 8f6f 	isb	sy
 80133f8:	f3bf 8f4f 	dsb	sy
 80133fc:	b662      	cpsie	i
 80133fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013400:	bf00      	nop
 8013402:	bf00      	nop
 8013404:	e7fd      	b.n	8013402 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d002      	beq.n	8013412 <xQueueGenericCreateStatic+0x5e>
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d001      	beq.n	8013416 <xQueueGenericCreateStatic+0x62>
 8013412:	2301      	movs	r3, #1
 8013414:	e000      	b.n	8013418 <xQueueGenericCreateStatic+0x64>
 8013416:	2300      	movs	r3, #0
 8013418:	2b00      	cmp	r3, #0
 801341a:	d10d      	bne.n	8013438 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 801341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013420:	b672      	cpsid	i
 8013422:	f383 8811 	msr	BASEPRI, r3
 8013426:	f3bf 8f6f 	isb	sy
 801342a:	f3bf 8f4f 	dsb	sy
 801342e:	b662      	cpsie	i
 8013430:	623b      	str	r3, [r7, #32]
}
 8013432:	bf00      	nop
 8013434:	bf00      	nop
 8013436:	e7fd      	b.n	8013434 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d102      	bne.n	8013444 <xQueueGenericCreateStatic+0x90>
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d101      	bne.n	8013448 <xQueueGenericCreateStatic+0x94>
 8013444:	2301      	movs	r3, #1
 8013446:	e000      	b.n	801344a <xQueueGenericCreateStatic+0x96>
 8013448:	2300      	movs	r3, #0
 801344a:	2b00      	cmp	r3, #0
 801344c:	d10d      	bne.n	801346a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 801344e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013452:	b672      	cpsid	i
 8013454:	f383 8811 	msr	BASEPRI, r3
 8013458:	f3bf 8f6f 	isb	sy
 801345c:	f3bf 8f4f 	dsb	sy
 8013460:	b662      	cpsie	i
 8013462:	61fb      	str	r3, [r7, #28]
}
 8013464:	bf00      	nop
 8013466:	bf00      	nop
 8013468:	e7fd      	b.n	8013466 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801346a:	2348      	movs	r3, #72	@ 0x48
 801346c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	2b48      	cmp	r3, #72	@ 0x48
 8013472:	d00d      	beq.n	8013490 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8013474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013478:	b672      	cpsid	i
 801347a:	f383 8811 	msr	BASEPRI, r3
 801347e:	f3bf 8f6f 	isb	sy
 8013482:	f3bf 8f4f 	dsb	sy
 8013486:	b662      	cpsie	i
 8013488:	61bb      	str	r3, [r7, #24]
}
 801348a:	bf00      	nop
 801348c:	bf00      	nop
 801348e:	e7fd      	b.n	801348c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013490:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013498:	2b00      	cmp	r3, #0
 801349a:	d00d      	beq.n	80134b8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801349c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801349e:	2201      	movs	r2, #1
 80134a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80134a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80134a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	4613      	mov	r3, r2
 80134ae:	687a      	ldr	r2, [r7, #4]
 80134b0:	68b9      	ldr	r1, [r7, #8]
 80134b2:	68f8      	ldr	r0, [r7, #12]
 80134b4:	f000 f848 	bl	8013548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80134b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80134ba:	4618      	mov	r0, r3
 80134bc:	3730      	adds	r7, #48	@ 0x30
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd80      	pop	{r7, pc}

080134c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80134c2:	b580      	push	{r7, lr}
 80134c4:	b08a      	sub	sp, #40	@ 0x28
 80134c6:	af02      	add	r7, sp, #8
 80134c8:	60f8      	str	r0, [r7, #12]
 80134ca:	60b9      	str	r1, [r7, #8]
 80134cc:	4613      	mov	r3, r2
 80134ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d10d      	bne.n	80134f2 <xQueueGenericCreate+0x30>
	__asm volatile
 80134d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134da:	b672      	cpsid	i
 80134dc:	f383 8811 	msr	BASEPRI, r3
 80134e0:	f3bf 8f6f 	isb	sy
 80134e4:	f3bf 8f4f 	dsb	sy
 80134e8:	b662      	cpsie	i
 80134ea:	613b      	str	r3, [r7, #16]
}
 80134ec:	bf00      	nop
 80134ee:	bf00      	nop
 80134f0:	e7fd      	b.n	80134ee <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d102      	bne.n	80134fe <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80134f8:	2300      	movs	r3, #0
 80134fa:	61fb      	str	r3, [r7, #28]
 80134fc:	e004      	b.n	8013508 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	68ba      	ldr	r2, [r7, #8]
 8013502:	fb02 f303 	mul.w	r3, r2, r3
 8013506:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013508:	69fb      	ldr	r3, [r7, #28]
 801350a:	3348      	adds	r3, #72	@ 0x48
 801350c:	4618      	mov	r0, r3
 801350e:	f002 fb0b 	bl	8015b28 <pvPortMalloc>
 8013512:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d011      	beq.n	801353e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801351a:	69bb      	ldr	r3, [r7, #24]
 801351c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	3348      	adds	r3, #72	@ 0x48
 8013522:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013524:	69bb      	ldr	r3, [r7, #24]
 8013526:	2200      	movs	r2, #0
 8013528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801352c:	79fa      	ldrb	r2, [r7, #7]
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	9300      	str	r3, [sp, #0]
 8013532:	4613      	mov	r3, r2
 8013534:	697a      	ldr	r2, [r7, #20]
 8013536:	68b9      	ldr	r1, [r7, #8]
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f000 f805 	bl	8013548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801353e:	69bb      	ldr	r3, [r7, #24]
	}
 8013540:	4618      	mov	r0, r3
 8013542:	3720      	adds	r7, #32
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}

08013548 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b084      	sub	sp, #16
 801354c:	af00      	add	r7, sp, #0
 801354e:	60f8      	str	r0, [r7, #12]
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	607a      	str	r2, [r7, #4]
 8013554:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d103      	bne.n	8013564 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801355c:	69bb      	ldr	r3, [r7, #24]
 801355e:	69ba      	ldr	r2, [r7, #24]
 8013560:	601a      	str	r2, [r3, #0]
 8013562:	e002      	b.n	801356a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013564:	69bb      	ldr	r3, [r7, #24]
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801356a:	69bb      	ldr	r3, [r7, #24]
 801356c:	68fa      	ldr	r2, [r7, #12]
 801356e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013570:	69bb      	ldr	r3, [r7, #24]
 8013572:	68ba      	ldr	r2, [r7, #8]
 8013574:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013576:	2101      	movs	r1, #1
 8013578:	69b8      	ldr	r0, [r7, #24]
 801357a:	f7ff feaf 	bl	80132dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801357e:	bf00      	nop
 8013580:	3710      	adds	r7, #16
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}

08013586 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8013586:	b580      	push	{r7, lr}
 8013588:	b082      	sub	sp, #8
 801358a:	af00      	add	r7, sp, #0
 801358c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d00e      	beq.n	80135b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2200      	movs	r2, #0
 8013598:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2200      	movs	r2, #0
 801359e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	2200      	movs	r2, #0
 80135a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80135a6:	2300      	movs	r3, #0
 80135a8:	2200      	movs	r2, #0
 80135aa:	2100      	movs	r1, #0
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f000 f8ad 	bl	801370c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80135b2:	bf00      	nop
 80135b4:	3708      	adds	r7, #8
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}

080135ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80135ba:	b580      	push	{r7, lr}
 80135bc:	b086      	sub	sp, #24
 80135be:	af00      	add	r7, sp, #0
 80135c0:	4603      	mov	r3, r0
 80135c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80135c4:	2301      	movs	r3, #1
 80135c6:	617b      	str	r3, [r7, #20]
 80135c8:	2300      	movs	r3, #0
 80135ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80135cc:	79fb      	ldrb	r3, [r7, #7]
 80135ce:	461a      	mov	r2, r3
 80135d0:	6939      	ldr	r1, [r7, #16]
 80135d2:	6978      	ldr	r0, [r7, #20]
 80135d4:	f7ff ff75 	bl	80134c2 <xQueueGenericCreate>
 80135d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f7ff ffd3 	bl	8013586 <prvInitialiseMutex>

		return xNewQueue;
 80135e0:	68fb      	ldr	r3, [r7, #12]
	}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3718      	adds	r7, #24
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}

080135ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80135ea:	b580      	push	{r7, lr}
 80135ec:	b088      	sub	sp, #32
 80135ee:	af02      	add	r7, sp, #8
 80135f0:	4603      	mov	r3, r0
 80135f2:	6039      	str	r1, [r7, #0]
 80135f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80135f6:	2301      	movs	r3, #1
 80135f8:	617b      	str	r3, [r7, #20]
 80135fa:	2300      	movs	r3, #0
 80135fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80135fe:	79fb      	ldrb	r3, [r7, #7]
 8013600:	9300      	str	r3, [sp, #0]
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	2200      	movs	r2, #0
 8013606:	6939      	ldr	r1, [r7, #16]
 8013608:	6978      	ldr	r0, [r7, #20]
 801360a:	f7ff fed3 	bl	80133b4 <xQueueGenericCreateStatic>
 801360e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013610:	68f8      	ldr	r0, [r7, #12]
 8013612:	f7ff ffb8 	bl	8013586 <prvInitialiseMutex>

		return xNewQueue;
 8013616:	68fb      	ldr	r3, [r7, #12]
	}
 8013618:	4618      	mov	r0, r3
 801361a:	3718      	adds	r7, #24
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013620:	b580      	push	{r7, lr}
 8013622:	b08a      	sub	sp, #40	@ 0x28
 8013624:	af02      	add	r7, sp, #8
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d10d      	bne.n	801364e <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8013632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013636:	b672      	cpsid	i
 8013638:	f383 8811 	msr	BASEPRI, r3
 801363c:	f3bf 8f6f 	isb	sy
 8013640:	f3bf 8f4f 	dsb	sy
 8013644:	b662      	cpsie	i
 8013646:	61bb      	str	r3, [r7, #24]
}
 8013648:	bf00      	nop
 801364a:	bf00      	nop
 801364c:	e7fd      	b.n	801364a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 801364e:	68ba      	ldr	r2, [r7, #8]
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	429a      	cmp	r2, r3
 8013654:	d90d      	bls.n	8013672 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8013656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801365a:	b672      	cpsid	i
 801365c:	f383 8811 	msr	BASEPRI, r3
 8013660:	f3bf 8f6f 	isb	sy
 8013664:	f3bf 8f4f 	dsb	sy
 8013668:	b662      	cpsie	i
 801366a:	617b      	str	r3, [r7, #20]
}
 801366c:	bf00      	nop
 801366e:	bf00      	nop
 8013670:	e7fd      	b.n	801366e <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013672:	2302      	movs	r3, #2
 8013674:	9300      	str	r3, [sp, #0]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2200      	movs	r2, #0
 801367a:	2100      	movs	r1, #0
 801367c:	68f8      	ldr	r0, [r7, #12]
 801367e:	f7ff fe99 	bl	80133b4 <xQueueGenericCreateStatic>
 8013682:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8013684:	69fb      	ldr	r3, [r7, #28]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d002      	beq.n	8013690 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801368a:	69fb      	ldr	r3, [r7, #28]
 801368c:	68ba      	ldr	r2, [r7, #8]
 801368e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013690:	69fb      	ldr	r3, [r7, #28]
	}
 8013692:	4618      	mov	r0, r3
 8013694:	3720      	adds	r7, #32
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}

0801369a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801369a:	b580      	push	{r7, lr}
 801369c:	b086      	sub	sp, #24
 801369e:	af00      	add	r7, sp, #0
 80136a0:	6078      	str	r0, [r7, #4]
 80136a2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d10d      	bne.n	80136c6 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80136aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136ae:	b672      	cpsid	i
 80136b0:	f383 8811 	msr	BASEPRI, r3
 80136b4:	f3bf 8f6f 	isb	sy
 80136b8:	f3bf 8f4f 	dsb	sy
 80136bc:	b662      	cpsie	i
 80136be:	613b      	str	r3, [r7, #16]
}
 80136c0:	bf00      	nop
 80136c2:	bf00      	nop
 80136c4:	e7fd      	b.n	80136c2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80136c6:	683a      	ldr	r2, [r7, #0]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d90d      	bls.n	80136ea <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80136ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136d2:	b672      	cpsid	i
 80136d4:	f383 8811 	msr	BASEPRI, r3
 80136d8:	f3bf 8f6f 	isb	sy
 80136dc:	f3bf 8f4f 	dsb	sy
 80136e0:	b662      	cpsie	i
 80136e2:	60fb      	str	r3, [r7, #12]
}
 80136e4:	bf00      	nop
 80136e6:	bf00      	nop
 80136e8:	e7fd      	b.n	80136e6 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80136ea:	2202      	movs	r2, #2
 80136ec:	2100      	movs	r1, #0
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7ff fee7 	bl	80134c2 <xQueueGenericCreate>
 80136f4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d002      	beq.n	8013702 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	683a      	ldr	r2, [r7, #0]
 8013700:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013702:	697b      	ldr	r3, [r7, #20]
	}
 8013704:	4618      	mov	r0, r3
 8013706:	3718      	adds	r7, #24
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}

0801370c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b08e      	sub	sp, #56	@ 0x38
 8013710:	af00      	add	r7, sp, #0
 8013712:	60f8      	str	r0, [r7, #12]
 8013714:	60b9      	str	r1, [r7, #8]
 8013716:	607a      	str	r2, [r7, #4]
 8013718:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801371a:	2300      	movs	r3, #0
 801371c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013724:	2b00      	cmp	r3, #0
 8013726:	d10d      	bne.n	8013744 <xQueueGenericSend+0x38>
	__asm volatile
 8013728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801372c:	b672      	cpsid	i
 801372e:	f383 8811 	msr	BASEPRI, r3
 8013732:	f3bf 8f6f 	isb	sy
 8013736:	f3bf 8f4f 	dsb	sy
 801373a:	b662      	cpsie	i
 801373c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801373e:	bf00      	nop
 8013740:	bf00      	nop
 8013742:	e7fd      	b.n	8013740 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d103      	bne.n	8013752 <xQueueGenericSend+0x46>
 801374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801374e:	2b00      	cmp	r3, #0
 8013750:	d101      	bne.n	8013756 <xQueueGenericSend+0x4a>
 8013752:	2301      	movs	r3, #1
 8013754:	e000      	b.n	8013758 <xQueueGenericSend+0x4c>
 8013756:	2300      	movs	r3, #0
 8013758:	2b00      	cmp	r3, #0
 801375a:	d10d      	bne.n	8013778 <xQueueGenericSend+0x6c>
	__asm volatile
 801375c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013760:	b672      	cpsid	i
 8013762:	f383 8811 	msr	BASEPRI, r3
 8013766:	f3bf 8f6f 	isb	sy
 801376a:	f3bf 8f4f 	dsb	sy
 801376e:	b662      	cpsie	i
 8013770:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013772:	bf00      	nop
 8013774:	bf00      	nop
 8013776:	e7fd      	b.n	8013774 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	2b02      	cmp	r3, #2
 801377c:	d103      	bne.n	8013786 <xQueueGenericSend+0x7a>
 801377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013782:	2b01      	cmp	r3, #1
 8013784:	d101      	bne.n	801378a <xQueueGenericSend+0x7e>
 8013786:	2301      	movs	r3, #1
 8013788:	e000      	b.n	801378c <xQueueGenericSend+0x80>
 801378a:	2300      	movs	r3, #0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d10d      	bne.n	80137ac <xQueueGenericSend+0xa0>
	__asm volatile
 8013790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013794:	b672      	cpsid	i
 8013796:	f383 8811 	msr	BASEPRI, r3
 801379a:	f3bf 8f6f 	isb	sy
 801379e:	f3bf 8f4f 	dsb	sy
 80137a2:	b662      	cpsie	i
 80137a4:	623b      	str	r3, [r7, #32]
}
 80137a6:	bf00      	nop
 80137a8:	bf00      	nop
 80137aa:	e7fd      	b.n	80137a8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137ac:	f001 fd3e 	bl	801522c <xTaskGetSchedulerState>
 80137b0:	4603      	mov	r3, r0
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d102      	bne.n	80137bc <xQueueGenericSend+0xb0>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d101      	bne.n	80137c0 <xQueueGenericSend+0xb4>
 80137bc:	2301      	movs	r3, #1
 80137be:	e000      	b.n	80137c2 <xQueueGenericSend+0xb6>
 80137c0:	2300      	movs	r3, #0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d10d      	bne.n	80137e2 <xQueueGenericSend+0xd6>
	__asm volatile
 80137c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ca:	b672      	cpsid	i
 80137cc:	f383 8811 	msr	BASEPRI, r3
 80137d0:	f3bf 8f6f 	isb	sy
 80137d4:	f3bf 8f4f 	dsb	sy
 80137d8:	b662      	cpsie	i
 80137da:	61fb      	str	r3, [r7, #28]
}
 80137dc:	bf00      	nop
 80137de:	bf00      	nop
 80137e0:	e7fd      	b.n	80137de <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80137e2:	f002 f873 	bl	80158cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80137e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80137ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d302      	bcc.n	80137f8 <xQueueGenericSend+0xec>
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	2b02      	cmp	r3, #2
 80137f6:	d129      	bne.n	801384c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80137f8:	683a      	ldr	r2, [r7, #0]
 80137fa:	68b9      	ldr	r1, [r7, #8]
 80137fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80137fe:	f000 fcd3 	bl	80141a8 <prvCopyDataToQueue>
 8013802:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013808:	2b00      	cmp	r3, #0
 801380a:	d010      	beq.n	801382e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801380e:	3324      	adds	r3, #36	@ 0x24
 8013810:	4618      	mov	r0, r3
 8013812:	f001 fb3b 	bl	8014e8c <xTaskRemoveFromEventList>
 8013816:	4603      	mov	r3, r0
 8013818:	2b00      	cmp	r3, #0
 801381a:	d013      	beq.n	8013844 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801381c:	4b3f      	ldr	r3, [pc, #252]	@ (801391c <xQueueGenericSend+0x210>)
 801381e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013822:	601a      	str	r2, [r3, #0]
 8013824:	f3bf 8f4f 	dsb	sy
 8013828:	f3bf 8f6f 	isb	sy
 801382c:	e00a      	b.n	8013844 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801382e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013830:	2b00      	cmp	r3, #0
 8013832:	d007      	beq.n	8013844 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013834:	4b39      	ldr	r3, [pc, #228]	@ (801391c <xQueueGenericSend+0x210>)
 8013836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801383a:	601a      	str	r2, [r3, #0]
 801383c:	f3bf 8f4f 	dsb	sy
 8013840:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013844:	f002 f878 	bl	8015938 <vPortExitCritical>
				return pdPASS;
 8013848:	2301      	movs	r3, #1
 801384a:	e063      	b.n	8013914 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d103      	bne.n	801385a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013852:	f002 f871 	bl	8015938 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013856:	2300      	movs	r3, #0
 8013858:	e05c      	b.n	8013914 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801385a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801385c:	2b00      	cmp	r3, #0
 801385e:	d106      	bne.n	801386e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013860:	f107 0314 	add.w	r3, r7, #20
 8013864:	4618      	mov	r0, r3
 8013866:	f001 fb77 	bl	8014f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801386a:	2301      	movs	r3, #1
 801386c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801386e:	f002 f863 	bl	8015938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013872:	f001 f8cd 	bl	8014a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013876:	f002 f829 	bl	80158cc <vPortEnterCritical>
 801387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801387c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013880:	b25b      	sxtb	r3, r3
 8013882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013886:	d103      	bne.n	8013890 <xQueueGenericSend+0x184>
 8013888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801388a:	2200      	movs	r2, #0
 801388c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013892:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013896:	b25b      	sxtb	r3, r3
 8013898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801389c:	d103      	bne.n	80138a6 <xQueueGenericSend+0x19a>
 801389e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138a0:	2200      	movs	r2, #0
 80138a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80138a6:	f002 f847 	bl	8015938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80138aa:	1d3a      	adds	r2, r7, #4
 80138ac:	f107 0314 	add.w	r3, r7, #20
 80138b0:	4611      	mov	r1, r2
 80138b2:	4618      	mov	r0, r3
 80138b4:	f001 fb66 	bl	8014f84 <xTaskCheckForTimeOut>
 80138b8:	4603      	mov	r3, r0
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d124      	bne.n	8013908 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80138be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138c0:	f000 fd6a 	bl	8014398 <prvIsQueueFull>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d018      	beq.n	80138fc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80138ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138cc:	3310      	adds	r3, #16
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	4611      	mov	r1, r2
 80138d2:	4618      	mov	r0, r3
 80138d4:	f001 fab2 	bl	8014e3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80138d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138da:	f000 fcf5 	bl	80142c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80138de:	f001 f8a5 	bl	8014a2c <xTaskResumeAll>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	f47f af7c 	bne.w	80137e2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80138ea:	4b0c      	ldr	r3, [pc, #48]	@ (801391c <xQueueGenericSend+0x210>)
 80138ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80138f0:	601a      	str	r2, [r3, #0]
 80138f2:	f3bf 8f4f 	dsb	sy
 80138f6:	f3bf 8f6f 	isb	sy
 80138fa:	e772      	b.n	80137e2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80138fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138fe:	f000 fce3 	bl	80142c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013902:	f001 f893 	bl	8014a2c <xTaskResumeAll>
 8013906:	e76c      	b.n	80137e2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801390a:	f000 fcdd 	bl	80142c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801390e:	f001 f88d 	bl	8014a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013912:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013914:	4618      	mov	r0, r3
 8013916:	3738      	adds	r7, #56	@ 0x38
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	e000ed04 	.word	0xe000ed04

08013920 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b08e      	sub	sp, #56	@ 0x38
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	607a      	str	r2, [r7, #4]
 801392c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013934:	2b00      	cmp	r3, #0
 8013936:	d10d      	bne.n	8013954 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8013938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801393c:	b672      	cpsid	i
 801393e:	f383 8811 	msr	BASEPRI, r3
 8013942:	f3bf 8f6f 	isb	sy
 8013946:	f3bf 8f4f 	dsb	sy
 801394a:	b662      	cpsie	i
 801394c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801394e:	bf00      	nop
 8013950:	bf00      	nop
 8013952:	e7fd      	b.n	8013950 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d103      	bne.n	8013962 <xQueueGenericSendFromISR+0x42>
 801395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801395e:	2b00      	cmp	r3, #0
 8013960:	d101      	bne.n	8013966 <xQueueGenericSendFromISR+0x46>
 8013962:	2301      	movs	r3, #1
 8013964:	e000      	b.n	8013968 <xQueueGenericSendFromISR+0x48>
 8013966:	2300      	movs	r3, #0
 8013968:	2b00      	cmp	r3, #0
 801396a:	d10d      	bne.n	8013988 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 801396c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013970:	b672      	cpsid	i
 8013972:	f383 8811 	msr	BASEPRI, r3
 8013976:	f3bf 8f6f 	isb	sy
 801397a:	f3bf 8f4f 	dsb	sy
 801397e:	b662      	cpsie	i
 8013980:	623b      	str	r3, [r7, #32]
}
 8013982:	bf00      	nop
 8013984:	bf00      	nop
 8013986:	e7fd      	b.n	8013984 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	2b02      	cmp	r3, #2
 801398c:	d103      	bne.n	8013996 <xQueueGenericSendFromISR+0x76>
 801398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013992:	2b01      	cmp	r3, #1
 8013994:	d101      	bne.n	801399a <xQueueGenericSendFromISR+0x7a>
 8013996:	2301      	movs	r3, #1
 8013998:	e000      	b.n	801399c <xQueueGenericSendFromISR+0x7c>
 801399a:	2300      	movs	r3, #0
 801399c:	2b00      	cmp	r3, #0
 801399e:	d10d      	bne.n	80139bc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80139a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139a4:	b672      	cpsid	i
 80139a6:	f383 8811 	msr	BASEPRI, r3
 80139aa:	f3bf 8f6f 	isb	sy
 80139ae:	f3bf 8f4f 	dsb	sy
 80139b2:	b662      	cpsie	i
 80139b4:	61fb      	str	r3, [r7, #28]
}
 80139b6:	bf00      	nop
 80139b8:	bf00      	nop
 80139ba:	e7fd      	b.n	80139b8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80139bc:	f002 f86e 	bl	8015a9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80139c0:	f3ef 8211 	mrs	r2, BASEPRI
 80139c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139c8:	b672      	cpsid	i
 80139ca:	f383 8811 	msr	BASEPRI, r3
 80139ce:	f3bf 8f6f 	isb	sy
 80139d2:	f3bf 8f4f 	dsb	sy
 80139d6:	b662      	cpsie	i
 80139d8:	61ba      	str	r2, [r7, #24]
 80139da:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80139dc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80139de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80139e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d302      	bcc.n	80139f2 <xQueueGenericSendFromISR+0xd2>
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	2b02      	cmp	r3, #2
 80139f0:	d12c      	bne.n	8013a4c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80139f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80139f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80139fc:	683a      	ldr	r2, [r7, #0]
 80139fe:	68b9      	ldr	r1, [r7, #8]
 8013a00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a02:	f000 fbd1 	bl	80141a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013a06:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8013a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a0e:	d112      	bne.n	8013a36 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d016      	beq.n	8013a46 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a1a:	3324      	adds	r3, #36	@ 0x24
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f001 fa35 	bl	8014e8c <xTaskRemoveFromEventList>
 8013a22:	4603      	mov	r3, r0
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d00e      	beq.n	8013a46 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d00b      	beq.n	8013a46 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	2201      	movs	r2, #1
 8013a32:	601a      	str	r2, [r3, #0]
 8013a34:	e007      	b.n	8013a46 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013a36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	b25a      	sxtb	r2, r3
 8013a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013a46:	2301      	movs	r3, #1
 8013a48:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8013a4a:	e001      	b.n	8013a50 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a52:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013a5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3738      	adds	r7, #56	@ 0x38
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}

08013a66 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013a66:	b580      	push	{r7, lr}
 8013a68:	b08e      	sub	sp, #56	@ 0x38
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
 8013a6e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d10d      	bne.n	8013a96 <xQueueGiveFromISR+0x30>
	__asm volatile
 8013a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a7e:	b672      	cpsid	i
 8013a80:	f383 8811 	msr	BASEPRI, r3
 8013a84:	f3bf 8f6f 	isb	sy
 8013a88:	f3bf 8f4f 	dsb	sy
 8013a8c:	b662      	cpsie	i
 8013a8e:	623b      	str	r3, [r7, #32]
}
 8013a90:	bf00      	nop
 8013a92:	bf00      	nop
 8013a94:	e7fd      	b.n	8013a92 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d00d      	beq.n	8013aba <xQueueGiveFromISR+0x54>
	__asm volatile
 8013a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aa2:	b672      	cpsid	i
 8013aa4:	f383 8811 	msr	BASEPRI, r3
 8013aa8:	f3bf 8f6f 	isb	sy
 8013aac:	f3bf 8f4f 	dsb	sy
 8013ab0:	b662      	cpsie	i
 8013ab2:	61fb      	str	r3, [r7, #28]
}
 8013ab4:	bf00      	nop
 8013ab6:	bf00      	nop
 8013ab8:	e7fd      	b.n	8013ab6 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d103      	bne.n	8013aca <xQueueGiveFromISR+0x64>
 8013ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ac4:	689b      	ldr	r3, [r3, #8]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d101      	bne.n	8013ace <xQueueGiveFromISR+0x68>
 8013aca:	2301      	movs	r3, #1
 8013acc:	e000      	b.n	8013ad0 <xQueueGiveFromISR+0x6a>
 8013ace:	2300      	movs	r3, #0
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d10d      	bne.n	8013af0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8013ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ad8:	b672      	cpsid	i
 8013ada:	f383 8811 	msr	BASEPRI, r3
 8013ade:	f3bf 8f6f 	isb	sy
 8013ae2:	f3bf 8f4f 	dsb	sy
 8013ae6:	b662      	cpsie	i
 8013ae8:	61bb      	str	r3, [r7, #24]
}
 8013aea:	bf00      	nop
 8013aec:	bf00      	nop
 8013aee:	e7fd      	b.n	8013aec <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013af0:	f001 ffd4 	bl	8015a9c <vPortValidateInterruptPriority>
	__asm volatile
 8013af4:	f3ef 8211 	mrs	r2, BASEPRI
 8013af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013afc:	b672      	cpsid	i
 8013afe:	f383 8811 	msr	BASEPRI, r3
 8013b02:	f3bf 8f6f 	isb	sy
 8013b06:	f3bf 8f4f 	dsb	sy
 8013b0a:	b662      	cpsie	i
 8013b0c:	617a      	str	r2, [r7, #20]
 8013b0e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013b10:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b18:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d22b      	bcs.n	8013b7c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b30:	1c5a      	adds	r2, r3, #1
 8013b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b34:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b3e:	d112      	bne.n	8013b66 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d016      	beq.n	8013b76 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b4a:	3324      	adds	r3, #36	@ 0x24
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f001 f99d 	bl	8014e8c <xTaskRemoveFromEventList>
 8013b52:	4603      	mov	r3, r0
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d00e      	beq.n	8013b76 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d00b      	beq.n	8013b76 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	2201      	movs	r2, #1
 8013b62:	601a      	str	r2, [r3, #0]
 8013b64:	e007      	b.n	8013b76 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b6a:	3301      	adds	r3, #1
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	b25a      	sxtb	r2, r3
 8013b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013b76:	2301      	movs	r3, #1
 8013b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b7a:	e001      	b.n	8013b80 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b82:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	f383 8811 	msr	BASEPRI, r3
}
 8013b8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3738      	adds	r7, #56	@ 0x38
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
	...

08013b98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b08c      	sub	sp, #48	@ 0x30
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d10d      	bne.n	8013bce <xQueueReceive+0x36>
	__asm volatile
 8013bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bb6:	b672      	cpsid	i
 8013bb8:	f383 8811 	msr	BASEPRI, r3
 8013bbc:	f3bf 8f6f 	isb	sy
 8013bc0:	f3bf 8f4f 	dsb	sy
 8013bc4:	b662      	cpsie	i
 8013bc6:	623b      	str	r3, [r7, #32]
}
 8013bc8:	bf00      	nop
 8013bca:	bf00      	nop
 8013bcc:	e7fd      	b.n	8013bca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d103      	bne.n	8013bdc <xQueueReceive+0x44>
 8013bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d101      	bne.n	8013be0 <xQueueReceive+0x48>
 8013bdc:	2301      	movs	r3, #1
 8013bde:	e000      	b.n	8013be2 <xQueueReceive+0x4a>
 8013be0:	2300      	movs	r3, #0
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d10d      	bne.n	8013c02 <xQueueReceive+0x6a>
	__asm volatile
 8013be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bea:	b672      	cpsid	i
 8013bec:	f383 8811 	msr	BASEPRI, r3
 8013bf0:	f3bf 8f6f 	isb	sy
 8013bf4:	f3bf 8f4f 	dsb	sy
 8013bf8:	b662      	cpsie	i
 8013bfa:	61fb      	str	r3, [r7, #28]
}
 8013bfc:	bf00      	nop
 8013bfe:	bf00      	nop
 8013c00:	e7fd      	b.n	8013bfe <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c02:	f001 fb13 	bl	801522c <xTaskGetSchedulerState>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d102      	bne.n	8013c12 <xQueueReceive+0x7a>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <xQueueReceive+0x7e>
 8013c12:	2301      	movs	r3, #1
 8013c14:	e000      	b.n	8013c18 <xQueueReceive+0x80>
 8013c16:	2300      	movs	r3, #0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d10d      	bne.n	8013c38 <xQueueReceive+0xa0>
	__asm volatile
 8013c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c20:	b672      	cpsid	i
 8013c22:	f383 8811 	msr	BASEPRI, r3
 8013c26:	f3bf 8f6f 	isb	sy
 8013c2a:	f3bf 8f4f 	dsb	sy
 8013c2e:	b662      	cpsie	i
 8013c30:	61bb      	str	r3, [r7, #24]
}
 8013c32:	bf00      	nop
 8013c34:	bf00      	nop
 8013c36:	e7fd      	b.n	8013c34 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c38:	f001 fe48 	bl	80158cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c40:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d01f      	beq.n	8013c88 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c48:	68b9      	ldr	r1, [r7, #8]
 8013c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c4c:	f000 fb16 	bl	801427c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c52:	1e5a      	subs	r2, r3, #1
 8013c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c56:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c5a:	691b      	ldr	r3, [r3, #16]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d00f      	beq.n	8013c80 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c62:	3310      	adds	r3, #16
 8013c64:	4618      	mov	r0, r3
 8013c66:	f001 f911 	bl	8014e8c <xTaskRemoveFromEventList>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d007      	beq.n	8013c80 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013c70:	4b3c      	ldr	r3, [pc, #240]	@ (8013d64 <xQueueReceive+0x1cc>)
 8013c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c76:	601a      	str	r2, [r3, #0]
 8013c78:	f3bf 8f4f 	dsb	sy
 8013c7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013c80:	f001 fe5a 	bl	8015938 <vPortExitCritical>
				return pdPASS;
 8013c84:	2301      	movs	r3, #1
 8013c86:	e069      	b.n	8013d5c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d103      	bne.n	8013c96 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013c8e:	f001 fe53 	bl	8015938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013c92:	2300      	movs	r3, #0
 8013c94:	e062      	b.n	8013d5c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d106      	bne.n	8013caa <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013c9c:	f107 0310 	add.w	r3, r7, #16
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f001 f959 	bl	8014f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013caa:	f001 fe45 	bl	8015938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013cae:	f000 feaf 	bl	8014a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cb2:	f001 fe0b 	bl	80158cc <vPortEnterCritical>
 8013cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013cbc:	b25b      	sxtb	r3, r3
 8013cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cc2:	d103      	bne.n	8013ccc <xQueueReceive+0x134>
 8013cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013cd2:	b25b      	sxtb	r3, r3
 8013cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cd8:	d103      	bne.n	8013ce2 <xQueueReceive+0x14a>
 8013cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cdc:	2200      	movs	r2, #0
 8013cde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013ce2:	f001 fe29 	bl	8015938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ce6:	1d3a      	adds	r2, r7, #4
 8013ce8:	f107 0310 	add.w	r3, r7, #16
 8013cec:	4611      	mov	r1, r2
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f001 f948 	bl	8014f84 <xTaskCheckForTimeOut>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d123      	bne.n	8013d42 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013cfc:	f000 fb36 	bl	801436c <prvIsQueueEmpty>
 8013d00:	4603      	mov	r3, r0
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d017      	beq.n	8013d36 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d08:	3324      	adds	r3, #36	@ 0x24
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	4611      	mov	r1, r2
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f001 f894 	bl	8014e3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d16:	f000 fad7 	bl	80142c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d1a:	f000 fe87 	bl	8014a2c <xTaskResumeAll>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d189      	bne.n	8013c38 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8013d24:	4b0f      	ldr	r3, [pc, #60]	@ (8013d64 <xQueueReceive+0x1cc>)
 8013d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d2a:	601a      	str	r2, [r3, #0]
 8013d2c:	f3bf 8f4f 	dsb	sy
 8013d30:	f3bf 8f6f 	isb	sy
 8013d34:	e780      	b.n	8013c38 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d38:	f000 fac6 	bl	80142c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d3c:	f000 fe76 	bl	8014a2c <xTaskResumeAll>
 8013d40:	e77a      	b.n	8013c38 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d44:	f000 fac0 	bl	80142c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d48:	f000 fe70 	bl	8014a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d4e:	f000 fb0d 	bl	801436c <prvIsQueueEmpty>
 8013d52:	4603      	mov	r3, r0
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	f43f af6f 	beq.w	8013c38 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013d5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3730      	adds	r7, #48	@ 0x30
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}
 8013d64:	e000ed04 	.word	0xe000ed04

08013d68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b08e      	sub	sp, #56	@ 0x38
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013d72:	2300      	movs	r3, #0
 8013d74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d10d      	bne.n	8013da0 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8013d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d88:	b672      	cpsid	i
 8013d8a:	f383 8811 	msr	BASEPRI, r3
 8013d8e:	f3bf 8f6f 	isb	sy
 8013d92:	f3bf 8f4f 	dsb	sy
 8013d96:	b662      	cpsie	i
 8013d98:	623b      	str	r3, [r7, #32]
}
 8013d9a:	bf00      	nop
 8013d9c:	bf00      	nop
 8013d9e:	e7fd      	b.n	8013d9c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d00d      	beq.n	8013dc4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8013da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dac:	b672      	cpsid	i
 8013dae:	f383 8811 	msr	BASEPRI, r3
 8013db2:	f3bf 8f6f 	isb	sy
 8013db6:	f3bf 8f4f 	dsb	sy
 8013dba:	b662      	cpsie	i
 8013dbc:	61fb      	str	r3, [r7, #28]
}
 8013dbe:	bf00      	nop
 8013dc0:	bf00      	nop
 8013dc2:	e7fd      	b.n	8013dc0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013dc4:	f001 fa32 	bl	801522c <xTaskGetSchedulerState>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d102      	bne.n	8013dd4 <xQueueSemaphoreTake+0x6c>
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d101      	bne.n	8013dd8 <xQueueSemaphoreTake+0x70>
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	e000      	b.n	8013dda <xQueueSemaphoreTake+0x72>
 8013dd8:	2300      	movs	r3, #0
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d10d      	bne.n	8013dfa <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013de2:	b672      	cpsid	i
 8013de4:	f383 8811 	msr	BASEPRI, r3
 8013de8:	f3bf 8f6f 	isb	sy
 8013dec:	f3bf 8f4f 	dsb	sy
 8013df0:	b662      	cpsie	i
 8013df2:	61bb      	str	r3, [r7, #24]
}
 8013df4:	bf00      	nop
 8013df6:	bf00      	nop
 8013df8:	e7fd      	b.n	8013df6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013dfa:	f001 fd67 	bl	80158cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e02:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d024      	beq.n	8013e54 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e0c:	1e5a      	subs	r2, r3, #1
 8013e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e10:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d104      	bne.n	8013e24 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013e1a:	f001 fbd1 	bl	80155c0 <pvTaskIncrementMutexHeldCount>
 8013e1e:	4602      	mov	r2, r0
 8013e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e22:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e26:	691b      	ldr	r3, [r3, #16]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d00f      	beq.n	8013e4c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e2e:	3310      	adds	r3, #16
 8013e30:	4618      	mov	r0, r3
 8013e32:	f001 f82b 	bl	8014e8c <xTaskRemoveFromEventList>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d007      	beq.n	8013e4c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013e3c:	4b55      	ldr	r3, [pc, #340]	@ (8013f94 <xQueueSemaphoreTake+0x22c>)
 8013e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013e42:	601a      	str	r2, [r3, #0]
 8013e44:	f3bf 8f4f 	dsb	sy
 8013e48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013e4c:	f001 fd74 	bl	8015938 <vPortExitCritical>
				return pdPASS;
 8013e50:	2301      	movs	r3, #1
 8013e52:	e09a      	b.n	8013f8a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d114      	bne.n	8013e84 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d00d      	beq.n	8013e7c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8013e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e64:	b672      	cpsid	i
 8013e66:	f383 8811 	msr	BASEPRI, r3
 8013e6a:	f3bf 8f6f 	isb	sy
 8013e6e:	f3bf 8f4f 	dsb	sy
 8013e72:	b662      	cpsie	i
 8013e74:	617b      	str	r3, [r7, #20]
}
 8013e76:	bf00      	nop
 8013e78:	bf00      	nop
 8013e7a:	e7fd      	b.n	8013e78 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013e7c:	f001 fd5c 	bl	8015938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013e80:	2300      	movs	r3, #0
 8013e82:	e082      	b.n	8013f8a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d106      	bne.n	8013e98 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013e8a:	f107 030c 	add.w	r3, r7, #12
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f001 f862 	bl	8014f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013e94:	2301      	movs	r3, #1
 8013e96:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013e98:	f001 fd4e 	bl	8015938 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013e9c:	f000 fdb8 	bl	8014a10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ea0:	f001 fd14 	bl	80158cc <vPortEnterCritical>
 8013ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013eaa:	b25b      	sxtb	r3, r3
 8013eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013eb0:	d103      	bne.n	8013eba <xQueueSemaphoreTake+0x152>
 8013eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013ec0:	b25b      	sxtb	r3, r3
 8013ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ec6:	d103      	bne.n	8013ed0 <xQueueSemaphoreTake+0x168>
 8013ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eca:	2200      	movs	r2, #0
 8013ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013ed0:	f001 fd32 	bl	8015938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ed4:	463a      	mov	r2, r7
 8013ed6:	f107 030c 	add.w	r3, r7, #12
 8013eda:	4611      	mov	r1, r2
 8013edc:	4618      	mov	r0, r3
 8013ede:	f001 f851 	bl	8014f84 <xTaskCheckForTimeOut>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d132      	bne.n	8013f4e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ee8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013eea:	f000 fa3f 	bl	801436c <prvIsQueueEmpty>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d026      	beq.n	8013f42 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d109      	bne.n	8013f10 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8013efc:	f001 fce6 	bl	80158cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f02:	689b      	ldr	r3, [r3, #8]
 8013f04:	4618      	mov	r0, r3
 8013f06:	f001 f9af 	bl	8015268 <xTaskPriorityInherit>
 8013f0a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013f0c:	f001 fd14 	bl	8015938 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f12:	3324      	adds	r3, #36	@ 0x24
 8013f14:	683a      	ldr	r2, [r7, #0]
 8013f16:	4611      	mov	r1, r2
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f000 ff8f 	bl	8014e3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013f1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f20:	f000 f9d2 	bl	80142c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013f24:	f000 fd82 	bl	8014a2c <xTaskResumeAll>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f47f af65 	bne.w	8013dfa <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8013f30:	4b18      	ldr	r3, [pc, #96]	@ (8013f94 <xQueueSemaphoreTake+0x22c>)
 8013f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f36:	601a      	str	r2, [r3, #0]
 8013f38:	f3bf 8f4f 	dsb	sy
 8013f3c:	f3bf 8f6f 	isb	sy
 8013f40:	e75b      	b.n	8013dfa <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013f42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f44:	f000 f9c0 	bl	80142c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013f48:	f000 fd70 	bl	8014a2c <xTaskResumeAll>
 8013f4c:	e755      	b.n	8013dfa <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013f4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f50:	f000 f9ba 	bl	80142c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013f54:	f000 fd6a 	bl	8014a2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f5a:	f000 fa07 	bl	801436c <prvIsQueueEmpty>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	f43f af4a 	beq.w	8013dfa <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d00d      	beq.n	8013f88 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8013f6c:	f001 fcae 	bl	80158cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f72:	f000 f901 	bl	8014178 <prvGetDisinheritPriorityAfterTimeout>
 8013f76:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f7a:	689b      	ldr	r3, [r3, #8]
 8013f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f001 fa7e 	bl	8015480 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013f84:	f001 fcd8 	bl	8015938 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3738      	adds	r7, #56	@ 0x38
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
 8013f92:	bf00      	nop
 8013f94:	e000ed04 	.word	0xe000ed04

08013f98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b08e      	sub	sp, #56	@ 0x38
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	60f8      	str	r0, [r7, #12]
 8013fa0:	60b9      	str	r1, [r7, #8]
 8013fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d10d      	bne.n	8013fca <xQueueReceiveFromISR+0x32>
	__asm volatile
 8013fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb2:	b672      	cpsid	i
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	b662      	cpsie	i
 8013fc2:	623b      	str	r3, [r7, #32]
}
 8013fc4:	bf00      	nop
 8013fc6:	bf00      	nop
 8013fc8:	e7fd      	b.n	8013fc6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d103      	bne.n	8013fd8 <xQueueReceiveFromISR+0x40>
 8013fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d101      	bne.n	8013fdc <xQueueReceiveFromISR+0x44>
 8013fd8:	2301      	movs	r3, #1
 8013fda:	e000      	b.n	8013fde <xQueueReceiveFromISR+0x46>
 8013fdc:	2300      	movs	r3, #0
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d10d      	bne.n	8013ffe <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fe6:	b672      	cpsid	i
 8013fe8:	f383 8811 	msr	BASEPRI, r3
 8013fec:	f3bf 8f6f 	isb	sy
 8013ff0:	f3bf 8f4f 	dsb	sy
 8013ff4:	b662      	cpsie	i
 8013ff6:	61fb      	str	r3, [r7, #28]
}
 8013ff8:	bf00      	nop
 8013ffa:	bf00      	nop
 8013ffc:	e7fd      	b.n	8013ffa <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013ffe:	f001 fd4d 	bl	8015a9c <vPortValidateInterruptPriority>
	__asm volatile
 8014002:	f3ef 8211 	mrs	r2, BASEPRI
 8014006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801400a:	b672      	cpsid	i
 801400c:	f383 8811 	msr	BASEPRI, r3
 8014010:	f3bf 8f6f 	isb	sy
 8014014:	f3bf 8f4f 	dsb	sy
 8014018:	b662      	cpsie	i
 801401a:	61ba      	str	r2, [r7, #24]
 801401c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801401e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014020:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014026:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801402a:	2b00      	cmp	r3, #0
 801402c:	d02f      	beq.n	801408e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014038:	68b9      	ldr	r1, [r7, #8]
 801403a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801403c:	f000 f91e 	bl	801427c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014042:	1e5a      	subs	r2, r3, #1
 8014044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014046:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014048:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014050:	d112      	bne.n	8014078 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014054:	691b      	ldr	r3, [r3, #16]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d016      	beq.n	8014088 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801405c:	3310      	adds	r3, #16
 801405e:	4618      	mov	r0, r3
 8014060:	f000 ff14 	bl	8014e8c <xTaskRemoveFromEventList>
 8014064:	4603      	mov	r3, r0
 8014066:	2b00      	cmp	r3, #0
 8014068:	d00e      	beq.n	8014088 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d00b      	beq.n	8014088 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2201      	movs	r2, #1
 8014074:	601a      	str	r2, [r3, #0]
 8014076:	e007      	b.n	8014088 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801407c:	3301      	adds	r3, #1
 801407e:	b2db      	uxtb	r3, r3
 8014080:	b25a      	sxtb	r2, r3
 8014082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8014088:	2301      	movs	r3, #1
 801408a:	637b      	str	r3, [r7, #52]	@ 0x34
 801408c:	e001      	b.n	8014092 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801408e:	2300      	movs	r3, #0
 8014090:	637b      	str	r3, [r7, #52]	@ 0x34
 8014092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014094:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	f383 8811 	msr	BASEPRI, r3
}
 801409c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801409e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3738      	adds	r7, #56	@ 0x38
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}

080140a8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d10d      	bne.n	80140d2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80140b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140ba:	b672      	cpsid	i
 80140bc:	f383 8811 	msr	BASEPRI, r3
 80140c0:	f3bf 8f6f 	isb	sy
 80140c4:	f3bf 8f4f 	dsb	sy
 80140c8:	b662      	cpsie	i
 80140ca:	60bb      	str	r3, [r7, #8]
}
 80140cc:	bf00      	nop
 80140ce:	bf00      	nop
 80140d0:	e7fd      	b.n	80140ce <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80140d2:	f001 fbfb 	bl	80158cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140da:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80140dc:	f001 fc2c 	bl	8015938 <vPortExitCritical>

	return uxReturn;
 80140e0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80140e2:	4618      	mov	r0, r3
 80140e4:	3710      	adds	r7, #16
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}

080140ea <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80140ea:	b480      	push	{r7}
 80140ec:	b087      	sub	sp, #28
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d10d      	bne.n	8014118 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80140fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014100:	b672      	cpsid	i
 8014102:	f383 8811 	msr	BASEPRI, r3
 8014106:	f3bf 8f6f 	isb	sy
 801410a:	f3bf 8f4f 	dsb	sy
 801410e:	b662      	cpsie	i
 8014110:	60fb      	str	r3, [r7, #12]
}
 8014112:	bf00      	nop
 8014114:	bf00      	nop
 8014116:	e7fd      	b.n	8014114 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801411c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801411e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014120:	4618      	mov	r0, r3
 8014122:	371c      	adds	r7, #28
 8014124:	46bd      	mov	sp, r7
 8014126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412a:	4770      	bx	lr

0801412c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d10d      	bne.n	801415a <vQueueDelete+0x2e>
	__asm volatile
 801413e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014142:	b672      	cpsid	i
 8014144:	f383 8811 	msr	BASEPRI, r3
 8014148:	f3bf 8f6f 	isb	sy
 801414c:	f3bf 8f4f 	dsb	sy
 8014150:	b662      	cpsie	i
 8014152:	60bb      	str	r3, [r7, #8]
}
 8014154:	bf00      	nop
 8014156:	bf00      	nop
 8014158:	e7fd      	b.n	8014156 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801415a:	68f8      	ldr	r0, [r7, #12]
 801415c:	f000 f934 	bl	80143c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8014166:	2b00      	cmp	r3, #0
 8014168:	d102      	bne.n	8014170 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801416a:	68f8      	ldr	r0, [r7, #12]
 801416c:	f001 fdae 	bl	8015ccc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014170:	bf00      	nop
 8014172:	3710      	adds	r7, #16
 8014174:	46bd      	mov	sp, r7
 8014176:	bd80      	pop	{r7, pc}

08014178 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014178:	b480      	push	{r7}
 801417a:	b085      	sub	sp, #20
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014184:	2b00      	cmp	r3, #0
 8014186:	d006      	beq.n	8014196 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	f1c3 0307 	rsb	r3, r3, #7
 8014192:	60fb      	str	r3, [r7, #12]
 8014194:	e001      	b.n	801419a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014196:	2300      	movs	r3, #0
 8014198:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801419a:	68fb      	ldr	r3, [r7, #12]
	}
 801419c:	4618      	mov	r0, r3
 801419e:	3714      	adds	r7, #20
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr

080141a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b086      	sub	sp, #24
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	60b9      	str	r1, [r7, #8]
 80141b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80141b4:	2300      	movs	r3, #0
 80141b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d10d      	bne.n	80141e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d14d      	bne.n	801426a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	689b      	ldr	r3, [r3, #8]
 80141d2:	4618      	mov	r0, r3
 80141d4:	f001 f8c8 	bl	8015368 <xTaskPriorityDisinherit>
 80141d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	2200      	movs	r2, #0
 80141de:	609a      	str	r2, [r3, #8]
 80141e0:	e043      	b.n	801426a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d119      	bne.n	801421c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	6858      	ldr	r0, [r3, #4]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141f0:	461a      	mov	r2, r3
 80141f2:	68b9      	ldr	r1, [r7, #8]
 80141f4:	f013 fced 	bl	8027bd2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	685a      	ldr	r2, [r3, #4]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014200:	441a      	add	r2, r3
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	685a      	ldr	r2, [r3, #4]
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	689b      	ldr	r3, [r3, #8]
 801420e:	429a      	cmp	r2, r3
 8014210:	d32b      	bcc.n	801426a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	605a      	str	r2, [r3, #4]
 801421a:	e026      	b.n	801426a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	68d8      	ldr	r0, [r3, #12]
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014224:	461a      	mov	r2, r3
 8014226:	68b9      	ldr	r1, [r7, #8]
 8014228:	f013 fcd3 	bl	8027bd2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	68da      	ldr	r2, [r3, #12]
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014234:	425b      	negs	r3, r3
 8014236:	441a      	add	r2, r3
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	68da      	ldr	r2, [r3, #12]
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	429a      	cmp	r2, r3
 8014246:	d207      	bcs.n	8014258 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	689a      	ldr	r2, [r3, #8]
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014250:	425b      	negs	r3, r3
 8014252:	441a      	add	r2, r3
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2b02      	cmp	r3, #2
 801425c:	d105      	bne.n	801426a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d002      	beq.n	801426a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	3b01      	subs	r3, #1
 8014268:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	1c5a      	adds	r2, r3, #1
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014272:	697b      	ldr	r3, [r7, #20]
}
 8014274:	4618      	mov	r0, r3
 8014276:	3718      	adds	r7, #24
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}

0801427c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801428a:	2b00      	cmp	r3, #0
 801428c:	d018      	beq.n	80142c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	68da      	ldr	r2, [r3, #12]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014296:	441a      	add	r2, r3
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	68da      	ldr	r2, [r3, #12]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	689b      	ldr	r3, [r3, #8]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d303      	bcc.n	80142b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681a      	ldr	r2, [r3, #0]
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	68d9      	ldr	r1, [r3, #12]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142b8:	461a      	mov	r2, r3
 80142ba:	6838      	ldr	r0, [r7, #0]
 80142bc:	f013 fc89 	bl	8027bd2 <memcpy>
	}
}
 80142c0:	bf00      	nop
 80142c2:	3708      	adds	r7, #8
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80142d0:	f001 fafc 	bl	80158cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80142da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80142dc:	e011      	b.n	8014302 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d012      	beq.n	801430c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	3324      	adds	r3, #36	@ 0x24
 80142ea:	4618      	mov	r0, r3
 80142ec:	f000 fdce 	bl	8014e8c <xTaskRemoveFromEventList>
 80142f0:	4603      	mov	r3, r0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d001      	beq.n	80142fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80142f6:	f000 fead 	bl	8015054 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80142fa:	7bfb      	ldrb	r3, [r7, #15]
 80142fc:	3b01      	subs	r3, #1
 80142fe:	b2db      	uxtb	r3, r3
 8014300:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014306:	2b00      	cmp	r3, #0
 8014308:	dce9      	bgt.n	80142de <prvUnlockQueue+0x16>
 801430a:	e000      	b.n	801430e <prvUnlockQueue+0x46>
					break;
 801430c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	22ff      	movs	r2, #255	@ 0xff
 8014312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8014316:	f001 fb0f 	bl	8015938 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801431a:	f001 fad7 	bl	80158cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014324:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014326:	e011      	b.n	801434c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	691b      	ldr	r3, [r3, #16]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d012      	beq.n	8014356 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	3310      	adds	r3, #16
 8014334:	4618      	mov	r0, r3
 8014336:	f000 fda9 	bl	8014e8c <xTaskRemoveFromEventList>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d001      	beq.n	8014344 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014340:	f000 fe88 	bl	8015054 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014344:	7bbb      	ldrb	r3, [r7, #14]
 8014346:	3b01      	subs	r3, #1
 8014348:	b2db      	uxtb	r3, r3
 801434a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801434c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014350:	2b00      	cmp	r3, #0
 8014352:	dce9      	bgt.n	8014328 <prvUnlockQueue+0x60>
 8014354:	e000      	b.n	8014358 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014356:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	22ff      	movs	r2, #255	@ 0xff
 801435c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014360:	f001 faea 	bl	8015938 <vPortExitCritical>
}
 8014364:	bf00      	nop
 8014366:	3710      	adds	r7, #16
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}

0801436c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b084      	sub	sp, #16
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014374:	f001 faaa 	bl	80158cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801437c:	2b00      	cmp	r3, #0
 801437e:	d102      	bne.n	8014386 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014380:	2301      	movs	r3, #1
 8014382:	60fb      	str	r3, [r7, #12]
 8014384:	e001      	b.n	801438a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014386:	2300      	movs	r3, #0
 8014388:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801438a:	f001 fad5 	bl	8015938 <vPortExitCritical>

	return xReturn;
 801438e:	68fb      	ldr	r3, [r7, #12]
}
 8014390:	4618      	mov	r0, r3
 8014392:	3710      	adds	r7, #16
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80143a0:	f001 fa94 	bl	80158cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d102      	bne.n	80143b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80143b0:	2301      	movs	r3, #1
 80143b2:	60fb      	str	r3, [r7, #12]
 80143b4:	e001      	b.n	80143ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80143b6:	2300      	movs	r3, #0
 80143b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80143ba:	f001 fabd 	bl	8015938 <vPortExitCritical>

	return xReturn;
 80143be:	68fb      	ldr	r3, [r7, #12]
}
 80143c0:	4618      	mov	r0, r3
 80143c2:	3710      	adds	r7, #16
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80143c8:	b480      	push	{r7}
 80143ca:	b085      	sub	sp, #20
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80143d0:	2300      	movs	r3, #0
 80143d2:	60fb      	str	r3, [r7, #12]
 80143d4:	e016      	b.n	8014404 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80143d6:	4a10      	ldr	r2, [pc, #64]	@ (8014418 <vQueueUnregisterQueue+0x50>)
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	00db      	lsls	r3, r3, #3
 80143dc:	4413      	add	r3, r2
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	687a      	ldr	r2, [r7, #4]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d10b      	bne.n	80143fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80143e6:	4a0c      	ldr	r2, [pc, #48]	@ (8014418 <vQueueUnregisterQueue+0x50>)
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2100      	movs	r1, #0
 80143ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80143f0:	4a09      	ldr	r2, [pc, #36]	@ (8014418 <vQueueUnregisterQueue+0x50>)
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	00db      	lsls	r3, r3, #3
 80143f6:	4413      	add	r3, r2
 80143f8:	2200      	movs	r2, #0
 80143fa:	605a      	str	r2, [r3, #4]
				break;
 80143fc:	e006      	b.n	801440c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	3301      	adds	r3, #1
 8014402:	60fb      	str	r3, [r7, #12]
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2b07      	cmp	r3, #7
 8014408:	d9e5      	bls.n	80143d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801440a:	bf00      	nop
 801440c:	bf00      	nop
 801440e:	3714      	adds	r7, #20
 8014410:	46bd      	mov	sp, r7
 8014412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014416:	4770      	bx	lr
 8014418:	2000580c 	.word	0x2000580c

0801441c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801441c:	b580      	push	{r7, lr}
 801441e:	b08e      	sub	sp, #56	@ 0x38
 8014420:	af04      	add	r7, sp, #16
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	60b9      	str	r1, [r7, #8]
 8014426:	607a      	str	r2, [r7, #4]
 8014428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801442a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801442c:	2b00      	cmp	r3, #0
 801442e:	d10d      	bne.n	801444c <xTaskCreateStatic+0x30>
	__asm volatile
 8014430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014434:	b672      	cpsid	i
 8014436:	f383 8811 	msr	BASEPRI, r3
 801443a:	f3bf 8f6f 	isb	sy
 801443e:	f3bf 8f4f 	dsb	sy
 8014442:	b662      	cpsie	i
 8014444:	623b      	str	r3, [r7, #32]
}
 8014446:	bf00      	nop
 8014448:	bf00      	nop
 801444a:	e7fd      	b.n	8014448 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801444c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801444e:	2b00      	cmp	r3, #0
 8014450:	d10d      	bne.n	801446e <xTaskCreateStatic+0x52>
	__asm volatile
 8014452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014456:	b672      	cpsid	i
 8014458:	f383 8811 	msr	BASEPRI, r3
 801445c:	f3bf 8f6f 	isb	sy
 8014460:	f3bf 8f4f 	dsb	sy
 8014464:	b662      	cpsie	i
 8014466:	61fb      	str	r3, [r7, #28]
}
 8014468:	bf00      	nop
 801446a:	bf00      	nop
 801446c:	e7fd      	b.n	801446a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801446e:	23a4      	movs	r3, #164	@ 0xa4
 8014470:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	2ba4      	cmp	r3, #164	@ 0xa4
 8014476:	d00d      	beq.n	8014494 <xTaskCreateStatic+0x78>
	__asm volatile
 8014478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801447c:	b672      	cpsid	i
 801447e:	f383 8811 	msr	BASEPRI, r3
 8014482:	f3bf 8f6f 	isb	sy
 8014486:	f3bf 8f4f 	dsb	sy
 801448a:	b662      	cpsie	i
 801448c:	61bb      	str	r3, [r7, #24]
}
 801448e:	bf00      	nop
 8014490:	bf00      	nop
 8014492:	e7fd      	b.n	8014490 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014494:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014498:	2b00      	cmp	r3, #0
 801449a:	d01e      	beq.n	80144da <xTaskCreateStatic+0xbe>
 801449c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d01b      	beq.n	80144da <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80144a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80144a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80144aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80144ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144ae:	2202      	movs	r2, #2
 80144b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80144b4:	2300      	movs	r3, #0
 80144b6:	9303      	str	r3, [sp, #12]
 80144b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144ba:	9302      	str	r3, [sp, #8]
 80144bc:	f107 0314 	add.w	r3, r7, #20
 80144c0:	9301      	str	r3, [sp, #4]
 80144c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144c4:	9300      	str	r3, [sp, #0]
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	68b9      	ldr	r1, [r7, #8]
 80144cc:	68f8      	ldr	r0, [r7, #12]
 80144ce:	f000 f851 	bl	8014574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80144d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80144d4:	f000 f8fa 	bl	80146cc <prvAddNewTaskToReadyList>
 80144d8:	e001      	b.n	80144de <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80144da:	2300      	movs	r3, #0
 80144dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80144de:	697b      	ldr	r3, [r7, #20]
	}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3728      	adds	r7, #40	@ 0x28
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b08c      	sub	sp, #48	@ 0x30
 80144ec:	af04      	add	r7, sp, #16
 80144ee:	60f8      	str	r0, [r7, #12]
 80144f0:	60b9      	str	r1, [r7, #8]
 80144f2:	603b      	str	r3, [r7, #0]
 80144f4:	4613      	mov	r3, r2
 80144f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80144f8:	88fb      	ldrh	r3, [r7, #6]
 80144fa:	009b      	lsls	r3, r3, #2
 80144fc:	4618      	mov	r0, r3
 80144fe:	f001 fb13 	bl	8015b28 <pvPortMalloc>
 8014502:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d00e      	beq.n	8014528 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801450a:	20a4      	movs	r0, #164	@ 0xa4
 801450c:	f001 fb0c 	bl	8015b28 <pvPortMalloc>
 8014510:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014512:	69fb      	ldr	r3, [r7, #28]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d003      	beq.n	8014520 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014518:	69fb      	ldr	r3, [r7, #28]
 801451a:	697a      	ldr	r2, [r7, #20]
 801451c:	631a      	str	r2, [r3, #48]	@ 0x30
 801451e:	e005      	b.n	801452c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014520:	6978      	ldr	r0, [r7, #20]
 8014522:	f001 fbd3 	bl	8015ccc <vPortFree>
 8014526:	e001      	b.n	801452c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014528:	2300      	movs	r3, #0
 801452a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801452c:	69fb      	ldr	r3, [r7, #28]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d017      	beq.n	8014562 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014532:	69fb      	ldr	r3, [r7, #28]
 8014534:	2200      	movs	r2, #0
 8014536:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801453a:	88fa      	ldrh	r2, [r7, #6]
 801453c:	2300      	movs	r3, #0
 801453e:	9303      	str	r3, [sp, #12]
 8014540:	69fb      	ldr	r3, [r7, #28]
 8014542:	9302      	str	r3, [sp, #8]
 8014544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014546:	9301      	str	r3, [sp, #4]
 8014548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801454a:	9300      	str	r3, [sp, #0]
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	68b9      	ldr	r1, [r7, #8]
 8014550:	68f8      	ldr	r0, [r7, #12]
 8014552:	f000 f80f 	bl	8014574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014556:	69f8      	ldr	r0, [r7, #28]
 8014558:	f000 f8b8 	bl	80146cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801455c:	2301      	movs	r3, #1
 801455e:	61bb      	str	r3, [r7, #24]
 8014560:	e002      	b.n	8014568 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014562:	f04f 33ff 	mov.w	r3, #4294967295
 8014566:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014568:	69bb      	ldr	r3, [r7, #24]
	}
 801456a:	4618      	mov	r0, r3
 801456c:	3720      	adds	r7, #32
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}
	...

08014574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b088      	sub	sp, #32
 8014578:	af00      	add	r7, sp, #0
 801457a:	60f8      	str	r0, [r7, #12]
 801457c:	60b9      	str	r1, [r7, #8]
 801457e:	607a      	str	r2, [r7, #4]
 8014580:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014584:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	009b      	lsls	r3, r3, #2
 801458a:	461a      	mov	r2, r3
 801458c:	21a5      	movs	r1, #165	@ 0xa5
 801458e:	f013 fa45 	bl	8027a1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014596:	6879      	ldr	r1, [r7, #4]
 8014598:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801459c:	440b      	add	r3, r1
 801459e:	009b      	lsls	r3, r3, #2
 80145a0:	4413      	add	r3, r2
 80145a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80145a4:	69bb      	ldr	r3, [r7, #24]
 80145a6:	f023 0307 	bic.w	r3, r3, #7
 80145aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	f003 0307 	and.w	r3, r3, #7
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d00d      	beq.n	80145d2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80145b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145ba:	b672      	cpsid	i
 80145bc:	f383 8811 	msr	BASEPRI, r3
 80145c0:	f3bf 8f6f 	isb	sy
 80145c4:	f3bf 8f4f 	dsb	sy
 80145c8:	b662      	cpsie	i
 80145ca:	617b      	str	r3, [r7, #20]
}
 80145cc:	bf00      	nop
 80145ce:	bf00      	nop
 80145d0:	e7fd      	b.n	80145ce <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80145d2:	68bb      	ldr	r3, [r7, #8]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d01f      	beq.n	8014618 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80145d8:	2300      	movs	r3, #0
 80145da:	61fb      	str	r3, [r7, #28]
 80145dc:	e012      	b.n	8014604 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80145de:	68ba      	ldr	r2, [r7, #8]
 80145e0:	69fb      	ldr	r3, [r7, #28]
 80145e2:	4413      	add	r3, r2
 80145e4:	7819      	ldrb	r1, [r3, #0]
 80145e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145e8:	69fb      	ldr	r3, [r7, #28]
 80145ea:	4413      	add	r3, r2
 80145ec:	3334      	adds	r3, #52	@ 0x34
 80145ee:	460a      	mov	r2, r1
 80145f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80145f2:	68ba      	ldr	r2, [r7, #8]
 80145f4:	69fb      	ldr	r3, [r7, #28]
 80145f6:	4413      	add	r3, r2
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d006      	beq.n	801460c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80145fe:	69fb      	ldr	r3, [r7, #28]
 8014600:	3301      	adds	r3, #1
 8014602:	61fb      	str	r3, [r7, #28]
 8014604:	69fb      	ldr	r3, [r7, #28]
 8014606:	2b0f      	cmp	r3, #15
 8014608:	d9e9      	bls.n	80145de <prvInitialiseNewTask+0x6a>
 801460a:	e000      	b.n	801460e <prvInitialiseNewTask+0x9a>
			{
				break;
 801460c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014610:	2200      	movs	r2, #0
 8014612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014616:	e003      	b.n	8014620 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801461a:	2200      	movs	r2, #0
 801461c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014622:	2b06      	cmp	r3, #6
 8014624:	d901      	bls.n	801462a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014626:	2306      	movs	r3, #6
 8014628:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801462c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801462e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014634:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014638:	2200      	movs	r2, #0
 801463a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801463e:	3304      	adds	r3, #4
 8014640:	4618      	mov	r0, r3
 8014642:	f7fe fdb6 	bl	80131b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014648:	3318      	adds	r3, #24
 801464a:	4618      	mov	r0, r3
 801464c:	f7fe fdb1 	bl	80131b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014654:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014658:	f1c3 0207 	rsb	r2, r3, #7
 801465c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801465e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014664:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8014666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014668:	2200      	movs	r2, #0
 801466a:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801466e:	2200      	movs	r2, #0
 8014670:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014676:	2200      	movs	r2, #0
 8014678:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801467e:	3350      	adds	r3, #80	@ 0x50
 8014680:	224c      	movs	r2, #76	@ 0x4c
 8014682:	2100      	movs	r1, #0
 8014684:	4618      	mov	r0, r3
 8014686:	f013 f9c9 	bl	8027a1c <memset>
 801468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801468c:	4a0c      	ldr	r2, [pc, #48]	@ (80146c0 <prvInitialiseNewTask+0x14c>)
 801468e:	655a      	str	r2, [r3, #84]	@ 0x54
 8014690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014692:	4a0c      	ldr	r2, [pc, #48]	@ (80146c4 <prvInitialiseNewTask+0x150>)
 8014694:	659a      	str	r2, [r3, #88]	@ 0x58
 8014696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014698:	4a0b      	ldr	r2, [pc, #44]	@ (80146c8 <prvInitialiseNewTask+0x154>)
 801469a:	65da      	str	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801469c:	683a      	ldr	r2, [r7, #0]
 801469e:	68f9      	ldr	r1, [r7, #12]
 80146a0:	69b8      	ldr	r0, [r7, #24]
 80146a2:	f001 f807 	bl	80156b4 <pxPortInitialiseStack>
 80146a6:	4602      	mov	r2, r0
 80146a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80146ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d002      	beq.n	80146b8 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80146b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80146b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80146b8:	bf00      	nop
 80146ba:	3720      	adds	r7, #32
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}
 80146c0:	20011ac4 	.word	0x20011ac4
 80146c4:	20011b2c 	.word	0x20011b2c
 80146c8:	20011b94 	.word	0x20011b94

080146cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b082      	sub	sp, #8
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80146d4:	f001 f8fa 	bl	80158cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80146d8:	4b2a      	ldr	r3, [pc, #168]	@ (8014784 <prvAddNewTaskToReadyList+0xb8>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	3301      	adds	r3, #1
 80146de:	4a29      	ldr	r2, [pc, #164]	@ (8014784 <prvAddNewTaskToReadyList+0xb8>)
 80146e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80146e2:	4b29      	ldr	r3, [pc, #164]	@ (8014788 <prvAddNewTaskToReadyList+0xbc>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d109      	bne.n	80146fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80146ea:	4a27      	ldr	r2, [pc, #156]	@ (8014788 <prvAddNewTaskToReadyList+0xbc>)
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80146f0:	4b24      	ldr	r3, [pc, #144]	@ (8014784 <prvAddNewTaskToReadyList+0xb8>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	2b01      	cmp	r3, #1
 80146f6:	d110      	bne.n	801471a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80146f8:	f000 fcd2 	bl	80150a0 <prvInitialiseTaskLists>
 80146fc:	e00d      	b.n	801471a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80146fe:	4b23      	ldr	r3, [pc, #140]	@ (801478c <prvAddNewTaskToReadyList+0xc0>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d109      	bne.n	801471a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014706:	4b20      	ldr	r3, [pc, #128]	@ (8014788 <prvAddNewTaskToReadyList+0xbc>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014710:	429a      	cmp	r2, r3
 8014712:	d802      	bhi.n	801471a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014714:	4a1c      	ldr	r2, [pc, #112]	@ (8014788 <prvAddNewTaskToReadyList+0xbc>)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801471a:	4b1d      	ldr	r3, [pc, #116]	@ (8014790 <prvAddNewTaskToReadyList+0xc4>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	3301      	adds	r3, #1
 8014720:	4a1b      	ldr	r2, [pc, #108]	@ (8014790 <prvAddNewTaskToReadyList+0xc4>)
 8014722:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014728:	2201      	movs	r2, #1
 801472a:	409a      	lsls	r2, r3
 801472c:	4b19      	ldr	r3, [pc, #100]	@ (8014794 <prvAddNewTaskToReadyList+0xc8>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	4313      	orrs	r3, r2
 8014732:	4a18      	ldr	r2, [pc, #96]	@ (8014794 <prvAddNewTaskToReadyList+0xc8>)
 8014734:	6013      	str	r3, [r2, #0]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801473a:	4613      	mov	r3, r2
 801473c:	009b      	lsls	r3, r3, #2
 801473e:	4413      	add	r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	4a15      	ldr	r2, [pc, #84]	@ (8014798 <prvAddNewTaskToReadyList+0xcc>)
 8014744:	441a      	add	r2, r3
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	3304      	adds	r3, #4
 801474a:	4619      	mov	r1, r3
 801474c:	4610      	mov	r0, r2
 801474e:	f7fe fd3d 	bl	80131cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014752:	f001 f8f1 	bl	8015938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014756:	4b0d      	ldr	r3, [pc, #52]	@ (801478c <prvAddNewTaskToReadyList+0xc0>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d00e      	beq.n	801477c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801475e:	4b0a      	ldr	r3, [pc, #40]	@ (8014788 <prvAddNewTaskToReadyList+0xbc>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014768:	429a      	cmp	r2, r3
 801476a:	d207      	bcs.n	801477c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801476c:	4b0b      	ldr	r3, [pc, #44]	@ (801479c <prvAddNewTaskToReadyList+0xd0>)
 801476e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014772:	601a      	str	r2, [r3, #0]
 8014774:	f3bf 8f4f 	dsb	sy
 8014778:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801477c:	bf00      	nop
 801477e:	3708      	adds	r7, #8
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}
 8014784:	2000594c 	.word	0x2000594c
 8014788:	2000584c 	.word	0x2000584c
 801478c:	20005958 	.word	0x20005958
 8014790:	20005968 	.word	0x20005968
 8014794:	20005954 	.word	0x20005954
 8014798:	20005850 	.word	0x20005850
 801479c:	e000ed04 	.word	0xe000ed04

080147a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b084      	sub	sp, #16
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80147a8:	f001 f890 	bl	80158cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d102      	bne.n	80147b8 <vTaskDelete+0x18>
 80147b2:	4b3a      	ldr	r3, [pc, #232]	@ (801489c <vTaskDelete+0xfc>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	e000      	b.n	80147ba <vTaskDelete+0x1a>
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	3304      	adds	r3, #4
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7fe fd60 	bl	8013286 <uxListRemove>
 80147c6:	4603      	mov	r3, r0
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d115      	bne.n	80147f8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147d0:	4933      	ldr	r1, [pc, #204]	@ (80148a0 <vTaskDelete+0x100>)
 80147d2:	4613      	mov	r3, r2
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	4413      	add	r3, r2
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	440b      	add	r3, r1
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d10a      	bne.n	80147f8 <vTaskDelete+0x58>
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147e6:	2201      	movs	r2, #1
 80147e8:	fa02 f303 	lsl.w	r3, r2, r3
 80147ec:	43da      	mvns	r2, r3
 80147ee:	4b2d      	ldr	r3, [pc, #180]	@ (80148a4 <vTaskDelete+0x104>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	4013      	ands	r3, r2
 80147f4:	4a2b      	ldr	r2, [pc, #172]	@ (80148a4 <vTaskDelete+0x104>)
 80147f6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d004      	beq.n	801480a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	3318      	adds	r3, #24
 8014804:	4618      	mov	r0, r3
 8014806:	f7fe fd3e 	bl	8013286 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801480a:	4b27      	ldr	r3, [pc, #156]	@ (80148a8 <vTaskDelete+0x108>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	3301      	adds	r3, #1
 8014810:	4a25      	ldr	r2, [pc, #148]	@ (80148a8 <vTaskDelete+0x108>)
 8014812:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8014814:	4b21      	ldr	r3, [pc, #132]	@ (801489c <vTaskDelete+0xfc>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	68fa      	ldr	r2, [r7, #12]
 801481a:	429a      	cmp	r2, r3
 801481c:	d10b      	bne.n	8014836 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	3304      	adds	r3, #4
 8014822:	4619      	mov	r1, r3
 8014824:	4821      	ldr	r0, [pc, #132]	@ (80148ac <vTaskDelete+0x10c>)
 8014826:	f7fe fcd1 	bl	80131cc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801482a:	4b21      	ldr	r3, [pc, #132]	@ (80148b0 <vTaskDelete+0x110>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	3301      	adds	r3, #1
 8014830:	4a1f      	ldr	r2, [pc, #124]	@ (80148b0 <vTaskDelete+0x110>)
 8014832:	6013      	str	r3, [r2, #0]
 8014834:	e009      	b.n	801484a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8014836:	4b1f      	ldr	r3, [pc, #124]	@ (80148b4 <vTaskDelete+0x114>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	3b01      	subs	r3, #1
 801483c:	4a1d      	ldr	r2, [pc, #116]	@ (80148b4 <vTaskDelete+0x114>)
 801483e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8014840:	68f8      	ldr	r0, [r7, #12]
 8014842:	f000 fc9b 	bl	801517c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8014846:	f000 fcd1 	bl	80151ec <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 801484a:	f001 f875 	bl	8015938 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801484e:	4b1a      	ldr	r3, [pc, #104]	@ (80148b8 <vTaskDelete+0x118>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d01e      	beq.n	8014894 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8014856:	4b11      	ldr	r3, [pc, #68]	@ (801489c <vTaskDelete+0xfc>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	68fa      	ldr	r2, [r7, #12]
 801485c:	429a      	cmp	r2, r3
 801485e:	d119      	bne.n	8014894 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8014860:	4b16      	ldr	r3, [pc, #88]	@ (80148bc <vTaskDelete+0x11c>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d00d      	beq.n	8014884 <vTaskDelete+0xe4>
	__asm volatile
 8014868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801486c:	b672      	cpsid	i
 801486e:	f383 8811 	msr	BASEPRI, r3
 8014872:	f3bf 8f6f 	isb	sy
 8014876:	f3bf 8f4f 	dsb	sy
 801487a:	b662      	cpsie	i
 801487c:	60bb      	str	r3, [r7, #8]
}
 801487e:	bf00      	nop
 8014880:	bf00      	nop
 8014882:	e7fd      	b.n	8014880 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8014884:	4b0e      	ldr	r3, [pc, #56]	@ (80148c0 <vTaskDelete+0x120>)
 8014886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801488a:	601a      	str	r2, [r3, #0]
 801488c:	f3bf 8f4f 	dsb	sy
 8014890:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014894:	bf00      	nop
 8014896:	3710      	adds	r7, #16
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}
 801489c:	2000584c 	.word	0x2000584c
 80148a0:	20005850 	.word	0x20005850
 80148a4:	20005954 	.word	0x20005954
 80148a8:	20005968 	.word	0x20005968
 80148ac:	20005920 	.word	0x20005920
 80148b0:	20005934 	.word	0x20005934
 80148b4:	2000594c 	.word	0x2000594c
 80148b8:	20005958 	.word	0x20005958
 80148bc:	20005974 	.word	0x20005974
 80148c0:	e000ed04 	.word	0xe000ed04

080148c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b084      	sub	sp, #16
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80148cc:	2300      	movs	r3, #0
 80148ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d01a      	beq.n	801490c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80148d6:	4b15      	ldr	r3, [pc, #84]	@ (801492c <vTaskDelay+0x68>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d00d      	beq.n	80148fa <vTaskDelay+0x36>
	__asm volatile
 80148de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148e2:	b672      	cpsid	i
 80148e4:	f383 8811 	msr	BASEPRI, r3
 80148e8:	f3bf 8f6f 	isb	sy
 80148ec:	f3bf 8f4f 	dsb	sy
 80148f0:	b662      	cpsie	i
 80148f2:	60bb      	str	r3, [r7, #8]
}
 80148f4:	bf00      	nop
 80148f6:	bf00      	nop
 80148f8:	e7fd      	b.n	80148f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80148fa:	f000 f889 	bl	8014a10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80148fe:	2100      	movs	r1, #0
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	f000 fe71 	bl	80155e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014906:	f000 f891 	bl	8014a2c <xTaskResumeAll>
 801490a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d107      	bne.n	8014922 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8014912:	4b07      	ldr	r3, [pc, #28]	@ (8014930 <vTaskDelay+0x6c>)
 8014914:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014918:	601a      	str	r2, [r3, #0]
 801491a:	f3bf 8f4f 	dsb	sy
 801491e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014922:	bf00      	nop
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	20005974 	.word	0x20005974
 8014930:	e000ed04 	.word	0xe000ed04

08014934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b08a      	sub	sp, #40	@ 0x28
 8014938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801493a:	2300      	movs	r3, #0
 801493c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801493e:	2300      	movs	r3, #0
 8014940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014942:	463a      	mov	r2, r7
 8014944:	1d39      	adds	r1, r7, #4
 8014946:	f107 0308 	add.w	r3, r7, #8
 801494a:	4618      	mov	r0, r3
 801494c:	f7eb fe42 	bl	80005d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014950:	6839      	ldr	r1, [r7, #0]
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	68ba      	ldr	r2, [r7, #8]
 8014956:	9202      	str	r2, [sp, #8]
 8014958:	9301      	str	r3, [sp, #4]
 801495a:	2300      	movs	r3, #0
 801495c:	9300      	str	r3, [sp, #0]
 801495e:	2300      	movs	r3, #0
 8014960:	460a      	mov	r2, r1
 8014962:	4923      	ldr	r1, [pc, #140]	@ (80149f0 <vTaskStartScheduler+0xbc>)
 8014964:	4823      	ldr	r0, [pc, #140]	@ (80149f4 <vTaskStartScheduler+0xc0>)
 8014966:	f7ff fd59 	bl	801441c <xTaskCreateStatic>
 801496a:	4603      	mov	r3, r0
 801496c:	4a22      	ldr	r2, [pc, #136]	@ (80149f8 <vTaskStartScheduler+0xc4>)
 801496e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014970:	4b21      	ldr	r3, [pc, #132]	@ (80149f8 <vTaskStartScheduler+0xc4>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d002      	beq.n	801497e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014978:	2301      	movs	r3, #1
 801497a:	617b      	str	r3, [r7, #20]
 801497c:	e001      	b.n	8014982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801497e:	2300      	movs	r3, #0
 8014980:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	2b01      	cmp	r3, #1
 8014986:	d11d      	bne.n	80149c4 <vTaskStartScheduler+0x90>
	__asm volatile
 8014988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801498c:	b672      	cpsid	i
 801498e:	f383 8811 	msr	BASEPRI, r3
 8014992:	f3bf 8f6f 	isb	sy
 8014996:	f3bf 8f4f 	dsb	sy
 801499a:	b662      	cpsie	i
 801499c:	613b      	str	r3, [r7, #16]
}
 801499e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80149a0:	4b16      	ldr	r3, [pc, #88]	@ (80149fc <vTaskStartScheduler+0xc8>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	3350      	adds	r3, #80	@ 0x50
 80149a6:	4a16      	ldr	r2, [pc, #88]	@ (8014a00 <vTaskStartScheduler+0xcc>)
 80149a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80149aa:	4b16      	ldr	r3, [pc, #88]	@ (8014a04 <vTaskStartScheduler+0xd0>)
 80149ac:	f04f 32ff 	mov.w	r2, #4294967295
 80149b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80149b2:	4b15      	ldr	r3, [pc, #84]	@ (8014a08 <vTaskStartScheduler+0xd4>)
 80149b4:	2201      	movs	r2, #1
 80149b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80149b8:	4b14      	ldr	r3, [pc, #80]	@ (8014a0c <vTaskStartScheduler+0xd8>)
 80149ba:	2200      	movs	r2, #0
 80149bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80149be:	f000 ff07 	bl	80157d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80149c2:	e011      	b.n	80149e8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149ca:	d10d      	bne.n	80149e8 <vTaskStartScheduler+0xb4>
	__asm volatile
 80149cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149d0:	b672      	cpsid	i
 80149d2:	f383 8811 	msr	BASEPRI, r3
 80149d6:	f3bf 8f6f 	isb	sy
 80149da:	f3bf 8f4f 	dsb	sy
 80149de:	b662      	cpsie	i
 80149e0:	60fb      	str	r3, [r7, #12]
}
 80149e2:	bf00      	nop
 80149e4:	bf00      	nop
 80149e6:	e7fd      	b.n	80149e4 <vTaskStartScheduler+0xb0>
}
 80149e8:	bf00      	nop
 80149ea:	3718      	adds	r7, #24
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	080287a0 	.word	0x080287a0
 80149f4:	0801506d 	.word	0x0801506d
 80149f8:	20005970 	.word	0x20005970
 80149fc:	2000584c 	.word	0x2000584c
 8014a00:	20000060 	.word	0x20000060
 8014a04:	2000596c 	.word	0x2000596c
 8014a08:	20005958 	.word	0x20005958
 8014a0c:	20005950 	.word	0x20005950

08014a10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014a10:	b480      	push	{r7}
 8014a12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014a14:	4b04      	ldr	r3, [pc, #16]	@ (8014a28 <vTaskSuspendAll+0x18>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	3301      	adds	r3, #1
 8014a1a:	4a03      	ldr	r2, [pc, #12]	@ (8014a28 <vTaskSuspendAll+0x18>)
 8014a1c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014a1e:	bf00      	nop
 8014a20:	46bd      	mov	sp, r7
 8014a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a26:	4770      	bx	lr
 8014a28:	20005974 	.word	0x20005974

08014a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014a32:	2300      	movs	r3, #0
 8014a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014a36:	2300      	movs	r3, #0
 8014a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014a3a:	4b43      	ldr	r3, [pc, #268]	@ (8014b48 <xTaskResumeAll+0x11c>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d10d      	bne.n	8014a5e <xTaskResumeAll+0x32>
	__asm volatile
 8014a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a46:	b672      	cpsid	i
 8014a48:	f383 8811 	msr	BASEPRI, r3
 8014a4c:	f3bf 8f6f 	isb	sy
 8014a50:	f3bf 8f4f 	dsb	sy
 8014a54:	b662      	cpsie	i
 8014a56:	603b      	str	r3, [r7, #0]
}
 8014a58:	bf00      	nop
 8014a5a:	bf00      	nop
 8014a5c:	e7fd      	b.n	8014a5a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014a5e:	f000 ff35 	bl	80158cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014a62:	4b39      	ldr	r3, [pc, #228]	@ (8014b48 <xTaskResumeAll+0x11c>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	3b01      	subs	r3, #1
 8014a68:	4a37      	ldr	r2, [pc, #220]	@ (8014b48 <xTaskResumeAll+0x11c>)
 8014a6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a6c:	4b36      	ldr	r3, [pc, #216]	@ (8014b48 <xTaskResumeAll+0x11c>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d161      	bne.n	8014b38 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014a74:	4b35      	ldr	r3, [pc, #212]	@ (8014b4c <xTaskResumeAll+0x120>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d05d      	beq.n	8014b38 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014a7c:	e02e      	b.n	8014adc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a7e:	4b34      	ldr	r3, [pc, #208]	@ (8014b50 <xTaskResumeAll+0x124>)
 8014a80:	68db      	ldr	r3, [r3, #12]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	3318      	adds	r3, #24
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7fe fbfb 	bl	8013286 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	3304      	adds	r3, #4
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7fe fbf6 	bl	8013286 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a9e:	2201      	movs	r2, #1
 8014aa0:	409a      	lsls	r2, r3
 8014aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8014b54 <xTaskResumeAll+0x128>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	4313      	orrs	r3, r2
 8014aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8014b54 <xTaskResumeAll+0x128>)
 8014aaa:	6013      	str	r3, [r2, #0]
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	009b      	lsls	r3, r3, #2
 8014ab4:	4413      	add	r3, r2
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	4a27      	ldr	r2, [pc, #156]	@ (8014b58 <xTaskResumeAll+0x12c>)
 8014aba:	441a      	add	r2, r3
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	3304      	adds	r3, #4
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	4610      	mov	r0, r2
 8014ac4:	f7fe fb82 	bl	80131cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014acc:	4b23      	ldr	r3, [pc, #140]	@ (8014b5c <xTaskResumeAll+0x130>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d302      	bcc.n	8014adc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8014ad6:	4b22      	ldr	r3, [pc, #136]	@ (8014b60 <xTaskResumeAll+0x134>)
 8014ad8:	2201      	movs	r2, #1
 8014ada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014adc:	4b1c      	ldr	r3, [pc, #112]	@ (8014b50 <xTaskResumeAll+0x124>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d1cc      	bne.n	8014a7e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d001      	beq.n	8014aee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014aea:	f000 fb7f 	bl	80151ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014aee:	4b1d      	ldr	r3, [pc, #116]	@ (8014b64 <xTaskResumeAll+0x138>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d010      	beq.n	8014b1c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014afa:	f000 f859 	bl	8014bb0 <xTaskIncrementTick>
 8014afe:	4603      	mov	r3, r0
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d002      	beq.n	8014b0a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8014b04:	4b16      	ldr	r3, [pc, #88]	@ (8014b60 <xTaskResumeAll+0x134>)
 8014b06:	2201      	movs	r2, #1
 8014b08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	3b01      	subs	r3, #1
 8014b0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d1f1      	bne.n	8014afa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8014b16:	4b13      	ldr	r3, [pc, #76]	@ (8014b64 <xTaskResumeAll+0x138>)
 8014b18:	2200      	movs	r2, #0
 8014b1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014b1c:	4b10      	ldr	r3, [pc, #64]	@ (8014b60 <xTaskResumeAll+0x134>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d009      	beq.n	8014b38 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014b24:	2301      	movs	r3, #1
 8014b26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014b28:	4b0f      	ldr	r3, [pc, #60]	@ (8014b68 <xTaskResumeAll+0x13c>)
 8014b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b2e:	601a      	str	r2, [r3, #0]
 8014b30:	f3bf 8f4f 	dsb	sy
 8014b34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014b38:	f000 fefe 	bl	8015938 <vPortExitCritical>

	return xAlreadyYielded;
 8014b3c:	68bb      	ldr	r3, [r7, #8]
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3710      	adds	r7, #16
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	20005974 	.word	0x20005974
 8014b4c:	2000594c 	.word	0x2000594c
 8014b50:	2000590c 	.word	0x2000590c
 8014b54:	20005954 	.word	0x20005954
 8014b58:	20005850 	.word	0x20005850
 8014b5c:	2000584c 	.word	0x2000584c
 8014b60:	20005960 	.word	0x20005960
 8014b64:	2000595c 	.word	0x2000595c
 8014b68:	e000ed04 	.word	0xe000ed04

08014b6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014b72:	4b05      	ldr	r3, [pc, #20]	@ (8014b88 <xTaskGetTickCount+0x1c>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014b78:	687b      	ldr	r3, [r7, #4]
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	370c      	adds	r7, #12
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b84:	4770      	bx	lr
 8014b86:	bf00      	nop
 8014b88:	20005950 	.word	0x20005950

08014b8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b082      	sub	sp, #8
 8014b90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014b92:	f000 ff83 	bl	8015a9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8014b96:	2300      	movs	r3, #0
 8014b98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014b9a:	4b04      	ldr	r3, [pc, #16]	@ (8014bac <xTaskGetTickCountFromISR+0x20>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014ba0:	683b      	ldr	r3, [r7, #0]
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3708      	adds	r7, #8
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
 8014baa:	bf00      	nop
 8014bac:	20005950 	.word	0x20005950

08014bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b086      	sub	sp, #24
 8014bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014bba:	4b50      	ldr	r3, [pc, #320]	@ (8014cfc <xTaskIncrementTick+0x14c>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	f040 808b 	bne.w	8014cda <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014bc4:	4b4e      	ldr	r3, [pc, #312]	@ (8014d00 <xTaskIncrementTick+0x150>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	3301      	adds	r3, #1
 8014bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8014d00 <xTaskIncrementTick+0x150>)
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d123      	bne.n	8014c20 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8014bd8:	4b4a      	ldr	r3, [pc, #296]	@ (8014d04 <xTaskIncrementTick+0x154>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d00d      	beq.n	8014bfe <xTaskIncrementTick+0x4e>
	__asm volatile
 8014be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014be6:	b672      	cpsid	i
 8014be8:	f383 8811 	msr	BASEPRI, r3
 8014bec:	f3bf 8f6f 	isb	sy
 8014bf0:	f3bf 8f4f 	dsb	sy
 8014bf4:	b662      	cpsie	i
 8014bf6:	603b      	str	r3, [r7, #0]
}
 8014bf8:	bf00      	nop
 8014bfa:	bf00      	nop
 8014bfc:	e7fd      	b.n	8014bfa <xTaskIncrementTick+0x4a>
 8014bfe:	4b41      	ldr	r3, [pc, #260]	@ (8014d04 <xTaskIncrementTick+0x154>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	4b40      	ldr	r3, [pc, #256]	@ (8014d08 <xTaskIncrementTick+0x158>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	4a3e      	ldr	r2, [pc, #248]	@ (8014d04 <xTaskIncrementTick+0x154>)
 8014c0a:	6013      	str	r3, [r2, #0]
 8014c0c:	4a3e      	ldr	r2, [pc, #248]	@ (8014d08 <xTaskIncrementTick+0x158>)
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	6013      	str	r3, [r2, #0]
 8014c12:	4b3e      	ldr	r3, [pc, #248]	@ (8014d0c <xTaskIncrementTick+0x15c>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	3301      	adds	r3, #1
 8014c18:	4a3c      	ldr	r2, [pc, #240]	@ (8014d0c <xTaskIncrementTick+0x15c>)
 8014c1a:	6013      	str	r3, [r2, #0]
 8014c1c:	f000 fae6 	bl	80151ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014c20:	4b3b      	ldr	r3, [pc, #236]	@ (8014d10 <xTaskIncrementTick+0x160>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	693a      	ldr	r2, [r7, #16]
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d348      	bcc.n	8014cbc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c2a:	4b36      	ldr	r3, [pc, #216]	@ (8014d04 <xTaskIncrementTick+0x154>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d104      	bne.n	8014c3e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c34:	4b36      	ldr	r3, [pc, #216]	@ (8014d10 <xTaskIncrementTick+0x160>)
 8014c36:	f04f 32ff 	mov.w	r2, #4294967295
 8014c3a:	601a      	str	r2, [r3, #0]
					break;
 8014c3c:	e03e      	b.n	8014cbc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c3e:	4b31      	ldr	r3, [pc, #196]	@ (8014d04 <xTaskIncrementTick+0x154>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	68db      	ldr	r3, [r3, #12]
 8014c46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014c48:	68bb      	ldr	r3, [r7, #8]
 8014c4a:	685b      	ldr	r3, [r3, #4]
 8014c4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014c4e:	693a      	ldr	r2, [r7, #16]
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d203      	bcs.n	8014c5e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014c56:	4a2e      	ldr	r2, [pc, #184]	@ (8014d10 <xTaskIncrementTick+0x160>)
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014c5c:	e02e      	b.n	8014cbc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c5e:	68bb      	ldr	r3, [r7, #8]
 8014c60:	3304      	adds	r3, #4
 8014c62:	4618      	mov	r0, r3
 8014c64:	f7fe fb0f 	bl	8013286 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d004      	beq.n	8014c7a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c70:	68bb      	ldr	r3, [r7, #8]
 8014c72:	3318      	adds	r3, #24
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7fe fb06 	bl	8013286 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c7e:	2201      	movs	r2, #1
 8014c80:	409a      	lsls	r2, r3
 8014c82:	4b24      	ldr	r3, [pc, #144]	@ (8014d14 <xTaskIncrementTick+0x164>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	4313      	orrs	r3, r2
 8014c88:	4a22      	ldr	r2, [pc, #136]	@ (8014d14 <xTaskIncrementTick+0x164>)
 8014c8a:	6013      	str	r3, [r2, #0]
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c90:	4613      	mov	r3, r2
 8014c92:	009b      	lsls	r3, r3, #2
 8014c94:	4413      	add	r3, r2
 8014c96:	009b      	lsls	r3, r3, #2
 8014c98:	4a1f      	ldr	r2, [pc, #124]	@ (8014d18 <xTaskIncrementTick+0x168>)
 8014c9a:	441a      	add	r2, r3
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	3304      	adds	r3, #4
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	4610      	mov	r0, r2
 8014ca4:	f7fe fa92 	bl	80131cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cac:	4b1b      	ldr	r3, [pc, #108]	@ (8014d1c <xTaskIncrementTick+0x16c>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cb2:	429a      	cmp	r2, r3
 8014cb4:	d3b9      	bcc.n	8014c2a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014cba:	e7b6      	b.n	8014c2a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014cbc:	4b17      	ldr	r3, [pc, #92]	@ (8014d1c <xTaskIncrementTick+0x16c>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cc2:	4915      	ldr	r1, [pc, #84]	@ (8014d18 <xTaskIncrementTick+0x168>)
 8014cc4:	4613      	mov	r3, r2
 8014cc6:	009b      	lsls	r3, r3, #2
 8014cc8:	4413      	add	r3, r2
 8014cca:	009b      	lsls	r3, r3, #2
 8014ccc:	440b      	add	r3, r1
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	d907      	bls.n	8014ce4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	617b      	str	r3, [r7, #20]
 8014cd8:	e004      	b.n	8014ce4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014cda:	4b11      	ldr	r3, [pc, #68]	@ (8014d20 <xTaskIncrementTick+0x170>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	3301      	adds	r3, #1
 8014ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8014d20 <xTaskIncrementTick+0x170>)
 8014ce2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8014d24 <xTaskIncrementTick+0x174>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d001      	beq.n	8014cf0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014cec:	2301      	movs	r3, #1
 8014cee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014cf0:	697b      	ldr	r3, [r7, #20]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3718      	adds	r7, #24
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	20005974 	.word	0x20005974
 8014d00:	20005950 	.word	0x20005950
 8014d04:	20005904 	.word	0x20005904
 8014d08:	20005908 	.word	0x20005908
 8014d0c:	20005964 	.word	0x20005964
 8014d10:	2000596c 	.word	0x2000596c
 8014d14:	20005954 	.word	0x20005954
 8014d18:	20005850 	.word	0x20005850
 8014d1c:	2000584c 	.word	0x2000584c
 8014d20:	2000595c 	.word	0x2000595c
 8014d24:	20005960 	.word	0x20005960

08014d28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b088      	sub	sp, #32
 8014d2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8014e24 <vTaskSwitchContext+0xfc>)
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d003      	beq.n	8014d3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014d36:	4b3c      	ldr	r3, [pc, #240]	@ (8014e28 <vTaskSwitchContext+0x100>)
 8014d38:	2201      	movs	r2, #1
 8014d3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014d3c:	e06e      	b.n	8014e1c <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8014d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8014e28 <vTaskSwitchContext+0x100>)
 8014d40:	2200      	movs	r2, #0
 8014d42:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014d44:	4b39      	ldr	r3, [pc, #228]	@ (8014e2c <vTaskSwitchContext+0x104>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d4a:	61fb      	str	r3, [r7, #28]
 8014d4c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014d50:	61bb      	str	r3, [r7, #24]
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	69ba      	ldr	r2, [r7, #24]
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d111      	bne.n	8014d80 <vTaskSwitchContext+0x58>
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	3304      	adds	r3, #4
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	69ba      	ldr	r2, [r7, #24]
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d10b      	bne.n	8014d80 <vTaskSwitchContext+0x58>
 8014d68:	69fb      	ldr	r3, [r7, #28]
 8014d6a:	3308      	adds	r3, #8
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	69ba      	ldr	r2, [r7, #24]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d105      	bne.n	8014d80 <vTaskSwitchContext+0x58>
 8014d74:	69fb      	ldr	r3, [r7, #28]
 8014d76:	330c      	adds	r3, #12
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	69ba      	ldr	r2, [r7, #24]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d008      	beq.n	8014d92 <vTaskSwitchContext+0x6a>
 8014d80:	4b2a      	ldr	r3, [pc, #168]	@ (8014e2c <vTaskSwitchContext+0x104>)
 8014d82:	681a      	ldr	r2, [r3, #0]
 8014d84:	4b29      	ldr	r3, [pc, #164]	@ (8014e2c <vTaskSwitchContext+0x104>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	3334      	adds	r3, #52	@ 0x34
 8014d8a:	4619      	mov	r1, r3
 8014d8c:	4610      	mov	r0, r2
 8014d8e:	f7eb fc0e 	bl	80005ae <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d92:	4b27      	ldr	r3, [pc, #156]	@ (8014e30 <vTaskSwitchContext+0x108>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	fab3 f383 	clz	r3, r3
 8014d9e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014da0:	7afb      	ldrb	r3, [r7, #11]
 8014da2:	f1c3 031f 	rsb	r3, r3, #31
 8014da6:	617b      	str	r3, [r7, #20]
 8014da8:	4922      	ldr	r1, [pc, #136]	@ (8014e34 <vTaskSwitchContext+0x10c>)
 8014daa:	697a      	ldr	r2, [r7, #20]
 8014dac:	4613      	mov	r3, r2
 8014dae:	009b      	lsls	r3, r3, #2
 8014db0:	4413      	add	r3, r2
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	440b      	add	r3, r1
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d10d      	bne.n	8014dd8 <vTaskSwitchContext+0xb0>
	__asm volatile
 8014dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dc0:	b672      	cpsid	i
 8014dc2:	f383 8811 	msr	BASEPRI, r3
 8014dc6:	f3bf 8f6f 	isb	sy
 8014dca:	f3bf 8f4f 	dsb	sy
 8014dce:	b662      	cpsie	i
 8014dd0:	607b      	str	r3, [r7, #4]
}
 8014dd2:	bf00      	nop
 8014dd4:	bf00      	nop
 8014dd6:	e7fd      	b.n	8014dd4 <vTaskSwitchContext+0xac>
 8014dd8:	697a      	ldr	r2, [r7, #20]
 8014dda:	4613      	mov	r3, r2
 8014ddc:	009b      	lsls	r3, r3, #2
 8014dde:	4413      	add	r3, r2
 8014de0:	009b      	lsls	r3, r3, #2
 8014de2:	4a14      	ldr	r2, [pc, #80]	@ (8014e34 <vTaskSwitchContext+0x10c>)
 8014de4:	4413      	add	r3, r2
 8014de6:	613b      	str	r3, [r7, #16]
 8014de8:	693b      	ldr	r3, [r7, #16]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	685a      	ldr	r2, [r3, #4]
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	605a      	str	r2, [r3, #4]
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	685a      	ldr	r2, [r3, #4]
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	3308      	adds	r3, #8
 8014dfa:	429a      	cmp	r2, r3
 8014dfc:	d104      	bne.n	8014e08 <vTaskSwitchContext+0xe0>
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	685a      	ldr	r2, [r3, #4]
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	605a      	str	r2, [r3, #4]
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	68db      	ldr	r3, [r3, #12]
 8014e0e:	4a07      	ldr	r2, [pc, #28]	@ (8014e2c <vTaskSwitchContext+0x104>)
 8014e10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014e12:	4b06      	ldr	r3, [pc, #24]	@ (8014e2c <vTaskSwitchContext+0x104>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	3350      	adds	r3, #80	@ 0x50
 8014e18:	4a07      	ldr	r2, [pc, #28]	@ (8014e38 <vTaskSwitchContext+0x110>)
 8014e1a:	6013      	str	r3, [r2, #0]
}
 8014e1c:	bf00      	nop
 8014e1e:	3720      	adds	r7, #32
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	20005974 	.word	0x20005974
 8014e28:	20005960 	.word	0x20005960
 8014e2c:	2000584c 	.word	0x2000584c
 8014e30:	20005954 	.word	0x20005954
 8014e34:	20005850 	.word	0x20005850
 8014e38:	20000060 	.word	0x20000060

08014e3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b084      	sub	sp, #16
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
 8014e44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d10d      	bne.n	8014e68 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8014e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e50:	b672      	cpsid	i
 8014e52:	f383 8811 	msr	BASEPRI, r3
 8014e56:	f3bf 8f6f 	isb	sy
 8014e5a:	f3bf 8f4f 	dsb	sy
 8014e5e:	b662      	cpsie	i
 8014e60:	60fb      	str	r3, [r7, #12]
}
 8014e62:	bf00      	nop
 8014e64:	bf00      	nop
 8014e66:	e7fd      	b.n	8014e64 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014e68:	4b07      	ldr	r3, [pc, #28]	@ (8014e88 <vTaskPlaceOnEventList+0x4c>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	3318      	adds	r3, #24
 8014e6e:	4619      	mov	r1, r3
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f7fe f9cf 	bl	8013214 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014e76:	2101      	movs	r1, #1
 8014e78:	6838      	ldr	r0, [r7, #0]
 8014e7a:	f000 fbb5 	bl	80155e8 <prvAddCurrentTaskToDelayedList>
}
 8014e7e:	bf00      	nop
 8014e80:	3710      	adds	r7, #16
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	2000584c 	.word	0x2000584c

08014e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b086      	sub	sp, #24
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	68db      	ldr	r3, [r3, #12]
 8014e98:	68db      	ldr	r3, [r3, #12]
 8014e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014e9c:	693b      	ldr	r3, [r7, #16]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d10d      	bne.n	8014ebe <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8014ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ea6:	b672      	cpsid	i
 8014ea8:	f383 8811 	msr	BASEPRI, r3
 8014eac:	f3bf 8f6f 	isb	sy
 8014eb0:	f3bf 8f4f 	dsb	sy
 8014eb4:	b662      	cpsie	i
 8014eb6:	60fb      	str	r3, [r7, #12]
}
 8014eb8:	bf00      	nop
 8014eba:	bf00      	nop
 8014ebc:	e7fd      	b.n	8014eba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014ebe:	693b      	ldr	r3, [r7, #16]
 8014ec0:	3318      	adds	r3, #24
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f7fe f9df 	bl	8013286 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8014f40 <xTaskRemoveFromEventList+0xb4>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d11c      	bne.n	8014f0a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014ed0:	693b      	ldr	r3, [r7, #16]
 8014ed2:	3304      	adds	r3, #4
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7fe f9d6 	bl	8013286 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ede:	2201      	movs	r2, #1
 8014ee0:	409a      	lsls	r2, r3
 8014ee2:	4b18      	ldr	r3, [pc, #96]	@ (8014f44 <xTaskRemoveFromEventList+0xb8>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	4313      	orrs	r3, r2
 8014ee8:	4a16      	ldr	r2, [pc, #88]	@ (8014f44 <xTaskRemoveFromEventList+0xb8>)
 8014eea:	6013      	str	r3, [r2, #0]
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ef0:	4613      	mov	r3, r2
 8014ef2:	009b      	lsls	r3, r3, #2
 8014ef4:	4413      	add	r3, r2
 8014ef6:	009b      	lsls	r3, r3, #2
 8014ef8:	4a13      	ldr	r2, [pc, #76]	@ (8014f48 <xTaskRemoveFromEventList+0xbc>)
 8014efa:	441a      	add	r2, r3
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	3304      	adds	r3, #4
 8014f00:	4619      	mov	r1, r3
 8014f02:	4610      	mov	r0, r2
 8014f04:	f7fe f962 	bl	80131cc <vListInsertEnd>
 8014f08:	e005      	b.n	8014f16 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	3318      	adds	r3, #24
 8014f0e:	4619      	mov	r1, r3
 8014f10:	480e      	ldr	r0, [pc, #56]	@ (8014f4c <xTaskRemoveFromEventList+0xc0>)
 8014f12:	f7fe f95b 	bl	80131cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8014f50 <xTaskRemoveFromEventList+0xc4>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d905      	bls.n	8014f30 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014f24:	2301      	movs	r3, #1
 8014f26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014f28:	4b0a      	ldr	r3, [pc, #40]	@ (8014f54 <xTaskRemoveFromEventList+0xc8>)
 8014f2a:	2201      	movs	r2, #1
 8014f2c:	601a      	str	r2, [r3, #0]
 8014f2e:	e001      	b.n	8014f34 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014f30:	2300      	movs	r3, #0
 8014f32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014f34:	697b      	ldr	r3, [r7, #20]
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	3718      	adds	r7, #24
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	20005974 	.word	0x20005974
 8014f44:	20005954 	.word	0x20005954
 8014f48:	20005850 	.word	0x20005850
 8014f4c:	2000590c 	.word	0x2000590c
 8014f50:	2000584c 	.word	0x2000584c
 8014f54:	20005960 	.word	0x20005960

08014f58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014f58:	b480      	push	{r7}
 8014f5a:	b083      	sub	sp, #12
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014f60:	4b06      	ldr	r3, [pc, #24]	@ (8014f7c <vTaskInternalSetTimeOutState+0x24>)
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014f68:	4b05      	ldr	r3, [pc, #20]	@ (8014f80 <vTaskInternalSetTimeOutState+0x28>)
 8014f6a:	681a      	ldr	r2, [r3, #0]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	605a      	str	r2, [r3, #4]
}
 8014f70:	bf00      	nop
 8014f72:	370c      	adds	r7, #12
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr
 8014f7c:	20005964 	.word	0x20005964
 8014f80:	20005950 	.word	0x20005950

08014f84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b088      	sub	sp, #32
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d10d      	bne.n	8014fb0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8014f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f98:	b672      	cpsid	i
 8014f9a:	f383 8811 	msr	BASEPRI, r3
 8014f9e:	f3bf 8f6f 	isb	sy
 8014fa2:	f3bf 8f4f 	dsb	sy
 8014fa6:	b662      	cpsie	i
 8014fa8:	613b      	str	r3, [r7, #16]
}
 8014faa:	bf00      	nop
 8014fac:	bf00      	nop
 8014fae:	e7fd      	b.n	8014fac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d10d      	bne.n	8014fd2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8014fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fba:	b672      	cpsid	i
 8014fbc:	f383 8811 	msr	BASEPRI, r3
 8014fc0:	f3bf 8f6f 	isb	sy
 8014fc4:	f3bf 8f4f 	dsb	sy
 8014fc8:	b662      	cpsie	i
 8014fca:	60fb      	str	r3, [r7, #12]
}
 8014fcc:	bf00      	nop
 8014fce:	bf00      	nop
 8014fd0:	e7fd      	b.n	8014fce <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8014fd2:	f000 fc7b 	bl	80158cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014fd6:	4b1d      	ldr	r3, [pc, #116]	@ (801504c <xTaskCheckForTimeOut+0xc8>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	69ba      	ldr	r2, [r7, #24]
 8014fe2:	1ad3      	subs	r3, r2, r3
 8014fe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fee:	d102      	bne.n	8014ff6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	61fb      	str	r3, [r7, #28]
 8014ff4:	e023      	b.n	801503e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	681a      	ldr	r2, [r3, #0]
 8014ffa:	4b15      	ldr	r3, [pc, #84]	@ (8015050 <xTaskCheckForTimeOut+0xcc>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d007      	beq.n	8015012 <xTaskCheckForTimeOut+0x8e>
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	69ba      	ldr	r2, [r7, #24]
 8015008:	429a      	cmp	r2, r3
 801500a:	d302      	bcc.n	8015012 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801500c:	2301      	movs	r3, #1
 801500e:	61fb      	str	r3, [r7, #28]
 8015010:	e015      	b.n	801503e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	697a      	ldr	r2, [r7, #20]
 8015018:	429a      	cmp	r2, r3
 801501a:	d20b      	bcs.n	8015034 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801501c:	683b      	ldr	r3, [r7, #0]
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	1ad2      	subs	r2, r2, r3
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f7ff ff95 	bl	8014f58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801502e:	2300      	movs	r3, #0
 8015030:	61fb      	str	r3, [r7, #28]
 8015032:	e004      	b.n	801503e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8015034:	683b      	ldr	r3, [r7, #0]
 8015036:	2200      	movs	r2, #0
 8015038:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801503a:	2301      	movs	r3, #1
 801503c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801503e:	f000 fc7b 	bl	8015938 <vPortExitCritical>

	return xReturn;
 8015042:	69fb      	ldr	r3, [r7, #28]
}
 8015044:	4618      	mov	r0, r3
 8015046:	3720      	adds	r7, #32
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	20005950 	.word	0x20005950
 8015050:	20005964 	.word	0x20005964

08015054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015054:	b480      	push	{r7}
 8015056:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015058:	4b03      	ldr	r3, [pc, #12]	@ (8015068 <vTaskMissedYield+0x14>)
 801505a:	2201      	movs	r2, #1
 801505c:	601a      	str	r2, [r3, #0]
}
 801505e:	bf00      	nop
 8015060:	46bd      	mov	sp, r7
 8015062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015066:	4770      	bx	lr
 8015068:	20005960 	.word	0x20005960

0801506c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015074:	f000 f854 	bl	8015120 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015078:	4b07      	ldr	r3, [pc, #28]	@ (8015098 <prvIdleTask+0x2c>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b01      	cmp	r3, #1
 801507e:	d907      	bls.n	8015090 <prvIdleTask+0x24>
			{
				taskYIELD();
 8015080:	4b06      	ldr	r3, [pc, #24]	@ (801509c <prvIdleTask+0x30>)
 8015082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015086:	601a      	str	r2, [r3, #0]
 8015088:	f3bf 8f4f 	dsb	sy
 801508c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015090:	f7eb fa86 	bl	80005a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8015094:	e7ee      	b.n	8015074 <prvIdleTask+0x8>
 8015096:	bf00      	nop
 8015098:	20005850 	.word	0x20005850
 801509c:	e000ed04 	.word	0xe000ed04

080150a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80150a6:	2300      	movs	r3, #0
 80150a8:	607b      	str	r3, [r7, #4]
 80150aa:	e00c      	b.n	80150c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80150ac:	687a      	ldr	r2, [r7, #4]
 80150ae:	4613      	mov	r3, r2
 80150b0:	009b      	lsls	r3, r3, #2
 80150b2:	4413      	add	r3, r2
 80150b4:	009b      	lsls	r3, r3, #2
 80150b6:	4a12      	ldr	r2, [pc, #72]	@ (8015100 <prvInitialiseTaskLists+0x60>)
 80150b8:	4413      	add	r3, r2
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7fe f859 	bl	8013172 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	3301      	adds	r3, #1
 80150c4:	607b      	str	r3, [r7, #4]
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	2b06      	cmp	r3, #6
 80150ca:	d9ef      	bls.n	80150ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80150cc:	480d      	ldr	r0, [pc, #52]	@ (8015104 <prvInitialiseTaskLists+0x64>)
 80150ce:	f7fe f850 	bl	8013172 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80150d2:	480d      	ldr	r0, [pc, #52]	@ (8015108 <prvInitialiseTaskLists+0x68>)
 80150d4:	f7fe f84d 	bl	8013172 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80150d8:	480c      	ldr	r0, [pc, #48]	@ (801510c <prvInitialiseTaskLists+0x6c>)
 80150da:	f7fe f84a 	bl	8013172 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80150de:	480c      	ldr	r0, [pc, #48]	@ (8015110 <prvInitialiseTaskLists+0x70>)
 80150e0:	f7fe f847 	bl	8013172 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80150e4:	480b      	ldr	r0, [pc, #44]	@ (8015114 <prvInitialiseTaskLists+0x74>)
 80150e6:	f7fe f844 	bl	8013172 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80150ea:	4b0b      	ldr	r3, [pc, #44]	@ (8015118 <prvInitialiseTaskLists+0x78>)
 80150ec:	4a05      	ldr	r2, [pc, #20]	@ (8015104 <prvInitialiseTaskLists+0x64>)
 80150ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80150f0:	4b0a      	ldr	r3, [pc, #40]	@ (801511c <prvInitialiseTaskLists+0x7c>)
 80150f2:	4a05      	ldr	r2, [pc, #20]	@ (8015108 <prvInitialiseTaskLists+0x68>)
 80150f4:	601a      	str	r2, [r3, #0]
}
 80150f6:	bf00      	nop
 80150f8:	3708      	adds	r7, #8
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
 80150fe:	bf00      	nop
 8015100:	20005850 	.word	0x20005850
 8015104:	200058dc 	.word	0x200058dc
 8015108:	200058f0 	.word	0x200058f0
 801510c:	2000590c 	.word	0x2000590c
 8015110:	20005920 	.word	0x20005920
 8015114:	20005938 	.word	0x20005938
 8015118:	20005904 	.word	0x20005904
 801511c:	20005908 	.word	0x20005908

08015120 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015126:	e019      	b.n	801515c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015128:	f000 fbd0 	bl	80158cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801512c:	4b10      	ldr	r3, [pc, #64]	@ (8015170 <prvCheckTasksWaitingTermination+0x50>)
 801512e:	68db      	ldr	r3, [r3, #12]
 8015130:	68db      	ldr	r3, [r3, #12]
 8015132:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	3304      	adds	r3, #4
 8015138:	4618      	mov	r0, r3
 801513a:	f7fe f8a4 	bl	8013286 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801513e:	4b0d      	ldr	r3, [pc, #52]	@ (8015174 <prvCheckTasksWaitingTermination+0x54>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	3b01      	subs	r3, #1
 8015144:	4a0b      	ldr	r2, [pc, #44]	@ (8015174 <prvCheckTasksWaitingTermination+0x54>)
 8015146:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015148:	4b0b      	ldr	r3, [pc, #44]	@ (8015178 <prvCheckTasksWaitingTermination+0x58>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	3b01      	subs	r3, #1
 801514e:	4a0a      	ldr	r2, [pc, #40]	@ (8015178 <prvCheckTasksWaitingTermination+0x58>)
 8015150:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015152:	f000 fbf1 	bl	8015938 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f000 f810 	bl	801517c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801515c:	4b06      	ldr	r3, [pc, #24]	@ (8015178 <prvCheckTasksWaitingTermination+0x58>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d1e1      	bne.n	8015128 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015164:	bf00      	nop
 8015166:	bf00      	nop
 8015168:	3708      	adds	r7, #8
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}
 801516e:	bf00      	nop
 8015170:	20005920 	.word	0x20005920
 8015174:	2000594c 	.word	0x2000594c
 8015178:	20005934 	.word	0x20005934

0801517c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801517c:	b580      	push	{r7, lr}
 801517e:	b084      	sub	sp, #16
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	3350      	adds	r3, #80	@ 0x50
 8015188:	4618      	mov	r0, r3
 801518a:	f012 fc5f 	bl	8027a4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8015194:	2b00      	cmp	r3, #0
 8015196:	d108      	bne.n	80151aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801519c:	4618      	mov	r0, r3
 801519e:	f000 fd95 	bl	8015ccc <vPortFree>
				vPortFree( pxTCB );
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f000 fd92 	bl	8015ccc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80151a8:	e01b      	b.n	80151e2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d103      	bne.n	80151bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f000 fd89 	bl	8015ccc <vPortFree>
	}
 80151ba:	e012      	b.n	80151e2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80151c2:	2b02      	cmp	r3, #2
 80151c4:	d00d      	beq.n	80151e2 <prvDeleteTCB+0x66>
	__asm volatile
 80151c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151ca:	b672      	cpsid	i
 80151cc:	f383 8811 	msr	BASEPRI, r3
 80151d0:	f3bf 8f6f 	isb	sy
 80151d4:	f3bf 8f4f 	dsb	sy
 80151d8:	b662      	cpsie	i
 80151da:	60fb      	str	r3, [r7, #12]
}
 80151dc:	bf00      	nop
 80151de:	bf00      	nop
 80151e0:	e7fd      	b.n	80151de <prvDeleteTCB+0x62>
	}
 80151e2:	bf00      	nop
 80151e4:	3710      	adds	r7, #16
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
	...

080151ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80151ec:	b480      	push	{r7}
 80151ee:	b083      	sub	sp, #12
 80151f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80151f2:	4b0c      	ldr	r3, [pc, #48]	@ (8015224 <prvResetNextTaskUnblockTime+0x38>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d104      	bne.n	8015206 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80151fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015228 <prvResetNextTaskUnblockTime+0x3c>)
 80151fe:	f04f 32ff 	mov.w	r2, #4294967295
 8015202:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015204:	e008      	b.n	8015218 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015206:	4b07      	ldr	r3, [pc, #28]	@ (8015224 <prvResetNextTaskUnblockTime+0x38>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	68db      	ldr	r3, [r3, #12]
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	4a04      	ldr	r2, [pc, #16]	@ (8015228 <prvResetNextTaskUnblockTime+0x3c>)
 8015216:	6013      	str	r3, [r2, #0]
}
 8015218:	bf00      	nop
 801521a:	370c      	adds	r7, #12
 801521c:	46bd      	mov	sp, r7
 801521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015222:	4770      	bx	lr
 8015224:	20005904 	.word	0x20005904
 8015228:	2000596c 	.word	0x2000596c

0801522c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801522c:	b480      	push	{r7}
 801522e:	b083      	sub	sp, #12
 8015230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015232:	4b0b      	ldr	r3, [pc, #44]	@ (8015260 <xTaskGetSchedulerState+0x34>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d102      	bne.n	8015240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801523a:	2301      	movs	r3, #1
 801523c:	607b      	str	r3, [r7, #4]
 801523e:	e008      	b.n	8015252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015240:	4b08      	ldr	r3, [pc, #32]	@ (8015264 <xTaskGetSchedulerState+0x38>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d102      	bne.n	801524e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015248:	2302      	movs	r3, #2
 801524a:	607b      	str	r3, [r7, #4]
 801524c:	e001      	b.n	8015252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801524e:	2300      	movs	r3, #0
 8015250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015252:	687b      	ldr	r3, [r7, #4]
	}
 8015254:	4618      	mov	r0, r3
 8015256:	370c      	adds	r7, #12
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr
 8015260:	20005958 	.word	0x20005958
 8015264:	20005974 	.word	0x20005974

08015268 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015268:	b580      	push	{r7, lr}
 801526a:	b084      	sub	sp, #16
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015274:	2300      	movs	r3, #0
 8015276:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d069      	beq.n	8015352 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015282:	4b36      	ldr	r3, [pc, #216]	@ (801535c <xTaskPriorityInherit+0xf4>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015288:	429a      	cmp	r2, r3
 801528a:	d259      	bcs.n	8015340 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	699b      	ldr	r3, [r3, #24]
 8015290:	2b00      	cmp	r3, #0
 8015292:	db06      	blt.n	80152a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015294:	4b31      	ldr	r3, [pc, #196]	@ (801535c <xTaskPriorityInherit+0xf4>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801529a:	f1c3 0207 	rsb	r2, r3, #7
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80152a2:	68bb      	ldr	r3, [r7, #8]
 80152a4:	6959      	ldr	r1, [r3, #20]
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152aa:	4613      	mov	r3, r2
 80152ac:	009b      	lsls	r3, r3, #2
 80152ae:	4413      	add	r3, r2
 80152b0:	009b      	lsls	r3, r3, #2
 80152b2:	4a2b      	ldr	r2, [pc, #172]	@ (8015360 <xTaskPriorityInherit+0xf8>)
 80152b4:	4413      	add	r3, r2
 80152b6:	4299      	cmp	r1, r3
 80152b8:	d13a      	bne.n	8015330 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	3304      	adds	r3, #4
 80152be:	4618      	mov	r0, r3
 80152c0:	f7fd ffe1 	bl	8013286 <uxListRemove>
 80152c4:	4603      	mov	r3, r0
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d115      	bne.n	80152f6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152ce:	4924      	ldr	r1, [pc, #144]	@ (8015360 <xTaskPriorityInherit+0xf8>)
 80152d0:	4613      	mov	r3, r2
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	4413      	add	r3, r2
 80152d6:	009b      	lsls	r3, r3, #2
 80152d8:	440b      	add	r3, r1
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d10a      	bne.n	80152f6 <xTaskPriorityInherit+0x8e>
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152e4:	2201      	movs	r2, #1
 80152e6:	fa02 f303 	lsl.w	r3, r2, r3
 80152ea:	43da      	mvns	r2, r3
 80152ec:	4b1d      	ldr	r3, [pc, #116]	@ (8015364 <xTaskPriorityInherit+0xfc>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	4013      	ands	r3, r2
 80152f2:	4a1c      	ldr	r2, [pc, #112]	@ (8015364 <xTaskPriorityInherit+0xfc>)
 80152f4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80152f6:	4b19      	ldr	r3, [pc, #100]	@ (801535c <xTaskPriorityInherit+0xf4>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015304:	2201      	movs	r2, #1
 8015306:	409a      	lsls	r2, r3
 8015308:	4b16      	ldr	r3, [pc, #88]	@ (8015364 <xTaskPriorityInherit+0xfc>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	4313      	orrs	r3, r2
 801530e:	4a15      	ldr	r2, [pc, #84]	@ (8015364 <xTaskPriorityInherit+0xfc>)
 8015310:	6013      	str	r3, [r2, #0]
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015316:	4613      	mov	r3, r2
 8015318:	009b      	lsls	r3, r3, #2
 801531a:	4413      	add	r3, r2
 801531c:	009b      	lsls	r3, r3, #2
 801531e:	4a10      	ldr	r2, [pc, #64]	@ (8015360 <xTaskPriorityInherit+0xf8>)
 8015320:	441a      	add	r2, r3
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	3304      	adds	r3, #4
 8015326:	4619      	mov	r1, r3
 8015328:	4610      	mov	r0, r2
 801532a:	f7fd ff4f 	bl	80131cc <vListInsertEnd>
 801532e:	e004      	b.n	801533a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015330:	4b0a      	ldr	r3, [pc, #40]	@ (801535c <xTaskPriorityInherit+0xf4>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015336:	68bb      	ldr	r3, [r7, #8]
 8015338:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801533a:	2301      	movs	r3, #1
 801533c:	60fb      	str	r3, [r7, #12]
 801533e:	e008      	b.n	8015352 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015344:	4b05      	ldr	r3, [pc, #20]	@ (801535c <xTaskPriorityInherit+0xf4>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801534a:	429a      	cmp	r2, r3
 801534c:	d201      	bcs.n	8015352 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801534e:	2301      	movs	r3, #1
 8015350:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015352:	68fb      	ldr	r3, [r7, #12]
	}
 8015354:	4618      	mov	r0, r3
 8015356:	3710      	adds	r7, #16
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	2000584c 	.word	0x2000584c
 8015360:	20005850 	.word	0x20005850
 8015364:	20005954 	.word	0x20005954

08015368 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015368:	b580      	push	{r7, lr}
 801536a:	b086      	sub	sp, #24
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015374:	2300      	movs	r3, #0
 8015376:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d074      	beq.n	8015468 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801537e:	4b3d      	ldr	r3, [pc, #244]	@ (8015474 <xTaskPriorityDisinherit+0x10c>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	693a      	ldr	r2, [r7, #16]
 8015384:	429a      	cmp	r2, r3
 8015386:	d00d      	beq.n	80153a4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8015388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801538c:	b672      	cpsid	i
 801538e:	f383 8811 	msr	BASEPRI, r3
 8015392:	f3bf 8f6f 	isb	sy
 8015396:	f3bf 8f4f 	dsb	sy
 801539a:	b662      	cpsie	i
 801539c:	60fb      	str	r3, [r7, #12]
}
 801539e:	bf00      	nop
 80153a0:	bf00      	nop
 80153a2:	e7fd      	b.n	80153a0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d10d      	bne.n	80153c8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80153ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153b0:	b672      	cpsid	i
 80153b2:	f383 8811 	msr	BASEPRI, r3
 80153b6:	f3bf 8f6f 	isb	sy
 80153ba:	f3bf 8f4f 	dsb	sy
 80153be:	b662      	cpsie	i
 80153c0:	60bb      	str	r3, [r7, #8]
}
 80153c2:	bf00      	nop
 80153c4:	bf00      	nop
 80153c6:	e7fd      	b.n	80153c4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80153cc:	1e5a      	subs	r2, r3, #1
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153da:	429a      	cmp	r2, r3
 80153dc:	d044      	beq.n	8015468 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d140      	bne.n	8015468 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153e6:	693b      	ldr	r3, [r7, #16]
 80153e8:	3304      	adds	r3, #4
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7fd ff4b 	bl	8013286 <uxListRemove>
 80153f0:	4603      	mov	r3, r0
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d115      	bne.n	8015422 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80153f6:	693b      	ldr	r3, [r7, #16]
 80153f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153fa:	491f      	ldr	r1, [pc, #124]	@ (8015478 <xTaskPriorityDisinherit+0x110>)
 80153fc:	4613      	mov	r3, r2
 80153fe:	009b      	lsls	r3, r3, #2
 8015400:	4413      	add	r3, r2
 8015402:	009b      	lsls	r3, r3, #2
 8015404:	440b      	add	r3, r1
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d10a      	bne.n	8015422 <xTaskPriorityDisinherit+0xba>
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015410:	2201      	movs	r2, #1
 8015412:	fa02 f303 	lsl.w	r3, r2, r3
 8015416:	43da      	mvns	r2, r3
 8015418:	4b18      	ldr	r3, [pc, #96]	@ (801547c <xTaskPriorityDisinherit+0x114>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	4013      	ands	r3, r2
 801541e:	4a17      	ldr	r2, [pc, #92]	@ (801547c <xTaskPriorityDisinherit+0x114>)
 8015420:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801542a:	693b      	ldr	r3, [r7, #16]
 801542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801542e:	f1c3 0207 	rsb	r2, r3, #7
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015436:	693b      	ldr	r3, [r7, #16]
 8015438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801543a:	2201      	movs	r2, #1
 801543c:	409a      	lsls	r2, r3
 801543e:	4b0f      	ldr	r3, [pc, #60]	@ (801547c <xTaskPriorityDisinherit+0x114>)
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	4313      	orrs	r3, r2
 8015444:	4a0d      	ldr	r2, [pc, #52]	@ (801547c <xTaskPriorityDisinherit+0x114>)
 8015446:	6013      	str	r3, [r2, #0]
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801544c:	4613      	mov	r3, r2
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	4413      	add	r3, r2
 8015452:	009b      	lsls	r3, r3, #2
 8015454:	4a08      	ldr	r2, [pc, #32]	@ (8015478 <xTaskPriorityDisinherit+0x110>)
 8015456:	441a      	add	r2, r3
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	3304      	adds	r3, #4
 801545c:	4619      	mov	r1, r3
 801545e:	4610      	mov	r0, r2
 8015460:	f7fd feb4 	bl	80131cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015464:	2301      	movs	r3, #1
 8015466:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015468:	697b      	ldr	r3, [r7, #20]
	}
 801546a:	4618      	mov	r0, r3
 801546c:	3718      	adds	r7, #24
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	2000584c 	.word	0x2000584c
 8015478:	20005850 	.word	0x20005850
 801547c:	20005954 	.word	0x20005954

08015480 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015480:	b580      	push	{r7, lr}
 8015482:	b088      	sub	sp, #32
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801548e:	2301      	movs	r3, #1
 8015490:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2b00      	cmp	r3, #0
 8015496:	f000 8089 	beq.w	80155ac <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801549a:	69bb      	ldr	r3, [r7, #24]
 801549c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d10d      	bne.n	80154be <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80154a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154a6:	b672      	cpsid	i
 80154a8:	f383 8811 	msr	BASEPRI, r3
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f3bf 8f4f 	dsb	sy
 80154b4:	b662      	cpsie	i
 80154b6:	60fb      	str	r3, [r7, #12]
}
 80154b8:	bf00      	nop
 80154ba:	bf00      	nop
 80154bc:	e7fd      	b.n	80154ba <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80154be:	69bb      	ldr	r3, [r7, #24]
 80154c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154c2:	683a      	ldr	r2, [r7, #0]
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d902      	bls.n	80154ce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80154c8:	683b      	ldr	r3, [r7, #0]
 80154ca:	61fb      	str	r3, [r7, #28]
 80154cc:	e002      	b.n	80154d4 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80154ce:	69bb      	ldr	r3, [r7, #24]
 80154d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80154d4:	69bb      	ldr	r3, [r7, #24]
 80154d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154d8:	69fa      	ldr	r2, [r7, #28]
 80154da:	429a      	cmp	r2, r3
 80154dc:	d066      	beq.n	80155ac <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80154de:	69bb      	ldr	r3, [r7, #24]
 80154e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80154e2:	697a      	ldr	r2, [r7, #20]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d161      	bne.n	80155ac <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80154e8:	4b32      	ldr	r3, [pc, #200]	@ (80155b4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	69ba      	ldr	r2, [r7, #24]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d10d      	bne.n	801550e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80154f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154f6:	b672      	cpsid	i
 80154f8:	f383 8811 	msr	BASEPRI, r3
 80154fc:	f3bf 8f6f 	isb	sy
 8015500:	f3bf 8f4f 	dsb	sy
 8015504:	b662      	cpsie	i
 8015506:	60bb      	str	r3, [r7, #8]
}
 8015508:	bf00      	nop
 801550a:	bf00      	nop
 801550c:	e7fd      	b.n	801550a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801550e:	69bb      	ldr	r3, [r7, #24]
 8015510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015512:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015514:	69bb      	ldr	r3, [r7, #24]
 8015516:	69fa      	ldr	r2, [r7, #28]
 8015518:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801551a:	69bb      	ldr	r3, [r7, #24]
 801551c:	699b      	ldr	r3, [r3, #24]
 801551e:	2b00      	cmp	r3, #0
 8015520:	db04      	blt.n	801552c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	f1c3 0207 	rsb	r2, r3, #7
 8015528:	69bb      	ldr	r3, [r7, #24]
 801552a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	6959      	ldr	r1, [r3, #20]
 8015530:	693a      	ldr	r2, [r7, #16]
 8015532:	4613      	mov	r3, r2
 8015534:	009b      	lsls	r3, r3, #2
 8015536:	4413      	add	r3, r2
 8015538:	009b      	lsls	r3, r3, #2
 801553a:	4a1f      	ldr	r2, [pc, #124]	@ (80155b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801553c:	4413      	add	r3, r2
 801553e:	4299      	cmp	r1, r3
 8015540:	d134      	bne.n	80155ac <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015542:	69bb      	ldr	r3, [r7, #24]
 8015544:	3304      	adds	r3, #4
 8015546:	4618      	mov	r0, r3
 8015548:	f7fd fe9d 	bl	8013286 <uxListRemove>
 801554c:	4603      	mov	r3, r0
 801554e:	2b00      	cmp	r3, #0
 8015550:	d115      	bne.n	801557e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015552:	69bb      	ldr	r3, [r7, #24]
 8015554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015556:	4918      	ldr	r1, [pc, #96]	@ (80155b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8015558:	4613      	mov	r3, r2
 801555a:	009b      	lsls	r3, r3, #2
 801555c:	4413      	add	r3, r2
 801555e:	009b      	lsls	r3, r3, #2
 8015560:	440b      	add	r3, r1
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d10a      	bne.n	801557e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8015568:	69bb      	ldr	r3, [r7, #24]
 801556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801556c:	2201      	movs	r2, #1
 801556e:	fa02 f303 	lsl.w	r3, r2, r3
 8015572:	43da      	mvns	r2, r3
 8015574:	4b11      	ldr	r3, [pc, #68]	@ (80155bc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4013      	ands	r3, r2
 801557a:	4a10      	ldr	r2, [pc, #64]	@ (80155bc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801557c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801557e:	69bb      	ldr	r3, [r7, #24]
 8015580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015582:	2201      	movs	r2, #1
 8015584:	409a      	lsls	r2, r3
 8015586:	4b0d      	ldr	r3, [pc, #52]	@ (80155bc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	4313      	orrs	r3, r2
 801558c:	4a0b      	ldr	r2, [pc, #44]	@ (80155bc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801558e:	6013      	str	r3, [r2, #0]
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015594:	4613      	mov	r3, r2
 8015596:	009b      	lsls	r3, r3, #2
 8015598:	4413      	add	r3, r2
 801559a:	009b      	lsls	r3, r3, #2
 801559c:	4a06      	ldr	r2, [pc, #24]	@ (80155b8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801559e:	441a      	add	r2, r3
 80155a0:	69bb      	ldr	r3, [r7, #24]
 80155a2:	3304      	adds	r3, #4
 80155a4:	4619      	mov	r1, r3
 80155a6:	4610      	mov	r0, r2
 80155a8:	f7fd fe10 	bl	80131cc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80155ac:	bf00      	nop
 80155ae:	3720      	adds	r7, #32
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	2000584c 	.word	0x2000584c
 80155b8:	20005850 	.word	0x20005850
 80155bc:	20005954 	.word	0x20005954

080155c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80155c0:	b480      	push	{r7}
 80155c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80155c4:	4b07      	ldr	r3, [pc, #28]	@ (80155e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d004      	beq.n	80155d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80155cc:	4b05      	ldr	r3, [pc, #20]	@ (80155e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80155d2:	3201      	adds	r2, #1
 80155d4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80155d6:	4b03      	ldr	r3, [pc, #12]	@ (80155e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80155d8:	681b      	ldr	r3, [r3, #0]
	}
 80155da:	4618      	mov	r0, r3
 80155dc:	46bd      	mov	sp, r7
 80155de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e2:	4770      	bx	lr
 80155e4:	2000584c 	.word	0x2000584c

080155e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b084      	sub	sp, #16
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80155f2:	4b29      	ldr	r3, [pc, #164]	@ (8015698 <prvAddCurrentTaskToDelayedList+0xb0>)
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80155f8:	4b28      	ldr	r3, [pc, #160]	@ (801569c <prvAddCurrentTaskToDelayedList+0xb4>)
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	3304      	adds	r3, #4
 80155fe:	4618      	mov	r0, r3
 8015600:	f7fd fe41 	bl	8013286 <uxListRemove>
 8015604:	4603      	mov	r3, r0
 8015606:	2b00      	cmp	r3, #0
 8015608:	d10b      	bne.n	8015622 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801560a:	4b24      	ldr	r3, [pc, #144]	@ (801569c <prvAddCurrentTaskToDelayedList+0xb4>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015610:	2201      	movs	r2, #1
 8015612:	fa02 f303 	lsl.w	r3, r2, r3
 8015616:	43da      	mvns	r2, r3
 8015618:	4b21      	ldr	r3, [pc, #132]	@ (80156a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	4013      	ands	r3, r2
 801561e:	4a20      	ldr	r2, [pc, #128]	@ (80156a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8015620:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015628:	d10a      	bne.n	8015640 <prvAddCurrentTaskToDelayedList+0x58>
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d007      	beq.n	8015640 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015630:	4b1a      	ldr	r3, [pc, #104]	@ (801569c <prvAddCurrentTaskToDelayedList+0xb4>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	3304      	adds	r3, #4
 8015636:	4619      	mov	r1, r3
 8015638:	481a      	ldr	r0, [pc, #104]	@ (80156a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801563a:	f7fd fdc7 	bl	80131cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801563e:	e026      	b.n	801568e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015640:	68fa      	ldr	r2, [r7, #12]
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	4413      	add	r3, r2
 8015646:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015648:	4b14      	ldr	r3, [pc, #80]	@ (801569c <prvAddCurrentTaskToDelayedList+0xb4>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	68ba      	ldr	r2, [r7, #8]
 801564e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015650:	68ba      	ldr	r2, [r7, #8]
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	429a      	cmp	r2, r3
 8015656:	d209      	bcs.n	801566c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015658:	4b13      	ldr	r3, [pc, #76]	@ (80156a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	4b0f      	ldr	r3, [pc, #60]	@ (801569c <prvAddCurrentTaskToDelayedList+0xb4>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	3304      	adds	r3, #4
 8015662:	4619      	mov	r1, r3
 8015664:	4610      	mov	r0, r2
 8015666:	f7fd fdd5 	bl	8013214 <vListInsert>
}
 801566a:	e010      	b.n	801568e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801566c:	4b0f      	ldr	r3, [pc, #60]	@ (80156ac <prvAddCurrentTaskToDelayedList+0xc4>)
 801566e:	681a      	ldr	r2, [r3, #0]
 8015670:	4b0a      	ldr	r3, [pc, #40]	@ (801569c <prvAddCurrentTaskToDelayedList+0xb4>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	3304      	adds	r3, #4
 8015676:	4619      	mov	r1, r3
 8015678:	4610      	mov	r0, r2
 801567a:	f7fd fdcb 	bl	8013214 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801567e:	4b0c      	ldr	r3, [pc, #48]	@ (80156b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	68ba      	ldr	r2, [r7, #8]
 8015684:	429a      	cmp	r2, r3
 8015686:	d202      	bcs.n	801568e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015688:	4a09      	ldr	r2, [pc, #36]	@ (80156b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	6013      	str	r3, [r2, #0]
}
 801568e:	bf00      	nop
 8015690:	3710      	adds	r7, #16
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}
 8015696:	bf00      	nop
 8015698:	20005950 	.word	0x20005950
 801569c:	2000584c 	.word	0x2000584c
 80156a0:	20005954 	.word	0x20005954
 80156a4:	20005938 	.word	0x20005938
 80156a8:	20005908 	.word	0x20005908
 80156ac:	20005904 	.word	0x20005904
 80156b0:	2000596c 	.word	0x2000596c

080156b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80156b4:	b480      	push	{r7}
 80156b6:	b085      	sub	sp, #20
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	60f8      	str	r0, [r7, #12]
 80156bc:	60b9      	str	r1, [r7, #8]
 80156be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	3b04      	subs	r3, #4
 80156c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80156cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	3b04      	subs	r3, #4
 80156d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	f023 0201 	bic.w	r2, r3, #1
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	3b04      	subs	r3, #4
 80156e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80156e4:	4a0c      	ldr	r2, [pc, #48]	@ (8015718 <pxPortInitialiseStack+0x64>)
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	3b14      	subs	r3, #20
 80156ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80156f0:	687a      	ldr	r2, [r7, #4]
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	3b04      	subs	r3, #4
 80156fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	f06f 0202 	mvn.w	r2, #2
 8015702:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	3b20      	subs	r3, #32
 8015708:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801570a:	68fb      	ldr	r3, [r7, #12]
}
 801570c:	4618      	mov	r0, r3
 801570e:	3714      	adds	r7, #20
 8015710:	46bd      	mov	sp, r7
 8015712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015716:	4770      	bx	lr
 8015718:	0801571d 	.word	0x0801571d

0801571c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801571c:	b480      	push	{r7}
 801571e:	b085      	sub	sp, #20
 8015720:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015722:	2300      	movs	r3, #0
 8015724:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015726:	4b15      	ldr	r3, [pc, #84]	@ (801577c <prvTaskExitError+0x60>)
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801572e:	d00d      	beq.n	801574c <prvTaskExitError+0x30>
	__asm volatile
 8015730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015734:	b672      	cpsid	i
 8015736:	f383 8811 	msr	BASEPRI, r3
 801573a:	f3bf 8f6f 	isb	sy
 801573e:	f3bf 8f4f 	dsb	sy
 8015742:	b662      	cpsie	i
 8015744:	60fb      	str	r3, [r7, #12]
}
 8015746:	bf00      	nop
 8015748:	bf00      	nop
 801574a:	e7fd      	b.n	8015748 <prvTaskExitError+0x2c>
	__asm volatile
 801574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015750:	b672      	cpsid	i
 8015752:	f383 8811 	msr	BASEPRI, r3
 8015756:	f3bf 8f6f 	isb	sy
 801575a:	f3bf 8f4f 	dsb	sy
 801575e:	b662      	cpsie	i
 8015760:	60bb      	str	r3, [r7, #8]
}
 8015762:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015764:	bf00      	nop
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d0fc      	beq.n	8015766 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801576c:	bf00      	nop
 801576e:	bf00      	nop
 8015770:	3714      	adds	r7, #20
 8015772:	46bd      	mov	sp, r7
 8015774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015778:	4770      	bx	lr
 801577a:	bf00      	nop
 801577c:	20000040 	.word	0x20000040

08015780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015780:	4b07      	ldr	r3, [pc, #28]	@ (80157a0 <pxCurrentTCBConst2>)
 8015782:	6819      	ldr	r1, [r3, #0]
 8015784:	6808      	ldr	r0, [r1, #0]
 8015786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801578a:	f380 8809 	msr	PSP, r0
 801578e:	f3bf 8f6f 	isb	sy
 8015792:	f04f 0000 	mov.w	r0, #0
 8015796:	f380 8811 	msr	BASEPRI, r0
 801579a:	4770      	bx	lr
 801579c:	f3af 8000 	nop.w

080157a0 <pxCurrentTCBConst2>:
 80157a0:	2000584c 	.word	0x2000584c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80157a4:	bf00      	nop
 80157a6:	bf00      	nop

080157a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80157a8:	4808      	ldr	r0, [pc, #32]	@ (80157cc <prvPortStartFirstTask+0x24>)
 80157aa:	6800      	ldr	r0, [r0, #0]
 80157ac:	6800      	ldr	r0, [r0, #0]
 80157ae:	f380 8808 	msr	MSP, r0
 80157b2:	f04f 0000 	mov.w	r0, #0
 80157b6:	f380 8814 	msr	CONTROL, r0
 80157ba:	b662      	cpsie	i
 80157bc:	b661      	cpsie	f
 80157be:	f3bf 8f4f 	dsb	sy
 80157c2:	f3bf 8f6f 	isb	sy
 80157c6:	df00      	svc	0
 80157c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80157ca:	bf00      	nop
 80157cc:	e000ed08 	.word	0xe000ed08

080157d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80157d6:	4b37      	ldr	r3, [pc, #220]	@ (80158b4 <xPortStartScheduler+0xe4>)
 80157d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	22ff      	movs	r2, #255	@ 0xff
 80157e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	b2db      	uxtb	r3, r3
 80157ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80157f0:	78fb      	ldrb	r3, [r7, #3]
 80157f2:	b2db      	uxtb	r3, r3
 80157f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80157f8:	b2da      	uxtb	r2, r3
 80157fa:	4b2f      	ldr	r3, [pc, #188]	@ (80158b8 <xPortStartScheduler+0xe8>)
 80157fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80157fe:	4b2f      	ldr	r3, [pc, #188]	@ (80158bc <xPortStartScheduler+0xec>)
 8015800:	2207      	movs	r2, #7
 8015802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015804:	e009      	b.n	801581a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8015806:	4b2d      	ldr	r3, [pc, #180]	@ (80158bc <xPortStartScheduler+0xec>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	3b01      	subs	r3, #1
 801580c:	4a2b      	ldr	r2, [pc, #172]	@ (80158bc <xPortStartScheduler+0xec>)
 801580e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015810:	78fb      	ldrb	r3, [r7, #3]
 8015812:	b2db      	uxtb	r3, r3
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	b2db      	uxtb	r3, r3
 8015818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801581a:	78fb      	ldrb	r3, [r7, #3]
 801581c:	b2db      	uxtb	r3, r3
 801581e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015822:	2b80      	cmp	r3, #128	@ 0x80
 8015824:	d0ef      	beq.n	8015806 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015826:	4b25      	ldr	r3, [pc, #148]	@ (80158bc <xPortStartScheduler+0xec>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	f1c3 0307 	rsb	r3, r3, #7
 801582e:	2b04      	cmp	r3, #4
 8015830:	d00d      	beq.n	801584e <xPortStartScheduler+0x7e>
	__asm volatile
 8015832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015836:	b672      	cpsid	i
 8015838:	f383 8811 	msr	BASEPRI, r3
 801583c:	f3bf 8f6f 	isb	sy
 8015840:	f3bf 8f4f 	dsb	sy
 8015844:	b662      	cpsie	i
 8015846:	60bb      	str	r3, [r7, #8]
}
 8015848:	bf00      	nop
 801584a:	bf00      	nop
 801584c:	e7fd      	b.n	801584a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801584e:	4b1b      	ldr	r3, [pc, #108]	@ (80158bc <xPortStartScheduler+0xec>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	021b      	lsls	r3, r3, #8
 8015854:	4a19      	ldr	r2, [pc, #100]	@ (80158bc <xPortStartScheduler+0xec>)
 8015856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015858:	4b18      	ldr	r3, [pc, #96]	@ (80158bc <xPortStartScheduler+0xec>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015860:	4a16      	ldr	r2, [pc, #88]	@ (80158bc <xPortStartScheduler+0xec>)
 8015862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	b2da      	uxtb	r2, r3
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801586c:	4b14      	ldr	r3, [pc, #80]	@ (80158c0 <xPortStartScheduler+0xf0>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	4a13      	ldr	r2, [pc, #76]	@ (80158c0 <xPortStartScheduler+0xf0>)
 8015872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015878:	4b11      	ldr	r3, [pc, #68]	@ (80158c0 <xPortStartScheduler+0xf0>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	4a10      	ldr	r2, [pc, #64]	@ (80158c0 <xPortStartScheduler+0xf0>)
 801587e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015884:	f000 f8dc 	bl	8015a40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015888:	4b0e      	ldr	r3, [pc, #56]	@ (80158c4 <xPortStartScheduler+0xf4>)
 801588a:	2200      	movs	r2, #0
 801588c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801588e:	f000 f8fb 	bl	8015a88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015892:	4b0d      	ldr	r3, [pc, #52]	@ (80158c8 <xPortStartScheduler+0xf8>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	4a0c      	ldr	r2, [pc, #48]	@ (80158c8 <xPortStartScheduler+0xf8>)
 8015898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801589c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801589e:	f7ff ff83 	bl	80157a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80158a2:	f7ff fa41 	bl	8014d28 <vTaskSwitchContext>
	prvTaskExitError();
 80158a6:	f7ff ff39 	bl	801571c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80158aa:	2300      	movs	r3, #0
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3710      	adds	r7, #16
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}
 80158b4:	e000e400 	.word	0xe000e400
 80158b8:	20005978 	.word	0x20005978
 80158bc:	2000597c 	.word	0x2000597c
 80158c0:	e000ed20 	.word	0xe000ed20
 80158c4:	20000040 	.word	0x20000040
 80158c8:	e000ef34 	.word	0xe000ef34

080158cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
	__asm volatile
 80158d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158d6:	b672      	cpsid	i
 80158d8:	f383 8811 	msr	BASEPRI, r3
 80158dc:	f3bf 8f6f 	isb	sy
 80158e0:	f3bf 8f4f 	dsb	sy
 80158e4:	b662      	cpsie	i
 80158e6:	607b      	str	r3, [r7, #4]
}
 80158e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80158ea:	4b11      	ldr	r3, [pc, #68]	@ (8015930 <vPortEnterCritical+0x64>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	3301      	adds	r3, #1
 80158f0:	4a0f      	ldr	r2, [pc, #60]	@ (8015930 <vPortEnterCritical+0x64>)
 80158f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80158f4:	4b0e      	ldr	r3, [pc, #56]	@ (8015930 <vPortEnterCritical+0x64>)
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	2b01      	cmp	r3, #1
 80158fa:	d112      	bne.n	8015922 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80158fc:	4b0d      	ldr	r3, [pc, #52]	@ (8015934 <vPortEnterCritical+0x68>)
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	b2db      	uxtb	r3, r3
 8015902:	2b00      	cmp	r3, #0
 8015904:	d00d      	beq.n	8015922 <vPortEnterCritical+0x56>
	__asm volatile
 8015906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801590a:	b672      	cpsid	i
 801590c:	f383 8811 	msr	BASEPRI, r3
 8015910:	f3bf 8f6f 	isb	sy
 8015914:	f3bf 8f4f 	dsb	sy
 8015918:	b662      	cpsie	i
 801591a:	603b      	str	r3, [r7, #0]
}
 801591c:	bf00      	nop
 801591e:	bf00      	nop
 8015920:	e7fd      	b.n	801591e <vPortEnterCritical+0x52>
	}
}
 8015922:	bf00      	nop
 8015924:	370c      	adds	r7, #12
 8015926:	46bd      	mov	sp, r7
 8015928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592c:	4770      	bx	lr
 801592e:	bf00      	nop
 8015930:	20000040 	.word	0x20000040
 8015934:	e000ed04 	.word	0xe000ed04

08015938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015938:	b480      	push	{r7}
 801593a:	b083      	sub	sp, #12
 801593c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801593e:	4b13      	ldr	r3, [pc, #76]	@ (801598c <vPortExitCritical+0x54>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d10d      	bne.n	8015962 <vPortExitCritical+0x2a>
	__asm volatile
 8015946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801594a:	b672      	cpsid	i
 801594c:	f383 8811 	msr	BASEPRI, r3
 8015950:	f3bf 8f6f 	isb	sy
 8015954:	f3bf 8f4f 	dsb	sy
 8015958:	b662      	cpsie	i
 801595a:	607b      	str	r3, [r7, #4]
}
 801595c:	bf00      	nop
 801595e:	bf00      	nop
 8015960:	e7fd      	b.n	801595e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8015962:	4b0a      	ldr	r3, [pc, #40]	@ (801598c <vPortExitCritical+0x54>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	3b01      	subs	r3, #1
 8015968:	4a08      	ldr	r2, [pc, #32]	@ (801598c <vPortExitCritical+0x54>)
 801596a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801596c:	4b07      	ldr	r3, [pc, #28]	@ (801598c <vPortExitCritical+0x54>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d105      	bne.n	8015980 <vPortExitCritical+0x48>
 8015974:	2300      	movs	r3, #0
 8015976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	f383 8811 	msr	BASEPRI, r3
}
 801597e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015980:	bf00      	nop
 8015982:	370c      	adds	r7, #12
 8015984:	46bd      	mov	sp, r7
 8015986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598a:	4770      	bx	lr
 801598c:	20000040 	.word	0x20000040

08015990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015990:	f3ef 8009 	mrs	r0, PSP
 8015994:	f3bf 8f6f 	isb	sy
 8015998:	4b15      	ldr	r3, [pc, #84]	@ (80159f0 <pxCurrentTCBConst>)
 801599a:	681a      	ldr	r2, [r3, #0]
 801599c:	f01e 0f10 	tst.w	lr, #16
 80159a0:	bf08      	it	eq
 80159a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80159a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159aa:	6010      	str	r0, [r2, #0]
 80159ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80159b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80159b4:	b672      	cpsid	i
 80159b6:	f380 8811 	msr	BASEPRI, r0
 80159ba:	f3bf 8f4f 	dsb	sy
 80159be:	f3bf 8f6f 	isb	sy
 80159c2:	b662      	cpsie	i
 80159c4:	f7ff f9b0 	bl	8014d28 <vTaskSwitchContext>
 80159c8:	f04f 0000 	mov.w	r0, #0
 80159cc:	f380 8811 	msr	BASEPRI, r0
 80159d0:	bc09      	pop	{r0, r3}
 80159d2:	6819      	ldr	r1, [r3, #0]
 80159d4:	6808      	ldr	r0, [r1, #0]
 80159d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159da:	f01e 0f10 	tst.w	lr, #16
 80159de:	bf08      	it	eq
 80159e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80159e4:	f380 8809 	msr	PSP, r0
 80159e8:	f3bf 8f6f 	isb	sy
 80159ec:	4770      	bx	lr
 80159ee:	bf00      	nop

080159f0 <pxCurrentTCBConst>:
 80159f0:	2000584c 	.word	0x2000584c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80159f4:	bf00      	nop
 80159f6:	bf00      	nop

080159f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
	__asm volatile
 80159fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a02:	b672      	cpsid	i
 8015a04:	f383 8811 	msr	BASEPRI, r3
 8015a08:	f3bf 8f6f 	isb	sy
 8015a0c:	f3bf 8f4f 	dsb	sy
 8015a10:	b662      	cpsie	i
 8015a12:	607b      	str	r3, [r7, #4]
}
 8015a14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015a16:	f7ff f8cb 	bl	8014bb0 <xTaskIncrementTick>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d003      	beq.n	8015a28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015a20:	4b06      	ldr	r3, [pc, #24]	@ (8015a3c <SysTick_Handler+0x44>)
 8015a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a26:	601a      	str	r2, [r3, #0]
 8015a28:	2300      	movs	r3, #0
 8015a2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	f383 8811 	msr	BASEPRI, r3
}
 8015a32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015a34:	bf00      	nop
 8015a36:	3708      	adds	r7, #8
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}
 8015a3c:	e000ed04 	.word	0xe000ed04

08015a40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015a40:	b480      	push	{r7}
 8015a42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015a44:	4b0b      	ldr	r3, [pc, #44]	@ (8015a74 <vPortSetupTimerInterrupt+0x34>)
 8015a46:	2200      	movs	r2, #0
 8015a48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8015a78 <vPortSetupTimerInterrupt+0x38>)
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015a50:	4b0a      	ldr	r3, [pc, #40]	@ (8015a7c <vPortSetupTimerInterrupt+0x3c>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	4a0a      	ldr	r2, [pc, #40]	@ (8015a80 <vPortSetupTimerInterrupt+0x40>)
 8015a56:	fba2 2303 	umull	r2, r3, r2, r3
 8015a5a:	099b      	lsrs	r3, r3, #6
 8015a5c:	4a09      	ldr	r2, [pc, #36]	@ (8015a84 <vPortSetupTimerInterrupt+0x44>)
 8015a5e:	3b01      	subs	r3, #1
 8015a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015a62:	4b04      	ldr	r3, [pc, #16]	@ (8015a74 <vPortSetupTimerInterrupt+0x34>)
 8015a64:	2207      	movs	r2, #7
 8015a66:	601a      	str	r2, [r3, #0]
}
 8015a68:	bf00      	nop
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a70:	4770      	bx	lr
 8015a72:	bf00      	nop
 8015a74:	e000e010 	.word	0xe000e010
 8015a78:	e000e018 	.word	0xe000e018
 8015a7c:	20000000 	.word	0x20000000
 8015a80:	10624dd3 	.word	0x10624dd3
 8015a84:	e000e014 	.word	0xe000e014

08015a88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015a88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015a98 <vPortEnableVFP+0x10>
 8015a8c:	6801      	ldr	r1, [r0, #0]
 8015a8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015a92:	6001      	str	r1, [r0, #0]
 8015a94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015a96:	bf00      	nop
 8015a98:	e000ed88 	.word	0xe000ed88

08015a9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b085      	sub	sp, #20
 8015aa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015aa2:	f3ef 8305 	mrs	r3, IPSR
 8015aa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	2b0f      	cmp	r3, #15
 8015aac:	d917      	bls.n	8015ade <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015aae:	4a1a      	ldr	r2, [pc, #104]	@ (8015b18 <vPortValidateInterruptPriority+0x7c>)
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	4413      	add	r3, r2
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015ab8:	4b18      	ldr	r3, [pc, #96]	@ (8015b1c <vPortValidateInterruptPriority+0x80>)
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	7afa      	ldrb	r2, [r7, #11]
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	d20d      	bcs.n	8015ade <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8015ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ac6:	b672      	cpsid	i
 8015ac8:	f383 8811 	msr	BASEPRI, r3
 8015acc:	f3bf 8f6f 	isb	sy
 8015ad0:	f3bf 8f4f 	dsb	sy
 8015ad4:	b662      	cpsie	i
 8015ad6:	607b      	str	r3, [r7, #4]
}
 8015ad8:	bf00      	nop
 8015ada:	bf00      	nop
 8015adc:	e7fd      	b.n	8015ada <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015ade:	4b10      	ldr	r3, [pc, #64]	@ (8015b20 <vPortValidateInterruptPriority+0x84>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8015b24 <vPortValidateInterruptPriority+0x88>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d90d      	bls.n	8015b0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8015aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015af2:	b672      	cpsid	i
 8015af4:	f383 8811 	msr	BASEPRI, r3
 8015af8:	f3bf 8f6f 	isb	sy
 8015afc:	f3bf 8f4f 	dsb	sy
 8015b00:	b662      	cpsie	i
 8015b02:	603b      	str	r3, [r7, #0]
}
 8015b04:	bf00      	nop
 8015b06:	bf00      	nop
 8015b08:	e7fd      	b.n	8015b06 <vPortValidateInterruptPriority+0x6a>
	}
 8015b0a:	bf00      	nop
 8015b0c:	3714      	adds	r7, #20
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b14:	4770      	bx	lr
 8015b16:	bf00      	nop
 8015b18:	e000e3f0 	.word	0xe000e3f0
 8015b1c:	20005978 	.word	0x20005978
 8015b20:	e000ed0c 	.word	0xe000ed0c
 8015b24:	2000597c 	.word	0x2000597c

08015b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b08a      	sub	sp, #40	@ 0x28
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015b30:	2300      	movs	r3, #0
 8015b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015b34:	f7fe ff6c 	bl	8014a10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015b38:	4b5f      	ldr	r3, [pc, #380]	@ (8015cb8 <pvPortMalloc+0x190>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d101      	bne.n	8015b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015b40:	f000 f924 	bl	8015d8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015b44:	4b5d      	ldr	r3, [pc, #372]	@ (8015cbc <pvPortMalloc+0x194>)
 8015b46:	681a      	ldr	r2, [r3, #0]
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	4013      	ands	r3, r2
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	f040 8094 	bne.w	8015c7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d020      	beq.n	8015b9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8015b58:	2208      	movs	r2, #8
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	4413      	add	r3, r2
 8015b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	f003 0307 	and.w	r3, r3, #7
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d017      	beq.n	8015b9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f023 0307 	bic.w	r3, r3, #7
 8015b70:	3308      	adds	r3, #8
 8015b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f003 0307 	and.w	r3, r3, #7
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d00d      	beq.n	8015b9a <pvPortMalloc+0x72>
	__asm volatile
 8015b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b82:	b672      	cpsid	i
 8015b84:	f383 8811 	msr	BASEPRI, r3
 8015b88:	f3bf 8f6f 	isb	sy
 8015b8c:	f3bf 8f4f 	dsb	sy
 8015b90:	b662      	cpsie	i
 8015b92:	617b      	str	r3, [r7, #20]
}
 8015b94:	bf00      	nop
 8015b96:	bf00      	nop
 8015b98:	e7fd      	b.n	8015b96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d06c      	beq.n	8015c7a <pvPortMalloc+0x152>
 8015ba0:	4b47      	ldr	r3, [pc, #284]	@ (8015cc0 <pvPortMalloc+0x198>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	687a      	ldr	r2, [r7, #4]
 8015ba6:	429a      	cmp	r2, r3
 8015ba8:	d867      	bhi.n	8015c7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015baa:	4b46      	ldr	r3, [pc, #280]	@ (8015cc4 <pvPortMalloc+0x19c>)
 8015bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015bae:	4b45      	ldr	r3, [pc, #276]	@ (8015cc4 <pvPortMalloc+0x19c>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015bb4:	e004      	b.n	8015bc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8015bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	687a      	ldr	r2, [r7, #4]
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	d903      	bls.n	8015bd2 <pvPortMalloc+0xaa>
 8015bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d1f1      	bne.n	8015bb6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015bd2:	4b39      	ldr	r3, [pc, #228]	@ (8015cb8 <pvPortMalloc+0x190>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d04e      	beq.n	8015c7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015bdc:	6a3b      	ldr	r3, [r7, #32]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2208      	movs	r2, #8
 8015be2:	4413      	add	r3, r2
 8015be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015be8:	681a      	ldr	r2, [r3, #0]
 8015bea:	6a3b      	ldr	r3, [r7, #32]
 8015bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf0:	685a      	ldr	r2, [r3, #4]
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	1ad2      	subs	r2, r2, r3
 8015bf6:	2308      	movs	r3, #8
 8015bf8:	005b      	lsls	r3, r3, #1
 8015bfa:	429a      	cmp	r2, r3
 8015bfc:	d922      	bls.n	8015c44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	4413      	add	r3, r2
 8015c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015c06:	69bb      	ldr	r3, [r7, #24]
 8015c08:	f003 0307 	and.w	r3, r3, #7
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d00d      	beq.n	8015c2c <pvPortMalloc+0x104>
	__asm volatile
 8015c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c14:	b672      	cpsid	i
 8015c16:	f383 8811 	msr	BASEPRI, r3
 8015c1a:	f3bf 8f6f 	isb	sy
 8015c1e:	f3bf 8f4f 	dsb	sy
 8015c22:	b662      	cpsie	i
 8015c24:	613b      	str	r3, [r7, #16]
}
 8015c26:	bf00      	nop
 8015c28:	bf00      	nop
 8015c2a:	e7fd      	b.n	8015c28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c2e:	685a      	ldr	r2, [r3, #4]
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	1ad2      	subs	r2, r2, r3
 8015c34:	69bb      	ldr	r3, [r7, #24]
 8015c36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015c3e:	69b8      	ldr	r0, [r7, #24]
 8015c40:	f000 f906 	bl	8015e50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015c44:	4b1e      	ldr	r3, [pc, #120]	@ (8015cc0 <pvPortMalloc+0x198>)
 8015c46:	681a      	ldr	r2, [r3, #0]
 8015c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c4a:	685b      	ldr	r3, [r3, #4]
 8015c4c:	1ad3      	subs	r3, r2, r3
 8015c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8015cc0 <pvPortMalloc+0x198>)
 8015c50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015c52:	4b1b      	ldr	r3, [pc, #108]	@ (8015cc0 <pvPortMalloc+0x198>)
 8015c54:	681a      	ldr	r2, [r3, #0]
 8015c56:	4b1c      	ldr	r3, [pc, #112]	@ (8015cc8 <pvPortMalloc+0x1a0>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d203      	bcs.n	8015c66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015c5e:	4b18      	ldr	r3, [pc, #96]	@ (8015cc0 <pvPortMalloc+0x198>)
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	4a19      	ldr	r2, [pc, #100]	@ (8015cc8 <pvPortMalloc+0x1a0>)
 8015c64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c68:	685a      	ldr	r2, [r3, #4]
 8015c6a:	4b14      	ldr	r3, [pc, #80]	@ (8015cbc <pvPortMalloc+0x194>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	431a      	orrs	r2, r3
 8015c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c76:	2200      	movs	r2, #0
 8015c78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015c7a:	f7fe fed7 	bl	8014a2c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8015c7e:	69fb      	ldr	r3, [r7, #28]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d101      	bne.n	8015c88 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8015c84:	f7ea fc9e 	bl	80005c4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015c88:	69fb      	ldr	r3, [r7, #28]
 8015c8a:	f003 0307 	and.w	r3, r3, #7
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d00d      	beq.n	8015cae <pvPortMalloc+0x186>
	__asm volatile
 8015c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c96:	b672      	cpsid	i
 8015c98:	f383 8811 	msr	BASEPRI, r3
 8015c9c:	f3bf 8f6f 	isb	sy
 8015ca0:	f3bf 8f4f 	dsb	sy
 8015ca4:	b662      	cpsie	i
 8015ca6:	60fb      	str	r3, [r7, #12]
}
 8015ca8:	bf00      	nop
 8015caa:	bf00      	nop
 8015cac:	e7fd      	b.n	8015caa <pvPortMalloc+0x182>
	return pvReturn;
 8015cae:	69fb      	ldr	r3, [r7, #28]
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3728      	adds	r7, #40	@ 0x28
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	2000d988 	.word	0x2000d988
 8015cbc:	2000d994 	.word	0x2000d994
 8015cc0:	2000d98c 	.word	0x2000d98c
 8015cc4:	2000d980 	.word	0x2000d980
 8015cc8:	2000d990 	.word	0x2000d990

08015ccc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b086      	sub	sp, #24
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d04e      	beq.n	8015d7c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015cde:	2308      	movs	r3, #8
 8015ce0:	425b      	negs	r3, r3
 8015ce2:	697a      	ldr	r2, [r7, #20]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	685a      	ldr	r2, [r3, #4]
 8015cf0:	4b24      	ldr	r3, [pc, #144]	@ (8015d84 <vPortFree+0xb8>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	4013      	ands	r3, r2
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d10d      	bne.n	8015d16 <vPortFree+0x4a>
	__asm volatile
 8015cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cfe:	b672      	cpsid	i
 8015d00:	f383 8811 	msr	BASEPRI, r3
 8015d04:	f3bf 8f6f 	isb	sy
 8015d08:	f3bf 8f4f 	dsb	sy
 8015d0c:	b662      	cpsie	i
 8015d0e:	60fb      	str	r3, [r7, #12]
}
 8015d10:	bf00      	nop
 8015d12:	bf00      	nop
 8015d14:	e7fd      	b.n	8015d12 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015d16:	693b      	ldr	r3, [r7, #16]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d00d      	beq.n	8015d3a <vPortFree+0x6e>
	__asm volatile
 8015d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d22:	b672      	cpsid	i
 8015d24:	f383 8811 	msr	BASEPRI, r3
 8015d28:	f3bf 8f6f 	isb	sy
 8015d2c:	f3bf 8f4f 	dsb	sy
 8015d30:	b662      	cpsie	i
 8015d32:	60bb      	str	r3, [r7, #8]
}
 8015d34:	bf00      	nop
 8015d36:	bf00      	nop
 8015d38:	e7fd      	b.n	8015d36 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	685a      	ldr	r2, [r3, #4]
 8015d3e:	4b11      	ldr	r3, [pc, #68]	@ (8015d84 <vPortFree+0xb8>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	4013      	ands	r3, r2
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d019      	beq.n	8015d7c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015d48:	693b      	ldr	r3, [r7, #16]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d115      	bne.n	8015d7c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	685a      	ldr	r2, [r3, #4]
 8015d54:	4b0b      	ldr	r3, [pc, #44]	@ (8015d84 <vPortFree+0xb8>)
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	43db      	mvns	r3, r3
 8015d5a:	401a      	ands	r2, r3
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015d60:	f7fe fe56 	bl	8014a10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	685a      	ldr	r2, [r3, #4]
 8015d68:	4b07      	ldr	r3, [pc, #28]	@ (8015d88 <vPortFree+0xbc>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	4413      	add	r3, r2
 8015d6e:	4a06      	ldr	r2, [pc, #24]	@ (8015d88 <vPortFree+0xbc>)
 8015d70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015d72:	6938      	ldr	r0, [r7, #16]
 8015d74:	f000 f86c 	bl	8015e50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015d78:	f7fe fe58 	bl	8014a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015d7c:	bf00      	nop
 8015d7e:	3718      	adds	r7, #24
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	2000d994 	.word	0x2000d994
 8015d88:	2000d98c 	.word	0x2000d98c

08015d8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015d8c:	b480      	push	{r7}
 8015d8e:	b085      	sub	sp, #20
 8015d90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015d96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015d98:	4b27      	ldr	r3, [pc, #156]	@ (8015e38 <prvHeapInit+0xac>)
 8015d9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	f003 0307 	and.w	r3, r3, #7
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d00c      	beq.n	8015dc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	3307      	adds	r3, #7
 8015daa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	f023 0307 	bic.w	r3, r3, #7
 8015db2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015db4:	68ba      	ldr	r2, [r7, #8]
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	1ad3      	subs	r3, r2, r3
 8015dba:	4a1f      	ldr	r2, [pc, #124]	@ (8015e38 <prvHeapInit+0xac>)
 8015dbc:	4413      	add	r3, r2
 8015dbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8015e3c <prvHeapInit+0xb0>)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015dca:	4b1c      	ldr	r3, [pc, #112]	@ (8015e3c <prvHeapInit+0xb0>)
 8015dcc:	2200      	movs	r2, #0
 8015dce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	68ba      	ldr	r2, [r7, #8]
 8015dd4:	4413      	add	r3, r2
 8015dd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015dd8:	2208      	movs	r2, #8
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	1a9b      	subs	r3, r3, r2
 8015dde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	f023 0307 	bic.w	r3, r3, #7
 8015de6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	4a15      	ldr	r2, [pc, #84]	@ (8015e40 <prvHeapInit+0xb4>)
 8015dec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015dee:	4b14      	ldr	r3, [pc, #80]	@ (8015e40 <prvHeapInit+0xb4>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	2200      	movs	r2, #0
 8015df4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015df6:	4b12      	ldr	r3, [pc, #72]	@ (8015e40 <prvHeapInit+0xb4>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015e02:	683b      	ldr	r3, [r7, #0]
 8015e04:	68fa      	ldr	r2, [r7, #12]
 8015e06:	1ad2      	subs	r2, r2, r3
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8015e40 <prvHeapInit+0xb4>)
 8015e0e:	681a      	ldr	r2, [r3, #0]
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	4a0a      	ldr	r2, [pc, #40]	@ (8015e44 <prvHeapInit+0xb8>)
 8015e1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	685b      	ldr	r3, [r3, #4]
 8015e20:	4a09      	ldr	r2, [pc, #36]	@ (8015e48 <prvHeapInit+0xbc>)
 8015e22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015e24:	4b09      	ldr	r3, [pc, #36]	@ (8015e4c <prvHeapInit+0xc0>)
 8015e26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015e2a:	601a      	str	r2, [r3, #0]
}
 8015e2c:	bf00      	nop
 8015e2e:	3714      	adds	r7, #20
 8015e30:	46bd      	mov	sp, r7
 8015e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e36:	4770      	bx	lr
 8015e38:	20005980 	.word	0x20005980
 8015e3c:	2000d980 	.word	0x2000d980
 8015e40:	2000d988 	.word	0x2000d988
 8015e44:	2000d990 	.word	0x2000d990
 8015e48:	2000d98c 	.word	0x2000d98c
 8015e4c:	2000d994 	.word	0x2000d994

08015e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015e50:	b480      	push	{r7}
 8015e52:	b085      	sub	sp, #20
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015e58:	4b28      	ldr	r3, [pc, #160]	@ (8015efc <prvInsertBlockIntoFreeList+0xac>)
 8015e5a:	60fb      	str	r3, [r7, #12]
 8015e5c:	e002      	b.n	8015e64 <prvInsertBlockIntoFreeList+0x14>
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	60fb      	str	r3, [r7, #12]
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	687a      	ldr	r2, [r7, #4]
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d8f7      	bhi.n	8015e5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	68ba      	ldr	r2, [r7, #8]
 8015e78:	4413      	add	r3, r2
 8015e7a:	687a      	ldr	r2, [r7, #4]
 8015e7c:	429a      	cmp	r2, r3
 8015e7e:	d108      	bne.n	8015e92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	685a      	ldr	r2, [r3, #4]
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	685b      	ldr	r3, [r3, #4]
 8015e88:	441a      	add	r2, r3
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	68ba      	ldr	r2, [r7, #8]
 8015e9c:	441a      	add	r2, r3
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d118      	bne.n	8015ed8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	681a      	ldr	r2, [r3, #0]
 8015eaa:	4b15      	ldr	r3, [pc, #84]	@ (8015f00 <prvInsertBlockIntoFreeList+0xb0>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d00d      	beq.n	8015ece <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	685a      	ldr	r2, [r3, #4]
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	441a      	add	r2, r3
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	681a      	ldr	r2, [r3, #0]
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	601a      	str	r2, [r3, #0]
 8015ecc:	e008      	b.n	8015ee0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015ece:	4b0c      	ldr	r3, [pc, #48]	@ (8015f00 <prvInsertBlockIntoFreeList+0xb0>)
 8015ed0:	681a      	ldr	r2, [r3, #0]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	601a      	str	r2, [r3, #0]
 8015ed6:	e003      	b.n	8015ee0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	681a      	ldr	r2, [r3, #0]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015ee0:	68fa      	ldr	r2, [r7, #12]
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d002      	beq.n	8015eee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	687a      	ldr	r2, [r7, #4]
 8015eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015eee:	bf00      	nop
 8015ef0:	3714      	adds	r7, #20
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef8:	4770      	bx	lr
 8015efa:	bf00      	nop
 8015efc:	2000d980 	.word	0x2000d980
 8015f00:	2000d988 	.word	0x2000d988

08015f04 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b084      	sub	sp, #16
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
 8015f0c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	330c      	adds	r3, #12
 8015f14:	461a      	mov	r2, r3
 8015f16:	6839      	ldr	r1, [r7, #0]
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f003 fd8b 	bl	8019a34 <tcpip_send_msg_wait_sem>
 8015f1e:	4603      	mov	r3, r0
 8015f20:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8015f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d103      	bne.n	8015f32 <netconn_apimsg+0x2e>
    return apimsg->err;
 8015f2a:	683b      	ldr	r3, [r7, #0]
 8015f2c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015f30:	e001      	b.n	8015f36 <netconn_apimsg+0x32>
  }
  return err;
 8015f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	3710      	adds	r7, #16
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}
	...

08015f40 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b08c      	sub	sp, #48	@ 0x30
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	4603      	mov	r3, r0
 8015f48:	603a      	str	r2, [r7, #0]
 8015f4a:	71fb      	strb	r3, [r7, #7]
 8015f4c:	460b      	mov	r3, r1
 8015f4e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8015f50:	79fb      	ldrb	r3, [r7, #7]
 8015f52:	6839      	ldr	r1, [r7, #0]
 8015f54:	4618      	mov	r0, r3
 8015f56:	f001 f9a3 	bl	80172a0 <netconn_alloc>
 8015f5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8015f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d054      	beq.n	801600c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8015f62:	79bb      	ldrb	r3, [r7, #6]
 8015f64:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8015f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f68:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8015f6a:	f107 0308 	add.w	r3, r7, #8
 8015f6e:	4619      	mov	r1, r3
 8015f70:	4829      	ldr	r0, [pc, #164]	@ (8016018 <netconn_new_with_proto_and_callback+0xd8>)
 8015f72:	f7ff ffc7 	bl	8015f04 <netconn_apimsg>
 8015f76:	4603      	mov	r3, r0
 8015f78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8015f7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d043      	beq.n	801600c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8015f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d005      	beq.n	8015f98 <netconn_new_with_proto_and_callback+0x58>
 8015f8c:	4b23      	ldr	r3, [pc, #140]	@ (801601c <netconn_new_with_proto_and_callback+0xdc>)
 8015f8e:	22a3      	movs	r2, #163	@ 0xa3
 8015f90:	4923      	ldr	r1, [pc, #140]	@ (8016020 <netconn_new_with_proto_and_callback+0xe0>)
 8015f92:	4824      	ldr	r0, [pc, #144]	@ (8016024 <netconn_new_with_proto_and_callback+0xe4>)
 8015f94:	f011 fbea 	bl	802776c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8015f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f9a:	3310      	adds	r3, #16
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f010 fdf6 	bl	8026b8e <sys_mbox_valid>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d105      	bne.n	8015fb4 <netconn_new_with_proto_and_callback+0x74>
 8015fa8:	4b1c      	ldr	r3, [pc, #112]	@ (801601c <netconn_new_with_proto_and_callback+0xdc>)
 8015faa:	22a4      	movs	r2, #164	@ 0xa4
 8015fac:	491e      	ldr	r1, [pc, #120]	@ (8016028 <netconn_new_with_proto_and_callback+0xe8>)
 8015fae:	481d      	ldr	r0, [pc, #116]	@ (8016024 <netconn_new_with_proto_and_callback+0xe4>)
 8015fb0:	f011 fbdc 	bl	802776c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8015fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb6:	3314      	adds	r3, #20
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f010 fde8 	bl	8026b8e <sys_mbox_valid>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d005      	beq.n	8015fd0 <netconn_new_with_proto_and_callback+0x90>
 8015fc4:	4b15      	ldr	r3, [pc, #84]	@ (801601c <netconn_new_with_proto_and_callback+0xdc>)
 8015fc6:	22a6      	movs	r2, #166	@ 0xa6
 8015fc8:	4918      	ldr	r1, [pc, #96]	@ (801602c <netconn_new_with_proto_and_callback+0xec>)
 8015fca:	4816      	ldr	r0, [pc, #88]	@ (8016024 <netconn_new_with_proto_and_callback+0xe4>)
 8015fcc:	f011 fbce 	bl	802776c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8015fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd2:	330c      	adds	r3, #12
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f010 fe6b 	bl	8026cb0 <sys_sem_valid>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d105      	bne.n	8015fec <netconn_new_with_proto_and_callback+0xac>
 8015fe0:	4b0e      	ldr	r3, [pc, #56]	@ (801601c <netconn_new_with_proto_and_callback+0xdc>)
 8015fe2:	22a9      	movs	r2, #169	@ 0xa9
 8015fe4:	4912      	ldr	r1, [pc, #72]	@ (8016030 <netconn_new_with_proto_and_callback+0xf0>)
 8015fe6:	480f      	ldr	r0, [pc, #60]	@ (8016024 <netconn_new_with_proto_and_callback+0xe4>)
 8015fe8:	f011 fbc0 	bl	802776c <iprintf>
      sys_sem_free(&conn->op_completed);
 8015fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fee:	330c      	adds	r3, #12
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f010 fe50 	bl	8026c96 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8015ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ff8:	3310      	adds	r3, #16
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f010 fd40 	bl	8026a80 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8016000:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016002:	2007      	movs	r0, #7
 8016004:	f004 fac4 	bl	801a590 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8016008:	2300      	movs	r3, #0
 801600a:	e000      	b.n	801600e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801600e:	4618      	mov	r0, r3
 8016010:	3730      	adds	r7, #48	@ 0x30
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
 8016016:	bf00      	nop
 8016018:	08017275 	.word	0x08017275
 801601c:	080287a8 	.word	0x080287a8
 8016020:	080287dc 	.word	0x080287dc
 8016024:	08028800 	.word	0x08028800
 8016028:	08028828 	.word	0x08028828
 801602c:	08028840 	.word	0x08028840
 8016030:	08028864 	.word	0x08028864

08016034 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b08c      	sub	sp, #48	@ 0x30
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d101      	bne.n	8016046 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8016042:	2300      	movs	r3, #0
 8016044:	e014      	b.n	8016070 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801604a:	2329      	movs	r3, #41	@ 0x29
 801604c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801604e:	f107 030c 	add.w	r3, r7, #12
 8016052:	4619      	mov	r1, r3
 8016054:	4808      	ldr	r0, [pc, #32]	@ (8016078 <netconn_prepare_delete+0x44>)
 8016056:	f7ff ff55 	bl	8015f04 <netconn_apimsg>
 801605a:	4603      	mov	r3, r0
 801605c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8016060:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8016064:	2b00      	cmp	r3, #0
 8016066:	d002      	beq.n	801606e <netconn_prepare_delete+0x3a>
    return err;
 8016068:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801606c:	e000      	b.n	8016070 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801606e:	2300      	movs	r3, #0
}
 8016070:	4618      	mov	r0, r3
 8016072:	3730      	adds	r7, #48	@ 0x30
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}
 8016078:	080177e1 	.word	0x080177e1

0801607c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b084      	sub	sp, #16
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d101      	bne.n	801608e <netconn_delete+0x12>
    return ERR_OK;
 801608a:	2300      	movs	r3, #0
 801608c:	e00d      	b.n	80160aa <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f7ff ffd0 	bl	8016034 <netconn_prepare_delete>
 8016094:	4603      	mov	r3, r0
 8016096:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8016098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d102      	bne.n	80160a6 <netconn_delete+0x2a>
    netconn_free(conn);
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f001 f96b 	bl	801737c <netconn_free>
  }
  return err;
 80160a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3710      	adds	r7, #16
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
	...

080160b4 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b08e      	sub	sp, #56	@ 0x38
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]
 80160c0:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d109      	bne.n	80160dc <netconn_getaddr+0x28>
 80160c8:	4b1d      	ldr	r3, [pc, #116]	@ (8016140 <netconn_getaddr+0x8c>)
 80160ca:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80160ce:	491d      	ldr	r1, [pc, #116]	@ (8016144 <netconn_getaddr+0x90>)
 80160d0:	481d      	ldr	r0, [pc, #116]	@ (8016148 <netconn_getaddr+0x94>)
 80160d2:	f011 fb4b 	bl	802776c <iprintf>
 80160d6:	f06f 030f 	mvn.w	r3, #15
 80160da:	e02d      	b.n	8016138 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d109      	bne.n	80160f6 <netconn_getaddr+0x42>
 80160e2:	4b17      	ldr	r3, [pc, #92]	@ (8016140 <netconn_getaddr+0x8c>)
 80160e4:	f240 1213 	movw	r2, #275	@ 0x113
 80160e8:	4918      	ldr	r1, [pc, #96]	@ (801614c <netconn_getaddr+0x98>)
 80160ea:	4817      	ldr	r0, [pc, #92]	@ (8016148 <netconn_getaddr+0x94>)
 80160ec:	f011 fb3e 	bl	802776c <iprintf>
 80160f0:	f06f 030f 	mvn.w	r3, #15
 80160f4:	e020      	b.n	8016138 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d109      	bne.n	8016110 <netconn_getaddr+0x5c>
 80160fc:	4b10      	ldr	r3, [pc, #64]	@ (8016140 <netconn_getaddr+0x8c>)
 80160fe:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8016102:	4913      	ldr	r1, [pc, #76]	@ (8016150 <netconn_getaddr+0x9c>)
 8016104:	4810      	ldr	r0, [pc, #64]	@ (8016148 <netconn_getaddr+0x94>)
 8016106:	f011 fb31 	bl	802776c <iprintf>
 801610a:	f06f 030f 	mvn.w	r3, #15
 801610e:	e013      	b.n	8016138 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8016114:	78fb      	ldrb	r3, [r7, #3]
 8016116:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 801611a:	68bb      	ldr	r3, [r7, #8]
 801611c:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8016122:	f107 0314 	add.w	r3, r7, #20
 8016126:	4619      	mov	r1, r3
 8016128:	480a      	ldr	r0, [pc, #40]	@ (8016154 <netconn_getaddr+0xa0>)
 801612a:	f7ff feeb 	bl	8015f04 <netconn_apimsg>
 801612e:	4603      	mov	r3, r0
 8016130:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8016134:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8016138:	4618      	mov	r0, r3
 801613a:	3738      	adds	r7, #56	@ 0x38
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}
 8016140:	080287a8 	.word	0x080287a8
 8016144:	08028880 	.word	0x08028880
 8016148:	08028800 	.word	0x08028800
 801614c:	080288a0 	.word	0x080288a0
 8016150:	080288c0 	.word	0x080288c0
 8016154:	08018101 	.word	0x08018101

08016158 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b08e      	sub	sp, #56	@ 0x38
 801615c:	af00      	add	r7, sp, #0
 801615e:	60f8      	str	r0, [r7, #12]
 8016160:	60b9      	str	r1, [r7, #8]
 8016162:	4613      	mov	r3, r2
 8016164:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d109      	bne.n	8016180 <netconn_bind+0x28>
 801616c:	4b11      	ldr	r3, [pc, #68]	@ (80161b4 <netconn_bind+0x5c>)
 801616e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8016172:	4911      	ldr	r1, [pc, #68]	@ (80161b8 <netconn_bind+0x60>)
 8016174:	4811      	ldr	r0, [pc, #68]	@ (80161bc <netconn_bind+0x64>)
 8016176:	f011 faf9 	bl	802776c <iprintf>
 801617a:	f06f 030f 	mvn.w	r3, #15
 801617e:	e015      	b.n	80161ac <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d101      	bne.n	801618a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8016186:	4b0e      	ldr	r3, [pc, #56]	@ (80161c0 <netconn_bind+0x68>)
 8016188:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8016192:	88fb      	ldrh	r3, [r7, #6]
 8016194:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8016196:	f107 0314 	add.w	r3, r7, #20
 801619a:	4619      	mov	r1, r3
 801619c:	4809      	ldr	r0, [pc, #36]	@ (80161c4 <netconn_bind+0x6c>)
 801619e:	f7ff feb1 	bl	8015f04 <netconn_apimsg>
 80161a2:	4603      	mov	r3, r0
 80161a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80161a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3738      	adds	r7, #56	@ 0x38
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd80      	pop	{r7, pc}
 80161b4:	080287a8 	.word	0x080287a8
 80161b8:	080288e0 	.word	0x080288e0
 80161bc:	08028800 	.word	0x08028800
 80161c0:	0802c588 	.word	0x0802c588
 80161c4:	080179a9 	.word	0x080179a9

080161c8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b08c      	sub	sp, #48	@ 0x30
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	460b      	mov	r3, r1
 80161d2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d109      	bne.n	80161ee <netconn_listen_with_backlog+0x26>
 80161da:	4b0d      	ldr	r3, [pc, #52]	@ (8016210 <netconn_listen_with_backlog+0x48>)
 80161dc:	f240 12bb 	movw	r2, #443	@ 0x1bb
 80161e0:	490c      	ldr	r1, [pc, #48]	@ (8016214 <netconn_listen_with_backlog+0x4c>)
 80161e2:	480d      	ldr	r0, [pc, #52]	@ (8016218 <netconn_listen_with_backlog+0x50>)
 80161e4:	f011 fac2 	bl	802776c <iprintf>
 80161e8:	f06f 030f 	mvn.w	r3, #15
 80161ec:	e00c      	b.n	8016208 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80161f2:	f107 030c 	add.w	r3, r7, #12
 80161f6:	4619      	mov	r1, r3
 80161f8:	4808      	ldr	r0, [pc, #32]	@ (801621c <netconn_listen_with_backlog+0x54>)
 80161fa:	f7ff fe83 	bl	8015f04 <netconn_apimsg>
 80161fe:	4603      	mov	r3, r0
 8016200:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8016204:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8016208:	4618      	mov	r0, r3
 801620a:	3730      	adds	r7, #48	@ 0x30
 801620c:	46bd      	mov	sp, r7
 801620e:	bd80      	pop	{r7, pc}
 8016210:	080287a8 	.word	0x080287a8
 8016214:	08028960 	.word	0x08028960
 8016218:	08028800 	.word	0x08028800
 801621c:	08017a1d 	.word	0x08017a1d

08016220 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b086      	sub	sp, #24
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d109      	bne.n	8016244 <netconn_accept+0x24>
 8016230:	4b3d      	ldr	r3, [pc, #244]	@ (8016328 <netconn_accept+0x108>)
 8016232:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8016236:	493d      	ldr	r1, [pc, #244]	@ (801632c <netconn_accept+0x10c>)
 8016238:	483d      	ldr	r0, [pc, #244]	@ (8016330 <netconn_accept+0x110>)
 801623a:	f011 fa97 	bl	802776c <iprintf>
 801623e:	f06f 030f 	mvn.w	r3, #15
 8016242:	e06c      	b.n	801631e <netconn_accept+0xfe>
  *new_conn = NULL;
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	2200      	movs	r2, #0
 8016248:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d109      	bne.n	8016264 <netconn_accept+0x44>
 8016250:	4b35      	ldr	r3, [pc, #212]	@ (8016328 <netconn_accept+0x108>)
 8016252:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8016256:	4937      	ldr	r1, [pc, #220]	@ (8016334 <netconn_accept+0x114>)
 8016258:	4835      	ldr	r0, [pc, #212]	@ (8016330 <netconn_accept+0x110>)
 801625a:	f011 fa87 	bl	802776c <iprintf>
 801625e:	f06f 030f 	mvn.w	r3, #15
 8016262:	e05c      	b.n	801631e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f000 fb99 	bl	801699c <netconn_err>
 801626a:	4603      	mov	r3, r0
 801626c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 801626e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d002      	beq.n	801627c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8016276:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801627a:	e050      	b.n	801631e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	3314      	adds	r3, #20
 8016280:	4618      	mov	r0, r3
 8016282:	f010 fc84 	bl	8026b8e <sys_mbox_valid>
 8016286:	4603      	mov	r3, r0
 8016288:	2b00      	cmp	r3, #0
 801628a:	d005      	beq.n	8016298 <netconn_accept+0x78>
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	7f1b      	ldrb	r3, [r3, #28]
 8016290:	f003 0301 	and.w	r3, r3, #1
 8016294:	2b00      	cmp	r3, #0
 8016296:	d002      	beq.n	801629e <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8016298:	f06f 030e 	mvn.w	r3, #14
 801629c:	e03f      	b.n	801631e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	7f1b      	ldrb	r3, [r3, #28]
 80162a2:	f003 0302 	and.w	r3, r3, #2
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d00e      	beq.n	80162c8 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	3314      	adds	r3, #20
 80162ae:	f107 020c 	add.w	r2, r7, #12
 80162b2:	4611      	mov	r1, r2
 80162b4:	4618      	mov	r0, r3
 80162b6:	f010 fc4e 	bl	8026b56 <sys_arch_mbox_tryfetch>
 80162ba:	4603      	mov	r3, r0
 80162bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162c0:	d10a      	bne.n	80162d8 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80162c2:	f06f 0306 	mvn.w	r3, #6
 80162c6:	e02a      	b.n	801631e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	3314      	adds	r3, #20
 80162cc:	f107 010c 	add.w	r1, r7, #12
 80162d0:	2200      	movs	r2, #0
 80162d2:	4618      	mov	r0, r3
 80162d4:	f010 fc00 	bl	8026ad8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d005      	beq.n	80162ec <netconn_accept+0xcc>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162e4:	2200      	movs	r2, #0
 80162e6:	2101      	movs	r1, #1
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	f107 0213 	add.w	r2, r7, #19
 80162f2:	4611      	mov	r1, r2
 80162f4:	4618      	mov	r0, r3
 80162f6:	f000 fba3 	bl	8016a40 <lwip_netconn_is_err_msg>
 80162fa:	4603      	mov	r3, r0
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d002      	beq.n	8016306 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8016300:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016304:	e00b      	b.n	801631e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d102      	bne.n	8016312 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 801630c:	f06f 030e 	mvn.w	r3, #14
 8016310:	e005      	b.n	801631e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	697a      	ldr	r2, [r7, #20]
 801631a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801631c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 801631e:	4618      	mov	r0, r3
 8016320:	3718      	adds	r7, #24
 8016322:	46bd      	mov	sp, r7
 8016324:	bd80      	pop	{r7, pc}
 8016326:	bf00      	nop
 8016328:	080287a8 	.word	0x080287a8
 801632c:	08028980 	.word	0x08028980
 8016330:	08028800 	.word	0x08028800
 8016334:	080289a0 	.word	0x080289a0

08016338 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b088      	sub	sp, #32
 801633c:	af00      	add	r7, sp, #0
 801633e:	60f8      	str	r0, [r7, #12]
 8016340:	60b9      	str	r1, [r7, #8]
 8016342:	4613      	mov	r3, r2
 8016344:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8016346:	2300      	movs	r3, #0
 8016348:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d109      	bne.n	8016364 <netconn_recv_data+0x2c>
 8016350:	4b58      	ldr	r3, [pc, #352]	@ (80164b4 <netconn_recv_data+0x17c>)
 8016352:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8016356:	4958      	ldr	r1, [pc, #352]	@ (80164b8 <netconn_recv_data+0x180>)
 8016358:	4858      	ldr	r0, [pc, #352]	@ (80164bc <netconn_recv_data+0x184>)
 801635a:	f011 fa07 	bl	802776c <iprintf>
 801635e:	f06f 030f 	mvn.w	r3, #15
 8016362:	e0a2      	b.n	80164aa <netconn_recv_data+0x172>
  *new_buf = NULL;
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	2200      	movs	r2, #0
 8016368:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d109      	bne.n	8016384 <netconn_recv_data+0x4c>
 8016370:	4b50      	ldr	r3, [pc, #320]	@ (80164b4 <netconn_recv_data+0x17c>)
 8016372:	f240 224a 	movw	r2, #586	@ 0x24a
 8016376:	4952      	ldr	r1, [pc, #328]	@ (80164c0 <netconn_recv_data+0x188>)
 8016378:	4850      	ldr	r0, [pc, #320]	@ (80164bc <netconn_recv_data+0x184>)
 801637a:	f011 f9f7 	bl	802776c <iprintf>
 801637e:	f06f 030f 	mvn.w	r3, #15
 8016382:	e092      	b.n	80164aa <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	3310      	adds	r3, #16
 8016388:	4618      	mov	r0, r3
 801638a:	f010 fc00 	bl	8026b8e <sys_mbox_valid>
 801638e:	4603      	mov	r3, r0
 8016390:	2b00      	cmp	r3, #0
 8016392:	d10e      	bne.n	80163b2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	f000 fb01 	bl	801699c <netconn_err>
 801639a:	4603      	mov	r3, r0
 801639c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801639e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d002      	beq.n	80163ac <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80163a6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80163aa:	e07e      	b.n	80164aa <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80163ac:	f06f 030a 	mvn.w	r3, #10
 80163b0:	e07b      	b.n	80164aa <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	7f1b      	ldrb	r3, [r3, #28]
 80163b6:	f003 0302 	and.w	r3, r3, #2
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d10f      	bne.n	80163de <netconn_recv_data+0xa6>
 80163be:	79fb      	ldrb	r3, [r7, #7]
 80163c0:	f003 0304 	and.w	r3, r3, #4
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d10a      	bne.n	80163de <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	7f1b      	ldrb	r3, [r3, #28]
 80163cc:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d104      	bne.n	80163de <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d023      	beq.n	8016426 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	3310      	adds	r3, #16
 80163e2:	f107 0218 	add.w	r2, r7, #24
 80163e6:	4611      	mov	r1, r2
 80163e8:	4618      	mov	r0, r3
 80163ea:	f010 fbb4 	bl	8026b56 <sys_arch_mbox_tryfetch>
 80163ee:	4603      	mov	r3, r0
 80163f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163f4:	d11f      	bne.n	8016436 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80163f6:	68f8      	ldr	r0, [r7, #12]
 80163f8:	f000 fad0 	bl	801699c <netconn_err>
 80163fc:	4603      	mov	r3, r0
 80163fe:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8016400:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d002      	beq.n	801640e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8016408:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801640c:	e04d      	b.n	80164aa <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	7f1b      	ldrb	r3, [r3, #28]
 8016412:	f003 0301 	and.w	r3, r3, #1
 8016416:	2b00      	cmp	r3, #0
 8016418:	d002      	beq.n	8016420 <netconn_recv_data+0xe8>
        return ERR_CONN;
 801641a:	f06f 030a 	mvn.w	r3, #10
 801641e:	e044      	b.n	80164aa <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8016420:	f06f 0306 	mvn.w	r3, #6
 8016424:	e041      	b.n	80164aa <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	3310      	adds	r3, #16
 801642a:	f107 0118 	add.w	r1, r7, #24
 801642e:	2200      	movs	r2, #0
 8016430:	4618      	mov	r0, r3
 8016432:	f010 fb51 	bl	8026ad8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801643e:	2b10      	cmp	r3, #16
 8016440:	d117      	bne.n	8016472 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8016442:	69bb      	ldr	r3, [r7, #24]
 8016444:	f107 0217 	add.w	r2, r7, #23
 8016448:	4611      	mov	r1, r2
 801644a:	4618      	mov	r0, r3
 801644c:	f000 faf8 	bl	8016a40 <lwip_netconn_is_err_msg>
 8016450:	4603      	mov	r3, r0
 8016452:	2b00      	cmp	r3, #0
 8016454:	d009      	beq.n	801646a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8016456:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801645a:	f113 0f0f 	cmn.w	r3, #15
 801645e:	d101      	bne.n	8016464 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8016460:	2300      	movs	r3, #0
 8016462:	e022      	b.n	80164aa <netconn_recv_data+0x172>
      }
      return err;
 8016464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016468:	e01f      	b.n	80164aa <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 801646a:	69bb      	ldr	r3, [r7, #24]
 801646c:	891b      	ldrh	r3, [r3, #8]
 801646e:	83fb      	strh	r3, [r7, #30]
 8016470:	e00d      	b.n	801648e <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8016472:	69bb      	ldr	r3, [r7, #24]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d106      	bne.n	8016486 <netconn_recv_data+0x14e>
 8016478:	4b0e      	ldr	r3, [pc, #56]	@ (80164b4 <netconn_recv_data+0x17c>)
 801647a:	f240 2291 	movw	r2, #657	@ 0x291
 801647e:	4911      	ldr	r1, [pc, #68]	@ (80164c4 <netconn_recv_data+0x18c>)
 8016480:	480e      	ldr	r0, [pc, #56]	@ (80164bc <netconn_recv_data+0x184>)
 8016482:	f011 f973 	bl	802776c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8016486:	69bb      	ldr	r3, [r7, #24]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	891b      	ldrh	r3, [r3, #8]
 801648c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016492:	2b00      	cmp	r3, #0
 8016494:	d005      	beq.n	80164a2 <netconn_recv_data+0x16a>
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801649a:	8bfa      	ldrh	r2, [r7, #30]
 801649c:	2101      	movs	r1, #1
 801649e:	68f8      	ldr	r0, [r7, #12]
 80164a0:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80164a2:	69ba      	ldr	r2, [r7, #24]
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80164a8:	2300      	movs	r3, #0
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3720      	adds	r7, #32
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}
 80164b2:	bf00      	nop
 80164b4:	080287a8 	.word	0x080287a8
 80164b8:	080289c0 	.word	0x080289c0
 80164bc:	08028800 	.word	0x08028800
 80164c0:	080289e0 	.word	0x080289e0
 80164c4:	080289fc 	.word	0x080289fc

080164c8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d005      	beq.n	80164e6 <netconn_tcp_recvd_msg+0x1e>
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	781b      	ldrb	r3, [r3, #0]
 80164de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80164e2:	2b10      	cmp	r3, #16
 80164e4:	d009      	beq.n	80164fa <netconn_tcp_recvd_msg+0x32>
 80164e6:	4b0c      	ldr	r3, [pc, #48]	@ (8016518 <netconn_tcp_recvd_msg+0x50>)
 80164e8:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80164ec:	490b      	ldr	r1, [pc, #44]	@ (801651c <netconn_tcp_recvd_msg+0x54>)
 80164ee:	480c      	ldr	r0, [pc, #48]	@ (8016520 <netconn_tcp_recvd_msg+0x58>)
 80164f0:	f011 f93c 	bl	802776c <iprintf>
 80164f4:	f06f 030f 	mvn.w	r3, #15
 80164f8:	e00a      	b.n	8016510 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	68fa      	ldr	r2, [r7, #12]
 80164fe:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	68ba      	ldr	r2, [r7, #8]
 8016504:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8016506:	6879      	ldr	r1, [r7, #4]
 8016508:	4806      	ldr	r0, [pc, #24]	@ (8016524 <netconn_tcp_recvd_msg+0x5c>)
 801650a:	f7ff fcfb 	bl	8015f04 <netconn_apimsg>
 801650e:	4603      	mov	r3, r0
}
 8016510:	4618      	mov	r0, r3
 8016512:	3710      	adds	r7, #16
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}
 8016518:	080287a8 	.word	0x080287a8
 801651c:	08028a08 	.word	0x08028a08
 8016520:	08028800 	.word	0x08028800
 8016524:	08017be7 	.word	0x08017be7

08016528 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b08c      	sub	sp, #48	@ 0x30
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d005      	beq.n	8016544 <netconn_tcp_recvd+0x1c>
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	781b      	ldrb	r3, [r3, #0]
 801653c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016540:	2b10      	cmp	r3, #16
 8016542:	d009      	beq.n	8016558 <netconn_tcp_recvd+0x30>
 8016544:	4b0c      	ldr	r3, [pc, #48]	@ (8016578 <netconn_tcp_recvd+0x50>)
 8016546:	f240 22b5 	movw	r2, #693	@ 0x2b5
 801654a:	490c      	ldr	r1, [pc, #48]	@ (801657c <netconn_tcp_recvd+0x54>)
 801654c:	480c      	ldr	r0, [pc, #48]	@ (8016580 <netconn_tcp_recvd+0x58>)
 801654e:	f011 f90d 	bl	802776c <iprintf>
 8016552:	f06f 030f 	mvn.w	r3, #15
 8016556:	e00b      	b.n	8016570 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8016558:	f107 030c 	add.w	r3, r7, #12
 801655c:	461a      	mov	r2, r3
 801655e:	6839      	ldr	r1, [r7, #0]
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f7ff ffb1 	bl	80164c8 <netconn_tcp_recvd_msg>
 8016566:	4603      	mov	r3, r0
 8016568:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 801656c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8016570:	4618      	mov	r0, r3
 8016572:	3730      	adds	r7, #48	@ 0x30
 8016574:	46bd      	mov	sp, r7
 8016576:	bd80      	pop	{r7, pc}
 8016578:	080287a8 	.word	0x080287a8
 801657c:	08028a08 	.word	0x08028a08
 8016580:	08028800 	.word	0x08028800

08016584 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b090      	sub	sp, #64	@ 0x40
 8016588:	af00      	add	r7, sp, #0
 801658a:	60f8      	str	r0, [r7, #12]
 801658c:	60b9      	str	r1, [r7, #8]
 801658e:	4613      	mov	r3, r2
 8016590:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	3310      	adds	r3, #16
 8016596:	4618      	mov	r0, r3
 8016598:	f010 faf9 	bl	8026b8e <sys_mbox_valid>
 801659c:	4603      	mov	r3, r0
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d102      	bne.n	80165a8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80165a2:	f06f 030a 	mvn.w	r3, #10
 80165a6:	e06d      	b.n	8016684 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	7f1b      	ldrb	r3, [r3, #28]
 80165ac:	b25b      	sxtb	r3, r3
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	da07      	bge.n	80165c2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	7f1b      	ldrb	r3, [r3, #28]
 80165b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80165ba:	b2da      	uxtb	r2, r3
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80165c0:	e039      	b.n	8016636 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80165c2:	79fb      	ldrb	r3, [r7, #7]
 80165c4:	461a      	mov	r2, r3
 80165c6:	68b9      	ldr	r1, [r7, #8]
 80165c8:	68f8      	ldr	r0, [r7, #12]
 80165ca:	f7ff feb5 	bl	8016338 <netconn_recv_data>
 80165ce:	4603      	mov	r3, r0
 80165d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80165d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d002      	beq.n	80165e2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80165dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80165e0:	e050      	b.n	8016684 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80165e2:	68bb      	ldr	r3, [r7, #8]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80165e8:	79fb      	ldrb	r3, [r7, #7]
 80165ea:	f003 0308 	and.w	r3, r3, #8
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d10e      	bne.n	8016610 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80165f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d002      	beq.n	80165fe <netconn_recv_data_tcp+0x7a>
 80165f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165fa:	891b      	ldrh	r3, [r3, #8]
 80165fc:	e000      	b.n	8016600 <netconn_recv_data_tcp+0x7c>
 80165fe:	2301      	movs	r3, #1
 8016600:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8016602:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016604:	f107 0214 	add.w	r2, r7, #20
 8016608:	4619      	mov	r1, r3
 801660a:	68f8      	ldr	r0, [r7, #12]
 801660c:	f7ff ff5c 	bl	80164c8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8016610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016612:	2b00      	cmp	r3, #0
 8016614:	d134      	bne.n	8016680 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8016616:	79fb      	ldrb	r3, [r7, #7]
 8016618:	f003 0310 	and.w	r3, r3, #16
 801661c:	2b00      	cmp	r3, #0
 801661e:	d009      	beq.n	8016634 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	7f1b      	ldrb	r3, [r3, #28]
 8016624:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016628:	b2da      	uxtb	r2, r3
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 801662e:	f06f 0306 	mvn.w	r3, #6
 8016632:	e027      	b.n	8016684 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8016634:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801663a:	2b00      	cmp	r3, #0
 801663c:	d005      	beq.n	801664a <netconn_recv_data_tcp+0xc6>
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016642:	2200      	movs	r2, #0
 8016644:	2101      	movs	r1, #1
 8016646:	68f8      	ldr	r0, [r7, #12]
 8016648:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	685b      	ldr	r3, [r3, #4]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d10f      	bne.n	8016672 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8016652:	68f8      	ldr	r0, [r7, #12]
 8016654:	f000 f9a2 	bl	801699c <netconn_err>
 8016658:	4603      	mov	r3, r0
 801665a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 801665e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8016662:	2b00      	cmp	r3, #0
 8016664:	d002      	beq.n	801666c <netconn_recv_data_tcp+0xe8>
          return err;
 8016666:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801666a:	e00b      	b.n	8016684 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 801666c:	f06f 030d 	mvn.w	r3, #13
 8016670:	e008      	b.n	8016684 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8016672:	2101      	movs	r1, #1
 8016674:	68f8      	ldr	r0, [r7, #12]
 8016676:	f000 f961 	bl	801693c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801667a:	f06f 030e 	mvn.w	r3, #14
 801667e:	e001      	b.n	8016684 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8016680:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8016684:	4618      	mov	r0, r3
 8016686:	3740      	adds	r7, #64	@ 0x40
 8016688:	46bd      	mov	sp, r7
 801668a:	bd80      	pop	{r7, pc}

0801668c <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b084      	sub	sp, #16
 8016690:	af00      	add	r7, sp, #0
 8016692:	60f8      	str	r0, [r7, #12]
 8016694:	60b9      	str	r1, [r7, #8]
 8016696:	4613      	mov	r3, r2
 8016698:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d005      	beq.n	80166ac <netconn_recv_tcp_pbuf_flags+0x20>
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	781b      	ldrb	r3, [r3, #0]
 80166a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80166a8:	2b10      	cmp	r3, #16
 80166aa:	d009      	beq.n	80166c0 <netconn_recv_tcp_pbuf_flags+0x34>
 80166ac:	4b0a      	ldr	r3, [pc, #40]	@ (80166d8 <netconn_recv_tcp_pbuf_flags+0x4c>)
 80166ae:	f240 3225 	movw	r2, #805	@ 0x325
 80166b2:	490a      	ldr	r1, [pc, #40]	@ (80166dc <netconn_recv_tcp_pbuf_flags+0x50>)
 80166b4:	480a      	ldr	r0, [pc, #40]	@ (80166e0 <netconn_recv_tcp_pbuf_flags+0x54>)
 80166b6:	f011 f859 	bl	802776c <iprintf>
 80166ba:	f06f 030f 	mvn.w	r3, #15
 80166be:	e006      	b.n	80166ce <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 80166c0:	79fb      	ldrb	r3, [r7, #7]
 80166c2:	461a      	mov	r2, r3
 80166c4:	68b9      	ldr	r1, [r7, #8]
 80166c6:	68f8      	ldr	r0, [r7, #12]
 80166c8:	f7ff ff5c 	bl	8016584 <netconn_recv_data_tcp>
 80166cc:	4603      	mov	r3, r0
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3710      	adds	r7, #16
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	080287a8 	.word	0x080287a8
 80166dc:	08028a08 	.word	0x08028a08
 80166e0:	08028800 	.word	0x08028800

080166e4 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b084      	sub	sp, #16
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	60f8      	str	r0, [r7, #12]
 80166ec:	60b9      	str	r1, [r7, #8]
 80166ee:	4613      	mov	r3, r2
 80166f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d005      	beq.n	8016704 <netconn_recv_udp_raw_netbuf_flags+0x20>
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016700:	2b10      	cmp	r3, #16
 8016702:	d109      	bne.n	8016718 <netconn_recv_udp_raw_netbuf_flags+0x34>
 8016704:	4b0a      	ldr	r3, [pc, #40]	@ (8016730 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8016706:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 801670a:	490a      	ldr	r1, [pc, #40]	@ (8016734 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 801670c:	480a      	ldr	r0, [pc, #40]	@ (8016738 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 801670e:	f011 f82d 	bl	802776c <iprintf>
 8016712:	f06f 030f 	mvn.w	r3, #15
 8016716:	e006      	b.n	8016726 <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8016718:	79fb      	ldrb	r3, [r7, #7]
 801671a:	461a      	mov	r2, r3
 801671c:	68b9      	ldr	r1, [r7, #8]
 801671e:	68f8      	ldr	r0, [r7, #12]
 8016720:	f7ff fe0a 	bl	8016338 <netconn_recv_data>
 8016724:	4603      	mov	r3, r0
}
 8016726:	4618      	mov	r0, r3
 8016728:	3710      	adds	r7, #16
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}
 801672e:	bf00      	nop
 8016730:	080287a8 	.word	0x080287a8
 8016734:	08028a2c 	.word	0x08028a2c
 8016738:	08028800 	.word	0x08028800

0801673c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b08c      	sub	sp, #48	@ 0x30
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d109      	bne.n	8016760 <netconn_send+0x24>
 801674c:	4b0e      	ldr	r3, [pc, #56]	@ (8016788 <netconn_send+0x4c>)
 801674e:	f240 32b2 	movw	r2, #946	@ 0x3b2
 8016752:	490e      	ldr	r1, [pc, #56]	@ (801678c <netconn_send+0x50>)
 8016754:	480e      	ldr	r0, [pc, #56]	@ (8016790 <netconn_send+0x54>)
 8016756:	f011 f809 	bl	802776c <iprintf>
 801675a:	f06f 030f 	mvn.w	r3, #15
 801675e:	e00e      	b.n	801677e <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8016768:	f107 030c 	add.w	r3, r7, #12
 801676c:	4619      	mov	r1, r3
 801676e:	4809      	ldr	r0, [pc, #36]	@ (8016794 <netconn_send+0x58>)
 8016770:	f7ff fbc8 	bl	8015f04 <netconn_apimsg>
 8016774:	4603      	mov	r3, r0
 8016776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801677a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 801677e:	4618      	mov	r0, r3
 8016780:	3730      	adds	r7, #48	@ 0x30
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	080287a8 	.word	0x080287a8
 801678c:	08028a64 	.word	0x08028a64
 8016790:	08028800 	.word	0x08028800
 8016794:	08017b4d 	.word	0x08017b4d

08016798 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b088      	sub	sp, #32
 801679c:	af02      	add	r7, sp, #8
 801679e:	60f8      	str	r0, [r7, #12]
 80167a0:	60b9      	str	r1, [r7, #8]
 80167a2:	607a      	str	r2, [r7, #4]
 80167a4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80167a6:	68bb      	ldr	r3, [r7, #8]
 80167a8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80167ae:	78fa      	ldrb	r2, [r7, #3]
 80167b0:	f107 0110 	add.w	r1, r7, #16
 80167b4:	6a3b      	ldr	r3, [r7, #32]
 80167b6:	9300      	str	r3, [sp, #0]
 80167b8:	4613      	mov	r3, r2
 80167ba:	2201      	movs	r2, #1
 80167bc:	68f8      	ldr	r0, [r7, #12]
 80167be:	f000 f805 	bl	80167cc <netconn_write_vectors_partly>
 80167c2:	4603      	mov	r3, r0
}
 80167c4:	4618      	mov	r0, r3
 80167c6:	3718      	adds	r7, #24
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}

080167cc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b092      	sub	sp, #72	@ 0x48
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	60f8      	str	r0, [r7, #12]
 80167d4:	60b9      	str	r1, [r7, #8]
 80167d6:	4611      	mov	r1, r2
 80167d8:	461a      	mov	r2, r3
 80167da:	460b      	mov	r3, r1
 80167dc:	80fb      	strh	r3, [r7, #6]
 80167de:	4613      	mov	r3, r2
 80167e0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d109      	bne.n	80167fc <netconn_write_vectors_partly+0x30>
 80167e8:	4b4e      	ldr	r3, [pc, #312]	@ (8016924 <netconn_write_vectors_partly+0x158>)
 80167ea:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80167ee:	494e      	ldr	r1, [pc, #312]	@ (8016928 <netconn_write_vectors_partly+0x15c>)
 80167f0:	484e      	ldr	r0, [pc, #312]	@ (801692c <netconn_write_vectors_partly+0x160>)
 80167f2:	f010 ffbb 	bl	802776c <iprintf>
 80167f6:	f06f 030f 	mvn.w	r3, #15
 80167fa:	e08e      	b.n	801691a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	781b      	ldrb	r3, [r3, #0]
 8016800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016804:	2b10      	cmp	r3, #16
 8016806:	d009      	beq.n	801681c <netconn_write_vectors_partly+0x50>
 8016808:	4b46      	ldr	r3, [pc, #280]	@ (8016924 <netconn_write_vectors_partly+0x158>)
 801680a:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 801680e:	4948      	ldr	r1, [pc, #288]	@ (8016930 <netconn_write_vectors_partly+0x164>)
 8016810:	4846      	ldr	r0, [pc, #280]	@ (801692c <netconn_write_vectors_partly+0x160>)
 8016812:	f010 ffab 	bl	802776c <iprintf>
 8016816:	f06f 0305 	mvn.w	r3, #5
 801681a:	e07e      	b.n	801691a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	7f1b      	ldrb	r3, [r3, #28]
 8016820:	f003 0302 	and.w	r3, r3, #2
 8016824:	2b00      	cmp	r3, #0
 8016826:	d104      	bne.n	8016832 <netconn_write_vectors_partly+0x66>
 8016828:	797b      	ldrb	r3, [r7, #5]
 801682a:	f003 0304 	and.w	r3, r3, #4
 801682e:	2b00      	cmp	r3, #0
 8016830:	d001      	beq.n	8016836 <netconn_write_vectors_partly+0x6a>
 8016832:	2301      	movs	r3, #1
 8016834:	e000      	b.n	8016838 <netconn_write_vectors_partly+0x6c>
 8016836:	2300      	movs	r3, #0
 8016838:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801683c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016840:	2b00      	cmp	r3, #0
 8016842:	d005      	beq.n	8016850 <netconn_write_vectors_partly+0x84>
 8016844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016846:	2b00      	cmp	r3, #0
 8016848:	d102      	bne.n	8016850 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801684a:	f06f 0305 	mvn.w	r3, #5
 801684e:	e064      	b.n	801691a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8016850:	2300      	movs	r3, #0
 8016852:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8016854:	2300      	movs	r3, #0
 8016856:	643b      	str	r3, [r7, #64]	@ 0x40
 8016858:	e015      	b.n	8016886 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 801685a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801685c:	00db      	lsls	r3, r3, #3
 801685e:	68ba      	ldr	r2, [r7, #8]
 8016860:	4413      	add	r3, r2
 8016862:	685b      	ldr	r3, [r3, #4]
 8016864:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016866:	4413      	add	r3, r2
 8016868:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 801686a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801686c:	00db      	lsls	r3, r3, #3
 801686e:	68ba      	ldr	r2, [r7, #8]
 8016870:	4413      	add	r3, r2
 8016872:	685b      	ldr	r3, [r3, #4]
 8016874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016876:	429a      	cmp	r2, r3
 8016878:	d202      	bcs.n	8016880 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 801687a:	f06f 0305 	mvn.w	r3, #5
 801687e:	e04c      	b.n	801691a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8016880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016882:	3301      	adds	r3, #1
 8016884:	643b      	str	r3, [r7, #64]	@ 0x40
 8016886:	88fb      	ldrh	r3, [r7, #6]
 8016888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801688a:	429a      	cmp	r2, r3
 801688c:	dbe5      	blt.n	801685a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 801688e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016890:	2b00      	cmp	r3, #0
 8016892:	d101      	bne.n	8016898 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8016894:	2300      	movs	r3, #0
 8016896:	e040      	b.n	801691a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8016898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801689a:	2b00      	cmp	r3, #0
 801689c:	da0a      	bge.n	80168b4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 801689e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d102      	bne.n	80168aa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80168a4:	f06f 0305 	mvn.w	r3, #5
 80168a8:	e037      	b.n	801691a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80168aa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80168ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 80168b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80168bc:	88fb      	ldrh	r3, [r7, #6]
 80168be:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80168c0:	2300      	movs	r3, #0
 80168c2:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80168c4:	797b      	ldrb	r3, [r7, #5]
 80168c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80168ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80168cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80168ce:	2300      	movs	r3, #0
 80168d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80168d2:	f107 0314 	add.w	r3, r7, #20
 80168d6:	4619      	mov	r1, r3
 80168d8:	4816      	ldr	r0, [pc, #88]	@ (8016934 <netconn_write_vectors_partly+0x168>)
 80168da:	f7ff fb13 	bl	8015f04 <netconn_apimsg>
 80168de:	4603      	mov	r3, r0
 80168e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 80168e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d114      	bne.n	8016916 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80168ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d002      	beq.n	80168f8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80168f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80168f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168f6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80168f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d10a      	bne.n	8016916 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8016900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016904:	429a      	cmp	r2, r3
 8016906:	d006      	beq.n	8016916 <netconn_write_vectors_partly+0x14a>
 8016908:	4b06      	ldr	r3, [pc, #24]	@ (8016924 <netconn_write_vectors_partly+0x158>)
 801690a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801690e:	490a      	ldr	r1, [pc, #40]	@ (8016938 <netconn_write_vectors_partly+0x16c>)
 8016910:	4806      	ldr	r0, [pc, #24]	@ (801692c <netconn_write_vectors_partly+0x160>)
 8016912:	f010 ff2b 	bl	802776c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8016916:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801691a:	4618      	mov	r0, r3
 801691c:	3748      	adds	r7, #72	@ 0x48
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}
 8016922:	bf00      	nop
 8016924:	080287a8 	.word	0x080287a8
 8016928:	08028a80 	.word	0x08028a80
 801692c:	08028800 	.word	0x08028800
 8016930:	08028a9c 	.word	0x08028a9c
 8016934:	08017fe9 	.word	0x08017fe9
 8016938:	08028ac0 	.word	0x08028ac0

0801693c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b08c      	sub	sp, #48	@ 0x30
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	460b      	mov	r3, r1
 8016946:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d109      	bne.n	8016962 <netconn_close_shutdown+0x26>
 801694e:	4b0f      	ldr	r3, [pc, #60]	@ (801698c <netconn_close_shutdown+0x50>)
 8016950:	f240 4247 	movw	r2, #1095	@ 0x447
 8016954:	490e      	ldr	r1, [pc, #56]	@ (8016990 <netconn_close_shutdown+0x54>)
 8016956:	480f      	ldr	r0, [pc, #60]	@ (8016994 <netconn_close_shutdown+0x58>)
 8016958:	f010 ff08 	bl	802776c <iprintf>
 801695c:	f06f 030f 	mvn.w	r3, #15
 8016960:	e010      	b.n	8016984 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8016966:	78fb      	ldrb	r3, [r7, #3]
 8016968:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801696a:	2329      	movs	r3, #41	@ 0x29
 801696c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801696e:	f107 030c 	add.w	r3, r7, #12
 8016972:	4619      	mov	r1, r3
 8016974:	4808      	ldr	r0, [pc, #32]	@ (8016998 <netconn_close_shutdown+0x5c>)
 8016976:	f7ff fac5 	bl	8015f04 <netconn_apimsg>
 801697a:	4603      	mov	r3, r0
 801697c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8016980:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8016984:	4618      	mov	r0, r3
 8016986:	3730      	adds	r7, #48	@ 0x30
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}
 801698c:	080287a8 	.word	0x080287a8
 8016990:	08028ae4 	.word	0x08028ae4
 8016994:	08028800 	.word	0x08028800
 8016998:	0801820d 	.word	0x0801820d

0801699c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b084      	sub	sp, #16
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d101      	bne.n	80169ae <netconn_err+0x12>
    return ERR_OK;
 80169aa:	2300      	movs	r3, #0
 80169ac:	e00d      	b.n	80169ca <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80169ae:	f010 fa09 	bl	8026dc4 <sys_arch_protect>
 80169b2:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	7a1b      	ldrb	r3, [r3, #8]
 80169b8:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2200      	movs	r2, #0
 80169be:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80169c0:	68f8      	ldr	r0, [r7, #12]
 80169c2:	f010 fa0d 	bl	8026de0 <sys_arch_unprotect>
  return err;
 80169c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3710      	adds	r7, #16
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
	...

080169d4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	4603      	mov	r3, r0
 80169dc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80169de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169e2:	f113 0f0d 	cmn.w	r3, #13
 80169e6:	d009      	beq.n	80169fc <lwip_netconn_err_to_msg+0x28>
 80169e8:	f113 0f0d 	cmn.w	r3, #13
 80169ec:	dc0c      	bgt.n	8016a08 <lwip_netconn_err_to_msg+0x34>
 80169ee:	f113 0f0f 	cmn.w	r3, #15
 80169f2:	d007      	beq.n	8016a04 <lwip_netconn_err_to_msg+0x30>
 80169f4:	f113 0f0e 	cmn.w	r3, #14
 80169f8:	d002      	beq.n	8016a00 <lwip_netconn_err_to_msg+0x2c>
 80169fa:	e005      	b.n	8016a08 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80169fc:	4b0a      	ldr	r3, [pc, #40]	@ (8016a28 <lwip_netconn_err_to_msg+0x54>)
 80169fe:	e00e      	b.n	8016a1e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8016a00:	4b0a      	ldr	r3, [pc, #40]	@ (8016a2c <lwip_netconn_err_to_msg+0x58>)
 8016a02:	e00c      	b.n	8016a1e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8016a04:	4b0a      	ldr	r3, [pc, #40]	@ (8016a30 <lwip_netconn_err_to_msg+0x5c>)
 8016a06:	e00a      	b.n	8016a1e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8016a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d005      	beq.n	8016a1c <lwip_netconn_err_to_msg+0x48>
 8016a10:	4b08      	ldr	r3, [pc, #32]	@ (8016a34 <lwip_netconn_err_to_msg+0x60>)
 8016a12:	227d      	movs	r2, #125	@ 0x7d
 8016a14:	4908      	ldr	r1, [pc, #32]	@ (8016a38 <lwip_netconn_err_to_msg+0x64>)
 8016a16:	4809      	ldr	r0, [pc, #36]	@ (8016a3c <lwip_netconn_err_to_msg+0x68>)
 8016a18:	f010 fea8 	bl	802776c <iprintf>
      return NULL;
 8016a1c:	2300      	movs	r3, #0
  }
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3708      	adds	r7, #8
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
 8016a26:	bf00      	nop
 8016a28:	0802c420 	.word	0x0802c420
 8016a2c:	0802c421 	.word	0x0802c421
 8016a30:	0802c422 	.word	0x0802c422
 8016a34:	08028b00 	.word	0x08028b00
 8016a38:	08028b34 	.word	0x08028b34
 8016a3c:	08028b44 	.word	0x08028b44

08016a40 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b082      	sub	sp, #8
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d105      	bne.n	8016a5c <lwip_netconn_is_err_msg+0x1c>
 8016a50:	4b12      	ldr	r3, [pc, #72]	@ (8016a9c <lwip_netconn_is_err_msg+0x5c>)
 8016a52:	2285      	movs	r2, #133	@ 0x85
 8016a54:	4912      	ldr	r1, [pc, #72]	@ (8016aa0 <lwip_netconn_is_err_msg+0x60>)
 8016a56:	4813      	ldr	r0, [pc, #76]	@ (8016aa4 <lwip_netconn_is_err_msg+0x64>)
 8016a58:	f010 fe88 	bl	802776c <iprintf>

  if (msg == &netconn_aborted) {
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	4a12      	ldr	r2, [pc, #72]	@ (8016aa8 <lwip_netconn_is_err_msg+0x68>)
 8016a60:	4293      	cmp	r3, r2
 8016a62:	d104      	bne.n	8016a6e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	22f3      	movs	r2, #243	@ 0xf3
 8016a68:	701a      	strb	r2, [r3, #0]
    return 1;
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	e012      	b.n	8016a94 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	4a0e      	ldr	r2, [pc, #56]	@ (8016aac <lwip_netconn_is_err_msg+0x6c>)
 8016a72:	4293      	cmp	r3, r2
 8016a74:	d104      	bne.n	8016a80 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	22f2      	movs	r2, #242	@ 0xf2
 8016a7a:	701a      	strb	r2, [r3, #0]
    return 1;
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	e009      	b.n	8016a94 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	4a0b      	ldr	r2, [pc, #44]	@ (8016ab0 <lwip_netconn_is_err_msg+0x70>)
 8016a84:	4293      	cmp	r3, r2
 8016a86:	d104      	bne.n	8016a92 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	22f1      	movs	r2, #241	@ 0xf1
 8016a8c:	701a      	strb	r2, [r3, #0]
    return 1;
 8016a8e:	2301      	movs	r3, #1
 8016a90:	e000      	b.n	8016a94 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8016a92:	2300      	movs	r3, #0
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3708      	adds	r7, #8
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	08028b00 	.word	0x08028b00
 8016aa0:	08028b6c 	.word	0x08028b6c
 8016aa4:	08028b44 	.word	0x08028b44
 8016aa8:	0802c420 	.word	0x0802c420
 8016aac:	0802c421 	.word	0x0802c421
 8016ab0:	0802c422 	.word	0x0802c422

08016ab4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b088      	sub	sp, #32
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	60f8      	str	r0, [r7, #12]
 8016abc:	60b9      	str	r1, [r7, #8]
 8016abe:	607a      	str	r2, [r7, #4]
 8016ac0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8016ac2:	68bb      	ldr	r3, [r7, #8]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d105      	bne.n	8016ad4 <recv_udp+0x20>
 8016ac8:	4b34      	ldr	r3, [pc, #208]	@ (8016b9c <recv_udp+0xe8>)
 8016aca:	22e5      	movs	r2, #229	@ 0xe5
 8016acc:	4934      	ldr	r1, [pc, #208]	@ (8016ba0 <recv_udp+0xec>)
 8016ace:	4835      	ldr	r0, [pc, #212]	@ (8016ba4 <recv_udp+0xf0>)
 8016ad0:	f010 fe4c 	bl	802776c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d105      	bne.n	8016ae6 <recv_udp+0x32>
 8016ada:	4b30      	ldr	r3, [pc, #192]	@ (8016b9c <recv_udp+0xe8>)
 8016adc:	22e6      	movs	r2, #230	@ 0xe6
 8016ade:	4932      	ldr	r1, [pc, #200]	@ (8016ba8 <recv_udp+0xf4>)
 8016ae0:	4830      	ldr	r0, [pc, #192]	@ (8016ba4 <recv_udp+0xf0>)
 8016ae2:	f010 fe43 	bl	802776c <iprintf>
  conn = (struct netconn *)arg;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8016aea:	69fb      	ldr	r3, [r7, #28]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d103      	bne.n	8016af8 <recv_udp+0x44>
    pbuf_free(p);
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f004 fc2f 	bl	801b354 <pbuf_free>
    return;
 8016af6:	e04d      	b.n	8016b94 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8016af8:	69fb      	ldr	r3, [r7, #28]
 8016afa:	685b      	ldr	r3, [r3, #4]
 8016afc:	68ba      	ldr	r2, [r7, #8]
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d005      	beq.n	8016b0e <recv_udp+0x5a>
 8016b02:	4b26      	ldr	r3, [pc, #152]	@ (8016b9c <recv_udp+0xe8>)
 8016b04:	22ee      	movs	r2, #238	@ 0xee
 8016b06:	4929      	ldr	r1, [pc, #164]	@ (8016bac <recv_udp+0xf8>)
 8016b08:	4826      	ldr	r0, [pc, #152]	@ (8016ba4 <recv_udp+0xf0>)
 8016b0a:	f010 fe2f 	bl	802776c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016b0e:	69fb      	ldr	r3, [r7, #28]
 8016b10:	3310      	adds	r3, #16
 8016b12:	4618      	mov	r0, r3
 8016b14:	f010 f83b 	bl	8026b8e <sys_mbox_valid>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d103      	bne.n	8016b26 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f004 fc18 	bl	801b354 <pbuf_free>
    return;
 8016b24:	e036      	b.n	8016b94 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8016b26:	2006      	movs	r0, #6
 8016b28:	f003 fcbc 	bl	801a4a4 <memp_malloc>
 8016b2c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8016b2e:	69bb      	ldr	r3, [r7, #24]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d103      	bne.n	8016b3c <recv_udp+0x88>
    pbuf_free(p);
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f004 fc0d 	bl	801b354 <pbuf_free>
    return;
 8016b3a:	e02b      	b.n	8016b94 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8016b3c:	69bb      	ldr	r3, [r7, #24]
 8016b3e:	687a      	ldr	r2, [r7, #4]
 8016b40:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8016b42:	69bb      	ldr	r3, [r7, #24]
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d002      	beq.n	8016b54 <recv_udp+0xa0>
 8016b4e:	683b      	ldr	r3, [r7, #0]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	e000      	b.n	8016b56 <recv_udp+0xa2>
 8016b54:	2300      	movs	r3, #0
 8016b56:	69ba      	ldr	r2, [r7, #24]
 8016b58:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8016b5a:	69bb      	ldr	r3, [r7, #24]
 8016b5c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016b5e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	891b      	ldrh	r3, [r3, #8]
 8016b64:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8016b66:	69fb      	ldr	r3, [r7, #28]
 8016b68:	3310      	adds	r3, #16
 8016b6a:	69b9      	ldr	r1, [r7, #24]
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f00f ff99 	bl	8026aa4 <sys_mbox_trypost>
 8016b72:	4603      	mov	r3, r0
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d003      	beq.n	8016b80 <recv_udp+0xcc>
    netbuf_delete(buf);
 8016b78:	69b8      	ldr	r0, [r7, #24]
 8016b7a:	f001 fbf1 	bl	8018360 <netbuf_delete>
    return;
 8016b7e:	e009      	b.n	8016b94 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8016b80:	69fb      	ldr	r3, [r7, #28]
 8016b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d005      	beq.n	8016b94 <recv_udp+0xe0>
 8016b88:	69fb      	ldr	r3, [r7, #28]
 8016b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b8c:	8afa      	ldrh	r2, [r7, #22]
 8016b8e:	2100      	movs	r1, #0
 8016b90:	69f8      	ldr	r0, [r7, #28]
 8016b92:	4798      	blx	r3
  }
}
 8016b94:	3720      	adds	r7, #32
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
 8016b9a:	bf00      	nop
 8016b9c:	08028b00 	.word	0x08028b00
 8016ba0:	08028b78 	.word	0x08028b78
 8016ba4:	08028b44 	.word	0x08028b44
 8016ba8:	08028b9c 	.word	0x08028b9c
 8016bac:	08028bbc 	.word	0x08028bbc

08016bb0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b088      	sub	sp, #32
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	60b9      	str	r1, [r7, #8]
 8016bba:	607a      	str	r2, [r7, #4]
 8016bbc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8016bbe:	68bb      	ldr	r3, [r7, #8]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d106      	bne.n	8016bd2 <recv_tcp+0x22>
 8016bc4:	4b36      	ldr	r3, [pc, #216]	@ (8016ca0 <recv_tcp+0xf0>)
 8016bc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8016bca:	4936      	ldr	r1, [pc, #216]	@ (8016ca4 <recv_tcp+0xf4>)
 8016bcc:	4836      	ldr	r0, [pc, #216]	@ (8016ca8 <recv_tcp+0xf8>)
 8016bce:	f010 fdcd 	bl	802776c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d106      	bne.n	8016be6 <recv_tcp+0x36>
 8016bd8:	4b31      	ldr	r3, [pc, #196]	@ (8016ca0 <recv_tcp+0xf0>)
 8016bda:	f240 122d 	movw	r2, #301	@ 0x12d
 8016bde:	4933      	ldr	r1, [pc, #204]	@ (8016cac <recv_tcp+0xfc>)
 8016be0:	4831      	ldr	r0, [pc, #196]	@ (8016ca8 <recv_tcp+0xf8>)
 8016be2:	f010 fdc3 	bl	802776c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8016be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d006      	beq.n	8016bfc <recv_tcp+0x4c>
 8016bee:	4b2c      	ldr	r3, [pc, #176]	@ (8016ca0 <recv_tcp+0xf0>)
 8016bf0:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8016bf4:	492e      	ldr	r1, [pc, #184]	@ (8016cb0 <recv_tcp+0x100>)
 8016bf6:	482c      	ldr	r0, [pc, #176]	@ (8016ca8 <recv_tcp+0xf8>)
 8016bf8:	f010 fdb8 	bl	802776c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d102      	bne.n	8016c0c <recv_tcp+0x5c>
    return ERR_VAL;
 8016c06:	f06f 0305 	mvn.w	r3, #5
 8016c0a:	e045      	b.n	8016c98 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8016c0c:	697b      	ldr	r3, [r7, #20]
 8016c0e:	685b      	ldr	r3, [r3, #4]
 8016c10:	68ba      	ldr	r2, [r7, #8]
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d006      	beq.n	8016c24 <recv_tcp+0x74>
 8016c16:	4b22      	ldr	r3, [pc, #136]	@ (8016ca0 <recv_tcp+0xf0>)
 8016c18:	f240 1235 	movw	r2, #309	@ 0x135
 8016c1c:	4925      	ldr	r1, [pc, #148]	@ (8016cb4 <recv_tcp+0x104>)
 8016c1e:	4822      	ldr	r0, [pc, #136]	@ (8016ca8 <recv_tcp+0xf8>)
 8016c20:	f010 fda4 	bl	802776c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016c24:	697b      	ldr	r3, [r7, #20]
 8016c26:	3310      	adds	r3, #16
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f00f ffb0 	bl	8026b8e <sys_mbox_valid>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d10d      	bne.n	8016c50 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d008      	beq.n	8016c4c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	891b      	ldrh	r3, [r3, #8]
 8016c3e:	4619      	mov	r1, r3
 8016c40:	68b8      	ldr	r0, [r7, #8]
 8016c42:	f005 fb4f 	bl	801c2e4 <tcp_recved>
      pbuf_free(p);
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f004 fb84 	bl	801b354 <pbuf_free>
    }
    return ERR_OK;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	e023      	b.n	8016c98 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d005      	beq.n	8016c62 <recv_tcp+0xb2>
    msg = p;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	891b      	ldrh	r3, [r3, #8]
 8016c5e:	83fb      	strh	r3, [r7, #30]
 8016c60:	e003      	b.n	8016c6a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8016c62:	4b15      	ldr	r3, [pc, #84]	@ (8016cb8 <recv_tcp+0x108>)
 8016c64:	61bb      	str	r3, [r7, #24]
    len = 0;
 8016c66:	2300      	movs	r3, #0
 8016c68:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8016c6a:	697b      	ldr	r3, [r7, #20]
 8016c6c:	3310      	adds	r3, #16
 8016c6e:	69b9      	ldr	r1, [r7, #24]
 8016c70:	4618      	mov	r0, r3
 8016c72:	f00f ff17 	bl	8026aa4 <sys_mbox_trypost>
 8016c76:	4603      	mov	r3, r0
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d002      	beq.n	8016c82 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8016c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8016c80:	e00a      	b.n	8016c98 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8016c82:	697b      	ldr	r3, [r7, #20]
 8016c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d005      	beq.n	8016c96 <recv_tcp+0xe6>
 8016c8a:	697b      	ldr	r3, [r7, #20]
 8016c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c8e:	8bfa      	ldrh	r2, [r7, #30]
 8016c90:	2100      	movs	r1, #0
 8016c92:	6978      	ldr	r0, [r7, #20]
 8016c94:	4798      	blx	r3
  }

  return ERR_OK;
 8016c96:	2300      	movs	r3, #0
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3720      	adds	r7, #32
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}
 8016ca0:	08028b00 	.word	0x08028b00
 8016ca4:	08028bdc 	.word	0x08028bdc
 8016ca8:	08028b44 	.word	0x08028b44
 8016cac:	08028c00 	.word	0x08028c00
 8016cb0:	08028c20 	.word	0x08028c20
 8016cb4:	08028c38 	.word	0x08028c38
 8016cb8:	0802c422 	.word	0x0802c422

08016cbc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b084      	sub	sp, #16
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d106      	bne.n	8016cde <poll_tcp+0x22>
 8016cd0:	4b29      	ldr	r3, [pc, #164]	@ (8016d78 <poll_tcp+0xbc>)
 8016cd2:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8016cd6:	4929      	ldr	r1, [pc, #164]	@ (8016d7c <poll_tcp+0xc0>)
 8016cd8:	4829      	ldr	r0, [pc, #164]	@ (8016d80 <poll_tcp+0xc4>)
 8016cda:	f010 fd47 	bl	802776c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	785b      	ldrb	r3, [r3, #1]
 8016ce2:	2b01      	cmp	r3, #1
 8016ce4:	d104      	bne.n	8016cf0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8016ce6:	2101      	movs	r1, #1
 8016ce8:	68f8      	ldr	r0, [r7, #12]
 8016cea:	f000 ffb1 	bl	8017c50 <lwip_netconn_do_writemore>
 8016cee:	e016      	b.n	8016d1e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	785b      	ldrb	r3, [r3, #1]
 8016cf4:	2b04      	cmp	r3, #4
 8016cf6:	d112      	bne.n	8016d1e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	6a1b      	ldr	r3, [r3, #32]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d00a      	beq.n	8016d16 <poll_tcp+0x5a>
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	6a1b      	ldr	r3, [r3, #32]
 8016d04:	7a5b      	ldrb	r3, [r3, #9]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d005      	beq.n	8016d16 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	6a1b      	ldr	r3, [r3, #32]
 8016d0e:	7a5a      	ldrb	r2, [r3, #9]
 8016d10:	3a01      	subs	r2, #1
 8016d12:	b2d2      	uxtb	r2, r2
 8016d14:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8016d16:	2101      	movs	r1, #1
 8016d18:	68f8      	ldr	r0, [r7, #12]
 8016d1a:	f000 fbf7 	bl	801750c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	7f1b      	ldrb	r3, [r3, #28]
 8016d22:	f003 0310 	and.w	r3, r3, #16
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d021      	beq.n	8016d6e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d01d      	beq.n	8016d6e <poll_tcp+0xb2>
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	685b      	ldr	r3, [r3, #4]
 8016d36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016d3a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8016d3e:	d316      	bcc.n	8016d6e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	685b      	ldr	r3, [r3, #4]
 8016d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016d48:	2b04      	cmp	r3, #4
 8016d4a:	d810      	bhi.n	8016d6e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	7f1b      	ldrb	r3, [r3, #28]
 8016d50:	f023 0310 	bic.w	r3, r3, #16
 8016d54:	b2da      	uxtb	r2, r3
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d005      	beq.n	8016d6e <poll_tcp+0xb2>
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d66:	2200      	movs	r2, #0
 8016d68:	2102      	movs	r1, #2
 8016d6a:	68f8      	ldr	r0, [r7, #12]
 8016d6c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8016d6e:	2300      	movs	r3, #0
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3710      	adds	r7, #16
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	08028b00 	.word	0x08028b00
 8016d7c:	08028c58 	.word	0x08028c58
 8016d80:	08028b44 	.word	0x08028b44

08016d84 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b086      	sub	sp, #24
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	60f8      	str	r0, [r7, #12]
 8016d8c:	60b9      	str	r1, [r7, #8]
 8016d8e:	4613      	mov	r3, r2
 8016d90:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8016d96:	697b      	ldr	r3, [r7, #20]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d106      	bne.n	8016daa <sent_tcp+0x26>
 8016d9c:	4b20      	ldr	r3, [pc, #128]	@ (8016e20 <sent_tcp+0x9c>)
 8016d9e:	f240 1293 	movw	r2, #403	@ 0x193
 8016da2:	4920      	ldr	r1, [pc, #128]	@ (8016e24 <sent_tcp+0xa0>)
 8016da4:	4820      	ldr	r0, [pc, #128]	@ (8016e28 <sent_tcp+0xa4>)
 8016da6:	f010 fce1 	bl	802776c <iprintf>

  if (conn) {
 8016daa:	697b      	ldr	r3, [r7, #20]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d032      	beq.n	8016e16 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8016db0:	697b      	ldr	r3, [r7, #20]
 8016db2:	785b      	ldrb	r3, [r3, #1]
 8016db4:	2b01      	cmp	r3, #1
 8016db6:	d104      	bne.n	8016dc2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8016db8:	2101      	movs	r1, #1
 8016dba:	6978      	ldr	r0, [r7, #20]
 8016dbc:	f000 ff48 	bl	8017c50 <lwip_netconn_do_writemore>
 8016dc0:	e007      	b.n	8016dd2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8016dc2:	697b      	ldr	r3, [r7, #20]
 8016dc4:	785b      	ldrb	r3, [r3, #1]
 8016dc6:	2b04      	cmp	r3, #4
 8016dc8:	d103      	bne.n	8016dd2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8016dca:	2101      	movs	r1, #1
 8016dcc:	6978      	ldr	r0, [r7, #20]
 8016dce:	f000 fb9d 	bl	801750c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d01d      	beq.n	8016e16 <sent_tcp+0x92>
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	685b      	ldr	r3, [r3, #4]
 8016dde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016de2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8016de6:	d316      	bcc.n	8016e16 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8016de8:	697b      	ldr	r3, [r7, #20]
 8016dea:	685b      	ldr	r3, [r3, #4]
 8016dec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8016df0:	2b04      	cmp	r3, #4
 8016df2:	d810      	bhi.n	8016e16 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	7f1b      	ldrb	r3, [r3, #28]
 8016df8:	f023 0310 	bic.w	r3, r3, #16
 8016dfc:	b2da      	uxtb	r2, r3
 8016dfe:	697b      	ldr	r3, [r7, #20]
 8016e00:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8016e02:	697b      	ldr	r3, [r7, #20]
 8016e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d005      	beq.n	8016e16 <sent_tcp+0x92>
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e0e:	88fa      	ldrh	r2, [r7, #6]
 8016e10:	2102      	movs	r1, #2
 8016e12:	6978      	ldr	r0, [r7, #20]
 8016e14:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8016e16:	2300      	movs	r3, #0
}
 8016e18:	4618      	mov	r0, r3
 8016e1a:	3718      	adds	r7, #24
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	bd80      	pop	{r7, pc}
 8016e20:	08028b00 	.word	0x08028b00
 8016e24:	08028c58 	.word	0x08028c58
 8016e28:	08028b44 	.word	0x08028b44

08016e2c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b088      	sub	sp, #32
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
 8016e34:	460b      	mov	r3, r1
 8016e36:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8016e3c:	69fb      	ldr	r3, [r7, #28]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d106      	bne.n	8016e50 <err_tcp+0x24>
 8016e42:	4b5f      	ldr	r3, [pc, #380]	@ (8016fc0 <err_tcp+0x194>)
 8016e44:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8016e48:	495e      	ldr	r1, [pc, #376]	@ (8016fc4 <err_tcp+0x198>)
 8016e4a:	485f      	ldr	r0, [pc, #380]	@ (8016fc8 <err_tcp+0x19c>)
 8016e4c:	f010 fc8e 	bl	802776c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8016e50:	f00f ffb8 	bl	8026dc4 <sys_arch_protect>
 8016e54:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8016e56:	69fb      	ldr	r3, [r7, #28]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8016e5c:	69fb      	ldr	r3, [r7, #28]
 8016e5e:	78fa      	ldrb	r2, [r7, #3]
 8016e60:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8016e62:	69fb      	ldr	r3, [r7, #28]
 8016e64:	7f1b      	ldrb	r3, [r3, #28]
 8016e66:	f043 0301 	orr.w	r3, r3, #1
 8016e6a:	b2da      	uxtb	r2, r3
 8016e6c:	69fb      	ldr	r3, [r7, #28]
 8016e6e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8016e70:	69fb      	ldr	r3, [r7, #28]
 8016e72:	785b      	ldrb	r3, [r3, #1]
 8016e74:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8016e76:	69fb      	ldr	r3, [r7, #28]
 8016e78:	2200      	movs	r2, #0
 8016e7a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8016e7c:	69b8      	ldr	r0, [r7, #24]
 8016e7e:	f00f ffaf 	bl	8026de0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8016e82:	69fb      	ldr	r3, [r7, #28]
 8016e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d005      	beq.n	8016e96 <err_tcp+0x6a>
 8016e8a:	69fb      	ldr	r3, [r7, #28]
 8016e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e8e:	2200      	movs	r2, #0
 8016e90:	2104      	movs	r1, #4
 8016e92:	69f8      	ldr	r0, [r7, #28]
 8016e94:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8016e96:	69fb      	ldr	r3, [r7, #28]
 8016e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d005      	beq.n	8016eaa <err_tcp+0x7e>
 8016e9e:	69fb      	ldr	r3, [r7, #28]
 8016ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	2100      	movs	r1, #0
 8016ea6:	69f8      	ldr	r0, [r7, #28]
 8016ea8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8016eaa:	69fb      	ldr	r3, [r7, #28]
 8016eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d005      	beq.n	8016ebe <err_tcp+0x92>
 8016eb2:	69fb      	ldr	r3, [r7, #28]
 8016eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	2102      	movs	r1, #2
 8016eba:	69f8      	ldr	r0, [r7, #28]
 8016ebc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8016ebe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7ff fd86 	bl	80169d4 <lwip_netconn_err_to_msg>
 8016ec8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8016eca:	69fb      	ldr	r3, [r7, #28]
 8016ecc:	3310      	adds	r3, #16
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f00f fe5d 	bl	8026b8e <sys_mbox_valid>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d005      	beq.n	8016ee6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8016eda:	69fb      	ldr	r3, [r7, #28]
 8016edc:	3310      	adds	r3, #16
 8016ede:	6939      	ldr	r1, [r7, #16]
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f00f fddf 	bl	8026aa4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8016ee6:	69fb      	ldr	r3, [r7, #28]
 8016ee8:	3314      	adds	r3, #20
 8016eea:	4618      	mov	r0, r3
 8016eec:	f00f fe4f 	bl	8026b8e <sys_mbox_valid>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d005      	beq.n	8016f02 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8016ef6:	69fb      	ldr	r3, [r7, #28]
 8016ef8:	3314      	adds	r3, #20
 8016efa:	6939      	ldr	r1, [r7, #16]
 8016efc:	4618      	mov	r0, r3
 8016efe:	f00f fdd1 	bl	8026aa4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8016f02:	7dfb      	ldrb	r3, [r7, #23]
 8016f04:	2b01      	cmp	r3, #1
 8016f06:	d005      	beq.n	8016f14 <err_tcp+0xe8>
 8016f08:	7dfb      	ldrb	r3, [r7, #23]
 8016f0a:	2b04      	cmp	r3, #4
 8016f0c:	d002      	beq.n	8016f14 <err_tcp+0xe8>
 8016f0e:	7dfb      	ldrb	r3, [r7, #23]
 8016f10:	2b03      	cmp	r3, #3
 8016f12:	d143      	bne.n	8016f9c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	7f1b      	ldrb	r3, [r3, #28]
 8016f18:	f003 0304 	and.w	r3, r3, #4
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	bf14      	ite	ne
 8016f20:	2301      	movne	r3, #1
 8016f22:	2300      	moveq	r3, #0
 8016f24:	b2db      	uxtb	r3, r3
 8016f26:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8016f28:	69fb      	ldr	r3, [r7, #28]
 8016f2a:	7f1b      	ldrb	r3, [r3, #28]
 8016f2c:	f023 0304 	bic.w	r3, r3, #4
 8016f30:	b2da      	uxtb	r2, r3
 8016f32:	69fb      	ldr	r3, [r7, #28]
 8016f34:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d13b      	bne.n	8016fb4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016f3c:	69fb      	ldr	r3, [r7, #28]
 8016f3e:	6a1b      	ldr	r3, [r3, #32]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d106      	bne.n	8016f52 <err_tcp+0x126>
 8016f44:	4b1e      	ldr	r3, [pc, #120]	@ (8016fc0 <err_tcp+0x194>)
 8016f46:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016f4a:	4920      	ldr	r1, [pc, #128]	@ (8016fcc <err_tcp+0x1a0>)
 8016f4c:	481e      	ldr	r0, [pc, #120]	@ (8016fc8 <err_tcp+0x19c>)
 8016f4e:	f010 fc0d 	bl	802776c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8016f52:	7dfb      	ldrb	r3, [r7, #23]
 8016f54:	2b04      	cmp	r3, #4
 8016f56:	d104      	bne.n	8016f62 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8016f58:	69fb      	ldr	r3, [r7, #28]
 8016f5a:	6a1b      	ldr	r3, [r3, #32]
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	711a      	strb	r2, [r3, #4]
 8016f60:	e003      	b.n	8016f6a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8016f62:	69fb      	ldr	r3, [r7, #28]
 8016f64:	6a1b      	ldr	r3, [r3, #32]
 8016f66:	78fa      	ldrb	r2, [r7, #3]
 8016f68:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016f6a:	69fb      	ldr	r3, [r7, #28]
 8016f6c:	6a1b      	ldr	r3, [r3, #32]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	330c      	adds	r3, #12
 8016f72:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8016f74:	68b8      	ldr	r0, [r7, #8]
 8016f76:	f00f fe9b 	bl	8026cb0 <sys_sem_valid>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d106      	bne.n	8016f8e <err_tcp+0x162>
 8016f80:	4b0f      	ldr	r3, [pc, #60]	@ (8016fc0 <err_tcp+0x194>)
 8016f82:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8016f86:	4912      	ldr	r1, [pc, #72]	@ (8016fd0 <err_tcp+0x1a4>)
 8016f88:	480f      	ldr	r0, [pc, #60]	@ (8016fc8 <err_tcp+0x19c>)
 8016f8a:	f010 fbef 	bl	802776c <iprintf>
      conn->current_msg = NULL;
 8016f8e:	69fb      	ldr	r3, [r7, #28]
 8016f90:	2200      	movs	r2, #0
 8016f92:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8016f94:	68b8      	ldr	r0, [r7, #8]
 8016f96:	f00f fe71 	bl	8026c7c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8016f9a:	e00b      	b.n	8016fb4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8016f9c:	69fb      	ldr	r3, [r7, #28]
 8016f9e:	6a1b      	ldr	r3, [r3, #32]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d008      	beq.n	8016fb6 <err_tcp+0x18a>
 8016fa4:	4b06      	ldr	r3, [pc, #24]	@ (8016fc0 <err_tcp+0x194>)
 8016fa6:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8016faa:	490a      	ldr	r1, [pc, #40]	@ (8016fd4 <err_tcp+0x1a8>)
 8016fac:	4806      	ldr	r0, [pc, #24]	@ (8016fc8 <err_tcp+0x19c>)
 8016fae:	f010 fbdd 	bl	802776c <iprintf>
  }
}
 8016fb2:	e000      	b.n	8016fb6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8016fb4:	bf00      	nop
}
 8016fb6:	bf00      	nop
 8016fb8:	3720      	adds	r7, #32
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	bd80      	pop	{r7, pc}
 8016fbe:	bf00      	nop
 8016fc0:	08028b00 	.word	0x08028b00
 8016fc4:	08028c58 	.word	0x08028c58
 8016fc8:	08028b44 	.word	0x08028b44
 8016fcc:	08028c68 	.word	0x08028c68
 8016fd0:	08028c84 	.word	0x08028c84
 8016fd4:	08028ca0 	.word	0x08028ca0

08016fd8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b084      	sub	sp, #16
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	685b      	ldr	r3, [r3, #4]
 8016fe4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8016fe6:	6879      	ldr	r1, [r7, #4]
 8016fe8:	68f8      	ldr	r0, [r7, #12]
 8016fea:	f006 f843 	bl	801d074 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8016fee:	490a      	ldr	r1, [pc, #40]	@ (8017018 <setup_tcp+0x40>)
 8016ff0:	68f8      	ldr	r0, [r7, #12]
 8016ff2:	f006 f851 	bl	801d098 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8016ff6:	4909      	ldr	r1, [pc, #36]	@ (801701c <setup_tcp+0x44>)
 8016ff8:	68f8      	ldr	r0, [r7, #12]
 8016ffa:	f006 f86f 	bl	801d0dc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8016ffe:	2202      	movs	r2, #2
 8017000:	4907      	ldr	r1, [pc, #28]	@ (8017020 <setup_tcp+0x48>)
 8017002:	68f8      	ldr	r0, [r7, #12]
 8017004:	f006 f8c6 	bl	801d194 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8017008:	4906      	ldr	r1, [pc, #24]	@ (8017024 <setup_tcp+0x4c>)
 801700a:	68f8      	ldr	r0, [r7, #12]
 801700c:	f006 f888 	bl	801d120 <tcp_err>
}
 8017010:	bf00      	nop
 8017012:	3710      	adds	r7, #16
 8017014:	46bd      	mov	sp, r7
 8017016:	bd80      	pop	{r7, pc}
 8017018:	08016bb1 	.word	0x08016bb1
 801701c:	08016d85 	.word	0x08016d85
 8017020:	08016cbd 	.word	0x08016cbd
 8017024:	08016e2d 	.word	0x08016e2d

08017028 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8017028:	b590      	push	{r4, r7, lr}
 801702a:	b089      	sub	sp, #36	@ 0x24
 801702c:	af00      	add	r7, sp, #0
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	4613      	mov	r3, r2
 8017034:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d102      	bne.n	8017046 <accept_function+0x1e>
    return ERR_VAL;
 8017040:	f06f 0305 	mvn.w	r3, #5
 8017044:	e0a1      	b.n	801718a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8017046:	69fb      	ldr	r3, [r7, #28]
 8017048:	3314      	adds	r3, #20
 801704a:	4618      	mov	r0, r3
 801704c:	f00f fd9f 	bl	8026b8e <sys_mbox_valid>
 8017050:	4603      	mov	r3, r0
 8017052:	2b00      	cmp	r3, #0
 8017054:	d102      	bne.n	801705c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8017056:	f06f 0305 	mvn.w	r3, #5
 801705a:	e096      	b.n	801718a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d11b      	bne.n	801709a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8017062:	69fb      	ldr	r3, [r7, #28]
 8017064:	f103 0414 	add.w	r4, r3, #20
 8017068:	f06f 000c 	mvn.w	r0, #12
 801706c:	f7ff fcb2 	bl	80169d4 <lwip_netconn_err_to_msg>
 8017070:	4603      	mov	r3, r0
 8017072:	4619      	mov	r1, r3
 8017074:	4620      	mov	r0, r4
 8017076:	f00f fd15 	bl	8026aa4 <sys_mbox_trypost>
 801707a:	4603      	mov	r3, r0
 801707c:	2b00      	cmp	r3, #0
 801707e:	d109      	bne.n	8017094 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017080:	69fb      	ldr	r3, [r7, #28]
 8017082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017084:	2b00      	cmp	r3, #0
 8017086:	d005      	beq.n	8017094 <accept_function+0x6c>
 8017088:	69fb      	ldr	r3, [r7, #28]
 801708a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801708c:	2200      	movs	r2, #0
 801708e:	2100      	movs	r1, #0
 8017090:	69f8      	ldr	r0, [r7, #28]
 8017092:	4798      	blx	r3
    }
    return ERR_VAL;
 8017094:	f06f 0305 	mvn.w	r3, #5
 8017098:	e077      	b.n	801718a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 801709a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d006      	beq.n	80170b0 <accept_function+0x88>
 80170a2:	4b3c      	ldr	r3, [pc, #240]	@ (8017194 <accept_function+0x16c>)
 80170a4:	f240 222a 	movw	r2, #554	@ 0x22a
 80170a8:	493b      	ldr	r1, [pc, #236]	@ (8017198 <accept_function+0x170>)
 80170aa:	483c      	ldr	r0, [pc, #240]	@ (801719c <accept_function+0x174>)
 80170ac:	f010 fb5e 	bl	802776c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80170b0:	69fb      	ldr	r3, [r7, #28]
 80170b2:	781a      	ldrb	r2, [r3, #0]
 80170b4:	69fb      	ldr	r3, [r7, #28]
 80170b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170b8:	4619      	mov	r1, r3
 80170ba:	4610      	mov	r0, r2
 80170bc:	f000 f8f0 	bl	80172a0 <netconn_alloc>
 80170c0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80170c2:	69bb      	ldr	r3, [r7, #24]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d11b      	bne.n	8017100 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80170c8:	69fb      	ldr	r3, [r7, #28]
 80170ca:	f103 0414 	add.w	r4, r3, #20
 80170ce:	f06f 000c 	mvn.w	r0, #12
 80170d2:	f7ff fc7f 	bl	80169d4 <lwip_netconn_err_to_msg>
 80170d6:	4603      	mov	r3, r0
 80170d8:	4619      	mov	r1, r3
 80170da:	4620      	mov	r0, r4
 80170dc:	f00f fce2 	bl	8026aa4 <sys_mbox_trypost>
 80170e0:	4603      	mov	r3, r0
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d109      	bne.n	80170fa <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80170e6:	69fb      	ldr	r3, [r7, #28]
 80170e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d005      	beq.n	80170fa <accept_function+0xd2>
 80170ee:	69fb      	ldr	r3, [r7, #28]
 80170f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170f2:	2200      	movs	r2, #0
 80170f4:	2100      	movs	r1, #0
 80170f6:	69f8      	ldr	r0, [r7, #28]
 80170f8:	4798      	blx	r3
    }
    return ERR_MEM;
 80170fa:	f04f 33ff 	mov.w	r3, #4294967295
 80170fe:	e044      	b.n	801718a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8017100:	69bb      	ldr	r3, [r7, #24]
 8017102:	68ba      	ldr	r2, [r7, #8]
 8017104:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8017106:	69b8      	ldr	r0, [r7, #24]
 8017108:	f7ff ff66 	bl	8016fd8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 801710c:	69fb      	ldr	r3, [r7, #28]
 801710e:	3314      	adds	r3, #20
 8017110:	69b9      	ldr	r1, [r7, #24]
 8017112:	4618      	mov	r0, r3
 8017114:	f00f fcc6 	bl	8026aa4 <sys_mbox_trypost>
 8017118:	4603      	mov	r3, r0
 801711a:	2b00      	cmp	r3, #0
 801711c:	d02a      	beq.n	8017174 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 801711e:	69bb      	ldr	r3, [r7, #24]
 8017120:	685b      	ldr	r3, [r3, #4]
 8017122:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8017124:	2100      	movs	r1, #0
 8017126:	6978      	ldr	r0, [r7, #20]
 8017128:	f005 ffa4 	bl	801d074 <tcp_arg>
    tcp_recv(pcb, NULL);
 801712c:	2100      	movs	r1, #0
 801712e:	6978      	ldr	r0, [r7, #20]
 8017130:	f005 ffb2 	bl	801d098 <tcp_recv>
    tcp_sent(pcb, NULL);
 8017134:	2100      	movs	r1, #0
 8017136:	6978      	ldr	r0, [r7, #20]
 8017138:	f005 ffd0 	bl	801d0dc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 801713c:	2200      	movs	r2, #0
 801713e:	2100      	movs	r1, #0
 8017140:	6978      	ldr	r0, [r7, #20]
 8017142:	f006 f827 	bl	801d194 <tcp_poll>
    tcp_err(pcb, NULL);
 8017146:	2100      	movs	r1, #0
 8017148:	6978      	ldr	r0, [r7, #20]
 801714a:	f005 ffe9 	bl	801d120 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 801714e:	69bb      	ldr	r3, [r7, #24]
 8017150:	2200      	movs	r2, #0
 8017152:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8017154:	69bb      	ldr	r3, [r7, #24]
 8017156:	3310      	adds	r3, #16
 8017158:	4618      	mov	r0, r3
 801715a:	f00f fc91 	bl	8026a80 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 801715e:	69bb      	ldr	r3, [r7, #24]
 8017160:	3310      	adds	r3, #16
 8017162:	4618      	mov	r0, r3
 8017164:	f00f fd24 	bl	8026bb0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8017168:	69b8      	ldr	r0, [r7, #24]
 801716a:	f000 f907 	bl	801737c <netconn_free>
    return ERR_MEM;
 801716e:	f04f 33ff 	mov.w	r3, #4294967295
 8017172:	e00a      	b.n	801718a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017174:	69fb      	ldr	r3, [r7, #28]
 8017176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017178:	2b00      	cmp	r3, #0
 801717a:	d005      	beq.n	8017188 <accept_function+0x160>
 801717c:	69fb      	ldr	r3, [r7, #28]
 801717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017180:	2200      	movs	r2, #0
 8017182:	2100      	movs	r1, #0
 8017184:	69f8      	ldr	r0, [r7, #28]
 8017186:	4798      	blx	r3
  }

  return ERR_OK;
 8017188:	2300      	movs	r3, #0
}
 801718a:	4618      	mov	r0, r3
 801718c:	3724      	adds	r7, #36	@ 0x24
 801718e:	46bd      	mov	sp, r7
 8017190:	bd90      	pop	{r4, r7, pc}
 8017192:	bf00      	nop
 8017194:	08028b00 	.word	0x08028b00
 8017198:	08028cbc 	.word	0x08028cbc
 801719c:	08028b44 	.word	0x08028b44

080171a0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80171a0:	b590      	push	{r4, r7, lr}
 80171a2:	b085      	sub	sp, #20
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80171a8:	2300      	movs	r3, #0
 80171aa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	685b      	ldr	r3, [r3, #4]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d006      	beq.n	80171c4 <pcb_new+0x24>
 80171b6:	4b2b      	ldr	r3, [pc, #172]	@ (8017264 <pcb_new+0xc4>)
 80171b8:	f240 2265 	movw	r2, #613	@ 0x265
 80171bc:	492a      	ldr	r1, [pc, #168]	@ (8017268 <pcb_new+0xc8>)
 80171be:	482b      	ldr	r0, [pc, #172]	@ (801726c <pcb_new+0xcc>)
 80171c0:	f010 fad4 	bl	802776c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	781b      	ldrb	r3, [r3, #0]
 80171ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80171ce:	2b10      	cmp	r3, #16
 80171d0:	d022      	beq.n	8017218 <pcb_new+0x78>
 80171d2:	2b20      	cmp	r3, #32
 80171d4:	d133      	bne.n	801723e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	681c      	ldr	r4, [r3, #0]
 80171da:	7bfb      	ldrb	r3, [r7, #15]
 80171dc:	4618      	mov	r0, r3
 80171de:	f00b fa7a 	bl	80226d6 <udp_new_ip_type>
 80171e2:	4603      	mov	r3, r0
 80171e4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	685b      	ldr	r3, [r3, #4]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d02a      	beq.n	8017246 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	781b      	ldrb	r3, [r3, #0]
 80171f6:	2b22      	cmp	r3, #34	@ 0x22
 80171f8:	d104      	bne.n	8017204 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	685b      	ldr	r3, [r3, #4]
 8017200:	2201      	movs	r2, #1
 8017202:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	6858      	ldr	r0, [r3, #4]
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	461a      	mov	r2, r3
 8017210:	4917      	ldr	r1, [pc, #92]	@ (8017270 <pcb_new+0xd0>)
 8017212:	f00b f9e7 	bl	80225e4 <udp_recv>
      }
      break;
 8017216:	e016      	b.n	8017246 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681c      	ldr	r4, [r3, #0]
 801721c:	7bfb      	ldrb	r3, [r7, #15]
 801721e:	4618      	mov	r0, r3
 8017220:	f005 ff1a 	bl	801d058 <tcp_new_ip_type>
 8017224:	4603      	mov	r3, r0
 8017226:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d00b      	beq.n	801724a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	4618      	mov	r0, r3
 8017238:	f7ff fece 	bl	8016fd8 <setup_tcp>
      }
      break;
 801723c:	e005      	b.n	801724a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	22fa      	movs	r2, #250	@ 0xfa
 8017242:	711a      	strb	r2, [r3, #4]
      return;
 8017244:	e00a      	b.n	801725c <pcb_new+0xbc>
      break;
 8017246:	bf00      	nop
 8017248:	e000      	b.n	801724c <pcb_new+0xac>
      break;
 801724a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	685b      	ldr	r3, [r3, #4]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d102      	bne.n	801725c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	22ff      	movs	r2, #255	@ 0xff
 801725a:	711a      	strb	r2, [r3, #4]
  }
}
 801725c:	3714      	adds	r7, #20
 801725e:	46bd      	mov	sp, r7
 8017260:	bd90      	pop	{r4, r7, pc}
 8017262:	bf00      	nop
 8017264:	08028b00 	.word	0x08028b00
 8017268:	08028ce4 	.word	0x08028ce4
 801726c:	08028b44 	.word	0x08028b44
 8017270:	08016ab5 	.word	0x08016ab5

08017274 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b084      	sub	sp, #16
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	2200      	movs	r2, #0
 8017284:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	685b      	ldr	r3, [r3, #4]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d102      	bne.n	8017296 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8017290:	68f8      	ldr	r0, [r7, #12]
 8017292:	f7ff ff85 	bl	80171a0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8017296:	bf00      	nop
 8017298:	3710      	adds	r7, #16
 801729a:	46bd      	mov	sp, r7
 801729c:	bd80      	pop	{r7, pc}
	...

080172a0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b086      	sub	sp, #24
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	4603      	mov	r3, r0
 80172a8:	6039      	str	r1, [r7, #0]
 80172aa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80172ac:	2300      	movs	r3, #0
 80172ae:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80172b0:	2007      	movs	r0, #7
 80172b2:	f003 f8f7 	bl	801a4a4 <memp_malloc>
 80172b6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d101      	bne.n	80172c2 <netconn_alloc+0x22>
    return NULL;
 80172be:	2300      	movs	r3, #0
 80172c0:	e052      	b.n	8017368 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	2200      	movs	r2, #0
 80172c6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	79fa      	ldrb	r2, [r7, #7]
 80172cc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	2200      	movs	r2, #0
 80172d2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80172d4:	79fb      	ldrb	r3, [r7, #7]
 80172d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80172da:	2b10      	cmp	r3, #16
 80172dc:	d004      	beq.n	80172e8 <netconn_alloc+0x48>
 80172de:	2b20      	cmp	r3, #32
 80172e0:	d105      	bne.n	80172ee <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80172e2:	2306      	movs	r3, #6
 80172e4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80172e6:	e00a      	b.n	80172fe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80172e8:	2306      	movs	r3, #6
 80172ea:	617b      	str	r3, [r7, #20]
      break;
 80172ec:	e007      	b.n	80172fe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80172ee:	4b20      	ldr	r3, [pc, #128]	@ (8017370 <netconn_alloc+0xd0>)
 80172f0:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80172f4:	491f      	ldr	r1, [pc, #124]	@ (8017374 <netconn_alloc+0xd4>)
 80172f6:	4820      	ldr	r0, [pc, #128]	@ (8017378 <netconn_alloc+0xd8>)
 80172f8:	f010 fa38 	bl	802776c <iprintf>
      goto free_and_return;
 80172fc:	e02f      	b.n	801735e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	3310      	adds	r3, #16
 8017302:	6979      	ldr	r1, [r7, #20]
 8017304:	4618      	mov	r0, r3
 8017306:	f00f fb99 	bl	8026a3c <sys_mbox_new>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d125      	bne.n	801735c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	330c      	adds	r3, #12
 8017314:	2100      	movs	r1, #0
 8017316:	4618      	mov	r0, r3
 8017318:	f00f fc57 	bl	8026bca <sys_sem_new>
 801731c:	4603      	mov	r3, r0
 801731e:	2b00      	cmp	r3, #0
 8017320:	d005      	beq.n	801732e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	3310      	adds	r3, #16
 8017326:	4618      	mov	r0, r3
 8017328:	f00f fbaa 	bl	8026a80 <sys_mbox_free>
    goto free_and_return;
 801732c:	e017      	b.n	801735e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	3314      	adds	r3, #20
 8017332:	4618      	mov	r0, r3
 8017334:	f00f fc3c 	bl	8026bb0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	2200      	movs	r2, #0
 801733c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	f04f 32ff 	mov.w	r2, #4294967295
 8017344:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	683a      	ldr	r2, [r7, #0]
 801734a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	2200      	movs	r2, #0
 8017350:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	7cfa      	ldrb	r2, [r7, #19]
 8017356:	771a      	strb	r2, [r3, #28]
  return conn;
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	e005      	b.n	8017368 <netconn_alloc+0xc8>
    goto free_and_return;
 801735c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801735e:	68f9      	ldr	r1, [r7, #12]
 8017360:	2007      	movs	r0, #7
 8017362:	f003 f915 	bl	801a590 <memp_free>
  return NULL;
 8017366:	2300      	movs	r3, #0
}
 8017368:	4618      	mov	r0, r3
 801736a:	3718      	adds	r7, #24
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}
 8017370:	08028b00 	.word	0x08028b00
 8017374:	08028d04 	.word	0x08028d04
 8017378:	08028b44 	.word	0x08028b44

0801737c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b082      	sub	sp, #8
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d006      	beq.n	801739a <netconn_free+0x1e>
 801738c:	4b1b      	ldr	r3, [pc, #108]	@ (80173fc <netconn_free+0x80>)
 801738e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8017392:	491b      	ldr	r1, [pc, #108]	@ (8017400 <netconn_free+0x84>)
 8017394:	481b      	ldr	r0, [pc, #108]	@ (8017404 <netconn_free+0x88>)
 8017396:	f010 f9e9 	bl	802776c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	3310      	adds	r3, #16
 801739e:	4618      	mov	r0, r3
 80173a0:	f00f fbf5 	bl	8026b8e <sys_mbox_valid>
 80173a4:	4603      	mov	r3, r0
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d006      	beq.n	80173b8 <netconn_free+0x3c>
 80173aa:	4b14      	ldr	r3, [pc, #80]	@ (80173fc <netconn_free+0x80>)
 80173ac:	f240 3223 	movw	r2, #803	@ 0x323
 80173b0:	4915      	ldr	r1, [pc, #84]	@ (8017408 <netconn_free+0x8c>)
 80173b2:	4814      	ldr	r0, [pc, #80]	@ (8017404 <netconn_free+0x88>)
 80173b4:	f010 f9da 	bl	802776c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	3314      	adds	r3, #20
 80173bc:	4618      	mov	r0, r3
 80173be:	f00f fbe6 	bl	8026b8e <sys_mbox_valid>
 80173c2:	4603      	mov	r3, r0
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d006      	beq.n	80173d6 <netconn_free+0x5a>
 80173c8:	4b0c      	ldr	r3, [pc, #48]	@ (80173fc <netconn_free+0x80>)
 80173ca:	f240 3226 	movw	r2, #806	@ 0x326
 80173ce:	490f      	ldr	r1, [pc, #60]	@ (801740c <netconn_free+0x90>)
 80173d0:	480c      	ldr	r0, [pc, #48]	@ (8017404 <netconn_free+0x88>)
 80173d2:	f010 f9cb 	bl	802776c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	330c      	adds	r3, #12
 80173da:	4618      	mov	r0, r3
 80173dc:	f00f fc5b 	bl	8026c96 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	330c      	adds	r3, #12
 80173e4:	4618      	mov	r0, r3
 80173e6:	f00f fc74 	bl	8026cd2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80173ea:	6879      	ldr	r1, [r7, #4]
 80173ec:	2007      	movs	r0, #7
 80173ee:	f003 f8cf 	bl	801a590 <memp_free>
}
 80173f2:	bf00      	nop
 80173f4:	3708      	adds	r7, #8
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
 80173fa:	bf00      	nop
 80173fc:	08028b00 	.word	0x08028b00
 8017400:	08028d2c 	.word	0x08028d2c
 8017404:	08028b44 	.word	0x08028b44
 8017408:	08028d5c 	.word	0x08028d5c
 801740c:	08028d98 	.word	0x08028d98

08017410 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b086      	sub	sp, #24
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	3310      	adds	r3, #16
 801741c:	4618      	mov	r0, r3
 801741e:	f00f fbb6 	bl	8026b8e <sys_mbox_valid>
 8017422:	4603      	mov	r3, r0
 8017424:	2b00      	cmp	r3, #0
 8017426:	d02f      	beq.n	8017488 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8017428:	e018      	b.n	801745c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	781b      	ldrb	r3, [r3, #0]
 801742e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017432:	2b10      	cmp	r3, #16
 8017434:	d10e      	bne.n	8017454 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	f107 020f 	add.w	r2, r7, #15
 801743c:	4611      	mov	r1, r2
 801743e:	4618      	mov	r0, r3
 8017440:	f7ff fafe 	bl	8016a40 <lwip_netconn_is_err_msg>
 8017444:	4603      	mov	r3, r0
 8017446:	2b00      	cmp	r3, #0
 8017448:	d108      	bne.n	801745c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	4618      	mov	r0, r3
 801744e:	f003 ff81 	bl	801b354 <pbuf_free>
 8017452:	e003      	b.n	801745c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8017454:	693b      	ldr	r3, [r7, #16]
 8017456:	4618      	mov	r0, r3
 8017458:	f000 ff82 	bl	8018360 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	3310      	adds	r3, #16
 8017460:	f107 0210 	add.w	r2, r7, #16
 8017464:	4611      	mov	r1, r2
 8017466:	4618      	mov	r0, r3
 8017468:	f00f fb75 	bl	8026b56 <sys_arch_mbox_tryfetch>
 801746c:	4603      	mov	r3, r0
 801746e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017472:	d1da      	bne.n	801742a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	3310      	adds	r3, #16
 8017478:	4618      	mov	r0, r3
 801747a:	f00f fb01 	bl	8026a80 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	3310      	adds	r3, #16
 8017482:	4618      	mov	r0, r3
 8017484:	f00f fb94 	bl	8026bb0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	3314      	adds	r3, #20
 801748c:	4618      	mov	r0, r3
 801748e:	f00f fb7e 	bl	8026b8e <sys_mbox_valid>
 8017492:	4603      	mov	r3, r0
 8017494:	2b00      	cmp	r3, #0
 8017496:	d034      	beq.n	8017502 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8017498:	e01d      	b.n	80174d6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801749a:	693b      	ldr	r3, [r7, #16]
 801749c:	f107 020e 	add.w	r2, r7, #14
 80174a0:	4611      	mov	r1, r2
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7ff facc 	bl	8016a40 <lwip_netconn_is_err_msg>
 80174a8:	4603      	mov	r3, r0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d113      	bne.n	80174d6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80174ae:	693b      	ldr	r3, [r7, #16]
 80174b0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80174b2:	6978      	ldr	r0, [r7, #20]
 80174b4:	f7ff ffac 	bl	8017410 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80174b8:	697b      	ldr	r3, [r7, #20]
 80174ba:	685b      	ldr	r3, [r3, #4]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d007      	beq.n	80174d0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	685b      	ldr	r3, [r3, #4]
 80174c4:	4618      	mov	r0, r3
 80174c6:	f004 fd45 	bl	801bf54 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80174ca:	697b      	ldr	r3, [r7, #20]
 80174cc:	2200      	movs	r2, #0
 80174ce:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80174d0:	6978      	ldr	r0, [r7, #20]
 80174d2:	f7ff ff53 	bl	801737c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	3314      	adds	r3, #20
 80174da:	f107 0210 	add.w	r2, r7, #16
 80174de:	4611      	mov	r1, r2
 80174e0:	4618      	mov	r0, r3
 80174e2:	f00f fb38 	bl	8026b56 <sys_arch_mbox_tryfetch>
 80174e6:	4603      	mov	r3, r0
 80174e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174ec:	d1d5      	bne.n	801749a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	3314      	adds	r3, #20
 80174f2:	4618      	mov	r0, r3
 80174f4:	f00f fac4 	bl	8026a80 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	3314      	adds	r3, #20
 80174fc:	4618      	mov	r0, r3
 80174fe:	f00f fb57 	bl	8026bb0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8017502:	bf00      	nop
 8017504:	3718      	adds	r7, #24
 8017506:	46bd      	mov	sp, r7
 8017508:	bd80      	pop	{r7, pc}
	...

0801750c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b086      	sub	sp, #24
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
 8017514:	460b      	mov	r3, r1
 8017516:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8017518:	2300      	movs	r3, #0
 801751a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d106      	bne.n	8017530 <lwip_netconn_do_close_internal+0x24>
 8017522:	4b87      	ldr	r3, [pc, #540]	@ (8017740 <lwip_netconn_do_close_internal+0x234>)
 8017524:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8017528:	4986      	ldr	r1, [pc, #536]	@ (8017744 <lwip_netconn_do_close_internal+0x238>)
 801752a:	4887      	ldr	r0, [pc, #540]	@ (8017748 <lwip_netconn_do_close_internal+0x23c>)
 801752c:	f010 f91e 	bl	802776c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017538:	2b10      	cmp	r3, #16
 801753a:	d006      	beq.n	801754a <lwip_netconn_do_close_internal+0x3e>
 801753c:	4b80      	ldr	r3, [pc, #512]	@ (8017740 <lwip_netconn_do_close_internal+0x234>)
 801753e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8017542:	4982      	ldr	r1, [pc, #520]	@ (801774c <lwip_netconn_do_close_internal+0x240>)
 8017544:	4880      	ldr	r0, [pc, #512]	@ (8017748 <lwip_netconn_do_close_internal+0x23c>)
 8017546:	f010 f911 	bl	802776c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	785b      	ldrb	r3, [r3, #1]
 801754e:	2b04      	cmp	r3, #4
 8017550:	d006      	beq.n	8017560 <lwip_netconn_do_close_internal+0x54>
 8017552:	4b7b      	ldr	r3, [pc, #492]	@ (8017740 <lwip_netconn_do_close_internal+0x234>)
 8017554:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8017558:	497d      	ldr	r1, [pc, #500]	@ (8017750 <lwip_netconn_do_close_internal+0x244>)
 801755a:	487b      	ldr	r0, [pc, #492]	@ (8017748 <lwip_netconn_do_close_internal+0x23c>)
 801755c:	f010 f906 	bl	802776c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	685b      	ldr	r3, [r3, #4]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d106      	bne.n	8017576 <lwip_netconn_do_close_internal+0x6a>
 8017568:	4b75      	ldr	r3, [pc, #468]	@ (8017740 <lwip_netconn_do_close_internal+0x234>)
 801756a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 801756e:	4979      	ldr	r1, [pc, #484]	@ (8017754 <lwip_netconn_do_close_internal+0x248>)
 8017570:	4875      	ldr	r0, [pc, #468]	@ (8017748 <lwip_netconn_do_close_internal+0x23c>)
 8017572:	f010 f8fb 	bl	802776c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	6a1b      	ldr	r3, [r3, #32]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d106      	bne.n	801758c <lwip_netconn_do_close_internal+0x80>
 801757e:	4b70      	ldr	r3, [pc, #448]	@ (8017740 <lwip_netconn_do_close_internal+0x234>)
 8017580:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8017584:	4974      	ldr	r1, [pc, #464]	@ (8017758 <lwip_netconn_do_close_internal+0x24c>)
 8017586:	4870      	ldr	r0, [pc, #448]	@ (8017748 <lwip_netconn_do_close_internal+0x23c>)
 8017588:	f010 f8f0 	bl	802776c <iprintf>

  tpcb = conn->pcb.tcp;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	685b      	ldr	r3, [r3, #4]
 8017590:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	6a1b      	ldr	r3, [r3, #32]
 8017596:	7a1b      	ldrb	r3, [r3, #8]
 8017598:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801759a:	7bfb      	ldrb	r3, [r7, #15]
 801759c:	f003 0301 	and.w	r3, r3, #1
 80175a0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80175a2:	7bfb      	ldrb	r3, [r7, #15]
 80175a4:	f003 0302 	and.w	r3, r3, #2
 80175a8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80175aa:	7bfb      	ldrb	r3, [r7, #15]
 80175ac:	2b03      	cmp	r3, #3
 80175ae:	d102      	bne.n	80175b6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80175b0:	2301      	movs	r3, #1
 80175b2:	75bb      	strb	r3, [r7, #22]
 80175b4:	e01f      	b.n	80175f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80175b6:	7bbb      	ldrb	r3, [r7, #14]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d00e      	beq.n	80175da <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80175bc:	693b      	ldr	r3, [r7, #16]
 80175be:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80175c0:	2b05      	cmp	r3, #5
 80175c2:	d007      	beq.n	80175d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80175c4:	693b      	ldr	r3, [r7, #16]
 80175c6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80175c8:	2b06      	cmp	r3, #6
 80175ca:	d003      	beq.n	80175d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80175cc:	693b      	ldr	r3, [r7, #16]
 80175ce:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80175d0:	2b08      	cmp	r3, #8
 80175d2:	d102      	bne.n	80175da <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80175d4:	2301      	movs	r3, #1
 80175d6:	75bb      	strb	r3, [r7, #22]
 80175d8:	e00d      	b.n	80175f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80175da:	7b7b      	ldrb	r3, [r7, #13]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d008      	beq.n	80175f2 <lwip_netconn_do_close_internal+0xe6>
 80175e0:	693b      	ldr	r3, [r7, #16]
 80175e2:	8b5b      	ldrh	r3, [r3, #26]
 80175e4:	f003 0310 	and.w	r3, r3, #16
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d002      	beq.n	80175f2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80175ec:	2301      	movs	r3, #1
 80175ee:	75bb      	strb	r3, [r7, #22]
 80175f0:	e001      	b.n	80175f6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80175f2:	2300      	movs	r3, #0
 80175f4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80175f6:	7dbb      	ldrb	r3, [r7, #22]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d003      	beq.n	8017604 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80175fc:	2100      	movs	r1, #0
 80175fe:	6938      	ldr	r0, [r7, #16]
 8017600:	f005 fd38 	bl	801d074 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8017604:	693b      	ldr	r3, [r7, #16]
 8017606:	7d1b      	ldrb	r3, [r3, #20]
 8017608:	2b01      	cmp	r3, #1
 801760a:	d104      	bne.n	8017616 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801760c:	2100      	movs	r1, #0
 801760e:	6938      	ldr	r0, [r7, #16]
 8017610:	f005 fda8 	bl	801d164 <tcp_accept>
 8017614:	e01d      	b.n	8017652 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8017616:	7bbb      	ldrb	r3, [r7, #14]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d007      	beq.n	801762c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 801761c:	2100      	movs	r1, #0
 801761e:	6938      	ldr	r0, [r7, #16]
 8017620:	f005 fd3a 	bl	801d098 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8017624:	2100      	movs	r1, #0
 8017626:	6938      	ldr	r0, [r7, #16]
 8017628:	f005 fd9c 	bl	801d164 <tcp_accept>
    }
    if (shut_tx) {
 801762c:	7b7b      	ldrb	r3, [r7, #13]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d003      	beq.n	801763a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8017632:	2100      	movs	r1, #0
 8017634:	6938      	ldr	r0, [r7, #16]
 8017636:	f005 fd51 	bl	801d0dc <tcp_sent>
    }
    if (shut_close) {
 801763a:	7dbb      	ldrb	r3, [r7, #22]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d008      	beq.n	8017652 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8017640:	2200      	movs	r2, #0
 8017642:	2100      	movs	r1, #0
 8017644:	6938      	ldr	r0, [r7, #16]
 8017646:	f005 fda5 	bl	801d194 <tcp_poll>
      tcp_err(tpcb, NULL);
 801764a:	2100      	movs	r1, #0
 801764c:	6938      	ldr	r0, [r7, #16]
 801764e:	f005 fd67 	bl	801d120 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8017652:	7dbb      	ldrb	r3, [r7, #22]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d005      	beq.n	8017664 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8017658:	6938      	ldr	r0, [r7, #16]
 801765a:	f004 fb35 	bl	801bcc8 <tcp_close>
 801765e:	4603      	mov	r3, r0
 8017660:	75fb      	strb	r3, [r7, #23]
 8017662:	e007      	b.n	8017674 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8017664:	7bbb      	ldrb	r3, [r7, #14]
 8017666:	7b7a      	ldrb	r2, [r7, #13]
 8017668:	4619      	mov	r1, r3
 801766a:	6938      	ldr	r0, [r7, #16]
 801766c:	f004 fb58 	bl	801bd20 <tcp_shutdown>
 8017670:	4603      	mov	r3, r0
 8017672:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8017674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d102      	bne.n	8017682 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 801767c:	2301      	movs	r3, #1
 801767e:	757b      	strb	r3, [r7, #21]
 8017680:	e016      	b.n	80176b0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8017682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801768a:	d10f      	bne.n	80176ac <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	6a1b      	ldr	r3, [r3, #32]
 8017690:	7a5b      	ldrb	r3, [r3, #9]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d10c      	bne.n	80176b0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8017696:	2301      	movs	r3, #1
 8017698:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801769a:	7dbb      	ldrb	r3, [r7, #22]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d007      	beq.n	80176b0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80176a0:	6938      	ldr	r0, [r7, #16]
 80176a2:	f004 fc57 	bl	801bf54 <tcp_abort>
          err = ERR_OK;
 80176a6:	2300      	movs	r3, #0
 80176a8:	75fb      	strb	r3, [r7, #23]
 80176aa:	e001      	b.n	80176b0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80176ac:	2301      	movs	r3, #1
 80176ae:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80176b0:	7d7b      	ldrb	r3, [r7, #21]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d052      	beq.n	801775c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	6a1b      	ldr	r3, [r3, #32]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	330c      	adds	r3, #12
 80176be:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	6a1b      	ldr	r3, [r3, #32]
 80176c4:	7dfa      	ldrb	r2, [r7, #23]
 80176c6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	2200      	movs	r2, #0
 80176cc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	2200      	movs	r2, #0
 80176d2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80176d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d129      	bne.n	8017730 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80176dc:	7dbb      	ldrb	r3, [r7, #22]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d00c      	beq.n	80176fc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	2200      	movs	r2, #0
 80176e6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d005      	beq.n	80176fc <lwip_netconn_do_close_internal+0x1f0>
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176f4:	2200      	movs	r2, #0
 80176f6:	2104      	movs	r1, #4
 80176f8:	6878      	ldr	r0, [r7, #4]
 80176fa:	4798      	blx	r3
      }
      if (shut_rx) {
 80176fc:	7bbb      	ldrb	r3, [r7, #14]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d009      	beq.n	8017716 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017706:	2b00      	cmp	r3, #0
 8017708:	d005      	beq.n	8017716 <lwip_netconn_do_close_internal+0x20a>
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801770e:	2200      	movs	r2, #0
 8017710:	2100      	movs	r1, #0
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	4798      	blx	r3
      }
      if (shut_tx) {
 8017716:	7b7b      	ldrb	r3, [r7, #13]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d009      	beq.n	8017730 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017720:	2b00      	cmp	r3, #0
 8017722:	d005      	beq.n	8017730 <lwip_netconn_do_close_internal+0x224>
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017728:	2200      	movs	r2, #0
 801772a:	2102      	movs	r1, #2
 801772c:	6878      	ldr	r0, [r7, #4]
 801772e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8017730:	78fb      	ldrb	r3, [r7, #3]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d002      	beq.n	801773c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8017736:	68b8      	ldr	r0, [r7, #8]
 8017738:	f00f faa0 	bl	8026c7c <sys_sem_signal>
    }
    return ERR_OK;
 801773c:	2300      	movs	r3, #0
 801773e:	e03c      	b.n	80177ba <lwip_netconn_do_close_internal+0x2ae>
 8017740:	08028b00 	.word	0x08028b00
 8017744:	08028dd4 	.word	0x08028dd4
 8017748:	08028b44 	.word	0x08028b44
 801774c:	08028de4 	.word	0x08028de4
 8017750:	08028e04 	.word	0x08028e04
 8017754:	08028e28 	.word	0x08028e28
 8017758:	08028c68 	.word	0x08028c68
  }
  if (!close_finished) {
 801775c:	7d7b      	ldrb	r3, [r7, #21]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d11e      	bne.n	80177a0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8017762:	693b      	ldr	r3, [r7, #16]
 8017764:	7d1b      	ldrb	r3, [r3, #20]
 8017766:	2b01      	cmp	r3, #1
 8017768:	d106      	bne.n	8017778 <lwip_netconn_do_close_internal+0x26c>
 801776a:	4b16      	ldr	r3, [pc, #88]	@ (80177c4 <lwip_netconn_do_close_internal+0x2b8>)
 801776c:	f240 4241 	movw	r2, #1089	@ 0x441
 8017770:	4915      	ldr	r1, [pc, #84]	@ (80177c8 <lwip_netconn_do_close_internal+0x2bc>)
 8017772:	4816      	ldr	r0, [pc, #88]	@ (80177cc <lwip_netconn_do_close_internal+0x2c0>)
 8017774:	f00f fffa 	bl	802776c <iprintf>
    if (shut_tx) {
 8017778:	7b7b      	ldrb	r3, [r7, #13]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d003      	beq.n	8017786 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801777e:	4914      	ldr	r1, [pc, #80]	@ (80177d0 <lwip_netconn_do_close_internal+0x2c4>)
 8017780:	6938      	ldr	r0, [r7, #16]
 8017782:	f005 fcab 	bl	801d0dc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8017786:	2201      	movs	r2, #1
 8017788:	4912      	ldr	r1, [pc, #72]	@ (80177d4 <lwip_netconn_do_close_internal+0x2c8>)
 801778a:	6938      	ldr	r0, [r7, #16]
 801778c:	f005 fd02 	bl	801d194 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8017790:	4911      	ldr	r1, [pc, #68]	@ (80177d8 <lwip_netconn_do_close_internal+0x2cc>)
 8017792:	6938      	ldr	r0, [r7, #16]
 8017794:	f005 fcc4 	bl	801d120 <tcp_err>
    tcp_arg(tpcb, conn);
 8017798:	6879      	ldr	r1, [r7, #4]
 801779a:	6938      	ldr	r0, [r7, #16]
 801779c:	f005 fc6a 	bl	801d074 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80177a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d106      	bne.n	80177b6 <lwip_netconn_do_close_internal+0x2aa>
 80177a8:	4b06      	ldr	r3, [pc, #24]	@ (80177c4 <lwip_netconn_do_close_internal+0x2b8>)
 80177aa:	f240 424d 	movw	r2, #1101	@ 0x44d
 80177ae:	490b      	ldr	r1, [pc, #44]	@ (80177dc <lwip_netconn_do_close_internal+0x2d0>)
 80177b0:	4806      	ldr	r0, [pc, #24]	@ (80177cc <lwip_netconn_do_close_internal+0x2c0>)
 80177b2:	f00f ffdb 	bl	802776c <iprintf>
  return err;
 80177b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	3718      	adds	r7, #24
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}
 80177c2:	bf00      	nop
 80177c4:	08028b00 	.word	0x08028b00
 80177c8:	08028e3c 	.word	0x08028e3c
 80177cc:	08028b44 	.word	0x08028b44
 80177d0:	08016d85 	.word	0x08016d85
 80177d4:	08016cbd 	.word	0x08016cbd
 80177d8:	08016e2d 	.word	0x08016e2d
 80177dc:	08028e60 	.word	0x08028e60

080177e0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b084      	sub	sp, #16
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	785b      	ldrb	r3, [r3, #1]
 80177f2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80177f4:	7afb      	ldrb	r3, [r7, #11]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d00d      	beq.n	8017816 <lwip_netconn_do_delconn+0x36>
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	781b      	ldrb	r3, [r3, #0]
 8017800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017804:	2b10      	cmp	r3, #16
 8017806:	d006      	beq.n	8017816 <lwip_netconn_do_delconn+0x36>
 8017808:	4b60      	ldr	r3, [pc, #384]	@ (801798c <lwip_netconn_do_delconn+0x1ac>)
 801780a:	f240 425e 	movw	r2, #1118	@ 0x45e
 801780e:	4960      	ldr	r1, [pc, #384]	@ (8017990 <lwip_netconn_do_delconn+0x1b0>)
 8017810:	4860      	ldr	r0, [pc, #384]	@ (8017994 <lwip_netconn_do_delconn+0x1b4>)
 8017812:	f00f ffab 	bl	802776c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8017816:	7afb      	ldrb	r3, [r7, #11]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d005      	beq.n	8017828 <lwip_netconn_do_delconn+0x48>
 801781c:	7afb      	ldrb	r3, [r7, #11]
 801781e:	2b02      	cmp	r3, #2
 8017820:	d002      	beq.n	8017828 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8017822:	7afb      	ldrb	r3, [r7, #11]
 8017824:	2b03      	cmp	r3, #3
 8017826:	d109      	bne.n	801783c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8017828:	7afb      	ldrb	r3, [r7, #11]
 801782a:	2b03      	cmp	r3, #3
 801782c:	d10a      	bne.n	8017844 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	7f1b      	ldrb	r3, [r3, #28]
 8017834:	f003 0304 	and.w	r3, r3, #4
 8017838:	2b00      	cmp	r3, #0
 801783a:	d103      	bne.n	8017844 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	22fb      	movs	r2, #251	@ 0xfb
 8017840:	711a      	strb	r2, [r3, #4]
 8017842:	e097      	b.n	8017974 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8017844:	7afb      	ldrb	r3, [r7, #11]
 8017846:	2b03      	cmp	r3, #3
 8017848:	d10d      	bne.n	8017866 <lwip_netconn_do_delconn+0x86>
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	7f1b      	ldrb	r3, [r3, #28]
 8017850:	f003 0304 	and.w	r3, r3, #4
 8017854:	2b00      	cmp	r3, #0
 8017856:	d106      	bne.n	8017866 <lwip_netconn_do_delconn+0x86>
 8017858:	4b4c      	ldr	r3, [pc, #304]	@ (801798c <lwip_netconn_do_delconn+0x1ac>)
 801785a:	f240 427a 	movw	r2, #1146	@ 0x47a
 801785e:	494e      	ldr	r1, [pc, #312]	@ (8017998 <lwip_netconn_do_delconn+0x1b8>)
 8017860:	484c      	ldr	r0, [pc, #304]	@ (8017994 <lwip_netconn_do_delconn+0x1b4>)
 8017862:	f00f ff83 	bl	802776c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	2200      	movs	r2, #0
 801786a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	4618      	mov	r0, r3
 8017872:	f7ff fdcd 	bl	8017410 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	685b      	ldr	r3, [r3, #4]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d05f      	beq.n	8017940 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801788a:	2b10      	cmp	r3, #16
 801788c:	d00d      	beq.n	80178aa <lwip_netconn_do_delconn+0xca>
 801788e:	2b20      	cmp	r3, #32
 8017890:	d151      	bne.n	8017936 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	2200      	movs	r2, #0
 801789a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	685b      	ldr	r3, [r3, #4]
 80178a2:	4618      	mov	r0, r3
 80178a4:	f00a febe 	bl	8022624 <udp_remove>
          break;
 80178a8:	e046      	b.n	8017938 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	6a1b      	ldr	r3, [r3, #32]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d006      	beq.n	80178c2 <lwip_netconn_do_delconn+0xe2>
 80178b4:	4b35      	ldr	r3, [pc, #212]	@ (801798c <lwip_netconn_do_delconn+0x1ac>)
 80178b6:	f240 4294 	movw	r2, #1172	@ 0x494
 80178ba:	4938      	ldr	r1, [pc, #224]	@ (801799c <lwip_netconn_do_delconn+0x1bc>)
 80178bc:	4835      	ldr	r0, [pc, #212]	@ (8017994 <lwip_netconn_do_delconn+0x1b4>)
 80178be:	f00f ff55 	bl	802776c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	2204      	movs	r2, #4
 80178c8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	2203      	movs	r2, #3
 80178ce:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	68fa      	ldr	r2, [r7, #12]
 80178d6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	2100      	movs	r1, #0
 80178de:	4618      	mov	r0, r3
 80178e0:	f7ff fe14 	bl	801750c <lwip_netconn_do_close_internal>
 80178e4:	4603      	mov	r3, r0
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d04b      	beq.n	8017982 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	785b      	ldrb	r3, [r3, #1]
 80178f0:	2b04      	cmp	r3, #4
 80178f2:	d006      	beq.n	8017902 <lwip_netconn_do_delconn+0x122>
 80178f4:	4b25      	ldr	r3, [pc, #148]	@ (801798c <lwip_netconn_do_delconn+0x1ac>)
 80178f6:	f240 429a 	movw	r2, #1178	@ 0x49a
 80178fa:	4929      	ldr	r1, [pc, #164]	@ (80179a0 <lwip_netconn_do_delconn+0x1c0>)
 80178fc:	4825      	ldr	r0, [pc, #148]	@ (8017994 <lwip_netconn_do_delconn+0x1b4>)
 80178fe:	f00f ff35 	bl	802776c <iprintf>
            UNLOCK_TCPIP_CORE();
 8017902:	4828      	ldr	r0, [pc, #160]	@ (80179a4 <lwip_netconn_do_delconn+0x1c4>)
 8017904:	f00f fa2b 	bl	8026d5e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	330c      	adds	r3, #12
 801790e:	2100      	movs	r1, #0
 8017910:	4618      	mov	r0, r3
 8017912:	f00f f982 	bl	8026c1a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8017916:	4823      	ldr	r0, [pc, #140]	@ (80179a4 <lwip_netconn_do_delconn+0x1c4>)
 8017918:	f00f fa12 	bl	8026d40 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	785b      	ldrb	r3, [r3, #1]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d02d      	beq.n	8017982 <lwip_netconn_do_delconn+0x1a2>
 8017926:	4b19      	ldr	r3, [pc, #100]	@ (801798c <lwip_netconn_do_delconn+0x1ac>)
 8017928:	f240 429e 	movw	r2, #1182	@ 0x49e
 801792c:	491c      	ldr	r1, [pc, #112]	@ (80179a0 <lwip_netconn_do_delconn+0x1c0>)
 801792e:	4819      	ldr	r0, [pc, #100]	@ (8017994 <lwip_netconn_do_delconn+0x1b4>)
 8017930:	f00f ff1c 	bl	802776c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8017934:	e025      	b.n	8017982 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8017936:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	2200      	movs	r2, #0
 801793e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017946:	2b00      	cmp	r3, #0
 8017948:	d007      	beq.n	801795a <lwip_netconn_do_delconn+0x17a>
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017950:	68fa      	ldr	r2, [r7, #12]
 8017952:	6810      	ldr	r0, [r2, #0]
 8017954:	2200      	movs	r2, #0
 8017956:	2100      	movs	r1, #0
 8017958:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017960:	2b00      	cmp	r3, #0
 8017962:	d007      	beq.n	8017974 <lwip_netconn_do_delconn+0x194>
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801796a:	68fa      	ldr	r2, [r7, #12]
 801796c:	6810      	ldr	r0, [r2, #0]
 801796e:	2200      	movs	r2, #0
 8017970:	2102      	movs	r1, #2
 8017972:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	330c      	adds	r3, #12
 801797a:	4618      	mov	r0, r3
 801797c:	f00f f998 	bl	8026cb0 <sys_sem_valid>
 8017980:	e000      	b.n	8017984 <lwip_netconn_do_delconn+0x1a4>
          return;
 8017982:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8017984:	3710      	adds	r7, #16
 8017986:	46bd      	mov	sp, r7
 8017988:	bd80      	pop	{r7, pc}
 801798a:	bf00      	nop
 801798c:	08028b00 	.word	0x08028b00
 8017990:	08028e70 	.word	0x08028e70
 8017994:	08028b44 	.word	0x08028b44
 8017998:	08028e84 	.word	0x08028e84
 801799c:	08028ea4 	.word	0x08028ea4
 80179a0:	08028ec0 	.word	0x08028ec0
 80179a4:	2000d9e8 	.word	0x2000d9e8

080179a8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	685b      	ldr	r3, [r3, #4]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d025      	beq.n	8017a0a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80179be:	68bb      	ldr	r3, [r7, #8]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80179c8:	2b10      	cmp	r3, #16
 80179ca:	d00e      	beq.n	80179ea <lwip_netconn_do_bind+0x42>
 80179cc:	2b20      	cmp	r3, #32
 80179ce:	d119      	bne.n	8017a04 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80179d0:	68bb      	ldr	r3, [r7, #8]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	6858      	ldr	r0, [r3, #4]
 80179d6:	68bb      	ldr	r3, [r7, #8]
 80179d8:	6899      	ldr	r1, [r3, #8]
 80179da:	68bb      	ldr	r3, [r7, #8]
 80179dc:	899b      	ldrh	r3, [r3, #12]
 80179de:	461a      	mov	r2, r3
 80179e0:	f00a fd0a 	bl	80223f8 <udp_bind>
 80179e4:	4603      	mov	r3, r0
 80179e6:	73fb      	strb	r3, [r7, #15]
        break;
 80179e8:	e011      	b.n	8017a0e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	6858      	ldr	r0, [r3, #4]
 80179f0:	68bb      	ldr	r3, [r7, #8]
 80179f2:	6899      	ldr	r1, [r3, #8]
 80179f4:	68bb      	ldr	r3, [r7, #8]
 80179f6:	899b      	ldrh	r3, [r3, #12]
 80179f8:	461a      	mov	r2, r3
 80179fa:	f004 fab7 	bl	801bf6c <tcp_bind>
 80179fe:	4603      	mov	r3, r0
 8017a00:	73fb      	strb	r3, [r7, #15]
        break;
 8017a02:	e004      	b.n	8017a0e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8017a04:	23fa      	movs	r3, #250	@ 0xfa
 8017a06:	73fb      	strb	r3, [r7, #15]
        break;
 8017a08:	e001      	b.n	8017a0e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8017a0a:	23fa      	movs	r3, #250	@ 0xfa
 8017a0c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8017a0e:	68bb      	ldr	r3, [r7, #8]
 8017a10:	7bfa      	ldrb	r2, [r7, #15]
 8017a12:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8017a14:	bf00      	nop
 8017a16:	3710      	adds	r7, #16
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}

08017a1c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b086      	sub	sp, #24
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8017a28:	697b      	ldr	r3, [r7, #20]
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d07f      	beq.n	8017b32 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8017a32:	697b      	ldr	r3, [r7, #20]
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017a3c:	2b10      	cmp	r3, #16
 8017a3e:	d175      	bne.n	8017b2c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8017a40:	697b      	ldr	r3, [r7, #20]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	785b      	ldrb	r3, [r3, #1]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d165      	bne.n	8017b16 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8017a4a:	697b      	ldr	r3, [r7, #20]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	685b      	ldr	r3, [r3, #4]
 8017a50:	7d1b      	ldrb	r3, [r3, #20]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d002      	beq.n	8017a5c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8017a56:	23fa      	movs	r3, #250	@ 0xfa
 8017a58:	72fb      	strb	r3, [r7, #11]
 8017a5a:	e06c      	b.n	8017b36 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8017a5c:	23ff      	movs	r3, #255	@ 0xff
 8017a5e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8017a60:	697b      	ldr	r3, [r7, #20]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	685b      	ldr	r3, [r3, #4]
 8017a66:	f107 020b 	add.w	r2, r7, #11
 8017a6a:	7cf9      	ldrb	r1, [r7, #19]
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f004 fb35 	bl	801c0dc <tcp_listen_with_backlog_and_err>
 8017a72:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d05d      	beq.n	8017b36 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8017a7a:	697b      	ldr	r3, [r7, #20]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	3310      	adds	r3, #16
 8017a80:	4618      	mov	r0, r3
 8017a82:	f00f f884 	bl	8026b8e <sys_mbox_valid>
 8017a86:	4603      	mov	r3, r0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d00b      	beq.n	8017aa4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8017a8c:	697b      	ldr	r3, [r7, #20]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	3310      	adds	r3, #16
 8017a92:	4618      	mov	r0, r3
 8017a94:	f00e fff4 	bl	8026a80 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	3310      	adds	r3, #16
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f00f f886 	bl	8026bb0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	3314      	adds	r3, #20
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f00f f86d 	bl	8026b8e <sys_mbox_valid>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d108      	bne.n	8017acc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8017aba:	697b      	ldr	r3, [r7, #20]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	3314      	adds	r3, #20
 8017ac0:	2106      	movs	r1, #6
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f00e ffba 	bl	8026a3c <sys_mbox_new>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8017acc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d118      	bne.n	8017b06 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	2202      	movs	r2, #2
 8017ada:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8017adc:	697b      	ldr	r3, [r7, #20]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	68fa      	ldr	r2, [r7, #12]
 8017ae2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8017ae4:	697b      	ldr	r3, [r7, #20]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	685a      	ldr	r2, [r3, #4]
 8017aea:	697b      	ldr	r3, [r7, #20]
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	4619      	mov	r1, r3
 8017af0:	4610      	mov	r0, r2
 8017af2:	f005 fabf 	bl	801d074 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8017af6:	697b      	ldr	r3, [r7, #20]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	4912      	ldr	r1, [pc, #72]	@ (8017b48 <lwip_netconn_do_listen+0x12c>)
 8017afe:	4618      	mov	r0, r3
 8017b00:	f005 fb30 	bl	801d164 <tcp_accept>
 8017b04:	e017      	b.n	8017b36 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8017b06:	68f8      	ldr	r0, [r7, #12]
 8017b08:	f004 f8de 	bl	801bcc8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8017b0c:	697b      	ldr	r3, [r7, #20]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	2200      	movs	r2, #0
 8017b12:	605a      	str	r2, [r3, #4]
 8017b14:	e00f      	b.n	8017b36 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8017b16:	697b      	ldr	r3, [r7, #20]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	785b      	ldrb	r3, [r3, #1]
 8017b1c:	2b02      	cmp	r3, #2
 8017b1e:	d102      	bne.n	8017b26 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8017b20:	2300      	movs	r3, #0
 8017b22:	72fb      	strb	r3, [r7, #11]
 8017b24:	e007      	b.n	8017b36 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8017b26:	23f5      	movs	r3, #245	@ 0xf5
 8017b28:	72fb      	strb	r3, [r7, #11]
 8017b2a:	e004      	b.n	8017b36 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8017b2c:	23f0      	movs	r3, #240	@ 0xf0
 8017b2e:	72fb      	strb	r3, [r7, #11]
 8017b30:	e001      	b.n	8017b36 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8017b32:	23f5      	movs	r3, #245	@ 0xf5
 8017b34:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8017b36:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8017b3e:	bf00      	nop
 8017b40:	3718      	adds	r7, #24
 8017b42:	46bd      	mov	sp, r7
 8017b44:	bd80      	pop	{r7, pc}
 8017b46:	bf00      	nop
 8017b48:	08017029 	.word	0x08017029

08017b4c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b084      	sub	sp, #16
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f7fe ff1d 	bl	801699c <netconn_err>
 8017b62:	4603      	mov	r3, r0
 8017b64:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8017b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d134      	bne.n	8017bd8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	685b      	ldr	r3, [r3, #4]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d02d      	beq.n	8017bd4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	781b      	ldrb	r3, [r3, #0]
 8017b7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017b82:	2b20      	cmp	r3, #32
 8017b84:	d123      	bne.n	8017bce <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	689b      	ldr	r3, [r3, #8]
 8017b8a:	689b      	ldr	r3, [r3, #8]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d10c      	bne.n	8017baa <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8017b90:	68bb      	ldr	r3, [r7, #8]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	685a      	ldr	r2, [r3, #4]
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	689b      	ldr	r3, [r3, #8]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	4619      	mov	r1, r3
 8017b9e:	4610      	mov	r0, r2
 8017ba0:	f00a fa40 	bl	8022024 <udp_send>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8017ba8:	e016      	b.n	8017bd8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	6858      	ldr	r0, [r3, #4]
 8017bb0:	68bb      	ldr	r3, [r7, #8]
 8017bb2:	689b      	ldr	r3, [r3, #8]
 8017bb4:	6819      	ldr	r1, [r3, #0]
 8017bb6:	68bb      	ldr	r3, [r7, #8]
 8017bb8:	689b      	ldr	r3, [r3, #8]
 8017bba:	f103 0208 	add.w	r2, r3, #8
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	689b      	ldr	r3, [r3, #8]
 8017bc2:	899b      	ldrh	r3, [r3, #12]
 8017bc4:	f00a fa62 	bl	802208c <udp_sendto>
 8017bc8:	4603      	mov	r3, r0
 8017bca:	73fb      	strb	r3, [r7, #15]
          break;
 8017bcc:	e004      	b.n	8017bd8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8017bce:	23f5      	movs	r3, #245	@ 0xf5
 8017bd0:	73fb      	strb	r3, [r7, #15]
          break;
 8017bd2:	e001      	b.n	8017bd8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8017bd4:	23f5      	movs	r3, #245	@ 0xf5
 8017bd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	7bfa      	ldrb	r2, [r7, #15]
 8017bdc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8017bde:	bf00      	nop
 8017be0:	3710      	adds	r7, #16
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd80      	pop	{r7, pc}

08017be6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8017be6:	b580      	push	{r7, lr}
 8017be8:	b086      	sub	sp, #24
 8017bea:	af00      	add	r7, sp, #0
 8017bec:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	685b      	ldr	r3, [r3, #4]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d022      	beq.n	8017c48 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8017c02:	693b      	ldr	r3, [r7, #16]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	781b      	ldrb	r3, [r3, #0]
 8017c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017c0c:	2b10      	cmp	r3, #16
 8017c0e:	d11b      	bne.n	8017c48 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8017c10:	693b      	ldr	r3, [r7, #16]
 8017c12:	689b      	ldr	r3, [r3, #8]
 8017c14:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017c1c:	d202      	bcs.n	8017c24 <lwip_netconn_do_recv+0x3e>
 8017c1e:	697b      	ldr	r3, [r7, #20]
 8017c20:	b29b      	uxth	r3, r3
 8017c22:	e001      	b.n	8017c28 <lwip_netconn_do_recv+0x42>
 8017c24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017c28:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8017c2a:	693b      	ldr	r3, [r7, #16]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	89fa      	ldrh	r2, [r7, #14]
 8017c32:	4611      	mov	r1, r2
 8017c34:	4618      	mov	r0, r3
 8017c36:	f004 fb55 	bl	801c2e4 <tcp_recved>
        remaining -= recved;
 8017c3a:	89fb      	ldrh	r3, [r7, #14]
 8017c3c:	697a      	ldr	r2, [r7, #20]
 8017c3e:	1ad3      	subs	r3, r2, r3
 8017c40:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8017c42:	697b      	ldr	r3, [r7, #20]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d1e6      	bne.n	8017c16 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8017c48:	bf00      	nop
 8017c4a:	3718      	adds	r7, #24
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}

08017c50 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b088      	sub	sp, #32
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	460b      	mov	r3, r1
 8017c5a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d106      	bne.n	8017c74 <lwip_netconn_do_writemore+0x24>
 8017c66:	4b96      	ldr	r3, [pc, #600]	@ (8017ec0 <lwip_netconn_do_writemore+0x270>)
 8017c68:	f240 6273 	movw	r2, #1651	@ 0x673
 8017c6c:	4995      	ldr	r1, [pc, #596]	@ (8017ec4 <lwip_netconn_do_writemore+0x274>)
 8017c6e:	4896      	ldr	r0, [pc, #600]	@ (8017ec8 <lwip_netconn_do_writemore+0x278>)
 8017c70:	f00f fd7c 	bl	802776c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	785b      	ldrb	r3, [r3, #1]
 8017c78:	2b01      	cmp	r3, #1
 8017c7a:	d006      	beq.n	8017c8a <lwip_netconn_do_writemore+0x3a>
 8017c7c:	4b90      	ldr	r3, [pc, #576]	@ (8017ec0 <lwip_netconn_do_writemore+0x270>)
 8017c7e:	f240 6274 	movw	r2, #1652	@ 0x674
 8017c82:	4992      	ldr	r1, [pc, #584]	@ (8017ecc <lwip_netconn_do_writemore+0x27c>)
 8017c84:	4890      	ldr	r0, [pc, #576]	@ (8017ec8 <lwip_netconn_do_writemore+0x278>)
 8017c86:	f00f fd71 	bl	802776c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	6a1b      	ldr	r3, [r3, #32]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d106      	bne.n	8017ca0 <lwip_netconn_do_writemore+0x50>
 8017c92:	4b8b      	ldr	r3, [pc, #556]	@ (8017ec0 <lwip_netconn_do_writemore+0x270>)
 8017c94:	f240 6275 	movw	r2, #1653	@ 0x675
 8017c98:	498d      	ldr	r1, [pc, #564]	@ (8017ed0 <lwip_netconn_do_writemore+0x280>)
 8017c9a:	488b      	ldr	r0, [pc, #556]	@ (8017ec8 <lwip_netconn_do_writemore+0x278>)
 8017c9c:	f00f fd66 	bl	802776c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	685b      	ldr	r3, [r3, #4]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d106      	bne.n	8017cb6 <lwip_netconn_do_writemore+0x66>
 8017ca8:	4b85      	ldr	r3, [pc, #532]	@ (8017ec0 <lwip_netconn_do_writemore+0x270>)
 8017caa:	f240 6276 	movw	r2, #1654	@ 0x676
 8017cae:	4989      	ldr	r1, [pc, #548]	@ (8017ed4 <lwip_netconn_do_writemore+0x284>)
 8017cb0:	4885      	ldr	r0, [pc, #532]	@ (8017ec8 <lwip_netconn_do_writemore+0x278>)
 8017cb2:	f00f fd5b 	bl	802776c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	6a1b      	ldr	r3, [r3, #32]
 8017cba:	699a      	ldr	r2, [r3, #24]
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6a1b      	ldr	r3, [r3, #32]
 8017cc0:	695b      	ldr	r3, [r3, #20]
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	d306      	bcc.n	8017cd4 <lwip_netconn_do_writemore+0x84>
 8017cc6:	4b7e      	ldr	r3, [pc, #504]	@ (8017ec0 <lwip_netconn_do_writemore+0x270>)
 8017cc8:	f240 6277 	movw	r2, #1655	@ 0x677
 8017ccc:	4982      	ldr	r1, [pc, #520]	@ (8017ed8 <lwip_netconn_do_writemore+0x288>)
 8017cce:	487e      	ldr	r0, [pc, #504]	@ (8017ec8 <lwip_netconn_do_writemore+0x278>)
 8017cd0:	f00f fd4c 	bl	802776c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	6a1b      	ldr	r3, [r3, #32]
 8017cd8:	899b      	ldrh	r3, [r3, #12]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d106      	bne.n	8017cec <lwip_netconn_do_writemore+0x9c>
 8017cde:	4b78      	ldr	r3, [pc, #480]	@ (8017ec0 <lwip_netconn_do_writemore+0x270>)
 8017ce0:	f240 6279 	movw	r2, #1657	@ 0x679
 8017ce4:	497d      	ldr	r1, [pc, #500]	@ (8017edc <lwip_netconn_do_writemore+0x28c>)
 8017ce6:	4878      	ldr	r0, [pc, #480]	@ (8017ec8 <lwip_netconn_do_writemore+0x278>)
 8017ce8:	f00f fd40 	bl	802776c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	6a1b      	ldr	r3, [r3, #32]
 8017cf0:	7f1b      	ldrb	r3, [r3, #28]
 8017cf2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	7f1b      	ldrb	r3, [r3, #28]
 8017cf8:	f003 0302 	and.w	r3, r3, #2
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d104      	bne.n	8017d0a <lwip_netconn_do_writemore+0xba>
 8017d00:	7ebb      	ldrb	r3, [r7, #26]
 8017d02:	f003 0304 	and.w	r3, r3, #4
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d001      	beq.n	8017d0e <lwip_netconn_do_writemore+0xbe>
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	e000      	b.n	8017d10 <lwip_netconn_do_writemore+0xc0>
 8017d0e:	2300      	movs	r3, #0
 8017d10:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	6a1b      	ldr	r3, [r3, #32]
 8017d16:	689b      	ldr	r3, [r3, #8]
 8017d18:	681a      	ldr	r2, [r3, #0]
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	6a1b      	ldr	r3, [r3, #32]
 8017d1e:	691b      	ldr	r3, [r3, #16]
 8017d20:	4413      	add	r3, r2
 8017d22:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	6a1b      	ldr	r3, [r3, #32]
 8017d28:	689b      	ldr	r3, [r3, #8]
 8017d2a:	685a      	ldr	r2, [r3, #4]
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	6a1b      	ldr	r3, [r3, #32]
 8017d30:	691b      	ldr	r3, [r3, #16]
 8017d32:	1ad3      	subs	r3, r2, r3
 8017d34:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8017d36:	693b      	ldr	r3, [r7, #16]
 8017d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017d3c:	d307      	bcc.n	8017d4e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8017d3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d42:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8017d44:	7ebb      	ldrb	r3, [r7, #26]
 8017d46:	f043 0302 	orr.w	r3, r3, #2
 8017d4a:	76bb      	strb	r3, [r7, #26]
 8017d4c:	e001      	b.n	8017d52 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	685b      	ldr	r3, [r3, #4]
 8017d56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017d5a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8017d5c:	89fa      	ldrh	r2, [r7, #14]
 8017d5e:	8bbb      	ldrh	r3, [r7, #28]
 8017d60:	429a      	cmp	r2, r3
 8017d62:	d216      	bcs.n	8017d92 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8017d64:	89fb      	ldrh	r3, [r7, #14]
 8017d66:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8017d68:	7e3b      	ldrb	r3, [r7, #24]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d00d      	beq.n	8017d8a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8017d6e:	8bbb      	ldrh	r3, [r7, #28]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d10e      	bne.n	8017d92 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	6a1b      	ldr	r3, [r3, #32]
 8017d78:	699b      	ldr	r3, [r3, #24]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d102      	bne.n	8017d84 <lwip_netconn_do_writemore+0x134>
 8017d7e:	f06f 0306 	mvn.w	r3, #6
 8017d82:	e000      	b.n	8017d86 <lwip_netconn_do_writemore+0x136>
 8017d84:	2300      	movs	r3, #0
 8017d86:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8017d88:	e07d      	b.n	8017e86 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8017d8a:	7ebb      	ldrb	r3, [r7, #26]
 8017d8c:	f043 0302 	orr.w	r3, r3, #2
 8017d90:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	6a1b      	ldr	r3, [r3, #32]
 8017d96:	691a      	ldr	r2, [r3, #16]
 8017d98:	8bbb      	ldrh	r3, [r7, #28]
 8017d9a:	441a      	add	r2, r3
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	6a1b      	ldr	r3, [r3, #32]
 8017da0:	689b      	ldr	r3, [r3, #8]
 8017da2:	685b      	ldr	r3, [r3, #4]
 8017da4:	429a      	cmp	r2, r3
 8017da6:	d906      	bls.n	8017db6 <lwip_netconn_do_writemore+0x166>
 8017da8:	4b45      	ldr	r3, [pc, #276]	@ (8017ec0 <lwip_netconn_do_writemore+0x270>)
 8017daa:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8017dae:	494c      	ldr	r1, [pc, #304]	@ (8017ee0 <lwip_netconn_do_writemore+0x290>)
 8017db0:	4845      	ldr	r0, [pc, #276]	@ (8017ec8 <lwip_netconn_do_writemore+0x278>)
 8017db2:	f00f fcdb 	bl	802776c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8017db6:	8bbb      	ldrh	r3, [r7, #28]
 8017db8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017dbc:	4293      	cmp	r3, r2
 8017dbe:	d103      	bne.n	8017dc8 <lwip_netconn_do_writemore+0x178>
 8017dc0:	693b      	ldr	r3, [r7, #16]
 8017dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017dc6:	d209      	bcs.n	8017ddc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8017dc8:	693b      	ldr	r3, [r7, #16]
 8017dca:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8017dcc:	8bba      	ldrh	r2, [r7, #28]
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	d10b      	bne.n	8017dea <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	6a1b      	ldr	r3, [r3, #32]
 8017dd6:	899b      	ldrh	r3, [r3, #12]
 8017dd8:	2b01      	cmp	r3, #1
 8017dda:	d906      	bls.n	8017dea <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8017ddc:	2301      	movs	r3, #1
 8017dde:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8017de0:	7ebb      	ldrb	r3, [r7, #26]
 8017de2:	f043 0302 	orr.w	r3, r3, #2
 8017de6:	76bb      	strb	r3, [r7, #26]
 8017de8:	e001      	b.n	8017dee <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8017dea:	2300      	movs	r3, #0
 8017dec:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	6858      	ldr	r0, [r3, #4]
 8017df2:	7ebb      	ldrb	r3, [r7, #26]
 8017df4:	8bba      	ldrh	r2, [r7, #28]
 8017df6:	6979      	ldr	r1, [r7, #20]
 8017df8:	f008 f878 	bl	801feec <tcp_write>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8017e00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d12c      	bne.n	8017e62 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	6a1b      	ldr	r3, [r3, #32]
 8017e0c:	6999      	ldr	r1, [r3, #24]
 8017e0e:	8bba      	ldrh	r2, [r7, #28]
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	6a1b      	ldr	r3, [r3, #32]
 8017e14:	440a      	add	r2, r1
 8017e16:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	6a1b      	ldr	r3, [r3, #32]
 8017e1c:	6919      	ldr	r1, [r3, #16]
 8017e1e:	8bba      	ldrh	r2, [r7, #28]
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	6a1b      	ldr	r3, [r3, #32]
 8017e24:	440a      	add	r2, r1
 8017e26:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	6a1b      	ldr	r3, [r3, #32]
 8017e2c:	691a      	ldr	r2, [r3, #16]
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	6a1b      	ldr	r3, [r3, #32]
 8017e32:	689b      	ldr	r3, [r3, #8]
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d113      	bne.n	8017e62 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	6a1b      	ldr	r3, [r3, #32]
 8017e3e:	899a      	ldrh	r2, [r3, #12]
 8017e40:	3a01      	subs	r2, #1
 8017e42:	b292      	uxth	r2, r2
 8017e44:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	6a1b      	ldr	r3, [r3, #32]
 8017e4a:	899b      	ldrh	r3, [r3, #12]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d008      	beq.n	8017e62 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	6a1b      	ldr	r3, [r3, #32]
 8017e54:	689a      	ldr	r2, [r3, #8]
 8017e56:	3208      	adds	r2, #8
 8017e58:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	6a1b      	ldr	r3, [r3, #32]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8017e62:	7e7b      	ldrb	r3, [r7, #25]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d004      	beq.n	8017e72 <lwip_netconn_do_writemore+0x222>
 8017e68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	f43f af50 	beq.w	8017d12 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8017e72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d004      	beq.n	8017e84 <lwip_netconn_do_writemore+0x234>
 8017e7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e82:	d146      	bne.n	8017f12 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8017e84:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8017e86:	7e3b      	ldrb	r3, [r7, #24]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d02b      	beq.n	8017ee4 <lwip_netconn_do_writemore+0x294>
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	6a1b      	ldr	r3, [r3, #32]
 8017e90:	699a      	ldr	r2, [r3, #24]
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	6a1b      	ldr	r3, [r3, #32]
 8017e96:	695b      	ldr	r3, [r3, #20]
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d223      	bcs.n	8017ee4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d005      	beq.n	8017eb0 <lwip_netconn_do_writemore+0x260>
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ea8:	2200      	movs	r2, #0
 8017eaa:	2103      	movs	r1, #3
 8017eac:	6878      	ldr	r0, [r7, #4]
 8017eae:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	7f1b      	ldrb	r3, [r3, #28]
 8017eb4:	f043 0310 	orr.w	r3, r3, #16
 8017eb8:	b2da      	uxtb	r2, r3
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	771a      	strb	r2, [r3, #28]
 8017ebe:	e028      	b.n	8017f12 <lwip_netconn_do_writemore+0x2c2>
 8017ec0:	08028b00 	.word	0x08028b00
 8017ec4:	08028c58 	.word	0x08028c58
 8017ec8:	08028b44 	.word	0x08028b44
 8017ecc:	08028f60 	.word	0x08028f60
 8017ed0:	08028c68 	.word	0x08028c68
 8017ed4:	08028f80 	.word	0x08028f80
 8017ed8:	08028f98 	.word	0x08028f98
 8017edc:	08028fd8 	.word	0x08028fd8
 8017ee0:	08029000 	.word	0x08029000
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	685b      	ldr	r3, [r3, #4]
 8017ee8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017eec:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8017ef0:	d305      	bcc.n	8017efe <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	685b      	ldr	r3, [r3, #4]
 8017ef6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8017efa:	2b04      	cmp	r3, #4
 8017efc:	d909      	bls.n	8017f12 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d005      	beq.n	8017f12 <lwip_netconn_do_writemore+0x2c2>
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	2103      	movs	r1, #3
 8017f0e:	6878      	ldr	r0, [r7, #4]
 8017f10:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8017f12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d11d      	bne.n	8017f56 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	6a1b      	ldr	r3, [r3, #32]
 8017f1e:	699a      	ldr	r2, [r3, #24]
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	6a1b      	ldr	r3, [r3, #32]
 8017f24:	695b      	ldr	r3, [r3, #20]
 8017f26:	429a      	cmp	r2, r3
 8017f28:	d002      	beq.n	8017f30 <lwip_netconn_do_writemore+0x2e0>
 8017f2a:	7e3b      	ldrb	r3, [r7, #24]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d001      	beq.n	8017f34 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8017f30:	2301      	movs	r3, #1
 8017f32:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	685b      	ldr	r3, [r3, #4]
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f008 fdc1 	bl	8020ac0 <tcp_output>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8017f42:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8017f46:	f113 0f04 	cmn.w	r3, #4
 8017f4a:	d12c      	bne.n	8017fa6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8017f4c:	7b3b      	ldrb	r3, [r7, #12]
 8017f4e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8017f50:	2301      	movs	r3, #1
 8017f52:	76fb      	strb	r3, [r7, #27]
 8017f54:	e027      	b.n	8017fa6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8017f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f5e:	d120      	bne.n	8017fa2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	685b      	ldr	r3, [r3, #4]
 8017f64:	4618      	mov	r0, r3
 8017f66:	f008 fdab 	bl	8020ac0 <tcp_output>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8017f6e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8017f72:	f113 0f04 	cmn.w	r3, #4
 8017f76:	d104      	bne.n	8017f82 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8017f78:	7b7b      	ldrb	r3, [r7, #13]
 8017f7a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	76fb      	strb	r3, [r7, #27]
 8017f80:	e011      	b.n	8017fa6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8017f82:	7e3b      	ldrb	r3, [r7, #24]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d00e      	beq.n	8017fa6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	6a1b      	ldr	r3, [r3, #32]
 8017f8c:	699b      	ldr	r3, [r3, #24]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d102      	bne.n	8017f98 <lwip_netconn_do_writemore+0x348>
 8017f92:	f06f 0306 	mvn.w	r3, #6
 8017f96:	e000      	b.n	8017f9a <lwip_netconn_do_writemore+0x34a>
 8017f98:	2300      	movs	r3, #0
 8017f9a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8017f9c:	2301      	movs	r3, #1
 8017f9e:	76fb      	strb	r3, [r7, #27]
 8017fa0:	e001      	b.n	8017fa6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8017fa6:	7efb      	ldrb	r3, [r7, #27]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d015      	beq.n	8017fd8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	6a1b      	ldr	r3, [r3, #32]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	330c      	adds	r3, #12
 8017fb4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	6a1b      	ldr	r3, [r3, #32]
 8017fba:	7ffa      	ldrb	r2, [r7, #31]
 8017fbc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8017fca:	78fb      	ldrb	r3, [r7, #3]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d006      	beq.n	8017fde <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8017fd0:	68b8      	ldr	r0, [r7, #8]
 8017fd2:	f00e fe53 	bl	8026c7c <sys_sem_signal>
 8017fd6:	e002      	b.n	8017fde <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8017fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8017fdc:	e000      	b.n	8017fe0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8017fde:	2300      	movs	r3, #0
}
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	3720      	adds	r7, #32
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	bd80      	pop	{r7, pc}

08017fe8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b084      	sub	sp, #16
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8017ff4:	68bb      	ldr	r3, [r7, #8]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f7fe fccf 	bl	801699c <netconn_err>
 8017ffe:	4603      	mov	r3, r0
 8018000:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8018002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d166      	bne.n	80180d8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801800a:	68bb      	ldr	r3, [r7, #8]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	781b      	ldrb	r3, [r3, #0]
 8018010:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018014:	2b10      	cmp	r3, #16
 8018016:	d15d      	bne.n	80180d4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8018018:	68bb      	ldr	r3, [r7, #8]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	785b      	ldrb	r3, [r3, #1]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d002      	beq.n	8018028 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8018022:	23fb      	movs	r3, #251	@ 0xfb
 8018024:	73fb      	strb	r3, [r7, #15]
 8018026:	e057      	b.n	80180d8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	685b      	ldr	r3, [r3, #4]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d04d      	beq.n	80180ce <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8018032:	68bb      	ldr	r3, [r7, #8]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	2201      	movs	r2, #1
 8018038:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801803a:	68bb      	ldr	r3, [r7, #8]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	6a1b      	ldr	r3, [r3, #32]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d006      	beq.n	8018052 <lwip_netconn_do_write+0x6a>
 8018044:	4b28      	ldr	r3, [pc, #160]	@ (80180e8 <lwip_netconn_do_write+0x100>)
 8018046:	f240 7223 	movw	r2, #1827	@ 0x723
 801804a:	4928      	ldr	r1, [pc, #160]	@ (80180ec <lwip_netconn_do_write+0x104>)
 801804c:	4828      	ldr	r0, [pc, #160]	@ (80180f0 <lwip_netconn_do_write+0x108>)
 801804e:	f00f fb8d 	bl	802776c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	695b      	ldr	r3, [r3, #20]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d106      	bne.n	8018068 <lwip_netconn_do_write+0x80>
 801805a:	4b23      	ldr	r3, [pc, #140]	@ (80180e8 <lwip_netconn_do_write+0x100>)
 801805c:	f240 7224 	movw	r2, #1828	@ 0x724
 8018060:	4924      	ldr	r1, [pc, #144]	@ (80180f4 <lwip_netconn_do_write+0x10c>)
 8018062:	4823      	ldr	r0, [pc, #140]	@ (80180f0 <lwip_netconn_do_write+0x108>)
 8018064:	f00f fb82 	bl	802776c <iprintf>
        msg->conn->current_msg = msg;
 8018068:	68bb      	ldr	r3, [r7, #8]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	68ba      	ldr	r2, [r7, #8]
 801806e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8018070:	68bb      	ldr	r3, [r7, #8]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	2100      	movs	r1, #0
 8018076:	4618      	mov	r0, r3
 8018078:	f7ff fdea 	bl	8017c50 <lwip_netconn_do_writemore>
 801807c:	4603      	mov	r3, r0
 801807e:	2b00      	cmp	r3, #0
 8018080:	d02e      	beq.n	80180e0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	785b      	ldrb	r3, [r3, #1]
 8018088:	2b01      	cmp	r3, #1
 801808a:	d006      	beq.n	801809a <lwip_netconn_do_write+0xb2>
 801808c:	4b16      	ldr	r3, [pc, #88]	@ (80180e8 <lwip_netconn_do_write+0x100>)
 801808e:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8018092:	4919      	ldr	r1, [pc, #100]	@ (80180f8 <lwip_netconn_do_write+0x110>)
 8018094:	4816      	ldr	r0, [pc, #88]	@ (80180f0 <lwip_netconn_do_write+0x108>)
 8018096:	f00f fb69 	bl	802776c <iprintf>
          UNLOCK_TCPIP_CORE();
 801809a:	4818      	ldr	r0, [pc, #96]	@ (80180fc <lwip_netconn_do_write+0x114>)
 801809c:	f00e fe5f 	bl	8026d5e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80180a0:	68bb      	ldr	r3, [r7, #8]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	330c      	adds	r3, #12
 80180a6:	2100      	movs	r1, #0
 80180a8:	4618      	mov	r0, r3
 80180aa:	f00e fdb6 	bl	8026c1a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80180ae:	4813      	ldr	r0, [pc, #76]	@ (80180fc <lwip_netconn_do_write+0x114>)
 80180b0:	f00e fe46 	bl	8026d40 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	785b      	ldrb	r3, [r3, #1]
 80180ba:	2b01      	cmp	r3, #1
 80180bc:	d110      	bne.n	80180e0 <lwip_netconn_do_write+0xf8>
 80180be:	4b0a      	ldr	r3, [pc, #40]	@ (80180e8 <lwip_netconn_do_write+0x100>)
 80180c0:	f240 722c 	movw	r2, #1836	@ 0x72c
 80180c4:	490c      	ldr	r1, [pc, #48]	@ (80180f8 <lwip_netconn_do_write+0x110>)
 80180c6:	480a      	ldr	r0, [pc, #40]	@ (80180f0 <lwip_netconn_do_write+0x108>)
 80180c8:	f00f fb50 	bl	802776c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80180cc:	e008      	b.n	80180e0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80180ce:	23f5      	movs	r3, #245	@ 0xf5
 80180d0:	73fb      	strb	r3, [r7, #15]
 80180d2:	e001      	b.n	80180d8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80180d4:	23fa      	movs	r3, #250	@ 0xfa
 80180d6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	7bfa      	ldrb	r2, [r7, #15]
 80180dc:	711a      	strb	r2, [r3, #4]
 80180de:	e000      	b.n	80180e2 <lwip_netconn_do_write+0xfa>
        return;
 80180e0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80180e2:	3710      	adds	r7, #16
 80180e4:	46bd      	mov	sp, r7
 80180e6:	bd80      	pop	{r7, pc}
 80180e8:	08028b00 	.word	0x08028b00
 80180ec:	08028ea4 	.word	0x08028ea4
 80180f0:	08028b44 	.word	0x08028b44
 80180f4:	0802902c 	.word	0x0802902c
 80180f8:	08028ec0 	.word	0x08028ec0
 80180fc:	2000d9e8 	.word	0x2000d9e8

08018100 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b084      	sub	sp, #16
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	685b      	ldr	r3, [r3, #4]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d06b      	beq.n	80181ee <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	7c1b      	ldrb	r3, [r3, #16]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d007      	beq.n	801812e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	685a      	ldr	r2, [r3, #4]
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	689b      	ldr	r3, [r3, #8]
 8018128:	6812      	ldr	r2, [r2, #0]
 801812a:	601a      	str	r2, [r3, #0]
 801812c:	e006      	b.n	801813c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	685a      	ldr	r2, [r3, #4]
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	689b      	ldr	r3, [r3, #8]
 8018138:	6852      	ldr	r2, [r2, #4]
 801813a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	2200      	movs	r2, #0
 8018140:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	781b      	ldrb	r3, [r3, #0]
 8018148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801814c:	2b10      	cmp	r3, #16
 801814e:	d021      	beq.n	8018194 <lwip_netconn_do_getaddr+0x94>
 8018150:	2b20      	cmp	r3, #32
 8018152:	d144      	bne.n	80181de <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	7c1b      	ldrb	r3, [r3, #16]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d007      	beq.n	801816c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	685a      	ldr	r2, [r3, #4]
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	68db      	ldr	r3, [r3, #12]
 8018166:	8a52      	ldrh	r2, [r2, #18]
 8018168:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 801816a:	e044      	b.n	80181f6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	7c1b      	ldrb	r3, [r3, #16]
 8018174:	f003 0304 	and.w	r3, r3, #4
 8018178:	2b00      	cmp	r3, #0
 801817a:	d103      	bne.n	8018184 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	22f5      	movs	r2, #245	@ 0xf5
 8018180:	711a      	strb	r2, [r3, #4]
        break;
 8018182:	e038      	b.n	80181f6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	685a      	ldr	r2, [r3, #4]
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	68db      	ldr	r3, [r3, #12]
 801818e:	8a92      	ldrh	r2, [r2, #20]
 8018190:	801a      	strh	r2, [r3, #0]
        break;
 8018192:	e030      	b.n	80181f6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	7c1b      	ldrb	r3, [r3, #16]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d10f      	bne.n	80181bc <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	685b      	ldr	r3, [r3, #4]
 80181a2:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d005      	beq.n	80181b4 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	685b      	ldr	r3, [r3, #4]
 80181ae:	7d1b      	ldrb	r3, [r3, #20]
 80181b0:	2b01      	cmp	r3, #1
 80181b2:	d103      	bne.n	80181bc <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	22f5      	movs	r2, #245	@ 0xf5
 80181b8:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 80181ba:	e01c      	b.n	80181f6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	7c1b      	ldrb	r3, [r3, #16]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d004      	beq.n	80181ce <lwip_netconn_do_getaddr+0xce>
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	685b      	ldr	r3, [r3, #4]
 80181ca:	8adb      	ldrh	r3, [r3, #22]
 80181cc:	e003      	b.n	80181d6 <lwip_netconn_do_getaddr+0xd6>
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	685b      	ldr	r3, [r3, #4]
 80181d4:	8b1b      	ldrh	r3, [r3, #24]
 80181d6:	68fa      	ldr	r2, [r7, #12]
 80181d8:	68d2      	ldr	r2, [r2, #12]
 80181da:	8013      	strh	r3, [r2, #0]
        break;
 80181dc:	e00b      	b.n	80181f6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 80181de:	4b08      	ldr	r3, [pc, #32]	@ (8018200 <lwip_netconn_do_getaddr+0x100>)
 80181e0:	f240 727d 	movw	r2, #1917	@ 0x77d
 80181e4:	4907      	ldr	r1, [pc, #28]	@ (8018204 <lwip_netconn_do_getaddr+0x104>)
 80181e6:	4808      	ldr	r0, [pc, #32]	@ (8018208 <lwip_netconn_do_getaddr+0x108>)
 80181e8:	f00f fac0 	bl	802776c <iprintf>
        break;
 80181ec:	e003      	b.n	80181f6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	22f5      	movs	r2, #245	@ 0xf5
 80181f2:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 80181f4:	bf00      	nop
 80181f6:	bf00      	nop
 80181f8:	3710      	adds	r7, #16
 80181fa:	46bd      	mov	sp, r7
 80181fc:	bd80      	pop	{r7, pc}
 80181fe:	bf00      	nop
 8018200:	08028b00 	.word	0x08028b00
 8018204:	08029040 	.word	0x08029040
 8018208:	08028b44 	.word	0x08028b44

0801820c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b084      	sub	sp, #16
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	785b      	ldrb	r3, [r3, #1]
 801821e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	685b      	ldr	r3, [r3, #4]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d069      	beq.n	80182fe <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8018234:	2b10      	cmp	r3, #16
 8018236:	d162      	bne.n	80182fe <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801823c:	2b03      	cmp	r3, #3
 801823e:	d002      	beq.n	8018246 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8018240:	7afb      	ldrb	r3, [r7, #11]
 8018242:	2b02      	cmp	r3, #2
 8018244:	d05b      	beq.n	80182fe <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8018246:	7afb      	ldrb	r3, [r7, #11]
 8018248:	2b03      	cmp	r3, #3
 801824a:	d103      	bne.n	8018254 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	22f5      	movs	r2, #245	@ 0xf5
 8018250:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018252:	e059      	b.n	8018308 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8018254:	7afb      	ldrb	r3, [r7, #11]
 8018256:	2b01      	cmp	r3, #1
 8018258:	d103      	bne.n	8018262 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	22fb      	movs	r2, #251	@ 0xfb
 801825e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8018260:	e052      	b.n	8018308 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	7a1b      	ldrb	r3, [r3, #8]
 8018266:	f003 0301 	and.w	r3, r3, #1
 801826a:	2b00      	cmp	r3, #0
 801826c:	d004      	beq.n	8018278 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	4618      	mov	r0, r3
 8018274:	f7ff f8cc 	bl	8017410 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	6a1b      	ldr	r3, [r3, #32]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d006      	beq.n	8018290 <lwip_netconn_do_close+0x84>
 8018282:	4b23      	ldr	r3, [pc, #140]	@ (8018310 <lwip_netconn_do_close+0x104>)
 8018284:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8018288:	4922      	ldr	r1, [pc, #136]	@ (8018314 <lwip_netconn_do_close+0x108>)
 801828a:	4823      	ldr	r0, [pc, #140]	@ (8018318 <lwip_netconn_do_close+0x10c>)
 801828c:	f00f fa6e 	bl	802776c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	2204      	movs	r2, #4
 8018296:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	68fa      	ldr	r2, [r7, #12]
 801829e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	2100      	movs	r1, #0
 80182a6:	4618      	mov	r0, r3
 80182a8:	f7ff f930 	bl	801750c <lwip_netconn_do_close_internal>
 80182ac:	4603      	mov	r3, r0
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d029      	beq.n	8018306 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	785b      	ldrb	r3, [r3, #1]
 80182b8:	2b04      	cmp	r3, #4
 80182ba:	d006      	beq.n	80182ca <lwip_netconn_do_close+0xbe>
 80182bc:	4b14      	ldr	r3, [pc, #80]	@ (8018310 <lwip_netconn_do_close+0x104>)
 80182be:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80182c2:	4916      	ldr	r1, [pc, #88]	@ (801831c <lwip_netconn_do_close+0x110>)
 80182c4:	4814      	ldr	r0, [pc, #80]	@ (8018318 <lwip_netconn_do_close+0x10c>)
 80182c6:	f00f fa51 	bl	802776c <iprintf>
        UNLOCK_TCPIP_CORE();
 80182ca:	4815      	ldr	r0, [pc, #84]	@ (8018320 <lwip_netconn_do_close+0x114>)
 80182cc:	f00e fd47 	bl	8026d5e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	330c      	adds	r3, #12
 80182d6:	2100      	movs	r1, #0
 80182d8:	4618      	mov	r0, r3
 80182da:	f00e fc9e 	bl	8026c1a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80182de:	4810      	ldr	r0, [pc, #64]	@ (8018320 <lwip_netconn_do_close+0x114>)
 80182e0:	f00e fd2e 	bl	8026d40 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	785b      	ldrb	r3, [r3, #1]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d00b      	beq.n	8018306 <lwip_netconn_do_close+0xfa>
 80182ee:	4b08      	ldr	r3, [pc, #32]	@ (8018310 <lwip_netconn_do_close+0x104>)
 80182f0:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80182f4:	4909      	ldr	r1, [pc, #36]	@ (801831c <lwip_netconn_do_close+0x110>)
 80182f6:	4808      	ldr	r0, [pc, #32]	@ (8018318 <lwip_netconn_do_close+0x10c>)
 80182f8:	f00f fa38 	bl	802776c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80182fc:	e003      	b.n	8018306 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	22f5      	movs	r2, #245	@ 0xf5
 8018302:	711a      	strb	r2, [r3, #4]
 8018304:	e000      	b.n	8018308 <lwip_netconn_do_close+0xfc>
      return;
 8018306:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8018308:	3710      	adds	r7, #16
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}
 801830e:	bf00      	nop
 8018310:	08028b00 	.word	0x08028b00
 8018314:	08028ea4 	.word	0x08028ea4
 8018318:	08028b44 	.word	0x08028b44
 801831c:	08028ec0 	.word	0x08028ec0
 8018320:	2000d9e8 	.word	0x2000d9e8

08018324 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8018324:	b480      	push	{r7}
 8018326:	b083      	sub	sp, #12
 8018328:	af00      	add	r7, sp, #0
 801832a:	4603      	mov	r3, r0
 801832c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 801832e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018332:	2b00      	cmp	r3, #0
 8018334:	dc04      	bgt.n	8018340 <err_to_errno+0x1c>
 8018336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801833a:	f113 0f10 	cmn.w	r3, #16
 801833e:	da01      	bge.n	8018344 <err_to_errno+0x20>
    return EIO;
 8018340:	2305      	movs	r3, #5
 8018342:	e005      	b.n	8018350 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8018344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018348:	425b      	negs	r3, r3
 801834a:	4a04      	ldr	r2, [pc, #16]	@ (801835c <err_to_errno+0x38>)
 801834c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8018350:	4618      	mov	r0, r3
 8018352:	370c      	adds	r7, #12
 8018354:	46bd      	mov	sp, r7
 8018356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835a:	4770      	bx	lr
 801835c:	0802c424 	.word	0x0802c424

08018360 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b082      	sub	sp, #8
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d013      	beq.n	8018396 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d00b      	beq.n	801838e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	4618      	mov	r0, r3
 801837c:	f002 ffea 	bl	801b354 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2200      	movs	r2, #0
 8018384:	605a      	str	r2, [r3, #4]
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	685a      	ldr	r2, [r3, #4]
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801838e:	6879      	ldr	r1, [r7, #4]
 8018390:	2006      	movs	r0, #6
 8018392:	f002 f8fd 	bl	801a590 <memp_free>
  }
}
 8018396:	bf00      	nop
 8018398:	3708      	adds	r7, #8
 801839a:	46bd      	mov	sp, r7
 801839c:	bd80      	pop	{r7, pc}
	...

080183a0 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b082      	sub	sp, #8
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d106      	bne.n	80183bc <netbuf_free+0x1c>
 80183ae:	4b0d      	ldr	r3, [pc, #52]	@ (80183e4 <netbuf_free+0x44>)
 80183b0:	2281      	movs	r2, #129	@ 0x81
 80183b2:	490d      	ldr	r1, [pc, #52]	@ (80183e8 <netbuf_free+0x48>)
 80183b4:	480d      	ldr	r0, [pc, #52]	@ (80183ec <netbuf_free+0x4c>)
 80183b6:	f00f f9d9 	bl	802776c <iprintf>
 80183ba:	e00f      	b.n	80183dc <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d004      	beq.n	80183ce <netbuf_free+0x2e>
    pbuf_free(buf->p);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	4618      	mov	r0, r3
 80183ca:	f002 ffc3 	bl	801b354 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	2200      	movs	r2, #0
 80183d2:	605a      	str	r2, [r3, #4]
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	685a      	ldr	r2, [r3, #4]
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 80183dc:	3708      	adds	r7, #8
 80183de:	46bd      	mov	sp, r7
 80183e0:	bd80      	pop	{r7, pc}
 80183e2:	bf00      	nop
 80183e4:	08029058 	.word	0x08029058
 80183e8:	080290f4 	.word	0x080290f4
 80183ec:	080290a8 	.word	0x080290a8

080183f0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b084      	sub	sp, #16
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	60f8      	str	r0, [r7, #12]
 80183f8:	60b9      	str	r1, [r7, #8]
 80183fa:	4613      	mov	r3, r2
 80183fc:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d108      	bne.n	8018416 <netbuf_ref+0x26>
 8018404:	4b1c      	ldr	r3, [pc, #112]	@ (8018478 <netbuf_ref+0x88>)
 8018406:	2299      	movs	r2, #153	@ 0x99
 8018408:	491c      	ldr	r1, [pc, #112]	@ (801847c <netbuf_ref+0x8c>)
 801840a:	481d      	ldr	r0, [pc, #116]	@ (8018480 <netbuf_ref+0x90>)
 801840c:	f00f f9ae 	bl	802776c <iprintf>
 8018410:	f06f 030f 	mvn.w	r3, #15
 8018414:	e02b      	b.n	801846e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d004      	beq.n	8018428 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	4618      	mov	r0, r3
 8018424:	f002 ff96 	bl	801b354 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8018428:	2241      	movs	r2, #65	@ 0x41
 801842a:	2100      	movs	r1, #0
 801842c:	2036      	movs	r0, #54	@ 0x36
 801842e:	f002 fc7b 	bl	801ad28 <pbuf_alloc>
 8018432:	4602      	mov	r2, r0
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d105      	bne.n	801844c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	2200      	movs	r2, #0
 8018444:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8018446:	f04f 33ff 	mov.w	r3, #4294967295
 801844a:	e010      	b.n	801846e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	68ba      	ldr	r2, [r7, #8]
 8018452:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	88fa      	ldrh	r2, [r7, #6]
 801845a:	811a      	strh	r2, [r3, #8]
 801845c:	68fa      	ldr	r2, [r7, #12]
 801845e:	6812      	ldr	r2, [r2, #0]
 8018460:	891b      	ldrh	r3, [r3, #8]
 8018462:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	681a      	ldr	r2, [r3, #0]
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 801846c:	2300      	movs	r3, #0
}
 801846e:	4618      	mov	r0, r3
 8018470:	3710      	adds	r7, #16
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}
 8018476:	bf00      	nop
 8018478:	08029058 	.word	0x08029058
 801847c:	08029110 	.word	0x08029110
 8018480:	080290a8 	.word	0x080290a8

08018484 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8018484:	b480      	push	{r7}
 8018486:	b085      	sub	sp, #20
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	2b00      	cmp	r3, #0
 8018494:	db02      	blt.n	801849c <tryget_socket_unconn_nouse+0x18>
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	2b03      	cmp	r3, #3
 801849a:	dd01      	ble.n	80184a0 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 801849c:	2300      	movs	r3, #0
 801849e:	e003      	b.n	80184a8 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	011b      	lsls	r3, r3, #4
 80184a4:	4a03      	ldr	r2, [pc, #12]	@ (80184b4 <tryget_socket_unconn_nouse+0x30>)
 80184a6:	4413      	add	r3, r2
}
 80184a8:	4618      	mov	r0, r3
 80184aa:	3714      	adds	r7, #20
 80184ac:	46bd      	mov	sp, r7
 80184ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b2:	4770      	bx	lr
 80184b4:	2000d998 	.word	0x2000d998

080184b8 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b084      	sub	sp, #16
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f7ff ffdf 	bl	8018484 <tryget_socket_unconn_nouse>
 80184c6:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 80184c8:	68fb      	ldr	r3, [r7, #12]
}
 80184ca:	4618      	mov	r0, r3
 80184cc:	3710      	adds	r7, #16
 80184ce:	46bd      	mov	sp, r7
 80184d0:	bd80      	pop	{r7, pc}

080184d2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80184d2:	b580      	push	{r7, lr}
 80184d4:	b084      	sub	sp, #16
 80184d6:	af00      	add	r7, sp, #0
 80184d8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80184da:	6878      	ldr	r0, [r7, #4]
 80184dc:	f7ff ffec 	bl	80184b8 <tryget_socket_unconn>
 80184e0:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d005      	beq.n	80184f4 <tryget_socket+0x22>
    if (sock->conn) {
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d001      	beq.n	80184f4 <tryget_socket+0x22>
      return sock;
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	e000      	b.n	80184f6 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80184f4:	2300      	movs	r3, #0
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	3710      	adds	r7, #16
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd80      	pop	{r7, pc}
	...

08018500 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b084      	sub	sp, #16
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8018508:	6878      	ldr	r0, [r7, #4]
 801850a:	f7ff ffe2 	bl	80184d2 <tryget_socket>
 801850e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d104      	bne.n	8018520 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8018516:	4b05      	ldr	r3, [pc, #20]	@ (801852c <get_socket+0x2c>)
 8018518:	2209      	movs	r2, #9
 801851a:	601a      	str	r2, [r3, #0]
    return NULL;
 801851c:	2300      	movs	r3, #0
 801851e:	e000      	b.n	8018522 <get_socket+0x22>
  }
  return sock;
 8018520:	68fb      	ldr	r3, [r7, #12]
}
 8018522:	4618      	mov	r0, r3
 8018524:	3710      	adds	r7, #16
 8018526:	46bd      	mov	sp, r7
 8018528:	bd80      	pop	{r7, pc}
 801852a:	bf00      	nop
 801852c:	20011c00 	.word	0x20011c00

08018530 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b084      	sub	sp, #16
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
 8018538:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 801853a:	2300      	movs	r3, #0
 801853c:	60fb      	str	r3, [r7, #12]
 801853e:	e052      	b.n	80185e6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8018540:	f00e fc40 	bl	8026dc4 <sys_arch_protect>
 8018544:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 8018546:	4a2c      	ldr	r2, [pc, #176]	@ (80185f8 <alloc_socket+0xc8>)
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	011b      	lsls	r3, r3, #4
 801854c:	4413      	add	r3, r2
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d142      	bne.n	80185da <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8018554:	4a28      	ldr	r2, [pc, #160]	@ (80185f8 <alloc_socket+0xc8>)
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	011b      	lsls	r3, r3, #4
 801855a:	4413      	add	r3, r2
 801855c:	687a      	ldr	r2, [r7, #4]
 801855e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8018560:	68b8      	ldr	r0, [r7, #8]
 8018562:	f00e fc3d 	bl	8026de0 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 8018566:	4a24      	ldr	r2, [pc, #144]	@ (80185f8 <alloc_socket+0xc8>)
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	011b      	lsls	r3, r3, #4
 801856c:	4413      	add	r3, r2
 801856e:	3304      	adds	r3, #4
 8018570:	2200      	movs	r2, #0
 8018572:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8018574:	4a20      	ldr	r2, [pc, #128]	@ (80185f8 <alloc_socket+0xc8>)
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	011b      	lsls	r3, r3, #4
 801857a:	4413      	add	r3, r2
 801857c:	330e      	adds	r3, #14
 801857e:	781b      	ldrb	r3, [r3, #0]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d006      	beq.n	8018592 <alloc_socket+0x62>
 8018584:	4b1d      	ldr	r3, [pc, #116]	@ (80185fc <alloc_socket+0xcc>)
 8018586:	f240 220e 	movw	r2, #526	@ 0x20e
 801858a:	491d      	ldr	r1, [pc, #116]	@ (8018600 <alloc_socket+0xd0>)
 801858c:	481d      	ldr	r0, [pc, #116]	@ (8018604 <alloc_socket+0xd4>)
 801858e:	f00f f8ed 	bl	802776c <iprintf>
      sockets[i].rcvevent   = 0;
 8018592:	4a19      	ldr	r2, [pc, #100]	@ (80185f8 <alloc_socket+0xc8>)
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	011b      	lsls	r3, r3, #4
 8018598:	4413      	add	r3, r2
 801859a:	3308      	adds	r3, #8
 801859c:	2200      	movs	r2, #0
 801859e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80185a8:	2b10      	cmp	r3, #16
 80185aa:	d102      	bne.n	80185b2 <alloc_socket+0x82>
 80185ac:	683b      	ldr	r3, [r7, #0]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d001      	beq.n	80185b6 <alloc_socket+0x86>
 80185b2:	2301      	movs	r3, #1
 80185b4:	e000      	b.n	80185b8 <alloc_socket+0x88>
 80185b6:	2300      	movs	r3, #0
 80185b8:	b299      	uxth	r1, r3
 80185ba:	4a0f      	ldr	r2, [pc, #60]	@ (80185f8 <alloc_socket+0xc8>)
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	011b      	lsls	r3, r3, #4
 80185c0:	4413      	add	r3, r2
 80185c2:	330a      	adds	r3, #10
 80185c4:	460a      	mov	r2, r1
 80185c6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80185c8:	4a0b      	ldr	r2, [pc, #44]	@ (80185f8 <alloc_socket+0xc8>)
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	011b      	lsls	r3, r3, #4
 80185ce:	4413      	add	r3, r2
 80185d0:	330c      	adds	r3, #12
 80185d2:	2200      	movs	r2, #0
 80185d4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	e00a      	b.n	80185f0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80185da:	68b8      	ldr	r0, [r7, #8]
 80185dc:	f00e fc00 	bl	8026de0 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	3301      	adds	r3, #1
 80185e4:	60fb      	str	r3, [r7, #12]
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	2b03      	cmp	r3, #3
 80185ea:	dda9      	ble.n	8018540 <alloc_socket+0x10>
  }
  return -1;
 80185ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185f0:	4618      	mov	r0, r3
 80185f2:	3710      	adds	r7, #16
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}
 80185f8:	2000d998 	.word	0x2000d998
 80185fc:	080291f0 	.word	0x080291f0
 8018600:	08029224 	.word	0x08029224
 8018604:	08029244 	.word	0x08029244

08018608 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 8018608:	b480      	push	{r7}
 801860a:	b085      	sub	sp, #20
 801860c:	af00      	add	r7, sp, #0
 801860e:	60f8      	str	r0, [r7, #12]
 8018610:	60b9      	str	r1, [r7, #8]
 8018612:	607a      	str	r2, [r7, #4]
 8018614:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8018616:	683b      	ldr	r3, [r7, #0]
 8018618:	68fa      	ldr	r2, [r7, #12]
 801861a:	6852      	ldr	r2, [r2, #4]
 801861c:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	2200      	movs	r2, #0
 8018622:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	681a      	ldr	r2, [r3, #0]
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	2200      	movs	r2, #0
 8018630:	601a      	str	r2, [r3, #0]
  return 1;
 8018632:	2301      	movs	r3, #1
}
 8018634:	4618      	mov	r0, r3
 8018636:	3714      	adds	r7, #20
 8018638:	46bd      	mov	sp, r7
 801863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863e:	4770      	bx	lr

08018640 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b084      	sub	sp, #16
 8018644:	af00      	add	r7, sp, #0
 8018646:	60f8      	str	r0, [r7, #12]
 8018648:	60b9      	str	r1, [r7, #8]
 801864a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d00d      	beq.n	8018670 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d005      	beq.n	8018666 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	4618      	mov	r0, r3
 8018660:	f002 fe78 	bl	801b354 <pbuf_free>
 8018664:	e004      	b.n	8018670 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	4618      	mov	r0, r3
 801866c:	f7ff fe78 	bl	8018360 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8018670:	68bb      	ldr	r3, [r7, #8]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d002      	beq.n	801867c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8018676:	68b8      	ldr	r0, [r7, #8]
 8018678:	f7fd fd00 	bl	801607c <netconn_delete>
  }
}
 801867c:	bf00      	nop
 801867e:	3710      	adds	r7, #16
 8018680:	46bd      	mov	sp, r7
 8018682:	bd80      	pop	{r7, pc}

08018684 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8018684:	b580      	push	{r7, lr}
 8018686:	b086      	sub	sp, #24
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
 801868c:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 801868e:	f00e fb99 	bl	8026dc4 <sys_arch_protect>
 8018692:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8018694:	f107 0308 	add.w	r3, r7, #8
 8018698:	f107 020c 	add.w	r2, r7, #12
 801869c:	6839      	ldr	r1, [r7, #0]
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f7ff ffb2 	bl	8018608 <free_socket_locked>
 80186a4:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 80186a6:	6978      	ldr	r0, [r7, #20]
 80186a8:	f00e fb9a 	bl	8026de0 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 80186ac:	693b      	ldr	r3, [r7, #16]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d006      	beq.n	80186c0 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	f107 0208 	add.w	r2, r7, #8
 80186b8:	4619      	mov	r1, r3
 80186ba:	6838      	ldr	r0, [r7, #0]
 80186bc:	f7ff ffc0 	bl	8018640 <free_socket_free_elements>
  }
}
 80186c0:	bf00      	nop
 80186c2:	3718      	adds	r7, #24
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}

080186c8 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 80186c8:	b590      	push	{r4, r7, lr}
 80186ca:	b099      	sub	sp, #100	@ 0x64
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	60f8      	str	r0, [r7, #12]
 80186d0:	60b9      	str	r1, [r7, #8]
 80186d2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 80186d4:	2300      	movs	r3, #0
 80186d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 80186d8:	68f8      	ldr	r0, [r7, #12]
 80186da:	f7ff ff11 	bl	8018500 <get_socket>
 80186de:	65b8      	str	r0, [r7, #88]	@ 0x58
  if (!sock) {
 80186e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d102      	bne.n	80186ec <lwip_accept+0x24>
    return -1;
 80186e6:	f04f 33ff 	mov.w	r3, #4294967295
 80186ea:	e0f8      	b.n	80188de <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 80186ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80186f4:	4611      	mov	r1, r2
 80186f6:	4618      	mov	r0, r3
 80186f8:	f7fd fd92 	bl	8016220 <netconn_accept>
 80186fc:	4603      	mov	r3, r0
 80186fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if (err != ERR_OK) {
 8018702:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8018706:	2b00      	cmp	r3, #0
 8018708:	d02c      	beq.n	8018764 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 801870a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	781b      	ldrb	r3, [r3, #0]
 8018710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018714:	2b10      	cmp	r3, #16
 8018716:	d008      	beq.n	801872a <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 8018718:	235f      	movs	r3, #95	@ 0x5f
 801871a:	633b      	str	r3, [r7, #48]	@ 0x30
 801871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801871e:	2b00      	cmp	r3, #0
 8018720:	d01d      	beq.n	801875e <lwip_accept+0x96>
 8018722:	4a71      	ldr	r2, [pc, #452]	@ (80188e8 <lwip_accept+0x220>)
 8018724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018726:	6013      	str	r3, [r2, #0]
 8018728:	e019      	b.n	801875e <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 801872a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801872e:	f113 0f0f 	cmn.w	r3, #15
 8018732:	d108      	bne.n	8018746 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 8018734:	2316      	movs	r3, #22
 8018736:	637b      	str	r3, [r7, #52]	@ 0x34
 8018738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801873a:	2b00      	cmp	r3, #0
 801873c:	d00f      	beq.n	801875e <lwip_accept+0x96>
 801873e:	4a6a      	ldr	r2, [pc, #424]	@ (80188e8 <lwip_accept+0x220>)
 8018740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018742:	6013      	str	r3, [r2, #0]
 8018744:	e00b      	b.n	801875e <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8018746:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801874a:	4618      	mov	r0, r3
 801874c:	f7ff fdea 	bl	8018324 <err_to_errno>
 8018750:	63b8      	str	r0, [r7, #56]	@ 0x38
 8018752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018754:	2b00      	cmp	r3, #0
 8018756:	d002      	beq.n	801875e <lwip_accept+0x96>
 8018758:	4a63      	ldr	r2, [pc, #396]	@ (80188e8 <lwip_accept+0x220>)
 801875a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801875c:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 801875e:	f04f 33ff 	mov.w	r3, #4294967295
 8018762:	e0bc      	b.n	80188de <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8018764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018766:	2b00      	cmp	r3, #0
 8018768:	d106      	bne.n	8018778 <lwip_accept+0xb0>
 801876a:	4b60      	ldr	r3, [pc, #384]	@ (80188ec <lwip_accept+0x224>)
 801876c:	f240 228b 	movw	r2, #651	@ 0x28b
 8018770:	495f      	ldr	r1, [pc, #380]	@ (80188f0 <lwip_accept+0x228>)
 8018772:	4860      	ldr	r0, [pc, #384]	@ (80188f4 <lwip_accept+0x22c>)
 8018774:	f00e fffa 	bl	802776c <iprintf>

  newsock = alloc_socket(newconn, 1);
 8018778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801877a:	2101      	movs	r1, #1
 801877c:	4618      	mov	r0, r3
 801877e:	f7ff fed7 	bl	8018530 <alloc_socket>
 8018782:	6538      	str	r0, [r7, #80]	@ 0x50
  if (newsock == -1) {
 8018784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801878a:	d10e      	bne.n	80187aa <lwip_accept+0xe2>
    netconn_delete(newconn);
 801878c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801878e:	4618      	mov	r0, r3
 8018790:	f7fd fc74 	bl	801607c <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8018794:	2317      	movs	r3, #23
 8018796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801879a:	2b00      	cmp	r3, #0
 801879c:	d002      	beq.n	80187a4 <lwip_accept+0xdc>
 801879e:	4a52      	ldr	r2, [pc, #328]	@ (80188e8 <lwip_accept+0x220>)
 80187a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187a2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80187a4:	f04f 33ff 	mov.w	r3, #4294967295
 80187a8:	e099      	b.n	80188de <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 80187aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	db02      	blt.n	80187b6 <lwip_accept+0xee>
 80187b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187b2:	2b03      	cmp	r3, #3
 80187b4:	dd06      	ble.n	80187c4 <lwip_accept+0xfc>
 80187b6:	4b4d      	ldr	r3, [pc, #308]	@ (80188ec <lwip_accept+0x224>)
 80187b8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80187bc:	494e      	ldr	r1, [pc, #312]	@ (80188f8 <lwip_accept+0x230>)
 80187be:	484d      	ldr	r0, [pc, #308]	@ (80188f4 <lwip_accept+0x22c>)
 80187c0:	f00e ffd4 	bl	802776c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 80187c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187c6:	011b      	lsls	r3, r3, #4
 80187c8:	4a4c      	ldr	r2, [pc, #304]	@ (80188fc <lwip_accept+0x234>)
 80187ca:	4413      	add	r3, r2
 80187cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 80187ce:	f00e faf9 	bl	8026dc4 <sys_arch_protect>
 80187d2:	64b8      	str	r0, [r7, #72]	@ 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 80187d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187d6:	699b      	ldr	r3, [r3, #24]
 80187d8:	b21b      	sxth	r3, r3
 80187da:	43db      	mvns	r3, r3
 80187dc:	b21b      	sxth	r3, r3
 80187de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  newconn->socket = newsock;
 80187e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80187e4:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 80187e6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80187e8:	f00e fafa 	bl	8026de0 <sys_arch_unprotect>

  if (newconn->callback) {
 80187ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d012      	beq.n	801881a <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 80187f4:	4842      	ldr	r0, [pc, #264]	@ (8018900 <lwip_accept+0x238>)
 80187f6:	f00e faa3 	bl	8026d40 <sys_mutex_lock>
    while (recvevent > 0) {
 80187fa:	e008      	b.n	801880e <lwip_accept+0x146>
      recvevent--;
 80187fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80187fe:	3b01      	subs	r3, #1
 8018800:	65fb      	str	r3, [r7, #92]	@ 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8018802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018806:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018808:	2200      	movs	r2, #0
 801880a:	2100      	movs	r1, #0
 801880c:	4798      	blx	r3
    while (recvevent > 0) {
 801880e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018810:	2b00      	cmp	r3, #0
 8018812:	dcf3      	bgt.n	80187fc <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 8018814:	483a      	ldr	r0, [pc, #232]	@ (8018900 <lwip_accept+0x238>)
 8018816:	f00e faa2 	bl	8026d5e <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 801881a:	68bb      	ldr	r3, [r7, #8]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d055      	beq.n	80188cc <lwip_accept+0x204>
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d052      	beq.n	80188cc <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 8018826:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018828:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 801882c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8018830:	2300      	movs	r3, #0
 8018832:	f7fd fc3f 	bl	80160b4 <netconn_getaddr>
 8018836:	4603      	mov	r3, r0
 8018838:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (err != ERR_OK) {
 801883c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8018840:	2b00      	cmp	r3, #0
 8018842:	d016      	beq.n	8018872 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 8018844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018846:	4618      	mov	r0, r3
 8018848:	f7fd fc18 	bl	801607c <netconn_delete>
      free_socket(nsock, 1);
 801884c:	2101      	movs	r1, #1
 801884e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018850:	f7ff ff18 	bl	8018684 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8018854:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8018858:	4618      	mov	r0, r3
 801885a:	f7ff fd63 	bl	8018324 <err_to_errno>
 801885e:	6478      	str	r0, [r7, #68]	@ 0x44
 8018860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018862:	2b00      	cmp	r3, #0
 8018864:	d002      	beq.n	801886c <lwip_accept+0x1a4>
 8018866:	4a20      	ldr	r2, [pc, #128]	@ (80188e8 <lwip_accept+0x220>)
 8018868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801886a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 801886c:	f04f 33ff 	mov.w	r3, #4294967295
 8018870:	e035      	b.n	80188de <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8018872:	f107 0314 	add.w	r3, r7, #20
 8018876:	2210      	movs	r2, #16
 8018878:	701a      	strb	r2, [r3, #0]
 801887a:	f107 0314 	add.w	r3, r7, #20
 801887e:	2202      	movs	r2, #2
 8018880:	705a      	strb	r2, [r3, #1]
 8018882:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018884:	f107 0414 	add.w	r4, r7, #20
 8018888:	4618      	mov	r0, r3
 801888a:	f001 f933 	bl	8019af4 <lwip_htons>
 801888e:	4603      	mov	r3, r0
 8018890:	8063      	strh	r3, [r4, #2]
 8018892:	f107 0314 	add.w	r3, r7, #20
 8018896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018898:	605a      	str	r2, [r3, #4]
 801889a:	f107 0314 	add.w	r3, r7, #20
 801889e:	3308      	adds	r3, #8
 80188a0:	2208      	movs	r2, #8
 80188a2:	2100      	movs	r1, #0
 80188a4:	4618      	mov	r0, r3
 80188a6:	f00f f8b9 	bl	8027a1c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	7d3a      	ldrb	r2, [r7, #20]
 80188b0:	4293      	cmp	r3, r2
 80188b2:	d903      	bls.n	80188bc <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 80188b4:	7d3b      	ldrb	r3, [r7, #20]
 80188b6:	461a      	mov	r2, r3
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681a      	ldr	r2, [r3, #0]
 80188c0:	f107 0314 	add.w	r3, r7, #20
 80188c4:	4619      	mov	r1, r3
 80188c6:	68b8      	ldr	r0, [r7, #8]
 80188c8:	f00f f983 	bl	8027bd2 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 80188cc:	2300      	movs	r3, #0
 80188ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80188d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d002      	beq.n	80188dc <lwip_accept+0x214>
 80188d6:	4a04      	ldr	r2, [pc, #16]	@ (80188e8 <lwip_accept+0x220>)
 80188d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80188da:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 80188dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80188de:	4618      	mov	r0, r3
 80188e0:	3764      	adds	r7, #100	@ 0x64
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd90      	pop	{r4, r7, pc}
 80188e6:	bf00      	nop
 80188e8:	20011c00 	.word	0x20011c00
 80188ec:	080291f0 	.word	0x080291f0
 80188f0:	0802926c 	.word	0x0802926c
 80188f4:	08029244 	.word	0x08029244
 80188f8:	0802927c 	.word	0x0802927c
 80188fc:	2000d998 	.word	0x2000d998
 8018900:	2000d9e8 	.word	0x2000d9e8

08018904 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b08a      	sub	sp, #40	@ 0x28
 8018908:	af00      	add	r7, sp, #0
 801890a:	60f8      	str	r0, [r7, #12]
 801890c:	60b9      	str	r1, [r7, #8]
 801890e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8018910:	68f8      	ldr	r0, [r7, #12]
 8018912:	f7ff fdf5 	bl	8018500 <get_socket>
 8018916:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 8018918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801891a:	2b00      	cmp	r3, #0
 801891c:	d102      	bne.n	8018924 <lwip_bind+0x20>
    return -1;
 801891e:	f04f 33ff 	mov.w	r3, #4294967295
 8018922:	e051      	b.n	80189c8 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2b10      	cmp	r3, #16
 8018928:	d108      	bne.n	801893c <lwip_bind+0x38>
 801892a:	68bb      	ldr	r3, [r7, #8]
 801892c:	785b      	ldrb	r3, [r3, #1]
 801892e:	2b02      	cmp	r3, #2
 8018930:	d104      	bne.n	801893c <lwip_bind+0x38>
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	f003 0303 	and.w	r3, r3, #3
 8018938:	2b00      	cmp	r3, #0
 801893a:	d014      	beq.n	8018966 <lwip_bind+0x62>
 801893c:	4b24      	ldr	r3, [pc, #144]	@ (80189d0 <lwip_bind+0xcc>)
 801893e:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8018942:	4924      	ldr	r1, [pc, #144]	@ (80189d4 <lwip_bind+0xd0>)
 8018944:	4824      	ldr	r0, [pc, #144]	@ (80189d8 <lwip_bind+0xd4>)
 8018946:	f00e ff11 	bl	802776c <iprintf>
 801894a:	f06f 000f 	mvn.w	r0, #15
 801894e:	f7ff fce9 	bl	8018324 <err_to_errno>
 8018952:	6178      	str	r0, [r7, #20]
 8018954:	697b      	ldr	r3, [r7, #20]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d002      	beq.n	8018960 <lwip_bind+0x5c>
 801895a:	4a20      	ldr	r2, [pc, #128]	@ (80189dc <lwip_bind+0xd8>)
 801895c:	697b      	ldr	r3, [r7, #20]
 801895e:	6013      	str	r3, [r2, #0]
 8018960:	f04f 33ff 	mov.w	r3, #4294967295
 8018964:	e030      	b.n	80189c8 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8018966:	68bb      	ldr	r3, [r7, #8]
 8018968:	685b      	ldr	r3, [r3, #4]
 801896a:	613b      	str	r3, [r7, #16]
 801896c:	68bb      	ldr	r3, [r7, #8]
 801896e:	885b      	ldrh	r3, [r3, #2]
 8018970:	4618      	mov	r0, r3
 8018972:	f001 f8bf 	bl	8019af4 <lwip_htons>
 8018976:	4603      	mov	r3, r0
 8018978:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 801897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018980:	f107 0110 	add.w	r1, r7, #16
 8018984:	4618      	mov	r0, r3
 8018986:	f7fd fbe7 	bl	8016158 <netconn_bind>
 801898a:	4603      	mov	r3, r0
 801898c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 8018990:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8018994:	2b00      	cmp	r3, #0
 8018996:	d00e      	beq.n	80189b6 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8018998:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 801899c:	4618      	mov	r0, r3
 801899e:	f7ff fcc1 	bl	8018324 <err_to_errno>
 80189a2:	61b8      	str	r0, [r7, #24]
 80189a4:	69bb      	ldr	r3, [r7, #24]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d002      	beq.n	80189b0 <lwip_bind+0xac>
 80189aa:	4a0c      	ldr	r2, [pc, #48]	@ (80189dc <lwip_bind+0xd8>)
 80189ac:	69bb      	ldr	r3, [r7, #24]
 80189ae:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80189b0:	f04f 33ff 	mov.w	r3, #4294967295
 80189b4:	e008      	b.n	80189c8 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 80189b6:	2300      	movs	r3, #0
 80189b8:	61fb      	str	r3, [r7, #28]
 80189ba:	69fb      	ldr	r3, [r7, #28]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d002      	beq.n	80189c6 <lwip_bind+0xc2>
 80189c0:	4a06      	ldr	r2, [pc, #24]	@ (80189dc <lwip_bind+0xd8>)
 80189c2:	69fb      	ldr	r3, [r7, #28]
 80189c4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 80189c6:	2300      	movs	r3, #0
}
 80189c8:	4618      	mov	r0, r3
 80189ca:	3728      	adds	r7, #40	@ 0x28
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bd80      	pop	{r7, pc}
 80189d0:	080291f0 	.word	0x080291f0
 80189d4:	08029294 	.word	0x08029294
 80189d8:	08029244 	.word	0x08029244
 80189dc:	20011c00 	.word	0x20011c00

080189e0 <lwip_close>:

int
lwip_close(int s)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b086      	sub	sp, #24
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 80189e8:	2300      	movs	r3, #0
 80189ea:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 80189ec:	6878      	ldr	r0, [r7, #4]
 80189ee:	f7ff fd87 	bl	8018500 <get_socket>
 80189f2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d102      	bne.n	8018a00 <lwip_close+0x20>
    return -1;
 80189fa:	f04f 33ff 	mov.w	r3, #4294967295
 80189fe:	e039      	b.n	8018a74 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8018a00:	693b      	ldr	r3, [r7, #16]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d00b      	beq.n	8018a20 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8018a08:	693b      	ldr	r3, [r7, #16]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	781b      	ldrb	r3, [r3, #0]
 8018a0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018a12:	2b10      	cmp	r3, #16
 8018a14:	bf0c      	ite	eq
 8018a16:	2301      	moveq	r3, #1
 8018a18:	2300      	movne	r3, #0
 8018a1a:	b2db      	uxtb	r3, r3
 8018a1c:	617b      	str	r3, [r7, #20]
 8018a1e:	e00a      	b.n	8018a36 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8018a20:	693b      	ldr	r3, [r7, #16]
 8018a22:	685b      	ldr	r3, [r3, #4]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d006      	beq.n	8018a36 <lwip_close+0x56>
 8018a28:	4b14      	ldr	r3, [pc, #80]	@ (8018a7c <lwip_close+0x9c>)
 8018a2a:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8018a2e:	4914      	ldr	r1, [pc, #80]	@ (8018a80 <lwip_close+0xa0>)
 8018a30:	4814      	ldr	r0, [pc, #80]	@ (8018a84 <lwip_close+0xa4>)
 8018a32:	f00e fe9b 	bl	802776c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8018a36:	693b      	ldr	r3, [r7, #16]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	f7fd fafa 	bl	8016034 <netconn_prepare_delete>
 8018a40:	4603      	mov	r3, r0
 8018a42:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d00e      	beq.n	8018a6a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8018a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a50:	4618      	mov	r0, r3
 8018a52:	f7ff fc67 	bl	8018324 <err_to_errno>
 8018a56:	60b8      	str	r0, [r7, #8]
 8018a58:	68bb      	ldr	r3, [r7, #8]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d002      	beq.n	8018a64 <lwip_close+0x84>
 8018a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8018a88 <lwip_close+0xa8>)
 8018a60:	68bb      	ldr	r3, [r7, #8]
 8018a62:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8018a64:	f04f 33ff 	mov.w	r3, #4294967295
 8018a68:	e004      	b.n	8018a74 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8018a6a:	6979      	ldr	r1, [r7, #20]
 8018a6c:	6938      	ldr	r0, [r7, #16]
 8018a6e:	f7ff fe09 	bl	8018684 <free_socket>
  set_errno(0);
  return 0;
 8018a72:	2300      	movs	r3, #0
}
 8018a74:	4618      	mov	r0, r3
 8018a76:	3718      	adds	r7, #24
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bd80      	pop	{r7, pc}
 8018a7c:	080291f0 	.word	0x080291f0
 8018a80:	080292b0 	.word	0x080292b0
 8018a84:	08029244 	.word	0x08029244
 8018a88:	20011c00 	.word	0x20011c00

08018a8c <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b088      	sub	sp, #32
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
 8018a94:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 8018a96:	6878      	ldr	r0, [r7, #4]
 8018a98:	f7ff fd32 	bl	8018500 <get_socket>
 8018a9c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8018a9e:	69fb      	ldr	r3, [r7, #28]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d102      	bne.n	8018aaa <lwip_listen+0x1e>
    return -1;
 8018aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8018aa8:	e03e      	b.n	8018b28 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8018aaa:	683b      	ldr	r3, [r7, #0]
 8018aac:	2bfe      	cmp	r3, #254	@ 0xfe
 8018aae:	dc03      	bgt.n	8018ab8 <lwip_listen+0x2c>
 8018ab0:	683b      	ldr	r3, [r7, #0]
 8018ab2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018ab6:	e000      	b.n	8018aba <lwip_listen+0x2e>
 8018ab8:	23ff      	movs	r3, #255	@ 0xff
 8018aba:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8018abc:	69fb      	ldr	r3, [r7, #28]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	683a      	ldr	r2, [r7, #0]
 8018ac2:	b2d2      	uxtb	r2, r2
 8018ac4:	4611      	mov	r1, r2
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7fd fb7e 	bl	80161c8 <netconn_listen_with_backlog>
 8018acc:	4603      	mov	r3, r0
 8018ace:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 8018ad0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d01e      	beq.n	8018b16 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8018ad8:	69fb      	ldr	r3, [r7, #28]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018ae2:	2b10      	cmp	r3, #16
 8018ae4:	d008      	beq.n	8018af8 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 8018ae6:	235f      	movs	r3, #95	@ 0x5f
 8018ae8:	60fb      	str	r3, [r7, #12]
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d00f      	beq.n	8018b10 <lwip_listen+0x84>
 8018af0:	4a0f      	ldr	r2, [pc, #60]	@ (8018b30 <lwip_listen+0xa4>)
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	6013      	str	r3, [r2, #0]
 8018af6:	e00b      	b.n	8018b10 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8018af8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7ff fc11 	bl	8018324 <err_to_errno>
 8018b02:	6138      	str	r0, [r7, #16]
 8018b04:	693b      	ldr	r3, [r7, #16]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d002      	beq.n	8018b10 <lwip_listen+0x84>
 8018b0a:	4a09      	ldr	r2, [pc, #36]	@ (8018b30 <lwip_listen+0xa4>)
 8018b0c:	693b      	ldr	r3, [r7, #16]
 8018b0e:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8018b10:	f04f 33ff 	mov.w	r3, #4294967295
 8018b14:	e008      	b.n	8018b28 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 8018b16:	2300      	movs	r3, #0
 8018b18:	617b      	str	r3, [r7, #20]
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d002      	beq.n	8018b26 <lwip_listen+0x9a>
 8018b20:	4a03      	ldr	r2, [pc, #12]	@ (8018b30 <lwip_listen+0xa4>)
 8018b22:	697b      	ldr	r3, [r7, #20]
 8018b24:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8018b26:	2300      	movs	r3, #0
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3720      	adds	r7, #32
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	20011c00 	.word	0x20011c00

08018b34 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b08c      	sub	sp, #48	@ 0x30
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	60f8      	str	r0, [r7, #12]
 8018b3c:	60b9      	str	r1, [r7, #8]
 8018b3e:	607a      	str	r2, [r7, #4]
 8018b40:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8018b42:	2308      	movs	r3, #8
 8018b44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	db01      	blt.n	8018b56 <lwip_recv_tcp+0x22>
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	e001      	b.n	8018b5a <lwip_recv_tcp+0x26>
 8018b56:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018b5a:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d106      	bne.n	8018b70 <lwip_recv_tcp+0x3c>
 8018b62:	4b74      	ldr	r3, [pc, #464]	@ (8018d34 <lwip_recv_tcp+0x200>)
 8018b64:	f240 329e 	movw	r2, #926	@ 0x39e
 8018b68:	4973      	ldr	r1, [pc, #460]	@ (8018d38 <lwip_recv_tcp+0x204>)
 8018b6a:	4874      	ldr	r0, [pc, #464]	@ (8018d3c <lwip_recv_tcp+0x208>)
 8018b6c:	f00e fdfe 	bl	802776c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	781b      	ldrb	r3, [r3, #0]
 8018b76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018b7a:	2b10      	cmp	r3, #16
 8018b7c:	d006      	beq.n	8018b8c <lwip_recv_tcp+0x58>
 8018b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8018d34 <lwip_recv_tcp+0x200>)
 8018b80:	f240 329f 	movw	r2, #927	@ 0x39f
 8018b84:	496e      	ldr	r1, [pc, #440]	@ (8018d40 <lwip_recv_tcp+0x20c>)
 8018b86:	486d      	ldr	r0, [pc, #436]	@ (8018d3c <lwip_recv_tcp+0x208>)
 8018b88:	f00e fdf0 	bl	802776c <iprintf>

  if (flags & MSG_DONTWAIT) {
 8018b8c:	683b      	ldr	r3, [r7, #0]
 8018b8e:	f003 0308 	and.w	r3, r3, #8
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d005      	beq.n	8018ba2 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8018b96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018b9a:	f043 0304 	orr.w	r3, r3, #4
 8018b9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	685b      	ldr	r3, [r3, #4]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d003      	beq.n	8018bb2 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	685b      	ldr	r3, [r3, #4]
 8018bae:	617b      	str	r3, [r7, #20]
 8018bb0:	e036      	b.n	8018c20 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8018bba:	f107 0114 	add.w	r1, r7, #20
 8018bbe:	4618      	mov	r0, r3
 8018bc0:	f7fd fd64 	bl	801668c <netconn_recv_tcp_pbuf_flags>
 8018bc4:	4603      	mov	r3, r0
 8018bc6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8018bca:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d019      	beq.n	8018c06 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8018bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	f300 808d 	bgt.w	8018cf4 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8018bda:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8018bde:	4618      	mov	r0, r3
 8018be0:	f7ff fba0 	bl	8018324 <err_to_errno>
 8018be4:	61f8      	str	r0, [r7, #28]
 8018be6:	69fb      	ldr	r3, [r7, #28]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d002      	beq.n	8018bf2 <lwip_recv_tcp+0xbe>
 8018bec:	4a55      	ldr	r2, [pc, #340]	@ (8018d44 <lwip_recv_tcp+0x210>)
 8018bee:	69fb      	ldr	r3, [r7, #28]
 8018bf0:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8018bf2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8018bf6:	f113 0f0f 	cmn.w	r3, #15
 8018bfa:	d101      	bne.n	8018c00 <lwip_recv_tcp+0xcc>
          return 0;
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	e094      	b.n	8018d2a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8018c00:	f04f 33ff 	mov.w	r3, #4294967295
 8018c04:	e091      	b.n	8018d2a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d106      	bne.n	8018c1a <lwip_recv_tcp+0xe6>
 8018c0c:	4b49      	ldr	r3, [pc, #292]	@ (8018d34 <lwip_recv_tcp+0x200>)
 8018c0e:	f240 32c5 	movw	r2, #965	@ 0x3c5
 8018c12:	494d      	ldr	r1, [pc, #308]	@ (8018d48 <lwip_recv_tcp+0x214>)
 8018c14:	4849      	ldr	r0, [pc, #292]	@ (8018d3c <lwip_recv_tcp+0x208>)
 8018c16:	f00e fda9 	bl	802776c <iprintf>
      sock->lastdata.pbuf = p;
 8018c1a:	697a      	ldr	r2, [r7, #20]
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	891b      	ldrh	r3, [r3, #8]
 8018c24:	461a      	mov	r2, r3
 8018c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c28:	4293      	cmp	r3, r2
 8018c2a:	dd03      	ble.n	8018c34 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8018c2c:	697b      	ldr	r3, [r7, #20]
 8018c2e:	891b      	ldrh	r3, [r3, #8]
 8018c30:	847b      	strh	r3, [r7, #34]	@ 0x22
 8018c32:	e001      	b.n	8018c38 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8018c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c36:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 8018c38:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c3c:	4413      	add	r3, r2
 8018c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018c40:	429a      	cmp	r2, r3
 8018c42:	dd03      	ble.n	8018c4c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8018c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c46:	b29b      	uxth	r3, r3
 8018c48:	43db      	mvns	r3, r3
 8018c4a:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8018c4c:	6978      	ldr	r0, [r7, #20]
 8018c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c50:	68ba      	ldr	r2, [r7, #8]
 8018c52:	18d1      	adds	r1, r2, r3
 8018c54:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018c56:	2300      	movs	r3, #0
 8018c58:	f002 fd82 	bl	801b760 <pbuf_copy_partial>

    recvd += copylen;
 8018c5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018c60:	4413      	add	r3, r2
 8018c62:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8018c64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c68:	429a      	cmp	r2, r3
 8018c6a:	da06      	bge.n	8018c7a <lwip_recv_tcp+0x146>
 8018c6c:	4b31      	ldr	r3, [pc, #196]	@ (8018d34 <lwip_recv_tcp+0x200>)
 8018c6e:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8018c72:	4936      	ldr	r1, [pc, #216]	@ (8018d4c <lwip_recv_tcp+0x218>)
 8018c74:	4831      	ldr	r0, [pc, #196]	@ (8018d3c <lwip_recv_tcp+0x208>)
 8018c76:	f00e fd79 	bl	802776c <iprintf>
    recv_left -= copylen;
 8018c7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c7e:	1ad3      	subs	r3, r2, r3
 8018c80:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8018c82:	683b      	ldr	r3, [r7, #0]
 8018c84:	f003 0301 	and.w	r3, r3, #1
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d123      	bne.n	8018cd4 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8018c8c:	697b      	ldr	r3, [r7, #20]
 8018c8e:	891b      	ldrh	r3, [r3, #8]
 8018c90:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018c92:	429a      	cmp	r2, r3
 8018c94:	d906      	bls.n	8018ca4 <lwip_recv_tcp+0x170>
 8018c96:	4b27      	ldr	r3, [pc, #156]	@ (8018d34 <lwip_recv_tcp+0x200>)
 8018c98:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8018c9c:	492c      	ldr	r1, [pc, #176]	@ (8018d50 <lwip_recv_tcp+0x21c>)
 8018c9e:	4827      	ldr	r0, [pc, #156]	@ (8018d3c <lwip_recv_tcp+0x208>)
 8018ca0:	f00e fd64 	bl	802776c <iprintf>
      if (p->tot_len - copylen > 0) {
 8018ca4:	697b      	ldr	r3, [r7, #20]
 8018ca6:	891b      	ldrh	r3, [r3, #8]
 8018ca8:	461a      	mov	r2, r3
 8018caa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018cac:	1ad3      	subs	r3, r2, r3
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	dd09      	ble.n	8018cc6 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8018cb2:	697b      	ldr	r3, [r7, #20]
 8018cb4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018cb6:	4611      	mov	r1, r2
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f002 fb18 	bl	801b2ee <pbuf_free_header>
 8018cbe:	4602      	mov	r2, r0
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	605a      	str	r2, [r3, #4]
 8018cc4:	e006      	b.n	8018cd4 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	2200      	movs	r2, #0
 8018cca:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8018ccc:	697b      	ldr	r3, [r7, #20]
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f002 fb40 	bl	801b354 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8018cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018cd8:	f043 0314 	orr.w	r3, r3, #20
 8018cdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8018ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	dd08      	ble.n	8018cf8 <lwip_recv_tcp+0x1c4>
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	f003 0301 	and.w	r3, r3, #1
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	f43f af58 	beq.w	8018ba2 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8018cf2:	e001      	b.n	8018cf8 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8018cf4:	bf00      	nop
 8018cf6:	e000      	b.n	8018cfa <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8018cf8:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8018cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	dd0b      	ble.n	8018d18 <lwip_recv_tcp+0x1e4>
 8018d00:	683b      	ldr	r3, [r7, #0]
 8018d02:	f003 0301 	and.w	r3, r3, #1
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d106      	bne.n	8018d18 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018d10:	4611      	mov	r1, r2
 8018d12:	4618      	mov	r0, r3
 8018d14:	f7fd fc08 	bl	8016528 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8018d18:	2300      	movs	r3, #0
 8018d1a:	61bb      	str	r3, [r7, #24]
 8018d1c:	69bb      	ldr	r3, [r7, #24]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d002      	beq.n	8018d28 <lwip_recv_tcp+0x1f4>
 8018d22:	4a08      	ldr	r2, [pc, #32]	@ (8018d44 <lwip_recv_tcp+0x210>)
 8018d24:	69bb      	ldr	r3, [r7, #24]
 8018d26:	6013      	str	r3, [r2, #0]
  return recvd;
 8018d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3730      	adds	r7, #48	@ 0x30
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bd80      	pop	{r7, pc}
 8018d32:	bf00      	nop
 8018d34:	080291f0 	.word	0x080291f0
 8018d38:	080292e8 	.word	0x080292e8
 8018d3c:	08029244 	.word	0x08029244
 8018d40:	080292f8 	.word	0x080292f8
 8018d44:	20011c00 	.word	0x20011c00
 8018d48:	0802931c 	.word	0x0802931c
 8018d4c:	08029328 	.word	0x08029328
 8018d50:	08029350 	.word	0x08029350

08018d54 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8018d54:	b590      	push	{r4, r7, lr}
 8018d56:	b08b      	sub	sp, #44	@ 0x2c
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	60f8      	str	r0, [r7, #12]
 8018d5c:	60b9      	str	r1, [r7, #8]
 8018d5e:	603b      	str	r3, [r7, #0]
 8018d60:	4613      	mov	r3, r2
 8018d62:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8018d64:	2300      	movs	r3, #0
 8018d66:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8018d68:	68bb      	ldr	r3, [r7, #8]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d106      	bne.n	8018d7c <lwip_sock_make_addr+0x28>
 8018d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8018e1c <lwip_sock_make_addr+0xc8>)
 8018d70:	f240 4207 	movw	r2, #1031	@ 0x407
 8018d74:	492a      	ldr	r1, [pc, #168]	@ (8018e20 <lwip_sock_make_addr+0xcc>)
 8018d76:	482b      	ldr	r0, [pc, #172]	@ (8018e24 <lwip_sock_make_addr+0xd0>)
 8018d78:	f00e fcf8 	bl	802776c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8018d7c:	683b      	ldr	r3, [r7, #0]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d106      	bne.n	8018d90 <lwip_sock_make_addr+0x3c>
 8018d82:	4b26      	ldr	r3, [pc, #152]	@ (8018e1c <lwip_sock_make_addr+0xc8>)
 8018d84:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8018d88:	4927      	ldr	r1, [pc, #156]	@ (8018e28 <lwip_sock_make_addr+0xd4>)
 8018d8a:	4826      	ldr	r0, [pc, #152]	@ (8018e24 <lwip_sock_make_addr+0xd0>)
 8018d8c:	f00e fcee 	bl	802776c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8018d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d106      	bne.n	8018da4 <lwip_sock_make_addr+0x50>
 8018d96:	4b21      	ldr	r3, [pc, #132]	@ (8018e1c <lwip_sock_make_addr+0xc8>)
 8018d98:	f240 4209 	movw	r2, #1033	@ 0x409
 8018d9c:	4923      	ldr	r1, [pc, #140]	@ (8018e2c <lwip_sock_make_addr+0xd8>)
 8018d9e:	4821      	ldr	r0, [pc, #132]	@ (8018e24 <lwip_sock_make_addr+0xd0>)
 8018da0:	f00e fce4 	bl	802776c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8018da4:	f107 0314 	add.w	r3, r7, #20
 8018da8:	2210      	movs	r2, #16
 8018daa:	701a      	strb	r2, [r3, #0]
 8018dac:	f107 0314 	add.w	r3, r7, #20
 8018db0:	2202      	movs	r2, #2
 8018db2:	705a      	strb	r2, [r3, #1]
 8018db4:	f107 0414 	add.w	r4, r7, #20
 8018db8:	88fb      	ldrh	r3, [r7, #6]
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f000 fe9a 	bl	8019af4 <lwip_htons>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	8063      	strh	r3, [r4, #2]
 8018dc4:	f107 0314 	add.w	r3, r7, #20
 8018dc8:	68ba      	ldr	r2, [r7, #8]
 8018dca:	6812      	ldr	r2, [r2, #0]
 8018dcc:	605a      	str	r2, [r3, #4]
 8018dce:	f107 0314 	add.w	r3, r7, #20
 8018dd2:	3308      	adds	r3, #8
 8018dd4:	2208      	movs	r2, #8
 8018dd6:	2100      	movs	r1, #0
 8018dd8:	4618      	mov	r0, r3
 8018dda:	f00e fe1f 	bl	8027a1c <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8018dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	7d3a      	ldrb	r2, [r7, #20]
 8018de4:	4293      	cmp	r3, r2
 8018de6:	d202      	bcs.n	8018dee <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8018de8:	2301      	movs	r3, #1
 8018dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8018dec:	e008      	b.n	8018e00 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8018dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	7d3a      	ldrb	r2, [r7, #20]
 8018df4:	4293      	cmp	r3, r2
 8018df6:	d903      	bls.n	8018e00 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8018df8:	7d3b      	ldrb	r3, [r7, #20]
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018dfe:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8018e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e02:	681a      	ldr	r2, [r3, #0]
 8018e04:	f107 0314 	add.w	r3, r7, #20
 8018e08:	4619      	mov	r1, r3
 8018e0a:	6838      	ldr	r0, [r7, #0]
 8018e0c:	f00e fee1 	bl	8027bd2 <memcpy>
  return truncated;
 8018e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018e12:	4618      	mov	r0, r3
 8018e14:	372c      	adds	r7, #44	@ 0x2c
 8018e16:	46bd      	mov	sp, r7
 8018e18:	bd90      	pop	{r4, r7, pc}
 8018e1a:	bf00      	nop
 8018e1c:	080291f0 	.word	0x080291f0
 8018e20:	08029360 	.word	0x08029360
 8018e24:	08029244 	.word	0x08029244
 8018e28:	08029374 	.word	0x08029374
 8018e2c:	08029384 	.word	0x08029384

08018e30 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b088      	sub	sp, #32
 8018e34:	af02      	add	r7, sp, #8
 8018e36:	60f8      	str	r0, [r7, #12]
 8018e38:	60b9      	str	r1, [r7, #8]
 8018e3a:	607a      	str	r2, [r7, #4]
 8018e3c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d101      	bne.n	8018e48 <lwip_recv_tcp_from+0x18>
    return 0;
 8018e44:	2300      	movs	r3, #0
 8018e46:	e021      	b.n	8018e8c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8018e48:	68bb      	ldr	r3, [r7, #8]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d01d      	beq.n	8018e8a <lwip_recv_tcp_from+0x5a>
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d01a      	beq.n	8018e8a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	6818      	ldr	r0, [r3, #0]
 8018e58:	f107 0216 	add.w	r2, r7, #22
 8018e5c:	f107 0110 	add.w	r1, r7, #16
 8018e60:	2300      	movs	r3, #0
 8018e62:	f7fd f927 	bl	80160b4 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8018e66:	68bb      	ldr	r3, [r7, #8]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d00e      	beq.n	8018e8a <lwip_recv_tcp_from+0x5a>
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d00b      	beq.n	8018e8a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	6818      	ldr	r0, [r3, #0]
 8018e76:	8afa      	ldrh	r2, [r7, #22]
 8018e78:	f107 0110 	add.w	r1, r7, #16
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	9300      	str	r3, [sp, #0]
 8018e80:	68bb      	ldr	r3, [r7, #8]
 8018e82:	f7ff ff67 	bl	8018d54 <lwip_sock_make_addr>
 8018e86:	4603      	mov	r3, r0
 8018e88:	e000      	b.n	8018e8c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8018e8a:	2300      	movs	r3, #0
}
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	3718      	adds	r7, #24
 8018e90:	46bd      	mov	sp, r7
 8018e92:	bd80      	pop	{r7, pc}

08018e94 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8018e94:	b590      	push	{r4, r7, lr}
 8018e96:	b08d      	sub	sp, #52	@ 0x34
 8018e98:	af02      	add	r7, sp, #8
 8018e9a:	60f8      	str	r0, [r7, #12]
 8018e9c:	60b9      	str	r1, [r7, #8]
 8018e9e:	607a      	str	r2, [r7, #4]
 8018ea0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	689b      	ldr	r3, [r3, #8]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d10d      	bne.n	8018ec6 <lwip_recvfrom_udp_raw+0x32>
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	68db      	ldr	r3, [r3, #12]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	dd09      	ble.n	8018ec6 <lwip_recvfrom_udp_raw+0x32>
 8018eb2:	4b5e      	ldr	r3, [pc, #376]	@ (801902c <lwip_recvfrom_udp_raw+0x198>)
 8018eb4:	f240 4249 	movw	r2, #1097	@ 0x449
 8018eb8:	495d      	ldr	r1, [pc, #372]	@ (8019030 <lwip_recvfrom_udp_raw+0x19c>)
 8018eba:	485e      	ldr	r0, [pc, #376]	@ (8019034 <lwip_recvfrom_udp_raw+0x1a0>)
 8018ebc:	f00e fc56 	bl	802776c <iprintf>
 8018ec0:	f06f 030f 	mvn.w	r3, #15
 8018ec4:	e0ad      	b.n	8019022 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 8018ec6:	68bb      	ldr	r3, [r7, #8]
 8018ec8:	f003 0308 	and.w	r3, r3, #8
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d003      	beq.n	8018ed8 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8018ed0:	2304      	movs	r3, #4
 8018ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018ed6:	e002      	b.n	8018ede <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	685b      	ldr	r3, [r3, #4]
 8018ee2:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8018ee4:	693b      	ldr	r3, [r7, #16]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d11e      	bne.n	8018f28 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8018ef2:	f107 0110 	add.w	r1, r7, #16
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	f7fd fbf4 	bl	80166e4 <netconn_recv_udp_raw_netbuf_flags>
 8018efc:	4603      	mov	r3, r0
 8018efe:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8018f00:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d002      	beq.n	8018f0e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 8018f08:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018f0c:	e089      	b.n	8019022 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8018f0e:	693b      	ldr	r3, [r7, #16]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d106      	bne.n	8018f22 <lwip_recvfrom_udp_raw+0x8e>
 8018f14:	4b45      	ldr	r3, [pc, #276]	@ (801902c <lwip_recvfrom_udp_raw+0x198>)
 8018f16:	f240 425e 	movw	r2, #1118	@ 0x45e
 8018f1a:	4947      	ldr	r1, [pc, #284]	@ (8019038 <lwip_recvfrom_udp_raw+0x1a4>)
 8018f1c:	4845      	ldr	r0, [pc, #276]	@ (8019034 <lwip_recvfrom_udp_raw+0x1a0>)
 8018f1e:	f00e fc25 	bl	802776c <iprintf>
    sock->lastdata.netbuf = buf;
 8018f22:	693a      	ldr	r2, [r7, #16]
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	891b      	ldrh	r3, [r3, #8]
 8018f2e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8018f30:	2300      	movs	r3, #0
 8018f32:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8018f34:	2300      	movs	r3, #0
 8018f36:	61fb      	str	r3, [r7, #28]
 8018f38:	e029      	b.n	8018f8e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 8018f3a:	8b3a      	ldrh	r2, [r7, #24]
 8018f3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018f3e:	1ad3      	subs	r3, r2, r3
 8018f40:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	689a      	ldr	r2, [r3, #8]
 8018f46:	69fb      	ldr	r3, [r7, #28]
 8018f48:	00db      	lsls	r3, r3, #3
 8018f4a:	4413      	add	r3, r2
 8018f4c:	685a      	ldr	r2, [r3, #4]
 8018f4e:	8afb      	ldrh	r3, [r7, #22]
 8018f50:	429a      	cmp	r2, r3
 8018f52:	d902      	bls.n	8018f5a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 8018f54:	8afb      	ldrh	r3, [r7, #22]
 8018f56:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8018f58:	e006      	b.n	8018f68 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	689a      	ldr	r2, [r3, #8]
 8018f5e:	69fb      	ldr	r3, [r7, #28]
 8018f60:	00db      	lsls	r3, r3, #3
 8018f62:	4413      	add	r3, r2
 8018f64:	685b      	ldr	r3, [r3, #4]
 8018f66:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8018f68:	693b      	ldr	r3, [r7, #16]
 8018f6a:	6818      	ldr	r0, [r3, #0]
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	689a      	ldr	r2, [r3, #8]
 8018f70:	69fb      	ldr	r3, [r7, #28]
 8018f72:	00db      	lsls	r3, r3, #3
 8018f74:	4413      	add	r3, r2
 8018f76:	6819      	ldr	r1, [r3, #0]
 8018f78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018f7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018f7c:	f002 fbf0 	bl	801b760 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8018f80:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018f82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018f84:	4413      	add	r3, r2
 8018f86:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8018f88:	69fb      	ldr	r3, [r7, #28]
 8018f8a:	3301      	adds	r3, #1
 8018f8c:	61fb      	str	r3, [r7, #28]
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	68db      	ldr	r3, [r3, #12]
 8018f92:	69fa      	ldr	r2, [r7, #28]
 8018f94:	429a      	cmp	r2, r3
 8018f96:	da03      	bge.n	8018fa0 <lwip_recvfrom_udp_raw+0x10c>
 8018f98:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018f9a:	8b3b      	ldrh	r3, [r7, #24]
 8018f9c:	429a      	cmp	r2, r3
 8018f9e:	d3cc      	bcc.n	8018f3a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d01a      	beq.n	8018fde <lwip_recvfrom_udp_raw+0x14a>
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	685b      	ldr	r3, [r3, #4]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d016      	beq.n	8018fde <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d012      	beq.n	8018fde <lwip_recvfrom_udp_raw+0x14a>
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	685b      	ldr	r3, [r3, #4]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d00e      	beq.n	8018fde <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	6818      	ldr	r0, [r3, #0]
 8018fc4:	693b      	ldr	r3, [r7, #16]
 8018fc6:	f103 0108 	add.w	r1, r3, #8
 8018fca:	693b      	ldr	r3, [r7, #16]
 8018fcc:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	3304      	adds	r3, #4
 8018fd6:	9300      	str	r3, [sp, #0]
 8018fd8:	4623      	mov	r3, r4
 8018fda:	f7ff febb 	bl	8018d54 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	691b      	ldr	r3, [r3, #16]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d007      	beq.n	8018ffc <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 8018fec:	2300      	movs	r3, #0
 8018fee:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8018ff0:	7d7b      	ldrb	r3, [r7, #21]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d102      	bne.n	8018ffc <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8018ffc:	68bb      	ldr	r3, [r7, #8]
 8018ffe:	f003 0301 	and.w	r3, r3, #1
 8019002:	2b00      	cmp	r3, #0
 8019004:	d106      	bne.n	8019014 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	2200      	movs	r2, #0
 801900a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 801900c:	693b      	ldr	r3, [r7, #16]
 801900e:	4618      	mov	r0, r3
 8019010:	f7ff f9a6 	bl	8018360 <netbuf_delete>
  }
  if (datagram_len) {
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d002      	beq.n	8019020 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 801901a:	683b      	ldr	r3, [r7, #0]
 801901c:	8b3a      	ldrh	r2, [r7, #24]
 801901e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8019020:	2300      	movs	r3, #0
}
 8019022:	4618      	mov	r0, r3
 8019024:	372c      	adds	r7, #44	@ 0x2c
 8019026:	46bd      	mov	sp, r7
 8019028:	bd90      	pop	{r4, r7, pc}
 801902a:	bf00      	nop
 801902c:	080291f0 	.word	0x080291f0
 8019030:	08029394 	.word	0x08029394
 8019034:	08029244 	.word	0x08029244
 8019038:	080293c0 	.word	0x080293c0

0801903c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b096      	sub	sp, #88	@ 0x58
 8019040:	af02      	add	r7, sp, #8
 8019042:	60f8      	str	r0, [r7, #12]
 8019044:	60b9      	str	r1, [r7, #8]
 8019046:	607a      	str	r2, [r7, #4]
 8019048:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 801904a:	68f8      	ldr	r0, [r7, #12]
 801904c:	f7ff fa58 	bl	8018500 <get_socket>
 8019050:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 8019052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019054:	2b00      	cmp	r3, #0
 8019056:	d102      	bne.n	801905e <lwip_recvfrom+0x22>
    return -1;
 8019058:	f04f 33ff 	mov.w	r3, #4294967295
 801905c:	e078      	b.n	8019150 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801905e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	781b      	ldrb	r3, [r3, #0]
 8019064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019068:	2b10      	cmp	r3, #16
 801906a:	d112      	bne.n	8019092 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 801906c:	683b      	ldr	r3, [r7, #0]
 801906e:	687a      	ldr	r2, [r7, #4]
 8019070:	68b9      	ldr	r1, [r7, #8]
 8019072:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019074:	f7ff fd5e 	bl	8018b34 <lwip_recv_tcp>
 8019078:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 801907a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801907c:	9301      	str	r3, [sp, #4]
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	9300      	str	r3, [sp, #0]
 8019082:	4b35      	ldr	r3, [pc, #212]	@ (8019158 <lwip_recvfrom+0x11c>)
 8019084:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019086:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019088:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801908a:	f7ff fed1 	bl	8018e30 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 801908e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019090:	e05e      	b.n	8019150 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 8019092:	2300      	movs	r3, #0
 8019094:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 8019096:	68bb      	ldr	r3, [r7, #8]
 8019098:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 801909e:	2300      	movs	r3, #0
 80190a0:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 80190a2:	2300      	movs	r3, #0
 80190a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 80190a6:	2300      	movs	r3, #0
 80190a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 80190aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80190ae:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 80190b0:	2301      	movs	r3, #1
 80190b2:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 80190b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80190b6:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 80190b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d002      	beq.n	80190c4 <lwip_recvfrom+0x88>
 80190be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	e000      	b.n	80190c6 <lwip_recvfrom+0x8a>
 80190c4:	2300      	movs	r3, #0
 80190c6:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 80190c8:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 80190cc:	f107 0214 	add.w	r2, r7, #20
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	9300      	str	r3, [sp, #0]
 80190d4:	460b      	mov	r3, r1
 80190d6:	6839      	ldr	r1, [r7, #0]
 80190d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80190da:	f7ff fedb 	bl	8018e94 <lwip_recvfrom_udp_raw>
 80190de:	4603      	mov	r3, r0
 80190e0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 80190e4:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d00e      	beq.n	801910a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 80190ec:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 80190f0:	4618      	mov	r0, r3
 80190f2:	f7ff f917 	bl	8018324 <err_to_errno>
 80190f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80190f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d002      	beq.n	8019104 <lwip_recvfrom+0xc8>
 80190fe:	4a17      	ldr	r2, [pc, #92]	@ (801915c <lwip_recvfrom+0x120>)
 8019100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019102:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8019104:	f04f 33ff 	mov.w	r3, #4294967295
 8019108:	e022      	b.n	8019150 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 801910a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801910c:	461a      	mov	r2, r3
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	4293      	cmp	r3, r2
 8019112:	bf28      	it	cs
 8019114:	4613      	movcs	r3, r2
 8019116:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801911a:	4293      	cmp	r3, r2
 801911c:	d206      	bcs.n	801912c <lwip_recvfrom+0xf0>
 801911e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019120:	461a      	mov	r2, r3
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	4293      	cmp	r3, r2
 8019126:	bf28      	it	cs
 8019128:	4613      	movcs	r3, r2
 801912a:	e001      	b.n	8019130 <lwip_recvfrom+0xf4>
 801912c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019130:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 8019132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019134:	2b00      	cmp	r3, #0
 8019136:	d002      	beq.n	801913e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 8019138:	69ba      	ldr	r2, [r7, #24]
 801913a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801913c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 801913e:	2300      	movs	r3, #0
 8019140:	643b      	str	r3, [r7, #64]	@ 0x40
 8019142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019144:	2b00      	cmp	r3, #0
 8019146:	d002      	beq.n	801914e <lwip_recvfrom+0x112>
 8019148:	4a04      	ldr	r2, [pc, #16]	@ (801915c <lwip_recvfrom+0x120>)
 801914a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801914c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 801914e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8019150:	4618      	mov	r0, r3
 8019152:	3750      	adds	r7, #80	@ 0x50
 8019154:	46bd      	mov	sp, r7
 8019156:	bd80      	pop	{r7, pc}
 8019158:	080293cc 	.word	0x080293cc
 801915c:	20011c00 	.word	0x20011c00

08019160 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b086      	sub	sp, #24
 8019164:	af02      	add	r7, sp, #8
 8019166:	60f8      	str	r0, [r7, #12]
 8019168:	60b9      	str	r1, [r7, #8]
 801916a:	607a      	str	r2, [r7, #4]
 801916c:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 801916e:	2300      	movs	r3, #0
 8019170:	9301      	str	r3, [sp, #4]
 8019172:	2300      	movs	r3, #0
 8019174:	9300      	str	r3, [sp, #0]
 8019176:	683b      	ldr	r3, [r7, #0]
 8019178:	687a      	ldr	r2, [r7, #4]
 801917a:	68b9      	ldr	r1, [r7, #8]
 801917c:	68f8      	ldr	r0, [r7, #12]
 801917e:	f7ff ff5d 	bl	801903c <lwip_recvfrom>
 8019182:	4603      	mov	r3, r0
}
 8019184:	4618      	mov	r0, r3
 8019186:	3710      	adds	r7, #16
 8019188:	46bd      	mov	sp, r7
 801918a:	bd80      	pop	{r7, pc}

0801918c <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b08a      	sub	sp, #40	@ 0x28
 8019190:	af02      	add	r7, sp, #8
 8019192:	60f8      	str	r0, [r7, #12]
 8019194:	60b9      	str	r1, [r7, #8]
 8019196:	607a      	str	r2, [r7, #4]
 8019198:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 801919a:	68f8      	ldr	r0, [r7, #12]
 801919c:	f7ff f9b0 	bl	8018500 <get_socket>
 80191a0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80191a2:	69fb      	ldr	r3, [r7, #28]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d102      	bne.n	80191ae <lwip_send+0x22>
    return -1;
 80191a8:	f04f 33ff 	mov.w	r3, #4294967295
 80191ac:	e046      	b.n	801923c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80191ae:	69fb      	ldr	r3, [r7, #28]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	781b      	ldrb	r3, [r3, #0]
 80191b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80191b8:	2b10      	cmp	r3, #16
 80191ba:	d00b      	beq.n	80191d4 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80191bc:	2300      	movs	r3, #0
 80191be:	9301      	str	r3, [sp, #4]
 80191c0:	2300      	movs	r3, #0
 80191c2:	9300      	str	r3, [sp, #0]
 80191c4:	683b      	ldr	r3, [r7, #0]
 80191c6:	687a      	ldr	r2, [r7, #4]
 80191c8:	68b9      	ldr	r1, [r7, #8]
 80191ca:	68f8      	ldr	r0, [r7, #12]
 80191cc:	f000 f83c 	bl	8019248 <lwip_sendto>
 80191d0:	4603      	mov	r3, r0
 80191d2:	e033      	b.n	801923c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d001      	beq.n	80191e2 <lwip_send+0x56>
 80191de:	2203      	movs	r2, #3
 80191e0:	e000      	b.n	80191e4 <lwip_send+0x58>
 80191e2:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80191e4:	683b      	ldr	r3, [r7, #0]
 80191e6:	105b      	asrs	r3, r3, #1
 80191e8:	b25b      	sxtb	r3, r3
 80191ea:	f003 0304 	and.w	r3, r3, #4
 80191ee:	b25b      	sxtb	r3, r3
 80191f0:	4313      	orrs	r3, r2
 80191f2:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 80191f4:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 80191f6:	2300      	movs	r3, #0
 80191f8:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80191fa:	69fb      	ldr	r3, [r7, #28]
 80191fc:	6818      	ldr	r0, [r3, #0]
 80191fe:	7efa      	ldrb	r2, [r7, #27]
 8019200:	f107 0310 	add.w	r3, r7, #16
 8019204:	9300      	str	r3, [sp, #0]
 8019206:	4613      	mov	r3, r2
 8019208:	687a      	ldr	r2, [r7, #4]
 801920a:	68b9      	ldr	r1, [r7, #8]
 801920c:	f7fd fac4 	bl	8016798 <netconn_write_partly>
 8019210:	4603      	mov	r3, r0
 8019212:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8019214:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019218:	4618      	mov	r0, r3
 801921a:	f7ff f883 	bl	8018324 <err_to_errno>
 801921e:	6178      	str	r0, [r7, #20]
 8019220:	697b      	ldr	r3, [r7, #20]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d002      	beq.n	801922c <lwip_send+0xa0>
 8019226:	4a07      	ldr	r2, [pc, #28]	@ (8019244 <lwip_send+0xb8>)
 8019228:	697b      	ldr	r3, [r7, #20]
 801922a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 801922c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d101      	bne.n	8019238 <lwip_send+0xac>
 8019234:	693b      	ldr	r3, [r7, #16]
 8019236:	e001      	b.n	801923c <lwip_send+0xb0>
 8019238:	f04f 33ff 	mov.w	r3, #4294967295
}
 801923c:	4618      	mov	r0, r3
 801923e:	3720      	adds	r7, #32
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}
 8019244:	20011c00 	.word	0x20011c00

08019248 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b08e      	sub	sp, #56	@ 0x38
 801924c:	af00      	add	r7, sp, #0
 801924e:	60f8      	str	r0, [r7, #12]
 8019250:	60b9      	str	r1, [r7, #8]
 8019252:	607a      	str	r2, [r7, #4]
 8019254:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8019256:	68f8      	ldr	r0, [r7, #12]
 8019258:	f7ff f952 	bl	8018500 <get_socket>
 801925c:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 801925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019260:	2b00      	cmp	r3, #0
 8019262:	d102      	bne.n	801926a <lwip_sendto+0x22>
    return -1;
 8019264:	f04f 33ff 	mov.w	r3, #4294967295
 8019268:	e093      	b.n	8019392 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 801926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	781b      	ldrb	r3, [r3, #0]
 8019270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019274:	2b10      	cmp	r3, #16
 8019276:	d107      	bne.n	8019288 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8019278:	683b      	ldr	r3, [r7, #0]
 801927a:	687a      	ldr	r2, [r7, #4]
 801927c:	68b9      	ldr	r1, [r7, #8]
 801927e:	68f8      	ldr	r0, [r7, #12]
 8019280:	f7ff ff84 	bl	801918c <lwip_send>
 8019284:	4603      	mov	r3, r0
 8019286:	e084      	b.n	8019392 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801928e:	d30a      	bcc.n	80192a6 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8019290:	235a      	movs	r3, #90	@ 0x5a
 8019292:	623b      	str	r3, [r7, #32]
 8019294:	6a3b      	ldr	r3, [r7, #32]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d002      	beq.n	80192a0 <lwip_sendto+0x58>
 801929a:	4a40      	ldr	r2, [pc, #256]	@ (801939c <lwip_sendto+0x154>)
 801929c:	6a3b      	ldr	r3, [r7, #32]
 801929e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80192a0:	f04f 33ff 	mov.w	r3, #4294967295
 80192a4:	e075      	b.n	8019392 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80192aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d102      	bne.n	80192b6 <lwip_sendto+0x6e>
 80192b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d023      	beq.n	80192fe <lwip_sendto+0xb6>
 80192b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192b8:	2b10      	cmp	r3, #16
 80192ba:	d10b      	bne.n	80192d4 <lwip_sendto+0x8c>
 80192bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d008      	beq.n	80192d4 <lwip_sendto+0x8c>
 80192c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192c4:	785b      	ldrb	r3, [r3, #1]
 80192c6:	2b02      	cmp	r3, #2
 80192c8:	d104      	bne.n	80192d4 <lwip_sendto+0x8c>
 80192ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192cc:	f003 0303 	and.w	r3, r3, #3
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d014      	beq.n	80192fe <lwip_sendto+0xb6>
 80192d4:	4b32      	ldr	r3, [pc, #200]	@ (80193a0 <lwip_sendto+0x158>)
 80192d6:	f240 6252 	movw	r2, #1618	@ 0x652
 80192da:	4932      	ldr	r1, [pc, #200]	@ (80193a4 <lwip_sendto+0x15c>)
 80192dc:	4832      	ldr	r0, [pc, #200]	@ (80193a8 <lwip_sendto+0x160>)
 80192de:	f00e fa45 	bl	802776c <iprintf>
 80192e2:	f06f 000f 	mvn.w	r0, #15
 80192e6:	f7ff f81d 	bl	8018324 <err_to_errno>
 80192ea:	62b8      	str	r0, [r7, #40]	@ 0x28
 80192ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d002      	beq.n	80192f8 <lwip_sendto+0xb0>
 80192f2:	4a2a      	ldr	r2, [pc, #168]	@ (801939c <lwip_sendto+0x154>)
 80192f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192f6:	6013      	str	r3, [r2, #0]
 80192f8:	f04f 33ff 	mov.w	r3, #4294967295
 80192fc:	e049      	b.n	8019392 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 80192fe:	2300      	movs	r3, #0
 8019300:	617b      	str	r3, [r7, #20]
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8019306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019308:	2b00      	cmp	r3, #0
 801930a:	d00a      	beq.n	8019322 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 801930c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801930e:	685b      	ldr	r3, [r3, #4]
 8019310:	61bb      	str	r3, [r7, #24]
 8019312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019314:	885b      	ldrh	r3, [r3, #2]
 8019316:	4618      	mov	r0, r3
 8019318:	f000 fbec 	bl	8019af4 <lwip_htons>
 801931c:	4603      	mov	r3, r0
 801931e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8019320:	e003      	b.n	801932a <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8019322:	2300      	movs	r3, #0
 8019324:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8019326:	2300      	movs	r3, #0
 8019328:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 801932a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801932c:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 801932e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8019330:	f107 0310 	add.w	r3, r7, #16
 8019334:	68b9      	ldr	r1, [r7, #8]
 8019336:	4618      	mov	r0, r3
 8019338:	f7ff f85a 	bl	80183f0 <netbuf_ref>
 801933c:	4603      	mov	r3, r0
 801933e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8019342:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8019346:	2b00      	cmp	r3, #0
 8019348:	d10a      	bne.n	8019360 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 801934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	f107 0210 	add.w	r2, r7, #16
 8019352:	4611      	mov	r1, r2
 8019354:	4618      	mov	r0, r3
 8019356:	f7fd f9f1 	bl	801673c <netconn_send>
 801935a:	4603      	mov	r3, r0
 801935c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8019360:	f107 0310 	add.w	r3, r7, #16
 8019364:	4618      	mov	r0, r3
 8019366:	f7ff f81b 	bl	80183a0 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 801936a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801936e:	4618      	mov	r0, r3
 8019370:	f7fe ffd8 	bl	8018324 <err_to_errno>
 8019374:	6278      	str	r0, [r7, #36]	@ 0x24
 8019376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019378:	2b00      	cmp	r3, #0
 801937a:	d002      	beq.n	8019382 <lwip_sendto+0x13a>
 801937c:	4a07      	ldr	r2, [pc, #28]	@ (801939c <lwip_sendto+0x154>)
 801937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019380:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8019382:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8019386:	2b00      	cmp	r3, #0
 8019388:	d101      	bne.n	801938e <lwip_sendto+0x146>
 801938a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801938c:	e001      	b.n	8019392 <lwip_sendto+0x14a>
 801938e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019392:	4618      	mov	r0, r3
 8019394:	3738      	adds	r7, #56	@ 0x38
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}
 801939a:	bf00      	nop
 801939c:	20011c00 	.word	0x20011c00
 80193a0:	080291f0 	.word	0x080291f0
 80193a4:	080294d0 	.word	0x080294d0
 80193a8:	08029244 	.word	0x08029244

080193ac <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b086      	sub	sp, #24
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	60f8      	str	r0, [r7, #12]
 80193b4:	60b9      	str	r1, [r7, #8]
 80193b6:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 80193b8:	68bb      	ldr	r3, [r7, #8]
 80193ba:	2b03      	cmp	r3, #3
 80193bc:	d009      	beq.n	80193d2 <lwip_socket+0x26>
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	2b03      	cmp	r3, #3
 80193c2:	dc23      	bgt.n	801940c <lwip_socket+0x60>
 80193c4:	68bb      	ldr	r3, [r7, #8]
 80193c6:	2b01      	cmp	r3, #1
 80193c8:	d019      	beq.n	80193fe <lwip_socket+0x52>
 80193ca:	68bb      	ldr	r3, [r7, #8]
 80193cc:	2b02      	cmp	r3, #2
 80193ce:	d009      	beq.n	80193e4 <lwip_socket+0x38>
 80193d0:	e01c      	b.n	801940c <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	b2db      	uxtb	r3, r3
 80193d6:	4a22      	ldr	r2, [pc, #136]	@ (8019460 <lwip_socket+0xb4>)
 80193d8:	4619      	mov	r1, r3
 80193da:	2040      	movs	r0, #64	@ 0x40
 80193dc:	f7fc fdb0 	bl	8015f40 <netconn_new_with_proto_and_callback>
 80193e0:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80193e2:	e019      	b.n	8019418 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	2b88      	cmp	r3, #136	@ 0x88
 80193e8:	d101      	bne.n	80193ee <lwip_socket+0x42>
 80193ea:	2321      	movs	r3, #33	@ 0x21
 80193ec:	e000      	b.n	80193f0 <lwip_socket+0x44>
 80193ee:	2320      	movs	r3, #32
 80193f0:	4a1b      	ldr	r2, [pc, #108]	@ (8019460 <lwip_socket+0xb4>)
 80193f2:	2100      	movs	r1, #0
 80193f4:	4618      	mov	r0, r3
 80193f6:	f7fc fda3 	bl	8015f40 <netconn_new_with_proto_and_callback>
 80193fa:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80193fc:	e00c      	b.n	8019418 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 80193fe:	4a18      	ldr	r2, [pc, #96]	@ (8019460 <lwip_socket+0xb4>)
 8019400:	2100      	movs	r1, #0
 8019402:	2010      	movs	r0, #16
 8019404:	f7fc fd9c 	bl	8015f40 <netconn_new_with_proto_and_callback>
 8019408:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 801940a:	e005      	b.n	8019418 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 801940c:	4b15      	ldr	r3, [pc, #84]	@ (8019464 <lwip_socket+0xb8>)
 801940e:	2216      	movs	r2, #22
 8019410:	601a      	str	r2, [r3, #0]
      return -1;
 8019412:	f04f 33ff 	mov.w	r3, #4294967295
 8019416:	e01e      	b.n	8019456 <lwip_socket+0xaa>
  }

  if (!conn) {
 8019418:	697b      	ldr	r3, [r7, #20]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d105      	bne.n	801942a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 801941e:	4b11      	ldr	r3, [pc, #68]	@ (8019464 <lwip_socket+0xb8>)
 8019420:	2269      	movs	r2, #105	@ 0x69
 8019422:	601a      	str	r2, [r3, #0]
    return -1;
 8019424:	f04f 33ff 	mov.w	r3, #4294967295
 8019428:	e015      	b.n	8019456 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 801942a:	2100      	movs	r1, #0
 801942c:	6978      	ldr	r0, [r7, #20]
 801942e:	f7ff f87f 	bl	8018530 <alloc_socket>
 8019432:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8019434:	693b      	ldr	r3, [r7, #16]
 8019436:	f1b3 3fff 	cmp.w	r3, #4294967295
 801943a:	d108      	bne.n	801944e <lwip_socket+0xa2>
    netconn_delete(conn);
 801943c:	6978      	ldr	r0, [r7, #20]
 801943e:	f7fc fe1d 	bl	801607c <netconn_delete>
    set_errno(ENFILE);
 8019442:	4b08      	ldr	r3, [pc, #32]	@ (8019464 <lwip_socket+0xb8>)
 8019444:	2217      	movs	r2, #23
 8019446:	601a      	str	r2, [r3, #0]
    return -1;
 8019448:	f04f 33ff 	mov.w	r3, #4294967295
 801944c:	e003      	b.n	8019456 <lwip_socket+0xaa>
  }
  conn->socket = i;
 801944e:	697b      	ldr	r3, [r7, #20]
 8019450:	693a      	ldr	r2, [r7, #16]
 8019452:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8019454:	693b      	ldr	r3, [r7, #16]
}
 8019456:	4618      	mov	r0, r3
 8019458:	3718      	adds	r7, #24
 801945a:	46bd      	mov	sp, r7
 801945c:	bd80      	pop	{r7, pc}
 801945e:	bf00      	nop
 8019460:	080194f1 	.word	0x080194f1
 8019464:	20011c00 	.word	0x20011c00

08019468 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8019468:	b480      	push	{r7}
 801946a:	b087      	sub	sp, #28
 801946c:	af00      	add	r7, sp, #0
 801946e:	60f8      	str	r0, [r7, #12]
 8019470:	60b9      	str	r1, [r7, #8]
 8019472:	607a      	str	r2, [r7, #4]
 8019474:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8019476:	2300      	movs	r3, #0
 8019478:	617b      	str	r3, [r7, #20]
 801947a:	e02c      	b.n	80194d6 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	695a      	ldr	r2, [r3, #20]
 8019480:	697b      	ldr	r3, [r7, #20]
 8019482:	00db      	lsls	r3, r3, #3
 8019484:	4413      	add	r3, r2
 8019486:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8019488:	693b      	ldr	r3, [r7, #16]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	68ba      	ldr	r2, [r7, #8]
 801948e:	429a      	cmp	r2, r3
 8019490:	d11e      	bne.n	80194d0 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d009      	beq.n	80194ac <lwip_poll_should_wake+0x44>
 8019498:	693b      	ldr	r3, [r7, #16]
 801949a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801949e:	b29b      	uxth	r3, r3
 80194a0:	f003 0301 	and.w	r3, r3, #1
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d001      	beq.n	80194ac <lwip_poll_should_wake+0x44>
        return 1;
 80194a8:	2301      	movs	r3, #1
 80194aa:	e01a      	b.n	80194e2 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80194ac:	683b      	ldr	r3, [r7, #0]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d009      	beq.n	80194c6 <lwip_poll_should_wake+0x5e>
 80194b2:	693b      	ldr	r3, [r7, #16]
 80194b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80194b8:	b29b      	uxth	r3, r3
 80194ba:	f003 0302 	and.w	r3, r3, #2
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d001      	beq.n	80194c6 <lwip_poll_should_wake+0x5e>
        return 1;
 80194c2:	2301      	movs	r3, #1
 80194c4:	e00d      	b.n	80194e2 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 80194c6:	6a3b      	ldr	r3, [r7, #32]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d001      	beq.n	80194d0 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 80194cc:	2301      	movs	r3, #1
 80194ce:	e008      	b.n	80194e2 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80194d0:	697b      	ldr	r3, [r7, #20]
 80194d2:	3301      	adds	r3, #1
 80194d4:	617b      	str	r3, [r7, #20]
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	699b      	ldr	r3, [r3, #24]
 80194da:	697a      	ldr	r2, [r7, #20]
 80194dc:	429a      	cmp	r2, r3
 80194de:	d3cd      	bcc.n	801947c <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 80194e0:	2300      	movs	r3, #0
}
 80194e2:	4618      	mov	r0, r3
 80194e4:	371c      	adds	r7, #28
 80194e6:	46bd      	mov	sp, r7
 80194e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ec:	4770      	bx	lr
	...

080194f0 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b08a      	sub	sp, #40	@ 0x28
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
 80194f8:	460b      	mov	r3, r1
 80194fa:	70fb      	strb	r3, [r7, #3]
 80194fc:	4613      	mov	r3, r2
 80194fe:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	2b00      	cmp	r3, #0
 8019504:	f000 80a4 	beq.w	8019650 <event_callback+0x160>
    s = conn->socket;
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	699b      	ldr	r3, [r3, #24]
 801950c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 801950e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019510:	2b00      	cmp	r3, #0
 8019512:	da18      	bge.n	8019546 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8019514:	f00d fc56 	bl	8026dc4 <sys_arch_protect>
 8019518:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	699b      	ldr	r3, [r3, #24]
 801951e:	2b00      	cmp	r3, #0
 8019520:	da0b      	bge.n	801953a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8019522:	78fb      	ldrb	r3, [r7, #3]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d104      	bne.n	8019532 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	699b      	ldr	r3, [r3, #24]
 801952c:	1e5a      	subs	r2, r3, #1
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8019532:	69f8      	ldr	r0, [r7, #28]
 8019534:	f00d fc54 	bl	8026de0 <sys_arch_unprotect>
        return;
 8019538:	e08d      	b.n	8019656 <event_callback+0x166>
      }
      s = conn->socket;
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	699b      	ldr	r3, [r3, #24]
 801953e:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 8019540:	69f8      	ldr	r0, [r7, #28]
 8019542:	f00d fc4d 	bl	8026de0 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8019546:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019548:	f7fe ffda 	bl	8018500 <get_socket>
 801954c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 801954e:	69bb      	ldr	r3, [r7, #24]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d07f      	beq.n	8019654 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8019554:	2301      	movs	r3, #1
 8019556:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8019558:	f00d fc34 	bl	8026dc4 <sys_arch_protect>
 801955c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 801955e:	78fb      	ldrb	r3, [r7, #3]
 8019560:	2b04      	cmp	r3, #4
 8019562:	d83e      	bhi.n	80195e2 <event_callback+0xf2>
 8019564:	a201      	add	r2, pc, #4	@ (adr r2, 801956c <event_callback+0x7c>)
 8019566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801956a:	bf00      	nop
 801956c:	08019581 	.word	0x08019581
 8019570:	080195a3 	.word	0x080195a3
 8019574:	080195bb 	.word	0x080195bb
 8019578:	080195cf 	.word	0x080195cf
 801957c:	080195db 	.word	0x080195db
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8019580:	69bb      	ldr	r3, [r7, #24]
 8019582:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019586:	b29b      	uxth	r3, r3
 8019588:	3301      	adds	r3, #1
 801958a:	b29b      	uxth	r3, r3
 801958c:	b21a      	sxth	r2, r3
 801958e:	69bb      	ldr	r3, [r7, #24]
 8019590:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8019592:	69bb      	ldr	r3, [r7, #24]
 8019594:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019598:	2b01      	cmp	r3, #1
 801959a:	dd2a      	ble.n	80195f2 <event_callback+0x102>
        check_waiters = 0;
 801959c:	2300      	movs	r3, #0
 801959e:	623b      	str	r3, [r7, #32]
      }
      break;
 80195a0:	e027      	b.n	80195f2 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80195a2:	69bb      	ldr	r3, [r7, #24]
 80195a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80195a8:	b29b      	uxth	r3, r3
 80195aa:	3b01      	subs	r3, #1
 80195ac:	b29b      	uxth	r3, r3
 80195ae:	b21a      	sxth	r2, r3
 80195b0:	69bb      	ldr	r3, [r7, #24]
 80195b2:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 80195b4:	2300      	movs	r3, #0
 80195b6:	623b      	str	r3, [r7, #32]
      break;
 80195b8:	e01c      	b.n	80195f4 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 80195ba:	69bb      	ldr	r3, [r7, #24]
 80195bc:	895b      	ldrh	r3, [r3, #10]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d001      	beq.n	80195c6 <event_callback+0xd6>
        check_waiters = 0;
 80195c2:	2300      	movs	r3, #0
 80195c4:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 80195c6:	69bb      	ldr	r3, [r7, #24]
 80195c8:	2201      	movs	r2, #1
 80195ca:	815a      	strh	r2, [r3, #10]
      break;
 80195cc:	e012      	b.n	80195f4 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 80195ce:	69bb      	ldr	r3, [r7, #24]
 80195d0:	2200      	movs	r2, #0
 80195d2:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 80195d4:	2300      	movs	r3, #0
 80195d6:	623b      	str	r3, [r7, #32]
      break;
 80195d8:	e00c      	b.n	80195f4 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 80195da:	69bb      	ldr	r3, [r7, #24]
 80195dc:	2201      	movs	r2, #1
 80195de:	819a      	strh	r2, [r3, #12]
      break;
 80195e0:	e008      	b.n	80195f4 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 80195e2:	4b1e      	ldr	r3, [pc, #120]	@ (801965c <event_callback+0x16c>)
 80195e4:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 80195e8:	491d      	ldr	r1, [pc, #116]	@ (8019660 <event_callback+0x170>)
 80195ea:	481e      	ldr	r0, [pc, #120]	@ (8019664 <event_callback+0x174>)
 80195ec:	f00e f8be 	bl	802776c <iprintf>
      break;
 80195f0:	e000      	b.n	80195f4 <event_callback+0x104>
      break;
 80195f2:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 80195f4:	69bb      	ldr	r3, [r7, #24]
 80195f6:	7b9b      	ldrb	r3, [r3, #14]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d025      	beq.n	8019648 <event_callback+0x158>
 80195fc:	6a3b      	ldr	r3, [r7, #32]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d022      	beq.n	8019648 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8019602:	69bb      	ldr	r3, [r7, #24]
 8019604:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8019608:	2b00      	cmp	r3, #0
 801960a:	bfcc      	ite	gt
 801960c:	2301      	movgt	r3, #1
 801960e:	2300      	movle	r3, #0
 8019610:	b2db      	uxtb	r3, r3
 8019612:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8019614:	69bb      	ldr	r3, [r7, #24]
 8019616:	895b      	ldrh	r3, [r3, #10]
 8019618:	2b00      	cmp	r3, #0
 801961a:	bf14      	ite	ne
 801961c:	2301      	movne	r3, #1
 801961e:	2300      	moveq	r3, #0
 8019620:	b2db      	uxtb	r3, r3
 8019622:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8019624:	69bb      	ldr	r3, [r7, #24]
 8019626:	899b      	ldrh	r3, [r3, #12]
 8019628:	2b00      	cmp	r3, #0
 801962a:	bf14      	ite	ne
 801962c:	2301      	movne	r3, #1
 801962e:	2300      	moveq	r3, #0
 8019630:	b2db      	uxtb	r3, r3
 8019632:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8019634:	69f8      	ldr	r0, [r7, #28]
 8019636:	f00d fbd3 	bl	8026de0 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	693a      	ldr	r2, [r7, #16]
 801963e:	6979      	ldr	r1, [r7, #20]
 8019640:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019642:	f000 f811 	bl	8019668 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8019646:	e006      	b.n	8019656 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8019648:	69f8      	ldr	r0, [r7, #28]
 801964a:	f00d fbc9 	bl	8026de0 <sys_arch_unprotect>
 801964e:	e002      	b.n	8019656 <event_callback+0x166>
    return;
 8019650:	bf00      	nop
 8019652:	e000      	b.n	8019656 <event_callback+0x166>
      return;
 8019654:	bf00      	nop
  }
  done_socket(sock);
}
 8019656:	3728      	adds	r7, #40	@ 0x28
 8019658:	46bd      	mov	sp, r7
 801965a:	bd80      	pop	{r7, pc}
 801965c:	080291f0 	.word	0x080291f0
 8019660:	0802956c 	.word	0x0802956c
 8019664:	08029244 	.word	0x08029244

08019668 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b088      	sub	sp, #32
 801966c:	af02      	add	r7, sp, #8
 801966e:	60f8      	str	r0, [r7, #12]
 8019670:	60b9      	str	r1, [r7, #8]
 8019672:	607a      	str	r2, [r7, #4]
 8019674:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8019676:	4b42      	ldr	r3, [pc, #264]	@ (8019780 <select_check_waiters+0x118>)
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	617b      	str	r3, [r7, #20]
 801967c:	e078      	b.n	8019770 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	69db      	ldr	r3, [r3, #28]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d171      	bne.n	801976a <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8019686:	2300      	movs	r3, #0
 8019688:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 801968a:	697b      	ldr	r3, [r7, #20]
 801968c:	695b      	ldr	r3, [r3, #20]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d009      	beq.n	80196a6 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8019692:	683b      	ldr	r3, [r7, #0]
 8019694:	9300      	str	r3, [sp, #0]
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	68ba      	ldr	r2, [r7, #8]
 801969a:	68f9      	ldr	r1, [r7, #12]
 801969c:	6978      	ldr	r0, [r7, #20]
 801969e:	f7ff fee3 	bl	8019468 <lwip_poll_should_wake>
 80196a2:	6138      	str	r0, [r7, #16]
 80196a4:	e056      	b.n	8019754 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80196a6:	68bb      	ldr	r3, [r7, #8]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d017      	beq.n	80196dc <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	689b      	ldr	r3, [r3, #8]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d013      	beq.n	80196dc <select_check_waiters+0x74>
 80196b4:	697b      	ldr	r3, [r7, #20]
 80196b6:	689a      	ldr	r2, [r3, #8]
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	da00      	bge.n	80196c0 <select_check_waiters+0x58>
 80196be:	331f      	adds	r3, #31
 80196c0:	115b      	asrs	r3, r3, #5
 80196c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	f003 031f 	and.w	r3, r3, #31
 80196cc:	fa22 f303 	lsr.w	r3, r2, r3
 80196d0:	f003 0301 	and.w	r3, r3, #1
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d001      	beq.n	80196dc <select_check_waiters+0x74>
            do_signal = 1;
 80196d8:	2301      	movs	r3, #1
 80196da:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d01a      	beq.n	8019718 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 80196e2:	693b      	ldr	r3, [r7, #16]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d117      	bne.n	8019718 <select_check_waiters+0xb0>
 80196e8:	697b      	ldr	r3, [r7, #20]
 80196ea:	68db      	ldr	r3, [r3, #12]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d013      	beq.n	8019718 <select_check_waiters+0xb0>
 80196f0:	697b      	ldr	r3, [r7, #20]
 80196f2:	68da      	ldr	r2, [r3, #12]
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	da00      	bge.n	80196fc <select_check_waiters+0x94>
 80196fa:	331f      	adds	r3, #31
 80196fc:	115b      	asrs	r3, r3, #5
 80196fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	f003 031f 	and.w	r3, r3, #31
 8019708:	fa22 f303 	lsr.w	r3, r2, r3
 801970c:	f003 0301 	and.w	r3, r3, #1
 8019710:	2b00      	cmp	r3, #0
 8019712:	d001      	beq.n	8019718 <select_check_waiters+0xb0>
            do_signal = 1;
 8019714:	2301      	movs	r3, #1
 8019716:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8019718:	683b      	ldr	r3, [r7, #0]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d01a      	beq.n	8019754 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 801971e:	693b      	ldr	r3, [r7, #16]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d117      	bne.n	8019754 <select_check_waiters+0xec>
 8019724:	697b      	ldr	r3, [r7, #20]
 8019726:	691b      	ldr	r3, [r3, #16]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d013      	beq.n	8019754 <select_check_waiters+0xec>
 801972c:	697b      	ldr	r3, [r7, #20]
 801972e:	691a      	ldr	r2, [r3, #16]
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	2b00      	cmp	r3, #0
 8019734:	da00      	bge.n	8019738 <select_check_waiters+0xd0>
 8019736:	331f      	adds	r3, #31
 8019738:	115b      	asrs	r3, r3, #5
 801973a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	f003 031f 	and.w	r3, r3, #31
 8019744:	fa22 f303 	lsr.w	r3, r2, r3
 8019748:	f003 0301 	and.w	r3, r3, #1
 801974c:	2b00      	cmp	r3, #0
 801974e:	d001      	beq.n	8019754 <select_check_waiters+0xec>
            do_signal = 1;
 8019750:	2301      	movs	r3, #1
 8019752:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8019754:	693b      	ldr	r3, [r7, #16]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d007      	beq.n	801976a <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 801975a:	697b      	ldr	r3, [r7, #20]
 801975c:	2201      	movs	r2, #1
 801975e:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8019760:	697b      	ldr	r3, [r7, #20]
 8019762:	3320      	adds	r3, #32
 8019764:	4618      	mov	r0, r3
 8019766:	f00d fa89 	bl	8026c7c <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 801976a:	697b      	ldr	r3, [r7, #20]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	617b      	str	r3, [r7, #20]
 8019770:	697b      	ldr	r3, [r7, #20]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d183      	bne.n	801967e <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8019776:	bf00      	nop
 8019778:	bf00      	nop
 801977a:	3718      	adds	r7, #24
 801977c:	46bd      	mov	sp, r7
 801977e:	bd80      	pop	{r7, pc}
 8019780:	2000d9d8 	.word	0x2000d9d8

08019784 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8019784:	b580      	push	{r7, lr}
 8019786:	b084      	sub	sp, #16
 8019788:	af00      	add	r7, sp, #0
 801978a:	6078      	str	r0, [r7, #4]
 801978c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801978e:	f008 fa4f 	bl	8021c30 <sys_timeouts_sleeptime>
 8019792:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801979a:	d10b      	bne.n	80197b4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801979c:	4813      	ldr	r0, [pc, #76]	@ (80197ec <tcpip_timeouts_mbox_fetch+0x68>)
 801979e:	f00d fade 	bl	8026d5e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80197a2:	2200      	movs	r2, #0
 80197a4:	6839      	ldr	r1, [r7, #0]
 80197a6:	6878      	ldr	r0, [r7, #4]
 80197a8:	f00d f996 	bl	8026ad8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80197ac:	480f      	ldr	r0, [pc, #60]	@ (80197ec <tcpip_timeouts_mbox_fetch+0x68>)
 80197ae:	f00d fac7 	bl	8026d40 <sys_mutex_lock>
    return;
 80197b2:	e018      	b.n	80197e6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d102      	bne.n	80197c0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80197ba:	f008 f9ff 	bl	8021bbc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80197be:	e7e6      	b.n	801978e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80197c0:	480a      	ldr	r0, [pc, #40]	@ (80197ec <tcpip_timeouts_mbox_fetch+0x68>)
 80197c2:	f00d facc 	bl	8026d5e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80197c6:	68fa      	ldr	r2, [r7, #12]
 80197c8:	6839      	ldr	r1, [r7, #0]
 80197ca:	6878      	ldr	r0, [r7, #4]
 80197cc:	f00d f984 	bl	8026ad8 <sys_arch_mbox_fetch>
 80197d0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80197d2:	4806      	ldr	r0, [pc, #24]	@ (80197ec <tcpip_timeouts_mbox_fetch+0x68>)
 80197d4:	f00d fab4 	bl	8026d40 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80197d8:	68bb      	ldr	r3, [r7, #8]
 80197da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197de:	d102      	bne.n	80197e6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80197e0:	f008 f9ec 	bl	8021bbc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80197e4:	e7d3      	b.n	801978e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80197e6:	3710      	adds	r7, #16
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}
 80197ec:	2000d9e8 	.word	0x2000d9e8

080197f0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b084      	sub	sp, #16
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80197f8:	4810      	ldr	r0, [pc, #64]	@ (801983c <tcpip_thread+0x4c>)
 80197fa:	f00d faa1 	bl	8026d40 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80197fe:	4b10      	ldr	r3, [pc, #64]	@ (8019840 <tcpip_thread+0x50>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d005      	beq.n	8019812 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8019806:	4b0e      	ldr	r3, [pc, #56]	@ (8019840 <tcpip_thread+0x50>)
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	4a0e      	ldr	r2, [pc, #56]	@ (8019844 <tcpip_thread+0x54>)
 801980c:	6812      	ldr	r2, [r2, #0]
 801980e:	4610      	mov	r0, r2
 8019810:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8019812:	f107 030c 	add.w	r3, r7, #12
 8019816:	4619      	mov	r1, r3
 8019818:	480b      	ldr	r0, [pc, #44]	@ (8019848 <tcpip_thread+0x58>)
 801981a:	f7ff ffb3 	bl	8019784 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d106      	bne.n	8019832 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8019824:	4b09      	ldr	r3, [pc, #36]	@ (801984c <tcpip_thread+0x5c>)
 8019826:	2291      	movs	r2, #145	@ 0x91
 8019828:	4909      	ldr	r1, [pc, #36]	@ (8019850 <tcpip_thread+0x60>)
 801982a:	480a      	ldr	r0, [pc, #40]	@ (8019854 <tcpip_thread+0x64>)
 801982c:	f00d ff9e 	bl	802776c <iprintf>
      continue;
 8019830:	e003      	b.n	801983a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	4618      	mov	r0, r3
 8019836:	f000 f80f 	bl	8019858 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801983a:	e7ea      	b.n	8019812 <tcpip_thread+0x22>
 801983c:	2000d9e8 	.word	0x2000d9e8
 8019840:	2000d9dc 	.word	0x2000d9dc
 8019844:	2000d9e0 	.word	0x2000d9e0
 8019848:	2000d9e4 	.word	0x2000d9e4
 801984c:	080295c0 	.word	0x080295c0
 8019850:	080295f0 	.word	0x080295f0
 8019854:	08029610 	.word	0x08029610

08019858 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b082      	sub	sp, #8
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	781b      	ldrb	r3, [r3, #0]
 8019864:	2b02      	cmp	r3, #2
 8019866:	d026      	beq.n	80198b6 <tcpip_thread_handle_msg+0x5e>
 8019868:	2b02      	cmp	r3, #2
 801986a:	dc2b      	bgt.n	80198c4 <tcpip_thread_handle_msg+0x6c>
 801986c:	2b00      	cmp	r3, #0
 801986e:	d002      	beq.n	8019876 <tcpip_thread_handle_msg+0x1e>
 8019870:	2b01      	cmp	r3, #1
 8019872:	d015      	beq.n	80198a0 <tcpip_thread_handle_msg+0x48>
 8019874:	e026      	b.n	80198c4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	68db      	ldr	r3, [r3, #12]
 801987a:	687a      	ldr	r2, [r7, #4]
 801987c:	6850      	ldr	r0, [r2, #4]
 801987e:	687a      	ldr	r2, [r7, #4]
 8019880:	6892      	ldr	r2, [r2, #8]
 8019882:	4611      	mov	r1, r2
 8019884:	4798      	blx	r3
 8019886:	4603      	mov	r3, r0
 8019888:	2b00      	cmp	r3, #0
 801988a:	d004      	beq.n	8019896 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	685b      	ldr	r3, [r3, #4]
 8019890:	4618      	mov	r0, r3
 8019892:	f001 fd5f 	bl	801b354 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8019896:	6879      	ldr	r1, [r7, #4]
 8019898:	2009      	movs	r0, #9
 801989a:	f000 fe79 	bl	801a590 <memp_free>
      break;
 801989e:	e018      	b.n	80198d2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	685b      	ldr	r3, [r3, #4]
 80198a4:	687a      	ldr	r2, [r7, #4]
 80198a6:	6892      	ldr	r2, [r2, #8]
 80198a8:	4610      	mov	r0, r2
 80198aa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80198ac:	6879      	ldr	r1, [r7, #4]
 80198ae:	2008      	movs	r0, #8
 80198b0:	f000 fe6e 	bl	801a590 <memp_free>
      break;
 80198b4:	e00d      	b.n	80198d2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	685b      	ldr	r3, [r3, #4]
 80198ba:	687a      	ldr	r2, [r7, #4]
 80198bc:	6892      	ldr	r2, [r2, #8]
 80198be:	4610      	mov	r0, r2
 80198c0:	4798      	blx	r3
      break;
 80198c2:	e006      	b.n	80198d2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80198c4:	4b05      	ldr	r3, [pc, #20]	@ (80198dc <tcpip_thread_handle_msg+0x84>)
 80198c6:	22cf      	movs	r2, #207	@ 0xcf
 80198c8:	4905      	ldr	r1, [pc, #20]	@ (80198e0 <tcpip_thread_handle_msg+0x88>)
 80198ca:	4806      	ldr	r0, [pc, #24]	@ (80198e4 <tcpip_thread_handle_msg+0x8c>)
 80198cc:	f00d ff4e 	bl	802776c <iprintf>
      break;
 80198d0:	bf00      	nop
  }
}
 80198d2:	bf00      	nop
 80198d4:	3708      	adds	r7, #8
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}
 80198da:	bf00      	nop
 80198dc:	080295c0 	.word	0x080295c0
 80198e0:	080295f0 	.word	0x080295f0
 80198e4:	08029610 	.word	0x08029610

080198e8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b086      	sub	sp, #24
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	60f8      	str	r0, [r7, #12]
 80198f0:	60b9      	str	r1, [r7, #8]
 80198f2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80198f4:	481a      	ldr	r0, [pc, #104]	@ (8019960 <tcpip_inpkt+0x78>)
 80198f6:	f00d f94a 	bl	8026b8e <sys_mbox_valid>
 80198fa:	4603      	mov	r3, r0
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d105      	bne.n	801990c <tcpip_inpkt+0x24>
 8019900:	4b18      	ldr	r3, [pc, #96]	@ (8019964 <tcpip_inpkt+0x7c>)
 8019902:	22fc      	movs	r2, #252	@ 0xfc
 8019904:	4918      	ldr	r1, [pc, #96]	@ (8019968 <tcpip_inpkt+0x80>)
 8019906:	4819      	ldr	r0, [pc, #100]	@ (801996c <tcpip_inpkt+0x84>)
 8019908:	f00d ff30 	bl	802776c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801990c:	2009      	movs	r0, #9
 801990e:	f000 fdc9 	bl	801a4a4 <memp_malloc>
 8019912:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8019914:	697b      	ldr	r3, [r7, #20]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d102      	bne.n	8019920 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801991a:	f04f 33ff 	mov.w	r3, #4294967295
 801991e:	e01a      	b.n	8019956 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8019920:	697b      	ldr	r3, [r7, #20]
 8019922:	2200      	movs	r2, #0
 8019924:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8019926:	697b      	ldr	r3, [r7, #20]
 8019928:	68fa      	ldr	r2, [r7, #12]
 801992a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801992c:	697b      	ldr	r3, [r7, #20]
 801992e:	68ba      	ldr	r2, [r7, #8]
 8019930:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8019932:	697b      	ldr	r3, [r7, #20]
 8019934:	687a      	ldr	r2, [r7, #4]
 8019936:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019938:	6979      	ldr	r1, [r7, #20]
 801993a:	4809      	ldr	r0, [pc, #36]	@ (8019960 <tcpip_inpkt+0x78>)
 801993c:	f00d f8b2 	bl	8026aa4 <sys_mbox_trypost>
 8019940:	4603      	mov	r3, r0
 8019942:	2b00      	cmp	r3, #0
 8019944:	d006      	beq.n	8019954 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8019946:	6979      	ldr	r1, [r7, #20]
 8019948:	2009      	movs	r0, #9
 801994a:	f000 fe21 	bl	801a590 <memp_free>
    return ERR_MEM;
 801994e:	f04f 33ff 	mov.w	r3, #4294967295
 8019952:	e000      	b.n	8019956 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8019954:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8019956:	4618      	mov	r0, r3
 8019958:	3718      	adds	r7, #24
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	2000d9e4 	.word	0x2000d9e4
 8019964:	080295c0 	.word	0x080295c0
 8019968:	08029638 	.word	0x08029638
 801996c:	08029610 	.word	0x08029610

08019970 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8019970:	b580      	push	{r7, lr}
 8019972:	b082      	sub	sp, #8
 8019974:	af00      	add	r7, sp, #0
 8019976:	6078      	str	r0, [r7, #4]
 8019978:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801997a:	683b      	ldr	r3, [r7, #0]
 801997c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019980:	f003 0318 	and.w	r3, r3, #24
 8019984:	2b00      	cmp	r3, #0
 8019986:	d006      	beq.n	8019996 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8019988:	4a08      	ldr	r2, [pc, #32]	@ (80199ac <tcpip_input+0x3c>)
 801998a:	6839      	ldr	r1, [r7, #0]
 801998c:	6878      	ldr	r0, [r7, #4]
 801998e:	f7ff ffab 	bl	80198e8 <tcpip_inpkt>
 8019992:	4603      	mov	r3, r0
 8019994:	e005      	b.n	80199a2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8019996:	4a06      	ldr	r2, [pc, #24]	@ (80199b0 <tcpip_input+0x40>)
 8019998:	6839      	ldr	r1, [r7, #0]
 801999a:	6878      	ldr	r0, [r7, #4]
 801999c:	f7ff ffa4 	bl	80198e8 <tcpip_inpkt>
 80199a0:	4603      	mov	r3, r0
}
 80199a2:	4618      	mov	r0, r3
 80199a4:	3708      	adds	r7, #8
 80199a6:	46bd      	mov	sp, r7
 80199a8:	bd80      	pop	{r7, pc}
 80199aa:	bf00      	nop
 80199ac:	08026891 	.word	0x08026891
 80199b0:	0802575d 	.word	0x0802575d

080199b4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b084      	sub	sp, #16
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	6078      	str	r0, [r7, #4]
 80199bc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80199be:	4819      	ldr	r0, [pc, #100]	@ (8019a24 <tcpip_try_callback+0x70>)
 80199c0:	f00d f8e5 	bl	8026b8e <sys_mbox_valid>
 80199c4:	4603      	mov	r3, r0
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d106      	bne.n	80199d8 <tcpip_try_callback+0x24>
 80199ca:	4b17      	ldr	r3, [pc, #92]	@ (8019a28 <tcpip_try_callback+0x74>)
 80199cc:	f240 125d 	movw	r2, #349	@ 0x15d
 80199d0:	4916      	ldr	r1, [pc, #88]	@ (8019a2c <tcpip_try_callback+0x78>)
 80199d2:	4817      	ldr	r0, [pc, #92]	@ (8019a30 <tcpip_try_callback+0x7c>)
 80199d4:	f00d feca 	bl	802776c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80199d8:	2008      	movs	r0, #8
 80199da:	f000 fd63 	bl	801a4a4 <memp_malloc>
 80199de:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d102      	bne.n	80199ec <tcpip_try_callback+0x38>
    return ERR_MEM;
 80199e6:	f04f 33ff 	mov.w	r3, #4294967295
 80199ea:	e017      	b.n	8019a1c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	2201      	movs	r2, #1
 80199f0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	687a      	ldr	r2, [r7, #4]
 80199f6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	683a      	ldr	r2, [r7, #0]
 80199fc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80199fe:	68f9      	ldr	r1, [r7, #12]
 8019a00:	4808      	ldr	r0, [pc, #32]	@ (8019a24 <tcpip_try_callback+0x70>)
 8019a02:	f00d f84f 	bl	8026aa4 <sys_mbox_trypost>
 8019a06:	4603      	mov	r3, r0
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d006      	beq.n	8019a1a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8019a0c:	68f9      	ldr	r1, [r7, #12]
 8019a0e:	2008      	movs	r0, #8
 8019a10:	f000 fdbe 	bl	801a590 <memp_free>
    return ERR_MEM;
 8019a14:	f04f 33ff 	mov.w	r3, #4294967295
 8019a18:	e000      	b.n	8019a1c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8019a1a:	2300      	movs	r3, #0
}
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	3710      	adds	r7, #16
 8019a20:	46bd      	mov	sp, r7
 8019a22:	bd80      	pop	{r7, pc}
 8019a24:	2000d9e4 	.word	0x2000d9e4
 8019a28:	080295c0 	.word	0x080295c0
 8019a2c:	08029638 	.word	0x08029638
 8019a30:	08029610 	.word	0x08029610

08019a34 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8019a34:	b580      	push	{r7, lr}
 8019a36:	b084      	sub	sp, #16
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	60f8      	str	r0, [r7, #12]
 8019a3c:	60b9      	str	r1, [r7, #8]
 8019a3e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8019a40:	4806      	ldr	r0, [pc, #24]	@ (8019a5c <tcpip_send_msg_wait_sem+0x28>)
 8019a42:	f00d f97d 	bl	8026d40 <sys_mutex_lock>
  fn(apimsg);
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	68b8      	ldr	r0, [r7, #8]
 8019a4a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8019a4c:	4803      	ldr	r0, [pc, #12]	@ (8019a5c <tcpip_send_msg_wait_sem+0x28>)
 8019a4e:	f00d f986 	bl	8026d5e <sys_mutex_unlock>
  return ERR_OK;
 8019a52:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8019a54:	4618      	mov	r0, r3
 8019a56:	3710      	adds	r7, #16
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	bd80      	pop	{r7, pc}
 8019a5c:	2000d9e8 	.word	0x2000d9e8

08019a60 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b084      	sub	sp, #16
 8019a64:	af02      	add	r7, sp, #8
 8019a66:	6078      	str	r0, [r7, #4]
 8019a68:	6039      	str	r1, [r7, #0]
  lwip_init();
 8019a6a:	f000 f871 	bl	8019b50 <lwip_init>

  tcpip_init_done = initfunc;
 8019a6e:	4a17      	ldr	r2, [pc, #92]	@ (8019acc <tcpip_init+0x6c>)
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8019a74:	4a16      	ldr	r2, [pc, #88]	@ (8019ad0 <tcpip_init+0x70>)
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8019a7a:	2106      	movs	r1, #6
 8019a7c:	4815      	ldr	r0, [pc, #84]	@ (8019ad4 <tcpip_init+0x74>)
 8019a7e:	f00c ffdd 	bl	8026a3c <sys_mbox_new>
 8019a82:	4603      	mov	r3, r0
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d006      	beq.n	8019a96 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8019a88:	4b13      	ldr	r3, [pc, #76]	@ (8019ad8 <tcpip_init+0x78>)
 8019a8a:	f240 2261 	movw	r2, #609	@ 0x261
 8019a8e:	4913      	ldr	r1, [pc, #76]	@ (8019adc <tcpip_init+0x7c>)
 8019a90:	4813      	ldr	r0, [pc, #76]	@ (8019ae0 <tcpip_init+0x80>)
 8019a92:	f00d fe6b 	bl	802776c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8019a96:	4813      	ldr	r0, [pc, #76]	@ (8019ae4 <tcpip_init+0x84>)
 8019a98:	f00d f936 	bl	8026d08 <sys_mutex_new>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d006      	beq.n	8019ab0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8019aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8019ad8 <tcpip_init+0x78>)
 8019aa4:	f240 2265 	movw	r2, #613	@ 0x265
 8019aa8:	490f      	ldr	r1, [pc, #60]	@ (8019ae8 <tcpip_init+0x88>)
 8019aaa:	480d      	ldr	r0, [pc, #52]	@ (8019ae0 <tcpip_init+0x80>)
 8019aac:	f00d fe5e 	bl	802776c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	9300      	str	r3, [sp, #0]
 8019ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019ab8:	2200      	movs	r2, #0
 8019aba:	490c      	ldr	r1, [pc, #48]	@ (8019aec <tcpip_init+0x8c>)
 8019abc:	480c      	ldr	r0, [pc, #48]	@ (8019af0 <tcpip_init+0x90>)
 8019abe:	f00d f95b 	bl	8026d78 <sys_thread_new>
}
 8019ac2:	bf00      	nop
 8019ac4:	3708      	adds	r7, #8
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	bd80      	pop	{r7, pc}
 8019aca:	bf00      	nop
 8019acc:	2000d9dc 	.word	0x2000d9dc
 8019ad0:	2000d9e0 	.word	0x2000d9e0
 8019ad4:	2000d9e4 	.word	0x2000d9e4
 8019ad8:	080295c0 	.word	0x080295c0
 8019adc:	08029648 	.word	0x08029648
 8019ae0:	08029610 	.word	0x08029610
 8019ae4:	2000d9e8 	.word	0x2000d9e8
 8019ae8:	0802966c 	.word	0x0802966c
 8019aec:	080197f1 	.word	0x080197f1
 8019af0:	08029690 	.word	0x08029690

08019af4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8019af4:	b480      	push	{r7}
 8019af6:	b083      	sub	sp, #12
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	4603      	mov	r3, r0
 8019afc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8019afe:	88fb      	ldrh	r3, [r7, #6]
 8019b00:	021b      	lsls	r3, r3, #8
 8019b02:	b21a      	sxth	r2, r3
 8019b04:	88fb      	ldrh	r3, [r7, #6]
 8019b06:	0a1b      	lsrs	r3, r3, #8
 8019b08:	b29b      	uxth	r3, r3
 8019b0a:	b21b      	sxth	r3, r3
 8019b0c:	4313      	orrs	r3, r2
 8019b0e:	b21b      	sxth	r3, r3
 8019b10:	b29b      	uxth	r3, r3
}
 8019b12:	4618      	mov	r0, r3
 8019b14:	370c      	adds	r7, #12
 8019b16:	46bd      	mov	sp, r7
 8019b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b1c:	4770      	bx	lr

08019b1e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8019b1e:	b480      	push	{r7}
 8019b20:	b083      	sub	sp, #12
 8019b22:	af00      	add	r7, sp, #0
 8019b24:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	061a      	lsls	r2, r3, #24
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	021b      	lsls	r3, r3, #8
 8019b2e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8019b32:	431a      	orrs	r2, r3
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	0a1b      	lsrs	r3, r3, #8
 8019b38:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8019b3c:	431a      	orrs	r2, r3
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	0e1b      	lsrs	r3, r3, #24
 8019b42:	4313      	orrs	r3, r2
}
 8019b44:	4618      	mov	r0, r3
 8019b46:	370c      	adds	r7, #12
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4e:	4770      	bx	lr

08019b50 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b082      	sub	sp, #8
 8019b54:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8019b56:	2300      	movs	r3, #0
 8019b58:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8019b5a:	f00d f8c7 	bl	8026cec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8019b5e:	f000 f8d5 	bl	8019d0c <mem_init>
  memp_init();
 8019b62:	f000 fc31 	bl	801a3c8 <memp_init>
  pbuf_init();
  netif_init();
 8019b66:	f000 fd3d 	bl	801a5e4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8019b6a:	f008 f899 	bl	8021ca0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019b6e:	f001 fe9b 	bl	801b8a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8019b72:	f007 ffdb 	bl	8021b2c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8019b76:	bf00      	nop
 8019b78:	3708      	adds	r7, #8
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	bd80      	pop	{r7, pc}
	...

08019b80 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8019b80:	b480      	push	{r7}
 8019b82:	b083      	sub	sp, #12
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	4603      	mov	r3, r0
 8019b88:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8019b8a:	4b05      	ldr	r3, [pc, #20]	@ (8019ba0 <ptr_to_mem+0x20>)
 8019b8c:	681a      	ldr	r2, [r3, #0]
 8019b8e:	88fb      	ldrh	r3, [r7, #6]
 8019b90:	4413      	add	r3, r2
}
 8019b92:	4618      	mov	r0, r3
 8019b94:	370c      	adds	r7, #12
 8019b96:	46bd      	mov	sp, r7
 8019b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b9c:	4770      	bx	lr
 8019b9e:	bf00      	nop
 8019ba0:	2000e058 	.word	0x2000e058

08019ba4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8019ba4:	b480      	push	{r7}
 8019ba6:	b083      	sub	sp, #12
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8019bac:	4b05      	ldr	r3, [pc, #20]	@ (8019bc4 <mem_to_ptr+0x20>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	687a      	ldr	r2, [r7, #4]
 8019bb2:	1ad3      	subs	r3, r2, r3
 8019bb4:	b29b      	uxth	r3, r3
}
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	370c      	adds	r7, #12
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bc0:	4770      	bx	lr
 8019bc2:	bf00      	nop
 8019bc4:	2000e058 	.word	0x2000e058

08019bc8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8019bc8:	b590      	push	{r4, r7, lr}
 8019bca:	b085      	sub	sp, #20
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8019bd0:	4b45      	ldr	r3, [pc, #276]	@ (8019ce8 <plug_holes+0x120>)
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	687a      	ldr	r2, [r7, #4]
 8019bd6:	429a      	cmp	r2, r3
 8019bd8:	d206      	bcs.n	8019be8 <plug_holes+0x20>
 8019bda:	4b44      	ldr	r3, [pc, #272]	@ (8019cec <plug_holes+0x124>)
 8019bdc:	f240 12df 	movw	r2, #479	@ 0x1df
 8019be0:	4943      	ldr	r1, [pc, #268]	@ (8019cf0 <plug_holes+0x128>)
 8019be2:	4844      	ldr	r0, [pc, #272]	@ (8019cf4 <plug_holes+0x12c>)
 8019be4:	f00d fdc2 	bl	802776c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8019be8:	4b43      	ldr	r3, [pc, #268]	@ (8019cf8 <plug_holes+0x130>)
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	687a      	ldr	r2, [r7, #4]
 8019bee:	429a      	cmp	r2, r3
 8019bf0:	d306      	bcc.n	8019c00 <plug_holes+0x38>
 8019bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8019cec <plug_holes+0x124>)
 8019bf4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8019bf8:	4940      	ldr	r1, [pc, #256]	@ (8019cfc <plug_holes+0x134>)
 8019bfa:	483e      	ldr	r0, [pc, #248]	@ (8019cf4 <plug_holes+0x12c>)
 8019bfc:	f00d fdb6 	bl	802776c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	791b      	ldrb	r3, [r3, #4]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d006      	beq.n	8019c16 <plug_holes+0x4e>
 8019c08:	4b38      	ldr	r3, [pc, #224]	@ (8019cec <plug_holes+0x124>)
 8019c0a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8019c0e:	493c      	ldr	r1, [pc, #240]	@ (8019d00 <plug_holes+0x138>)
 8019c10:	4838      	ldr	r0, [pc, #224]	@ (8019cf4 <plug_holes+0x12c>)
 8019c12:	f00d fdab 	bl	802776c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	881b      	ldrh	r3, [r3, #0]
 8019c1a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8019c1e:	d906      	bls.n	8019c2e <plug_holes+0x66>
 8019c20:	4b32      	ldr	r3, [pc, #200]	@ (8019cec <plug_holes+0x124>)
 8019c22:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8019c26:	4937      	ldr	r1, [pc, #220]	@ (8019d04 <plug_holes+0x13c>)
 8019c28:	4832      	ldr	r0, [pc, #200]	@ (8019cf4 <plug_holes+0x12c>)
 8019c2a:	f00d fd9f 	bl	802776c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	881b      	ldrh	r3, [r3, #0]
 8019c32:	4618      	mov	r0, r3
 8019c34:	f7ff ffa4 	bl	8019b80 <ptr_to_mem>
 8019c38:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8019c3a:	687a      	ldr	r2, [r7, #4]
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	429a      	cmp	r2, r3
 8019c40:	d024      	beq.n	8019c8c <plug_holes+0xc4>
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	791b      	ldrb	r3, [r3, #4]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d120      	bne.n	8019c8c <plug_holes+0xc4>
 8019c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8019cf8 <plug_holes+0x130>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	68fa      	ldr	r2, [r7, #12]
 8019c50:	429a      	cmp	r2, r3
 8019c52:	d01b      	beq.n	8019c8c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8019c54:	4b2c      	ldr	r3, [pc, #176]	@ (8019d08 <plug_holes+0x140>)
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	68fa      	ldr	r2, [r7, #12]
 8019c5a:	429a      	cmp	r2, r3
 8019c5c:	d102      	bne.n	8019c64 <plug_holes+0x9c>
      lfree = mem;
 8019c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8019d08 <plug_holes+0x140>)
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	881a      	ldrh	r2, [r3, #0]
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	881b      	ldrh	r3, [r3, #0]
 8019c70:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8019c74:	d00a      	beq.n	8019c8c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	881b      	ldrh	r3, [r3, #0]
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f7ff ff80 	bl	8019b80 <ptr_to_mem>
 8019c80:	4604      	mov	r4, r0
 8019c82:	6878      	ldr	r0, [r7, #4]
 8019c84:	f7ff ff8e 	bl	8019ba4 <mem_to_ptr>
 8019c88:	4603      	mov	r3, r0
 8019c8a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	885b      	ldrh	r3, [r3, #2]
 8019c90:	4618      	mov	r0, r3
 8019c92:	f7ff ff75 	bl	8019b80 <ptr_to_mem>
 8019c96:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8019c98:	68ba      	ldr	r2, [r7, #8]
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	429a      	cmp	r2, r3
 8019c9e:	d01f      	beq.n	8019ce0 <plug_holes+0x118>
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	791b      	ldrb	r3, [r3, #4]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d11b      	bne.n	8019ce0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8019ca8:	4b17      	ldr	r3, [pc, #92]	@ (8019d08 <plug_holes+0x140>)
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	687a      	ldr	r2, [r7, #4]
 8019cae:	429a      	cmp	r2, r3
 8019cb0:	d102      	bne.n	8019cb8 <plug_holes+0xf0>
      lfree = pmem;
 8019cb2:	4a15      	ldr	r2, [pc, #84]	@ (8019d08 <plug_holes+0x140>)
 8019cb4:	68bb      	ldr	r3, [r7, #8]
 8019cb6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	881a      	ldrh	r2, [r3, #0]
 8019cbc:	68bb      	ldr	r3, [r7, #8]
 8019cbe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	881b      	ldrh	r3, [r3, #0]
 8019cc4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8019cc8:	d00a      	beq.n	8019ce0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	881b      	ldrh	r3, [r3, #0]
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f7ff ff56 	bl	8019b80 <ptr_to_mem>
 8019cd4:	4604      	mov	r4, r0
 8019cd6:	68b8      	ldr	r0, [r7, #8]
 8019cd8:	f7ff ff64 	bl	8019ba4 <mem_to_ptr>
 8019cdc:	4603      	mov	r3, r0
 8019cde:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8019ce0:	bf00      	nop
 8019ce2:	3714      	adds	r7, #20
 8019ce4:	46bd      	mov	sp, r7
 8019ce6:	bd90      	pop	{r4, r7, pc}
 8019ce8:	2000e058 	.word	0x2000e058
 8019cec:	080296a0 	.word	0x080296a0
 8019cf0:	080296d0 	.word	0x080296d0
 8019cf4:	080296e8 	.word	0x080296e8
 8019cf8:	2000e05c 	.word	0x2000e05c
 8019cfc:	08029710 	.word	0x08029710
 8019d00:	0802972c 	.word	0x0802972c
 8019d04:	08029748 	.word	0x08029748
 8019d08:	2000e064 	.word	0x2000e064

08019d0c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b082      	sub	sp, #8
 8019d10:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019d12:	4b1f      	ldr	r3, [pc, #124]	@ (8019d90 <mem_init+0x84>)
 8019d14:	3303      	adds	r3, #3
 8019d16:	f023 0303 	bic.w	r3, r3, #3
 8019d1a:	461a      	mov	r2, r3
 8019d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8019d94 <mem_init+0x88>)
 8019d1e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8019d20:	4b1c      	ldr	r3, [pc, #112]	@ (8019d94 <mem_init+0x88>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8019d2c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	2200      	movs	r2, #0
 8019d32:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	2200      	movs	r2, #0
 8019d38:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8019d3a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8019d3e:	f7ff ff1f 	bl	8019b80 <ptr_to_mem>
 8019d42:	4603      	mov	r3, r0
 8019d44:	4a14      	ldr	r2, [pc, #80]	@ (8019d98 <mem_init+0x8c>)
 8019d46:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8019d48:	4b13      	ldr	r3, [pc, #76]	@ (8019d98 <mem_init+0x8c>)
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	2201      	movs	r2, #1
 8019d4e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8019d50:	4b11      	ldr	r3, [pc, #68]	@ (8019d98 <mem_init+0x8c>)
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8019d58:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8019d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8019d98 <mem_init+0x8c>)
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8019d62:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8019d64:	4b0b      	ldr	r3, [pc, #44]	@ (8019d94 <mem_init+0x88>)
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	4a0c      	ldr	r2, [pc, #48]	@ (8019d9c <mem_init+0x90>)
 8019d6a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019d6c:	480c      	ldr	r0, [pc, #48]	@ (8019da0 <mem_init+0x94>)
 8019d6e:	f00c ffcb 	bl	8026d08 <sys_mutex_new>
 8019d72:	4603      	mov	r3, r0
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d006      	beq.n	8019d86 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8019d78:	4b0a      	ldr	r3, [pc, #40]	@ (8019da4 <mem_init+0x98>)
 8019d7a:	f240 221f 	movw	r2, #543	@ 0x21f
 8019d7e:	490a      	ldr	r1, [pc, #40]	@ (8019da8 <mem_init+0x9c>)
 8019d80:	480a      	ldr	r0, [pc, #40]	@ (8019dac <mem_init+0xa0>)
 8019d82:	f00d fcf3 	bl	802776c <iprintf>
  }
}
 8019d86:	bf00      	nop
 8019d88:	3708      	adds	r7, #8
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	bd80      	pop	{r7, pc}
 8019d8e:	bf00      	nop
 8019d90:	2000da04 	.word	0x2000da04
 8019d94:	2000e058 	.word	0x2000e058
 8019d98:	2000e05c 	.word	0x2000e05c
 8019d9c:	2000e064 	.word	0x2000e064
 8019da0:	2000e060 	.word	0x2000e060
 8019da4:	080296a0 	.word	0x080296a0
 8019da8:	08029774 	.word	0x08029774
 8019dac:	080296e8 	.word	0x080296e8

08019db0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b086      	sub	sp, #24
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8019db8:	6878      	ldr	r0, [r7, #4]
 8019dba:	f7ff fef3 	bl	8019ba4 <mem_to_ptr>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	881b      	ldrh	r3, [r3, #0]
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7ff feda 	bl	8019b80 <ptr_to_mem>
 8019dcc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	885b      	ldrh	r3, [r3, #2]
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	f7ff fed4 	bl	8019b80 <ptr_to_mem>
 8019dd8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	881b      	ldrh	r3, [r3, #0]
 8019dde:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8019de2:	d818      	bhi.n	8019e16 <mem_link_valid+0x66>
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	885b      	ldrh	r3, [r3, #2]
 8019de8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8019dec:	d813      	bhi.n	8019e16 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019df2:	8afa      	ldrh	r2, [r7, #22]
 8019df4:	429a      	cmp	r2, r3
 8019df6:	d004      	beq.n	8019e02 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	881b      	ldrh	r3, [r3, #0]
 8019dfc:	8afa      	ldrh	r2, [r7, #22]
 8019dfe:	429a      	cmp	r2, r3
 8019e00:	d109      	bne.n	8019e16 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019e02:	4b08      	ldr	r3, [pc, #32]	@ (8019e24 <mem_link_valid+0x74>)
 8019e04:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019e06:	693a      	ldr	r2, [r7, #16]
 8019e08:	429a      	cmp	r2, r3
 8019e0a:	d006      	beq.n	8019e1a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019e0c:	693b      	ldr	r3, [r7, #16]
 8019e0e:	885b      	ldrh	r3, [r3, #2]
 8019e10:	8afa      	ldrh	r2, [r7, #22]
 8019e12:	429a      	cmp	r2, r3
 8019e14:	d001      	beq.n	8019e1a <mem_link_valid+0x6a>
    return 0;
 8019e16:	2300      	movs	r3, #0
 8019e18:	e000      	b.n	8019e1c <mem_link_valid+0x6c>
  }
  return 1;
 8019e1a:	2301      	movs	r3, #1
}
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	3718      	adds	r7, #24
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bd80      	pop	{r7, pc}
 8019e24:	2000e05c 	.word	0x2000e05c

08019e28 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b088      	sub	sp, #32
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d070      	beq.n	8019f18 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	f003 0303 	and.w	r3, r3, #3
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d00d      	beq.n	8019e5c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8019e40:	4b37      	ldr	r3, [pc, #220]	@ (8019f20 <mem_free+0xf8>)
 8019e42:	f240 2273 	movw	r2, #627	@ 0x273
 8019e46:	4937      	ldr	r1, [pc, #220]	@ (8019f24 <mem_free+0xfc>)
 8019e48:	4837      	ldr	r0, [pc, #220]	@ (8019f28 <mem_free+0x100>)
 8019e4a:	f00d fc8f 	bl	802776c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019e4e:	f00c ffb9 	bl	8026dc4 <sys_arch_protect>
 8019e52:	60f8      	str	r0, [r7, #12]
 8019e54:	68f8      	ldr	r0, [r7, #12]
 8019e56:	f00c ffc3 	bl	8026de0 <sys_arch_unprotect>
    return;
 8019e5a:	e05e      	b.n	8019f1a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	3b08      	subs	r3, #8
 8019e60:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8019e62:	4b32      	ldr	r3, [pc, #200]	@ (8019f2c <mem_free+0x104>)
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	69fa      	ldr	r2, [r7, #28]
 8019e68:	429a      	cmp	r2, r3
 8019e6a:	d306      	bcc.n	8019e7a <mem_free+0x52>
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	f103 020c 	add.w	r2, r3, #12
 8019e72:	4b2f      	ldr	r3, [pc, #188]	@ (8019f30 <mem_free+0x108>)
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	429a      	cmp	r2, r3
 8019e78:	d90d      	bls.n	8019e96 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019e7a:	4b29      	ldr	r3, [pc, #164]	@ (8019f20 <mem_free+0xf8>)
 8019e7c:	f240 227f 	movw	r2, #639	@ 0x27f
 8019e80:	492c      	ldr	r1, [pc, #176]	@ (8019f34 <mem_free+0x10c>)
 8019e82:	4829      	ldr	r0, [pc, #164]	@ (8019f28 <mem_free+0x100>)
 8019e84:	f00d fc72 	bl	802776c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019e88:	f00c ff9c 	bl	8026dc4 <sys_arch_protect>
 8019e8c:	6138      	str	r0, [r7, #16]
 8019e8e:	6938      	ldr	r0, [r7, #16]
 8019e90:	f00c ffa6 	bl	8026de0 <sys_arch_unprotect>
    return;
 8019e94:	e041      	b.n	8019f1a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8019e96:	4828      	ldr	r0, [pc, #160]	@ (8019f38 <mem_free+0x110>)
 8019e98:	f00c ff52 	bl	8026d40 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8019e9c:	69fb      	ldr	r3, [r7, #28]
 8019e9e:	791b      	ldrb	r3, [r3, #4]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d110      	bne.n	8019ec6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8019ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8019f20 <mem_free+0xf8>)
 8019ea6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8019eaa:	4924      	ldr	r1, [pc, #144]	@ (8019f3c <mem_free+0x114>)
 8019eac:	481e      	ldr	r0, [pc, #120]	@ (8019f28 <mem_free+0x100>)
 8019eae:	f00d fc5d 	bl	802776c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8019eb2:	4821      	ldr	r0, [pc, #132]	@ (8019f38 <mem_free+0x110>)
 8019eb4:	f00c ff53 	bl	8026d5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019eb8:	f00c ff84 	bl	8026dc4 <sys_arch_protect>
 8019ebc:	6178      	str	r0, [r7, #20]
 8019ebe:	6978      	ldr	r0, [r7, #20]
 8019ec0:	f00c ff8e 	bl	8026de0 <sys_arch_unprotect>
    return;
 8019ec4:	e029      	b.n	8019f1a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8019ec6:	69f8      	ldr	r0, [r7, #28]
 8019ec8:	f7ff ff72 	bl	8019db0 <mem_link_valid>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d110      	bne.n	8019ef4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8019ed2:	4b13      	ldr	r3, [pc, #76]	@ (8019f20 <mem_free+0xf8>)
 8019ed4:	f240 2295 	movw	r2, #661	@ 0x295
 8019ed8:	4919      	ldr	r1, [pc, #100]	@ (8019f40 <mem_free+0x118>)
 8019eda:	4813      	ldr	r0, [pc, #76]	@ (8019f28 <mem_free+0x100>)
 8019edc:	f00d fc46 	bl	802776c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8019ee0:	4815      	ldr	r0, [pc, #84]	@ (8019f38 <mem_free+0x110>)
 8019ee2:	f00c ff3c 	bl	8026d5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019ee6:	f00c ff6d 	bl	8026dc4 <sys_arch_protect>
 8019eea:	61b8      	str	r0, [r7, #24]
 8019eec:	69b8      	ldr	r0, [r7, #24]
 8019eee:	f00c ff77 	bl	8026de0 <sys_arch_unprotect>
    return;
 8019ef2:	e012      	b.n	8019f1a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8019ef4:	69fb      	ldr	r3, [r7, #28]
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8019efa:	4b12      	ldr	r3, [pc, #72]	@ (8019f44 <mem_free+0x11c>)
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	69fa      	ldr	r2, [r7, #28]
 8019f00:	429a      	cmp	r2, r3
 8019f02:	d202      	bcs.n	8019f0a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8019f04:	4a0f      	ldr	r2, [pc, #60]	@ (8019f44 <mem_free+0x11c>)
 8019f06:	69fb      	ldr	r3, [r7, #28]
 8019f08:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8019f0a:	69f8      	ldr	r0, [r7, #28]
 8019f0c:	f7ff fe5c 	bl	8019bc8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8019f10:	4809      	ldr	r0, [pc, #36]	@ (8019f38 <mem_free+0x110>)
 8019f12:	f00c ff24 	bl	8026d5e <sys_mutex_unlock>
 8019f16:	e000      	b.n	8019f1a <mem_free+0xf2>
    return;
 8019f18:	bf00      	nop
}
 8019f1a:	3720      	adds	r7, #32
 8019f1c:	46bd      	mov	sp, r7
 8019f1e:	bd80      	pop	{r7, pc}
 8019f20:	080296a0 	.word	0x080296a0
 8019f24:	08029790 	.word	0x08029790
 8019f28:	080296e8 	.word	0x080296e8
 8019f2c:	2000e058 	.word	0x2000e058
 8019f30:	2000e05c 	.word	0x2000e05c
 8019f34:	080297b4 	.word	0x080297b4
 8019f38:	2000e060 	.word	0x2000e060
 8019f3c:	080297d0 	.word	0x080297d0
 8019f40:	080297f8 	.word	0x080297f8
 8019f44:	2000e064 	.word	0x2000e064

08019f48 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b088      	sub	sp, #32
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
 8019f50:	460b      	mov	r3, r1
 8019f52:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019f54:	887b      	ldrh	r3, [r7, #2]
 8019f56:	3303      	adds	r3, #3
 8019f58:	b29b      	uxth	r3, r3
 8019f5a:	f023 0303 	bic.w	r3, r3, #3
 8019f5e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8019f60:	8bfb      	ldrh	r3, [r7, #30]
 8019f62:	2b0b      	cmp	r3, #11
 8019f64:	d801      	bhi.n	8019f6a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8019f66:	230c      	movs	r3, #12
 8019f68:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019f6a:	8bfb      	ldrh	r3, [r7, #30]
 8019f6c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8019f70:	d803      	bhi.n	8019f7a <mem_trim+0x32>
 8019f72:	8bfa      	ldrh	r2, [r7, #30]
 8019f74:	887b      	ldrh	r3, [r7, #2]
 8019f76:	429a      	cmp	r2, r3
 8019f78:	d201      	bcs.n	8019f7e <mem_trim+0x36>
    return NULL;
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	e0d8      	b.n	801a130 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8019f7e:	4b6e      	ldr	r3, [pc, #440]	@ (801a138 <mem_trim+0x1f0>)
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	687a      	ldr	r2, [r7, #4]
 8019f84:	429a      	cmp	r2, r3
 8019f86:	d304      	bcc.n	8019f92 <mem_trim+0x4a>
 8019f88:	4b6c      	ldr	r3, [pc, #432]	@ (801a13c <mem_trim+0x1f4>)
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	687a      	ldr	r2, [r7, #4]
 8019f8e:	429a      	cmp	r2, r3
 8019f90:	d306      	bcc.n	8019fa0 <mem_trim+0x58>
 8019f92:	4b6b      	ldr	r3, [pc, #428]	@ (801a140 <mem_trim+0x1f8>)
 8019f94:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8019f98:	496a      	ldr	r1, [pc, #424]	@ (801a144 <mem_trim+0x1fc>)
 8019f9a:	486b      	ldr	r0, [pc, #428]	@ (801a148 <mem_trim+0x200>)
 8019f9c:	f00d fbe6 	bl	802776c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019fa0:	4b65      	ldr	r3, [pc, #404]	@ (801a138 <mem_trim+0x1f0>)
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	687a      	ldr	r2, [r7, #4]
 8019fa6:	429a      	cmp	r2, r3
 8019fa8:	d304      	bcc.n	8019fb4 <mem_trim+0x6c>
 8019faa:	4b64      	ldr	r3, [pc, #400]	@ (801a13c <mem_trim+0x1f4>)
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	687a      	ldr	r2, [r7, #4]
 8019fb0:	429a      	cmp	r2, r3
 8019fb2:	d307      	bcc.n	8019fc4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8019fb4:	f00c ff06 	bl	8026dc4 <sys_arch_protect>
 8019fb8:	60b8      	str	r0, [r7, #8]
 8019fba:	68b8      	ldr	r0, [r7, #8]
 8019fbc:	f00c ff10 	bl	8026de0 <sys_arch_unprotect>
    return rmem;
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	e0b5      	b.n	801a130 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	3b08      	subs	r3, #8
 8019fc8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8019fca:	69b8      	ldr	r0, [r7, #24]
 8019fcc:	f7ff fdea 	bl	8019ba4 <mem_to_ptr>
 8019fd0:	4603      	mov	r3, r0
 8019fd2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019fd4:	69bb      	ldr	r3, [r7, #24]
 8019fd6:	881a      	ldrh	r2, [r3, #0]
 8019fd8:	8afb      	ldrh	r3, [r7, #22]
 8019fda:	1ad3      	subs	r3, r2, r3
 8019fdc:	b29b      	uxth	r3, r3
 8019fde:	3b08      	subs	r3, #8
 8019fe0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8019fe2:	8bfa      	ldrh	r2, [r7, #30]
 8019fe4:	8abb      	ldrh	r3, [r7, #20]
 8019fe6:	429a      	cmp	r2, r3
 8019fe8:	d906      	bls.n	8019ff8 <mem_trim+0xb0>
 8019fea:	4b55      	ldr	r3, [pc, #340]	@ (801a140 <mem_trim+0x1f8>)
 8019fec:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8019ff0:	4956      	ldr	r1, [pc, #344]	@ (801a14c <mem_trim+0x204>)
 8019ff2:	4855      	ldr	r0, [pc, #340]	@ (801a148 <mem_trim+0x200>)
 8019ff4:	f00d fbba 	bl	802776c <iprintf>
  if (newsize > size) {
 8019ff8:	8bfa      	ldrh	r2, [r7, #30]
 8019ffa:	8abb      	ldrh	r3, [r7, #20]
 8019ffc:	429a      	cmp	r2, r3
 8019ffe:	d901      	bls.n	801a004 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801a000:	2300      	movs	r3, #0
 801a002:	e095      	b.n	801a130 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801a004:	8bfa      	ldrh	r2, [r7, #30]
 801a006:	8abb      	ldrh	r3, [r7, #20]
 801a008:	429a      	cmp	r2, r3
 801a00a:	d101      	bne.n	801a010 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	e08f      	b.n	801a130 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801a010:	484f      	ldr	r0, [pc, #316]	@ (801a150 <mem_trim+0x208>)
 801a012:	f00c fe95 	bl	8026d40 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801a016:	69bb      	ldr	r3, [r7, #24]
 801a018:	881b      	ldrh	r3, [r3, #0]
 801a01a:	4618      	mov	r0, r3
 801a01c:	f7ff fdb0 	bl	8019b80 <ptr_to_mem>
 801a020:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801a022:	693b      	ldr	r3, [r7, #16]
 801a024:	791b      	ldrb	r3, [r3, #4]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d13f      	bne.n	801a0aa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a02a:	69bb      	ldr	r3, [r7, #24]
 801a02c:	881b      	ldrh	r3, [r3, #0]
 801a02e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801a032:	d106      	bne.n	801a042 <mem_trim+0xfa>
 801a034:	4b42      	ldr	r3, [pc, #264]	@ (801a140 <mem_trim+0x1f8>)
 801a036:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801a03a:	4946      	ldr	r1, [pc, #280]	@ (801a154 <mem_trim+0x20c>)
 801a03c:	4842      	ldr	r0, [pc, #264]	@ (801a148 <mem_trim+0x200>)
 801a03e:	f00d fb95 	bl	802776c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801a042:	693b      	ldr	r3, [r7, #16]
 801a044:	881b      	ldrh	r3, [r3, #0]
 801a046:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a048:	8afa      	ldrh	r2, [r7, #22]
 801a04a:	8bfb      	ldrh	r3, [r7, #30]
 801a04c:	4413      	add	r3, r2
 801a04e:	b29b      	uxth	r3, r3
 801a050:	3308      	adds	r3, #8
 801a052:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801a054:	4b40      	ldr	r3, [pc, #256]	@ (801a158 <mem_trim+0x210>)
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	693a      	ldr	r2, [r7, #16]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d106      	bne.n	801a06c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801a05e:	89fb      	ldrh	r3, [r7, #14]
 801a060:	4618      	mov	r0, r3
 801a062:	f7ff fd8d 	bl	8019b80 <ptr_to_mem>
 801a066:	4603      	mov	r3, r0
 801a068:	4a3b      	ldr	r2, [pc, #236]	@ (801a158 <mem_trim+0x210>)
 801a06a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801a06c:	89fb      	ldrh	r3, [r7, #14]
 801a06e:	4618      	mov	r0, r3
 801a070:	f7ff fd86 	bl	8019b80 <ptr_to_mem>
 801a074:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801a076:	693b      	ldr	r3, [r7, #16]
 801a078:	2200      	movs	r2, #0
 801a07a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801a07c:	693b      	ldr	r3, [r7, #16]
 801a07e:	89ba      	ldrh	r2, [r7, #12]
 801a080:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801a082:	693b      	ldr	r3, [r7, #16]
 801a084:	8afa      	ldrh	r2, [r7, #22]
 801a086:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801a088:	69bb      	ldr	r3, [r7, #24]
 801a08a:	89fa      	ldrh	r2, [r7, #14]
 801a08c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a08e:	693b      	ldr	r3, [r7, #16]
 801a090:	881b      	ldrh	r3, [r3, #0]
 801a092:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801a096:	d047      	beq.n	801a128 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a098:	693b      	ldr	r3, [r7, #16]
 801a09a:	881b      	ldrh	r3, [r3, #0]
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7ff fd6f 	bl	8019b80 <ptr_to_mem>
 801a0a2:	4602      	mov	r2, r0
 801a0a4:	89fb      	ldrh	r3, [r7, #14]
 801a0a6:	8053      	strh	r3, [r2, #2]
 801a0a8:	e03e      	b.n	801a128 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801a0aa:	8bfb      	ldrh	r3, [r7, #30]
 801a0ac:	f103 0214 	add.w	r2, r3, #20
 801a0b0:	8abb      	ldrh	r3, [r7, #20]
 801a0b2:	429a      	cmp	r2, r3
 801a0b4:	d838      	bhi.n	801a128 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a0b6:	8afa      	ldrh	r2, [r7, #22]
 801a0b8:	8bfb      	ldrh	r3, [r7, #30]
 801a0ba:	4413      	add	r3, r2
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	3308      	adds	r3, #8
 801a0c0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a0c2:	69bb      	ldr	r3, [r7, #24]
 801a0c4:	881b      	ldrh	r3, [r3, #0]
 801a0c6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801a0ca:	d106      	bne.n	801a0da <mem_trim+0x192>
 801a0cc:	4b1c      	ldr	r3, [pc, #112]	@ (801a140 <mem_trim+0x1f8>)
 801a0ce:	f240 3216 	movw	r2, #790	@ 0x316
 801a0d2:	4920      	ldr	r1, [pc, #128]	@ (801a154 <mem_trim+0x20c>)
 801a0d4:	481c      	ldr	r0, [pc, #112]	@ (801a148 <mem_trim+0x200>)
 801a0d6:	f00d fb49 	bl	802776c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801a0da:	89fb      	ldrh	r3, [r7, #14]
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f7ff fd4f 	bl	8019b80 <ptr_to_mem>
 801a0e2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801a0e4:	4b1c      	ldr	r3, [pc, #112]	@ (801a158 <mem_trim+0x210>)
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	693a      	ldr	r2, [r7, #16]
 801a0ea:	429a      	cmp	r2, r3
 801a0ec:	d202      	bcs.n	801a0f4 <mem_trim+0x1ac>
      lfree = mem2;
 801a0ee:	4a1a      	ldr	r2, [pc, #104]	@ (801a158 <mem_trim+0x210>)
 801a0f0:	693b      	ldr	r3, [r7, #16]
 801a0f2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801a0f4:	693b      	ldr	r3, [r7, #16]
 801a0f6:	2200      	movs	r2, #0
 801a0f8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801a0fa:	69bb      	ldr	r3, [r7, #24]
 801a0fc:	881a      	ldrh	r2, [r3, #0]
 801a0fe:	693b      	ldr	r3, [r7, #16]
 801a100:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801a102:	693b      	ldr	r3, [r7, #16]
 801a104:	8afa      	ldrh	r2, [r7, #22]
 801a106:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801a108:	69bb      	ldr	r3, [r7, #24]
 801a10a:	89fa      	ldrh	r2, [r7, #14]
 801a10c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a10e:	693b      	ldr	r3, [r7, #16]
 801a110:	881b      	ldrh	r3, [r3, #0]
 801a112:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801a116:	d007      	beq.n	801a128 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a118:	693b      	ldr	r3, [r7, #16]
 801a11a:	881b      	ldrh	r3, [r3, #0]
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7ff fd2f 	bl	8019b80 <ptr_to_mem>
 801a122:	4602      	mov	r2, r0
 801a124:	89fb      	ldrh	r3, [r7, #14]
 801a126:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801a128:	4809      	ldr	r0, [pc, #36]	@ (801a150 <mem_trim+0x208>)
 801a12a:	f00c fe18 	bl	8026d5e <sys_mutex_unlock>
  return rmem;
 801a12e:	687b      	ldr	r3, [r7, #4]
}
 801a130:	4618      	mov	r0, r3
 801a132:	3720      	adds	r7, #32
 801a134:	46bd      	mov	sp, r7
 801a136:	bd80      	pop	{r7, pc}
 801a138:	2000e058 	.word	0x2000e058
 801a13c:	2000e05c 	.word	0x2000e05c
 801a140:	080296a0 	.word	0x080296a0
 801a144:	0802982c 	.word	0x0802982c
 801a148:	080296e8 	.word	0x080296e8
 801a14c:	08029844 	.word	0x08029844
 801a150:	2000e060 	.word	0x2000e060
 801a154:	08029864 	.word	0x08029864
 801a158:	2000e064 	.word	0x2000e064

0801a15c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b088      	sub	sp, #32
 801a160:	af00      	add	r7, sp, #0
 801a162:	4603      	mov	r3, r0
 801a164:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801a166:	88fb      	ldrh	r3, [r7, #6]
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d101      	bne.n	801a170 <mem_malloc+0x14>
    return NULL;
 801a16c:	2300      	movs	r3, #0
 801a16e:	e0e2      	b.n	801a336 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801a170:	88fb      	ldrh	r3, [r7, #6]
 801a172:	3303      	adds	r3, #3
 801a174:	b29b      	uxth	r3, r3
 801a176:	f023 0303 	bic.w	r3, r3, #3
 801a17a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801a17c:	8bbb      	ldrh	r3, [r7, #28]
 801a17e:	2b0b      	cmp	r3, #11
 801a180:	d801      	bhi.n	801a186 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801a182:	230c      	movs	r3, #12
 801a184:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801a186:	8bbb      	ldrh	r3, [r7, #28]
 801a188:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801a18c:	d803      	bhi.n	801a196 <mem_malloc+0x3a>
 801a18e:	8bba      	ldrh	r2, [r7, #28]
 801a190:	88fb      	ldrh	r3, [r7, #6]
 801a192:	429a      	cmp	r2, r3
 801a194:	d201      	bcs.n	801a19a <mem_malloc+0x3e>
    return NULL;
 801a196:	2300      	movs	r3, #0
 801a198:	e0cd      	b.n	801a336 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801a19a:	4869      	ldr	r0, [pc, #420]	@ (801a340 <mem_malloc+0x1e4>)
 801a19c:	f00c fdd0 	bl	8026d40 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a1a0:	4b68      	ldr	r3, [pc, #416]	@ (801a344 <mem_malloc+0x1e8>)
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	f7ff fcfd 	bl	8019ba4 <mem_to_ptr>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	83fb      	strh	r3, [r7, #30]
 801a1ae:	e0b7      	b.n	801a320 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801a1b0:	8bfb      	ldrh	r3, [r7, #30]
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	f7ff fce4 	bl	8019b80 <ptr_to_mem>
 801a1b8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801a1ba:	697b      	ldr	r3, [r7, #20]
 801a1bc:	791b      	ldrb	r3, [r3, #4]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	f040 80a7 	bne.w	801a312 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	881b      	ldrh	r3, [r3, #0]
 801a1c8:	461a      	mov	r2, r3
 801a1ca:	8bfb      	ldrh	r3, [r7, #30]
 801a1cc:	1ad3      	subs	r3, r2, r3
 801a1ce:	f1a3 0208 	sub.w	r2, r3, #8
 801a1d2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	f0c0 809c 	bcc.w	801a312 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801a1da:	697b      	ldr	r3, [r7, #20]
 801a1dc:	881b      	ldrh	r3, [r3, #0]
 801a1de:	461a      	mov	r2, r3
 801a1e0:	8bfb      	ldrh	r3, [r7, #30]
 801a1e2:	1ad3      	subs	r3, r2, r3
 801a1e4:	f1a3 0208 	sub.w	r2, r3, #8
 801a1e8:	8bbb      	ldrh	r3, [r7, #28]
 801a1ea:	3314      	adds	r3, #20
 801a1ec:	429a      	cmp	r2, r3
 801a1ee:	d333      	bcc.n	801a258 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801a1f0:	8bfa      	ldrh	r2, [r7, #30]
 801a1f2:	8bbb      	ldrh	r3, [r7, #28]
 801a1f4:	4413      	add	r3, r2
 801a1f6:	b29b      	uxth	r3, r3
 801a1f8:	3308      	adds	r3, #8
 801a1fa:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a1fc:	8a7b      	ldrh	r3, [r7, #18]
 801a1fe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801a202:	d106      	bne.n	801a212 <mem_malloc+0xb6>
 801a204:	4b50      	ldr	r3, [pc, #320]	@ (801a348 <mem_malloc+0x1ec>)
 801a206:	f240 3287 	movw	r2, #903	@ 0x387
 801a20a:	4950      	ldr	r1, [pc, #320]	@ (801a34c <mem_malloc+0x1f0>)
 801a20c:	4850      	ldr	r0, [pc, #320]	@ (801a350 <mem_malloc+0x1f4>)
 801a20e:	f00d faad 	bl	802776c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801a212:	8a7b      	ldrh	r3, [r7, #18]
 801a214:	4618      	mov	r0, r3
 801a216:	f7ff fcb3 	bl	8019b80 <ptr_to_mem>
 801a21a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	2200      	movs	r2, #0
 801a220:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801a222:	697b      	ldr	r3, [r7, #20]
 801a224:	881a      	ldrh	r2, [r3, #0]
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	8bfa      	ldrh	r2, [r7, #30]
 801a22e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801a230:	697b      	ldr	r3, [r7, #20]
 801a232:	8a7a      	ldrh	r2, [r7, #18]
 801a234:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801a236:	697b      	ldr	r3, [r7, #20]
 801a238:	2201      	movs	r2, #1
 801a23a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	881b      	ldrh	r3, [r3, #0]
 801a240:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801a244:	d00b      	beq.n	801a25e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	881b      	ldrh	r3, [r3, #0]
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7ff fc98 	bl	8019b80 <ptr_to_mem>
 801a250:	4602      	mov	r2, r0
 801a252:	8a7b      	ldrh	r3, [r7, #18]
 801a254:	8053      	strh	r3, [r2, #2]
 801a256:	e002      	b.n	801a25e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801a258:	697b      	ldr	r3, [r7, #20]
 801a25a:	2201      	movs	r2, #1
 801a25c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801a25e:	4b39      	ldr	r3, [pc, #228]	@ (801a344 <mem_malloc+0x1e8>)
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	697a      	ldr	r2, [r7, #20]
 801a264:	429a      	cmp	r2, r3
 801a266:	d127      	bne.n	801a2b8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801a268:	4b36      	ldr	r3, [pc, #216]	@ (801a344 <mem_malloc+0x1e8>)
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801a26e:	e005      	b.n	801a27c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801a270:	69bb      	ldr	r3, [r7, #24]
 801a272:	881b      	ldrh	r3, [r3, #0]
 801a274:	4618      	mov	r0, r3
 801a276:	f7ff fc83 	bl	8019b80 <ptr_to_mem>
 801a27a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801a27c:	69bb      	ldr	r3, [r7, #24]
 801a27e:	791b      	ldrb	r3, [r3, #4]
 801a280:	2b00      	cmp	r3, #0
 801a282:	d004      	beq.n	801a28e <mem_malloc+0x132>
 801a284:	4b33      	ldr	r3, [pc, #204]	@ (801a354 <mem_malloc+0x1f8>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	69ba      	ldr	r2, [r7, #24]
 801a28a:	429a      	cmp	r2, r3
 801a28c:	d1f0      	bne.n	801a270 <mem_malloc+0x114>
          }
          lfree = cur;
 801a28e:	4a2d      	ldr	r2, [pc, #180]	@ (801a344 <mem_malloc+0x1e8>)
 801a290:	69bb      	ldr	r3, [r7, #24]
 801a292:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801a294:	4b2b      	ldr	r3, [pc, #172]	@ (801a344 <mem_malloc+0x1e8>)
 801a296:	681a      	ldr	r2, [r3, #0]
 801a298:	4b2e      	ldr	r3, [pc, #184]	@ (801a354 <mem_malloc+0x1f8>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	429a      	cmp	r2, r3
 801a29e:	d00b      	beq.n	801a2b8 <mem_malloc+0x15c>
 801a2a0:	4b28      	ldr	r3, [pc, #160]	@ (801a344 <mem_malloc+0x1e8>)
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	791b      	ldrb	r3, [r3, #4]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d006      	beq.n	801a2b8 <mem_malloc+0x15c>
 801a2aa:	4b27      	ldr	r3, [pc, #156]	@ (801a348 <mem_malloc+0x1ec>)
 801a2ac:	f240 32b5 	movw	r2, #949	@ 0x3b5
 801a2b0:	4929      	ldr	r1, [pc, #164]	@ (801a358 <mem_malloc+0x1fc>)
 801a2b2:	4827      	ldr	r0, [pc, #156]	@ (801a350 <mem_malloc+0x1f4>)
 801a2b4:	f00d fa5a 	bl	802776c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801a2b8:	4821      	ldr	r0, [pc, #132]	@ (801a340 <mem_malloc+0x1e4>)
 801a2ba:	f00c fd50 	bl	8026d5e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a2be:	8bba      	ldrh	r2, [r7, #28]
 801a2c0:	697b      	ldr	r3, [r7, #20]
 801a2c2:	4413      	add	r3, r2
 801a2c4:	3308      	adds	r3, #8
 801a2c6:	4a23      	ldr	r2, [pc, #140]	@ (801a354 <mem_malloc+0x1f8>)
 801a2c8:	6812      	ldr	r2, [r2, #0]
 801a2ca:	4293      	cmp	r3, r2
 801a2cc:	d906      	bls.n	801a2dc <mem_malloc+0x180>
 801a2ce:	4b1e      	ldr	r3, [pc, #120]	@ (801a348 <mem_malloc+0x1ec>)
 801a2d0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 801a2d4:	4921      	ldr	r1, [pc, #132]	@ (801a35c <mem_malloc+0x200>)
 801a2d6:	481e      	ldr	r0, [pc, #120]	@ (801a350 <mem_malloc+0x1f4>)
 801a2d8:	f00d fa48 	bl	802776c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a2dc:	697b      	ldr	r3, [r7, #20]
 801a2de:	f003 0303 	and.w	r3, r3, #3
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d006      	beq.n	801a2f4 <mem_malloc+0x198>
 801a2e6:	4b18      	ldr	r3, [pc, #96]	@ (801a348 <mem_malloc+0x1ec>)
 801a2e8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 801a2ec:	491c      	ldr	r1, [pc, #112]	@ (801a360 <mem_malloc+0x204>)
 801a2ee:	4818      	ldr	r0, [pc, #96]	@ (801a350 <mem_malloc+0x1f4>)
 801a2f0:	f00d fa3c 	bl	802776c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801a2f4:	697b      	ldr	r3, [r7, #20]
 801a2f6:	f003 0303 	and.w	r3, r3, #3
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d006      	beq.n	801a30c <mem_malloc+0x1b0>
 801a2fe:	4b12      	ldr	r3, [pc, #72]	@ (801a348 <mem_malloc+0x1ec>)
 801a300:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801a304:	4917      	ldr	r1, [pc, #92]	@ (801a364 <mem_malloc+0x208>)
 801a306:	4812      	ldr	r0, [pc, #72]	@ (801a350 <mem_malloc+0x1f4>)
 801a308:	f00d fa30 	bl	802776c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801a30c:	697b      	ldr	r3, [r7, #20]
 801a30e:	3308      	adds	r3, #8
 801a310:	e011      	b.n	801a336 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801a312:	8bfb      	ldrh	r3, [r7, #30]
 801a314:	4618      	mov	r0, r3
 801a316:	f7ff fc33 	bl	8019b80 <ptr_to_mem>
 801a31a:	4603      	mov	r3, r0
 801a31c:	881b      	ldrh	r3, [r3, #0]
 801a31e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a320:	8bfa      	ldrh	r2, [r7, #30]
 801a322:	8bbb      	ldrh	r3, [r7, #28]
 801a324:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 801a328:	429a      	cmp	r2, r3
 801a32a:	f4ff af41 	bcc.w	801a1b0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801a32e:	4804      	ldr	r0, [pc, #16]	@ (801a340 <mem_malloc+0x1e4>)
 801a330:	f00c fd15 	bl	8026d5e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801a334:	2300      	movs	r3, #0
}
 801a336:	4618      	mov	r0, r3
 801a338:	3720      	adds	r7, #32
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd80      	pop	{r7, pc}
 801a33e:	bf00      	nop
 801a340:	2000e060 	.word	0x2000e060
 801a344:	2000e064 	.word	0x2000e064
 801a348:	080296a0 	.word	0x080296a0
 801a34c:	08029864 	.word	0x08029864
 801a350:	080296e8 	.word	0x080296e8
 801a354:	2000e05c 	.word	0x2000e05c
 801a358:	08029878 	.word	0x08029878
 801a35c:	08029894 	.word	0x08029894
 801a360:	080298c4 	.word	0x080298c4
 801a364:	080298f4 	.word	0x080298f4

0801a368 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801a368:	b480      	push	{r7}
 801a36a:	b085      	sub	sp, #20
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	689b      	ldr	r3, [r3, #8]
 801a374:	2200      	movs	r2, #0
 801a376:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	685b      	ldr	r3, [r3, #4]
 801a37c:	3303      	adds	r3, #3
 801a37e:	f023 0303 	bic.w	r3, r3, #3
 801a382:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801a384:	2300      	movs	r3, #0
 801a386:	60fb      	str	r3, [r7, #12]
 801a388:	e011      	b.n	801a3ae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	689b      	ldr	r3, [r3, #8]
 801a38e:	681a      	ldr	r2, [r3, #0]
 801a390:	68bb      	ldr	r3, [r7, #8]
 801a392:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	689b      	ldr	r3, [r3, #8]
 801a398:	68ba      	ldr	r2, [r7, #8]
 801a39a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	881b      	ldrh	r3, [r3, #0]
 801a3a0:	461a      	mov	r2, r3
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	4413      	add	r3, r2
 801a3a6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	3301      	adds	r3, #1
 801a3ac:	60fb      	str	r3, [r7, #12]
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	885b      	ldrh	r3, [r3, #2]
 801a3b2:	461a      	mov	r2, r3
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	4293      	cmp	r3, r2
 801a3b8:	dbe7      	blt.n	801a38a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801a3ba:	bf00      	nop
 801a3bc:	bf00      	nop
 801a3be:	3714      	adds	r7, #20
 801a3c0:	46bd      	mov	sp, r7
 801a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c6:	4770      	bx	lr

0801a3c8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b082      	sub	sp, #8
 801a3cc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	80fb      	strh	r3, [r7, #6]
 801a3d2:	e009      	b.n	801a3e8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801a3d4:	88fb      	ldrh	r3, [r7, #6]
 801a3d6:	4a08      	ldr	r2, [pc, #32]	@ (801a3f8 <memp_init+0x30>)
 801a3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a3dc:	4618      	mov	r0, r3
 801a3de:	f7ff ffc3 	bl	801a368 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801a3e2:	88fb      	ldrh	r3, [r7, #6]
 801a3e4:	3301      	adds	r3, #1
 801a3e6:	80fb      	strh	r3, [r7, #6]
 801a3e8:	88fb      	ldrh	r3, [r7, #6]
 801a3ea:	2b0c      	cmp	r3, #12
 801a3ec:	d9f2      	bls.n	801a3d4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801a3ee:	bf00      	nop
 801a3f0:	bf00      	nop
 801a3f2:	3708      	adds	r7, #8
 801a3f4:	46bd      	mov	sp, r7
 801a3f6:	bd80      	pop	{r7, pc}
 801a3f8:	0802c504 	.word	0x0802c504

0801a3fc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b084      	sub	sp, #16
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801a404:	f00c fcde 	bl	8026dc4 <sys_arch_protect>
 801a408:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	689b      	ldr	r3, [r3, #8]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d015      	beq.n	801a444 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	689b      	ldr	r3, [r3, #8]
 801a41c:	68ba      	ldr	r2, [r7, #8]
 801a41e:	6812      	ldr	r2, [r2, #0]
 801a420:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a422:	68bb      	ldr	r3, [r7, #8]
 801a424:	f003 0303 	and.w	r3, r3, #3
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d006      	beq.n	801a43a <do_memp_malloc_pool+0x3e>
 801a42c:	4b09      	ldr	r3, [pc, #36]	@ (801a454 <do_memp_malloc_pool+0x58>)
 801a42e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801a432:	4909      	ldr	r1, [pc, #36]	@ (801a458 <do_memp_malloc_pool+0x5c>)
 801a434:	4809      	ldr	r0, [pc, #36]	@ (801a45c <do_memp_malloc_pool+0x60>)
 801a436:	f00d f999 	bl	802776c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801a43a:	68f8      	ldr	r0, [r7, #12]
 801a43c:	f00c fcd0 	bl	8026de0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801a440:	68bb      	ldr	r3, [r7, #8]
 801a442:	e003      	b.n	801a44c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801a444:	68f8      	ldr	r0, [r7, #12]
 801a446:	f00c fccb 	bl	8026de0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801a44a:	2300      	movs	r3, #0
}
 801a44c:	4618      	mov	r0, r3
 801a44e:	3710      	adds	r7, #16
 801a450:	46bd      	mov	sp, r7
 801a452:	bd80      	pop	{r7, pc}
 801a454:	08029918 	.word	0x08029918
 801a458:	08029948 	.word	0x08029948
 801a45c:	0802996c 	.word	0x0802996c

0801a460 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b082      	sub	sp, #8
 801a464:	af00      	add	r7, sp, #0
 801a466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d106      	bne.n	801a47c <memp_malloc_pool+0x1c>
 801a46e:	4b0a      	ldr	r3, [pc, #40]	@ (801a498 <memp_malloc_pool+0x38>)
 801a470:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801a474:	4909      	ldr	r1, [pc, #36]	@ (801a49c <memp_malloc_pool+0x3c>)
 801a476:	480a      	ldr	r0, [pc, #40]	@ (801a4a0 <memp_malloc_pool+0x40>)
 801a478:	f00d f978 	bl	802776c <iprintf>
  if (desc == NULL) {
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d101      	bne.n	801a486 <memp_malloc_pool+0x26>
    return NULL;
 801a482:	2300      	movs	r3, #0
 801a484:	e003      	b.n	801a48e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801a486:	6878      	ldr	r0, [r7, #4]
 801a488:	f7ff ffb8 	bl	801a3fc <do_memp_malloc_pool>
 801a48c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801a48e:	4618      	mov	r0, r3
 801a490:	3708      	adds	r7, #8
 801a492:	46bd      	mov	sp, r7
 801a494:	bd80      	pop	{r7, pc}
 801a496:	bf00      	nop
 801a498:	08029918 	.word	0x08029918
 801a49c:	08029994 	.word	0x08029994
 801a4a0:	0802996c 	.word	0x0802996c

0801a4a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801a4a4:	b580      	push	{r7, lr}
 801a4a6:	b084      	sub	sp, #16
 801a4a8:	af00      	add	r7, sp, #0
 801a4aa:	4603      	mov	r3, r0
 801a4ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a4ae:	79fb      	ldrb	r3, [r7, #7]
 801a4b0:	2b0c      	cmp	r3, #12
 801a4b2:	d908      	bls.n	801a4c6 <memp_malloc+0x22>
 801a4b4:	4b0a      	ldr	r3, [pc, #40]	@ (801a4e0 <memp_malloc+0x3c>)
 801a4b6:	f240 1257 	movw	r2, #343	@ 0x157
 801a4ba:	490a      	ldr	r1, [pc, #40]	@ (801a4e4 <memp_malloc+0x40>)
 801a4bc:	480a      	ldr	r0, [pc, #40]	@ (801a4e8 <memp_malloc+0x44>)
 801a4be:	f00d f955 	bl	802776c <iprintf>
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	e008      	b.n	801a4d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801a4c6:	79fb      	ldrb	r3, [r7, #7]
 801a4c8:	4a08      	ldr	r2, [pc, #32]	@ (801a4ec <memp_malloc+0x48>)
 801a4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	f7ff ff94 	bl	801a3fc <do_memp_malloc_pool>
 801a4d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801a4d6:	68fb      	ldr	r3, [r7, #12]
}
 801a4d8:	4618      	mov	r0, r3
 801a4da:	3710      	adds	r7, #16
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	bd80      	pop	{r7, pc}
 801a4e0:	08029918 	.word	0x08029918
 801a4e4:	080299a8 	.word	0x080299a8
 801a4e8:	0802996c 	.word	0x0802996c
 801a4ec:	0802c504 	.word	0x0802c504

0801a4f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b084      	sub	sp, #16
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
 801a4f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801a4fa:	683b      	ldr	r3, [r7, #0]
 801a4fc:	f003 0303 	and.w	r3, r3, #3
 801a500:	2b00      	cmp	r3, #0
 801a502:	d006      	beq.n	801a512 <do_memp_free_pool+0x22>
 801a504:	4b0d      	ldr	r3, [pc, #52]	@ (801a53c <do_memp_free_pool+0x4c>)
 801a506:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801a50a:	490d      	ldr	r1, [pc, #52]	@ (801a540 <do_memp_free_pool+0x50>)
 801a50c:	480d      	ldr	r0, [pc, #52]	@ (801a544 <do_memp_free_pool+0x54>)
 801a50e:	f00d f92d 	bl	802776c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801a516:	f00c fc55 	bl	8026dc4 <sys_arch_protect>
 801a51a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	689b      	ldr	r3, [r3, #8]
 801a520:	681a      	ldr	r2, [r3, #0]
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	689b      	ldr	r3, [r3, #8]
 801a52a:	68fa      	ldr	r2, [r7, #12]
 801a52c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801a52e:	68b8      	ldr	r0, [r7, #8]
 801a530:	f00c fc56 	bl	8026de0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801a534:	bf00      	nop
 801a536:	3710      	adds	r7, #16
 801a538:	46bd      	mov	sp, r7
 801a53a:	bd80      	pop	{r7, pc}
 801a53c:	08029918 	.word	0x08029918
 801a540:	080299c8 	.word	0x080299c8
 801a544:	0802996c 	.word	0x0802996c

0801a548 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801a548:	b580      	push	{r7, lr}
 801a54a:	b082      	sub	sp, #8
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	6078      	str	r0, [r7, #4]
 801a550:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d106      	bne.n	801a566 <memp_free_pool+0x1e>
 801a558:	4b0a      	ldr	r3, [pc, #40]	@ (801a584 <memp_free_pool+0x3c>)
 801a55a:	f240 1295 	movw	r2, #405	@ 0x195
 801a55e:	490a      	ldr	r1, [pc, #40]	@ (801a588 <memp_free_pool+0x40>)
 801a560:	480a      	ldr	r0, [pc, #40]	@ (801a58c <memp_free_pool+0x44>)
 801a562:	f00d f903 	bl	802776c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d007      	beq.n	801a57c <memp_free_pool+0x34>
 801a56c:	683b      	ldr	r3, [r7, #0]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d004      	beq.n	801a57c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801a572:	6839      	ldr	r1, [r7, #0]
 801a574:	6878      	ldr	r0, [r7, #4]
 801a576:	f7ff ffbb 	bl	801a4f0 <do_memp_free_pool>
 801a57a:	e000      	b.n	801a57e <memp_free_pool+0x36>
    return;
 801a57c:	bf00      	nop
}
 801a57e:	3708      	adds	r7, #8
 801a580:	46bd      	mov	sp, r7
 801a582:	bd80      	pop	{r7, pc}
 801a584:	08029918 	.word	0x08029918
 801a588:	08029994 	.word	0x08029994
 801a58c:	0802996c 	.word	0x0802996c

0801a590 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801a590:	b580      	push	{r7, lr}
 801a592:	b082      	sub	sp, #8
 801a594:	af00      	add	r7, sp, #0
 801a596:	4603      	mov	r3, r0
 801a598:	6039      	str	r1, [r7, #0]
 801a59a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a59c:	79fb      	ldrb	r3, [r7, #7]
 801a59e:	2b0c      	cmp	r3, #12
 801a5a0:	d907      	bls.n	801a5b2 <memp_free+0x22>
 801a5a2:	4b0c      	ldr	r3, [pc, #48]	@ (801a5d4 <memp_free+0x44>)
 801a5a4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801a5a8:	490b      	ldr	r1, [pc, #44]	@ (801a5d8 <memp_free+0x48>)
 801a5aa:	480c      	ldr	r0, [pc, #48]	@ (801a5dc <memp_free+0x4c>)
 801a5ac:	f00d f8de 	bl	802776c <iprintf>
 801a5b0:	e00c      	b.n	801a5cc <memp_free+0x3c>

  if (mem == NULL) {
 801a5b2:	683b      	ldr	r3, [r7, #0]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d008      	beq.n	801a5ca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801a5b8:	79fb      	ldrb	r3, [r7, #7]
 801a5ba:	4a09      	ldr	r2, [pc, #36]	@ (801a5e0 <memp_free+0x50>)
 801a5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a5c0:	6839      	ldr	r1, [r7, #0]
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	f7ff ff94 	bl	801a4f0 <do_memp_free_pool>
 801a5c8:	e000      	b.n	801a5cc <memp_free+0x3c>
    return;
 801a5ca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801a5cc:	3708      	adds	r7, #8
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	bd80      	pop	{r7, pc}
 801a5d2:	bf00      	nop
 801a5d4:	08029918 	.word	0x08029918
 801a5d8:	080299e8 	.word	0x080299e8
 801a5dc:	0802996c 	.word	0x0802996c
 801a5e0:	0802c504 	.word	0x0802c504

0801a5e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801a5e4:	b480      	push	{r7}
 801a5e6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801a5e8:	bf00      	nop
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f0:	4770      	bx	lr
	...

0801a5f4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b086      	sub	sp, #24
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	60f8      	str	r0, [r7, #12]
 801a5fc:	60b9      	str	r1, [r7, #8]
 801a5fe:	607a      	str	r2, [r7, #4]
 801a600:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	2b00      	cmp	r3, #0
 801a606:	d108      	bne.n	801a61a <netif_add+0x26>
 801a608:	4b5b      	ldr	r3, [pc, #364]	@ (801a778 <netif_add+0x184>)
 801a60a:	f240 1227 	movw	r2, #295	@ 0x127
 801a60e:	495b      	ldr	r1, [pc, #364]	@ (801a77c <netif_add+0x188>)
 801a610:	485b      	ldr	r0, [pc, #364]	@ (801a780 <netif_add+0x18c>)
 801a612:	f00d f8ab 	bl	802776c <iprintf>
 801a616:	2300      	movs	r3, #0
 801a618:	e0a9      	b.n	801a76e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d108      	bne.n	801a632 <netif_add+0x3e>
 801a620:	4b55      	ldr	r3, [pc, #340]	@ (801a778 <netif_add+0x184>)
 801a622:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801a626:	4957      	ldr	r1, [pc, #348]	@ (801a784 <netif_add+0x190>)
 801a628:	4855      	ldr	r0, [pc, #340]	@ (801a780 <netif_add+0x18c>)
 801a62a:	f00d f89f 	bl	802776c <iprintf>
 801a62e:	2300      	movs	r3, #0
 801a630:	e09d      	b.n	801a76e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801a632:	68bb      	ldr	r3, [r7, #8]
 801a634:	2b00      	cmp	r3, #0
 801a636:	d101      	bne.n	801a63c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801a638:	4b53      	ldr	r3, [pc, #332]	@ (801a788 <netif_add+0x194>)
 801a63a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d101      	bne.n	801a646 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801a642:	4b51      	ldr	r3, [pc, #324]	@ (801a788 <netif_add+0x194>)
 801a644:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801a646:	683b      	ldr	r3, [r7, #0]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d101      	bne.n	801a650 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801a64c:	4b4e      	ldr	r3, [pc, #312]	@ (801a788 <netif_add+0x194>)
 801a64e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	2200      	movs	r2, #0
 801a654:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	2200      	movs	r2, #0
 801a65a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	2200      	movs	r2, #0
 801a660:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	4a49      	ldr	r2, [pc, #292]	@ (801a78c <netif_add+0x198>)
 801a666:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	2200      	movs	r2, #0
 801a66c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	2200      	movs	r2, #0
 801a672:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	3324      	adds	r3, #36	@ 0x24
 801a67a:	2204      	movs	r2, #4
 801a67c:	2100      	movs	r1, #0
 801a67e:	4618      	mov	r0, r3
 801a680:	f00d f9cc 	bl	8027a1c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	2200      	movs	r2, #0
 801a688:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	6a3a      	ldr	r2, [r7, #32]
 801a68e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801a690:	4b3f      	ldr	r3, [pc, #252]	@ (801a790 <netif_add+0x19c>)
 801a692:	781a      	ldrb	r2, [r3, #0]
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a69e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a6a0:	683b      	ldr	r3, [r7, #0]
 801a6a2:	687a      	ldr	r2, [r7, #4]
 801a6a4:	68b9      	ldr	r1, [r7, #8]
 801a6a6:	68f8      	ldr	r0, [r7, #12]
 801a6a8:	f000 f914 	bl	801a8d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801a6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6ae:	68f8      	ldr	r0, [r7, #12]
 801a6b0:	4798      	blx	r3
 801a6b2:	4603      	mov	r3, r0
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d001      	beq.n	801a6bc <netif_add+0xc8>
    return NULL;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	e058      	b.n	801a76e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801a6c2:	2bff      	cmp	r3, #255	@ 0xff
 801a6c4:	d103      	bne.n	801a6ce <netif_add+0xda>
        netif->num = 0;
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 801a6ce:	2300      	movs	r3, #0
 801a6d0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a6d2:	4b30      	ldr	r3, [pc, #192]	@ (801a794 <netif_add+0x1a0>)
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	617b      	str	r3, [r7, #20]
 801a6d8:	e02b      	b.n	801a732 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a6da:	697a      	ldr	r2, [r7, #20]
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	429a      	cmp	r2, r3
 801a6e0:	d106      	bne.n	801a6f0 <netif_add+0xfc>
 801a6e2:	4b25      	ldr	r3, [pc, #148]	@ (801a778 <netif_add+0x184>)
 801a6e4:	f240 128b 	movw	r2, #395	@ 0x18b
 801a6e8:	492b      	ldr	r1, [pc, #172]	@ (801a798 <netif_add+0x1a4>)
 801a6ea:	4825      	ldr	r0, [pc, #148]	@ (801a780 <netif_add+0x18c>)
 801a6ec:	f00d f83e 	bl	802776c <iprintf>
        num_netifs++;
 801a6f0:	693b      	ldr	r3, [r7, #16]
 801a6f2:	3301      	adds	r3, #1
 801a6f4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801a6f6:	693b      	ldr	r3, [r7, #16]
 801a6f8:	2bff      	cmp	r3, #255	@ 0xff
 801a6fa:	dd06      	ble.n	801a70a <netif_add+0x116>
 801a6fc:	4b1e      	ldr	r3, [pc, #120]	@ (801a778 <netif_add+0x184>)
 801a6fe:	f240 128d 	movw	r2, #397	@ 0x18d
 801a702:	4926      	ldr	r1, [pc, #152]	@ (801a79c <netif_add+0x1a8>)
 801a704:	481e      	ldr	r0, [pc, #120]	@ (801a780 <netif_add+0x18c>)
 801a706:	f00d f831 	bl	802776c <iprintf>
        if (netif2->num == netif->num) {
 801a70a:	697b      	ldr	r3, [r7, #20]
 801a70c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801a716:	429a      	cmp	r2, r3
 801a718:	d108      	bne.n	801a72c <netif_add+0x138>
          netif->num++;
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801a720:	3301      	adds	r3, #1
 801a722:	b2da      	uxtb	r2, r3
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 801a72a:	e005      	b.n	801a738 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a72c:	697b      	ldr	r3, [r7, #20]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	617b      	str	r3, [r7, #20]
 801a732:	697b      	ldr	r3, [r7, #20]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d1d0      	bne.n	801a6da <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 801a738:	697b      	ldr	r3, [r7, #20]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d1be      	bne.n	801a6bc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801a744:	2bfe      	cmp	r3, #254	@ 0xfe
 801a746:	d103      	bne.n	801a750 <netif_add+0x15c>
    netif_num = 0;
 801a748:	4b11      	ldr	r3, [pc, #68]	@ (801a790 <netif_add+0x19c>)
 801a74a:	2200      	movs	r2, #0
 801a74c:	701a      	strb	r2, [r3, #0]
 801a74e:	e006      	b.n	801a75e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801a756:	3301      	adds	r3, #1
 801a758:	b2da      	uxtb	r2, r3
 801a75a:	4b0d      	ldr	r3, [pc, #52]	@ (801a790 <netif_add+0x19c>)
 801a75c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801a75e:	4b0d      	ldr	r3, [pc, #52]	@ (801a794 <netif_add+0x1a0>)
 801a760:	681a      	ldr	r2, [r3, #0]
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801a766:	4a0b      	ldr	r2, [pc, #44]	@ (801a794 <netif_add+0x1a0>)
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801a76c:	68fb      	ldr	r3, [r7, #12]
}
 801a76e:	4618      	mov	r0, r3
 801a770:	3718      	adds	r7, #24
 801a772:	46bd      	mov	sp, r7
 801a774:	bd80      	pop	{r7, pc}
 801a776:	bf00      	nop
 801a778:	08029a04 	.word	0x08029a04
 801a77c:	08029a98 	.word	0x08029a98
 801a780:	08029a54 	.word	0x08029a54
 801a784:	08029ab4 	.word	0x08029ab4
 801a788:	0802c588 	.word	0x0802c588
 801a78c:	0801abb7 	.word	0x0801abb7
 801a790:	2001115c 	.word	0x2001115c
 801a794:	20011154 	.word	0x20011154
 801a798:	08029ad8 	.word	0x08029ad8
 801a79c:	08029aec 	.word	0x08029aec

0801a7a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b082      	sub	sp, #8
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	6078      	str	r0, [r7, #4]
 801a7a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a7aa:	6839      	ldr	r1, [r7, #0]
 801a7ac:	6878      	ldr	r0, [r7, #4]
 801a7ae:	f002 fe97 	bl	801d4e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801a7b2:	6839      	ldr	r1, [r7, #0]
 801a7b4:	6878      	ldr	r0, [r7, #4]
 801a7b6:	f007 ff9b 	bl	80226f0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801a7ba:	bf00      	nop
 801a7bc:	3708      	adds	r7, #8
 801a7be:	46bd      	mov	sp, r7
 801a7c0:	bd80      	pop	{r7, pc}
	...

0801a7c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b086      	sub	sp, #24
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	60f8      	str	r0, [r7, #12]
 801a7cc:	60b9      	str	r1, [r7, #8]
 801a7ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d106      	bne.n	801a7e4 <netif_do_set_ipaddr+0x20>
 801a7d6:	4b1d      	ldr	r3, [pc, #116]	@ (801a84c <netif_do_set_ipaddr+0x88>)
 801a7d8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801a7dc:	491c      	ldr	r1, [pc, #112]	@ (801a850 <netif_do_set_ipaddr+0x8c>)
 801a7de:	481d      	ldr	r0, [pc, #116]	@ (801a854 <netif_do_set_ipaddr+0x90>)
 801a7e0:	f00c ffc4 	bl	802776c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d106      	bne.n	801a7f8 <netif_do_set_ipaddr+0x34>
 801a7ea:	4b18      	ldr	r3, [pc, #96]	@ (801a84c <netif_do_set_ipaddr+0x88>)
 801a7ec:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 801a7f0:	4917      	ldr	r1, [pc, #92]	@ (801a850 <netif_do_set_ipaddr+0x8c>)
 801a7f2:	4818      	ldr	r0, [pc, #96]	@ (801a854 <netif_do_set_ipaddr+0x90>)
 801a7f4:	f00c ffba 	bl	802776c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	681a      	ldr	r2, [r3, #0]
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	3304      	adds	r3, #4
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	429a      	cmp	r2, r3
 801a804:	d01c      	beq.n	801a840 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801a806:	68bb      	ldr	r3, [r7, #8]
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	3304      	adds	r3, #4
 801a810:	681a      	ldr	r2, [r3, #0]
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801a816:	f107 0314 	add.w	r3, r7, #20
 801a81a:	4619      	mov	r1, r3
 801a81c:	6878      	ldr	r0, [r7, #4]
 801a81e:	f7ff ffbf 	bl	801a7a0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a822:	68bb      	ldr	r3, [r7, #8]
 801a824:	2b00      	cmp	r3, #0
 801a826:	d002      	beq.n	801a82e <netif_do_set_ipaddr+0x6a>
 801a828:	68bb      	ldr	r3, [r7, #8]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	e000      	b.n	801a830 <netif_do_set_ipaddr+0x6c>
 801a82e:	2300      	movs	r3, #0
 801a830:	68fa      	ldr	r2, [r7, #12]
 801a832:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a834:	2101      	movs	r1, #1
 801a836:	68f8      	ldr	r0, [r7, #12]
 801a838:	f000 f8d2 	bl	801a9e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801a83c:	2301      	movs	r3, #1
 801a83e:	e000      	b.n	801a842 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801a840:	2300      	movs	r3, #0
}
 801a842:	4618      	mov	r0, r3
 801a844:	3718      	adds	r7, #24
 801a846:	46bd      	mov	sp, r7
 801a848:	bd80      	pop	{r7, pc}
 801a84a:	bf00      	nop
 801a84c:	08029a04 	.word	0x08029a04
 801a850:	08029b1c 	.word	0x08029b1c
 801a854:	08029a54 	.word	0x08029a54

0801a858 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801a858:	b480      	push	{r7}
 801a85a:	b085      	sub	sp, #20
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	60f8      	str	r0, [r7, #12]
 801a860:	60b9      	str	r1, [r7, #8]
 801a862:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801a864:	68bb      	ldr	r3, [r7, #8]
 801a866:	681a      	ldr	r2, [r3, #0]
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	3308      	adds	r3, #8
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	429a      	cmp	r2, r3
 801a870:	d00a      	beq.n	801a888 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d002      	beq.n	801a87e <netif_do_set_netmask+0x26>
 801a878:	68bb      	ldr	r3, [r7, #8]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	e000      	b.n	801a880 <netif_do_set_netmask+0x28>
 801a87e:	2300      	movs	r3, #0
 801a880:	68fa      	ldr	r2, [r7, #12]
 801a882:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801a884:	2301      	movs	r3, #1
 801a886:	e000      	b.n	801a88a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801a888:	2300      	movs	r3, #0
}
 801a88a:	4618      	mov	r0, r3
 801a88c:	3714      	adds	r7, #20
 801a88e:	46bd      	mov	sp, r7
 801a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a894:	4770      	bx	lr

0801a896 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801a896:	b480      	push	{r7}
 801a898:	b085      	sub	sp, #20
 801a89a:	af00      	add	r7, sp, #0
 801a89c:	60f8      	str	r0, [r7, #12]
 801a89e:	60b9      	str	r1, [r7, #8]
 801a8a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	681a      	ldr	r2, [r3, #0]
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	330c      	adds	r3, #12
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	429a      	cmp	r2, r3
 801a8ae:	d00a      	beq.n	801a8c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801a8b0:	68bb      	ldr	r3, [r7, #8]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d002      	beq.n	801a8bc <netif_do_set_gw+0x26>
 801a8b6:	68bb      	ldr	r3, [r7, #8]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	e000      	b.n	801a8be <netif_do_set_gw+0x28>
 801a8bc:	2300      	movs	r3, #0
 801a8be:	68fa      	ldr	r2, [r7, #12]
 801a8c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801a8c2:	2301      	movs	r3, #1
 801a8c4:	e000      	b.n	801a8c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801a8c6:	2300      	movs	r3, #0
}
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	3714      	adds	r7, #20
 801a8cc:	46bd      	mov	sp, r7
 801a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d2:	4770      	bx	lr

0801a8d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	b088      	sub	sp, #32
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	60f8      	str	r0, [r7, #12]
 801a8dc:	60b9      	str	r1, [r7, #8]
 801a8de:	607a      	str	r2, [r7, #4]
 801a8e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a8ea:	68bb      	ldr	r3, [r7, #8]
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d101      	bne.n	801a8f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801a8f0:	4b1c      	ldr	r3, [pc, #112]	@ (801a964 <netif_set_addr+0x90>)
 801a8f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d101      	bne.n	801a8fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801a8fa:	4b1a      	ldr	r3, [pc, #104]	@ (801a964 <netif_set_addr+0x90>)
 801a8fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d101      	bne.n	801a908 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801a904:	4b17      	ldr	r3, [pc, #92]	@ (801a964 <netif_set_addr+0x90>)
 801a906:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d003      	beq.n	801a916 <netif_set_addr+0x42>
 801a90e:	68bb      	ldr	r3, [r7, #8]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d101      	bne.n	801a91a <netif_set_addr+0x46>
 801a916:	2301      	movs	r3, #1
 801a918:	e000      	b.n	801a91c <netif_set_addr+0x48>
 801a91a:	2300      	movs	r3, #0
 801a91c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801a91e:	697b      	ldr	r3, [r7, #20]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d006      	beq.n	801a932 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a924:	f107 0310 	add.w	r3, r7, #16
 801a928:	461a      	mov	r2, r3
 801a92a:	68b9      	ldr	r1, [r7, #8]
 801a92c:	68f8      	ldr	r0, [r7, #12]
 801a92e:	f7ff ff49 	bl	801a7c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801a932:	69fa      	ldr	r2, [r7, #28]
 801a934:	6879      	ldr	r1, [r7, #4]
 801a936:	68f8      	ldr	r0, [r7, #12]
 801a938:	f7ff ff8e 	bl	801a858 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801a93c:	69ba      	ldr	r2, [r7, #24]
 801a93e:	6839      	ldr	r1, [r7, #0]
 801a940:	68f8      	ldr	r0, [r7, #12]
 801a942:	f7ff ffa8 	bl	801a896 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801a946:	697b      	ldr	r3, [r7, #20]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d106      	bne.n	801a95a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a94c:	f107 0310 	add.w	r3, r7, #16
 801a950:	461a      	mov	r2, r3
 801a952:	68b9      	ldr	r1, [r7, #8]
 801a954:	68f8      	ldr	r0, [r7, #12]
 801a956:	f7ff ff35 	bl	801a7c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801a95a:	bf00      	nop
 801a95c:	3720      	adds	r7, #32
 801a95e:	46bd      	mov	sp, r7
 801a960:	bd80      	pop	{r7, pc}
 801a962:	bf00      	nop
 801a964:	0802c588 	.word	0x0802c588

0801a968 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801a968:	b480      	push	{r7}
 801a96a:	b083      	sub	sp, #12
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801a970:	4a04      	ldr	r2, [pc, #16]	@ (801a984 <netif_set_default+0x1c>)
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801a976:	bf00      	nop
 801a978:	370c      	adds	r7, #12
 801a97a:	46bd      	mov	sp, r7
 801a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a980:	4770      	bx	lr
 801a982:	bf00      	nop
 801a984:	20011158 	.word	0x20011158

0801a988 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b082      	sub	sp, #8
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	2b00      	cmp	r3, #0
 801a994:	d107      	bne.n	801a9a6 <netif_set_up+0x1e>
 801a996:	4b0f      	ldr	r3, [pc, #60]	@ (801a9d4 <netif_set_up+0x4c>)
 801a998:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801a99c:	490e      	ldr	r1, [pc, #56]	@ (801a9d8 <netif_set_up+0x50>)
 801a99e:	480f      	ldr	r0, [pc, #60]	@ (801a9dc <netif_set_up+0x54>)
 801a9a0:	f00c fee4 	bl	802776c <iprintf>
 801a9a4:	e013      	b.n	801a9ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a9ac:	f003 0301 	and.w	r3, r3, #1
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d10c      	bne.n	801a9ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a9ba:	f043 0301 	orr.w	r3, r3, #1
 801a9be:	b2da      	uxtb	r2, r3
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a9c6:	2103      	movs	r1, #3
 801a9c8:	6878      	ldr	r0, [r7, #4]
 801a9ca:	f000 f809 	bl	801a9e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801a9ce:	3708      	adds	r7, #8
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	bd80      	pop	{r7, pc}
 801a9d4:	08029a04 	.word	0x08029a04
 801a9d8:	08029b8c 	.word	0x08029b8c
 801a9dc:	08029a54 	.word	0x08029a54

0801a9e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801a9e0:	b580      	push	{r7, lr}
 801a9e2:	b082      	sub	sp, #8
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	6078      	str	r0, [r7, #4]
 801a9e8:	460b      	mov	r3, r1
 801a9ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d106      	bne.n	801aa00 <netif_issue_reports+0x20>
 801a9f2:	4b18      	ldr	r3, [pc, #96]	@ (801aa54 <netif_issue_reports+0x74>)
 801a9f4:	f240 326d 	movw	r2, #877	@ 0x36d
 801a9f8:	4917      	ldr	r1, [pc, #92]	@ (801aa58 <netif_issue_reports+0x78>)
 801a9fa:	4818      	ldr	r0, [pc, #96]	@ (801aa5c <netif_issue_reports+0x7c>)
 801a9fc:	f00c feb6 	bl	802776c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aa06:	f003 0304 	and.w	r3, r3, #4
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d01e      	beq.n	801aa4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aa14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d017      	beq.n	801aa4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801aa1c:	78fb      	ldrb	r3, [r7, #3]
 801aa1e:	f003 0301 	and.w	r3, r3, #1
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d013      	beq.n	801aa4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	3304      	adds	r3, #4
 801aa2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d00e      	beq.n	801aa4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aa36:	f003 0308 	and.w	r3, r3, #8
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d007      	beq.n	801aa4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	3304      	adds	r3, #4
 801aa42:	4619      	mov	r1, r3
 801aa44:	6878      	ldr	r0, [r7, #4]
 801aa46:	f00a fc4f 	bl	80252e8 <etharp_request>
 801aa4a:	e000      	b.n	801aa4e <netif_issue_reports+0x6e>
    return;
 801aa4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801aa4e:	3708      	adds	r7, #8
 801aa50:	46bd      	mov	sp, r7
 801aa52:	bd80      	pop	{r7, pc}
 801aa54:	08029a04 	.word	0x08029a04
 801aa58:	08029ba8 	.word	0x08029ba8
 801aa5c:	08029a54 	.word	0x08029a54

0801aa60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801aa60:	b580      	push	{r7, lr}
 801aa62:	b082      	sub	sp, #8
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d107      	bne.n	801aa7e <netif_set_down+0x1e>
 801aa6e:	4b12      	ldr	r3, [pc, #72]	@ (801aab8 <netif_set_down+0x58>)
 801aa70:	f240 329b 	movw	r2, #923	@ 0x39b
 801aa74:	4911      	ldr	r1, [pc, #68]	@ (801aabc <netif_set_down+0x5c>)
 801aa76:	4812      	ldr	r0, [pc, #72]	@ (801aac0 <netif_set_down+0x60>)
 801aa78:	f00c fe78 	bl	802776c <iprintf>
 801aa7c:	e019      	b.n	801aab2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aa84:	f003 0301 	and.w	r3, r3, #1
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d012      	beq.n	801aab2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aa92:	f023 0301 	bic.w	r3, r3, #1
 801aa96:	b2da      	uxtb	r2, r3
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aaa4:	f003 0308 	and.w	r3, r3, #8
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d002      	beq.n	801aab2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801aaac:	6878      	ldr	r0, [r7, #4]
 801aaae:	f009 ffd5 	bl	8024a5c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801aab2:	3708      	adds	r7, #8
 801aab4:	46bd      	mov	sp, r7
 801aab6:	bd80      	pop	{r7, pc}
 801aab8:	08029a04 	.word	0x08029a04
 801aabc:	08029bcc 	.word	0x08029bcc
 801aac0:	08029a54 	.word	0x08029a54

0801aac4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b082      	sub	sp, #8
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d107      	bne.n	801aae2 <netif_set_link_up+0x1e>
 801aad2:	4b15      	ldr	r3, [pc, #84]	@ (801ab28 <netif_set_link_up+0x64>)
 801aad4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801aad8:	4914      	ldr	r1, [pc, #80]	@ (801ab2c <netif_set_link_up+0x68>)
 801aada:	4815      	ldr	r0, [pc, #84]	@ (801ab30 <netif_set_link_up+0x6c>)
 801aadc:	f00c fe46 	bl	802776c <iprintf>
 801aae0:	e01e      	b.n	801ab20 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aae8:	f003 0304 	and.w	r3, r3, #4
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d117      	bne.n	801ab20 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aaf6:	f043 0304 	orr.w	r3, r3, #4
 801aafa:	b2da      	uxtb	r2, r3
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801ab02:	6878      	ldr	r0, [r7, #4]
 801ab04:	f008 fa20 	bl	8022f48 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801ab08:	2103      	movs	r1, #3
 801ab0a:	6878      	ldr	r0, [r7, #4]
 801ab0c:	f7ff ff68 	bl	801a9e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	69db      	ldr	r3, [r3, #28]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d003      	beq.n	801ab20 <netif_set_link_up+0x5c>
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	69db      	ldr	r3, [r3, #28]
 801ab1c:	6878      	ldr	r0, [r7, #4]
 801ab1e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801ab20:	3708      	adds	r7, #8
 801ab22:	46bd      	mov	sp, r7
 801ab24:	bd80      	pop	{r7, pc}
 801ab26:	bf00      	nop
 801ab28:	08029a04 	.word	0x08029a04
 801ab2c:	08029bec 	.word	0x08029bec
 801ab30:	08029a54 	.word	0x08029a54

0801ab34 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b082      	sub	sp, #8
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d107      	bne.n	801ab52 <netif_set_link_down+0x1e>
 801ab42:	4b11      	ldr	r3, [pc, #68]	@ (801ab88 <netif_set_link_down+0x54>)
 801ab44:	f240 4206 	movw	r2, #1030	@ 0x406
 801ab48:	4910      	ldr	r1, [pc, #64]	@ (801ab8c <netif_set_link_down+0x58>)
 801ab4a:	4811      	ldr	r0, [pc, #68]	@ (801ab90 <netif_set_link_down+0x5c>)
 801ab4c:	f00c fe0e 	bl	802776c <iprintf>
 801ab50:	e017      	b.n	801ab82 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801ab58:	f003 0304 	and.w	r3, r3, #4
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d010      	beq.n	801ab82 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801ab66:	f023 0304 	bic.w	r3, r3, #4
 801ab6a:	b2da      	uxtb	r2, r3
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	69db      	ldr	r3, [r3, #28]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d003      	beq.n	801ab82 <netif_set_link_down+0x4e>
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	69db      	ldr	r3, [r3, #28]
 801ab7e:	6878      	ldr	r0, [r7, #4]
 801ab80:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801ab82:	3708      	adds	r7, #8
 801ab84:	46bd      	mov	sp, r7
 801ab86:	bd80      	pop	{r7, pc}
 801ab88:	08029a04 	.word	0x08029a04
 801ab8c:	08029c10 	.word	0x08029c10
 801ab90:	08029a54 	.word	0x08029a54

0801ab94 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801ab94:	b480      	push	{r7}
 801ab96:	b083      	sub	sp, #12
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
 801ab9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d002      	beq.n	801abaa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	683a      	ldr	r2, [r7, #0]
 801aba8:	61da      	str	r2, [r3, #28]
  }
}
 801abaa:	bf00      	nop
 801abac:	370c      	adds	r7, #12
 801abae:	46bd      	mov	sp, r7
 801abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb4:	4770      	bx	lr

0801abb6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801abb6:	b480      	push	{r7}
 801abb8:	b085      	sub	sp, #20
 801abba:	af00      	add	r7, sp, #0
 801abbc:	60f8      	str	r0, [r7, #12]
 801abbe:	60b9      	str	r1, [r7, #8]
 801abc0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801abc2:	f06f 030b 	mvn.w	r3, #11
}
 801abc6:	4618      	mov	r0, r3
 801abc8:	3714      	adds	r7, #20
 801abca:	46bd      	mov	sp, r7
 801abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abd0:	4770      	bx	lr
	...

0801abd4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801abd4:	b480      	push	{r7}
 801abd6:	b085      	sub	sp, #20
 801abd8:	af00      	add	r7, sp, #0
 801abda:	4603      	mov	r3, r0
 801abdc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801abde:	79fb      	ldrb	r3, [r7, #7]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d013      	beq.n	801ac0c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801abe4:	4b0d      	ldr	r3, [pc, #52]	@ (801ac1c <netif_get_by_index+0x48>)
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	60fb      	str	r3, [r7, #12]
 801abea:	e00c      	b.n	801ac06 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801abf2:	3301      	adds	r3, #1
 801abf4:	b2db      	uxtb	r3, r3
 801abf6:	79fa      	ldrb	r2, [r7, #7]
 801abf8:	429a      	cmp	r2, r3
 801abfa:	d101      	bne.n	801ac00 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	e006      	b.n	801ac0e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	60fb      	str	r3, [r7, #12]
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d1ef      	bne.n	801abec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801ac0c:	2300      	movs	r3, #0
}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	3714      	adds	r7, #20
 801ac12:	46bd      	mov	sp, r7
 801ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac18:	4770      	bx	lr
 801ac1a:	bf00      	nop
 801ac1c:	20011154 	.word	0x20011154

0801ac20 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b082      	sub	sp, #8
 801ac24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801ac26:	f00c f8cd 	bl	8026dc4 <sys_arch_protect>
 801ac2a:	6038      	str	r0, [r7, #0]
 801ac2c:	4b0d      	ldr	r3, [pc, #52]	@ (801ac64 <pbuf_free_ooseq+0x44>)
 801ac2e:	2200      	movs	r2, #0
 801ac30:	701a      	strb	r2, [r3, #0]
 801ac32:	6838      	ldr	r0, [r7, #0]
 801ac34:	f00c f8d4 	bl	8026de0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801ac38:	4b0b      	ldr	r3, [pc, #44]	@ (801ac68 <pbuf_free_ooseq+0x48>)
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	607b      	str	r3, [r7, #4]
 801ac3e:	e00a      	b.n	801ac56 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d003      	beq.n	801ac50 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801ac48:	6878      	ldr	r0, [r7, #4]
 801ac4a:	f002 fc87 	bl	801d55c <tcp_free_ooseq>
      return;
 801ac4e:	e005      	b.n	801ac5c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	68db      	ldr	r3, [r3, #12]
 801ac54:	607b      	str	r3, [r7, #4]
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d1f1      	bne.n	801ac40 <pbuf_free_ooseq+0x20>
    }
  }
}
 801ac5c:	3708      	adds	r7, #8
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}
 801ac62:	bf00      	nop
 801ac64:	2001115d 	.word	0x2001115d
 801ac68:	2001116c 	.word	0x2001116c

0801ac6c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b082      	sub	sp, #8
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801ac74:	f7ff ffd4 	bl	801ac20 <pbuf_free_ooseq>
}
 801ac78:	bf00      	nop
 801ac7a:	3708      	adds	r7, #8
 801ac7c:	46bd      	mov	sp, r7
 801ac7e:	bd80      	pop	{r7, pc}

0801ac80 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801ac80:	b580      	push	{r7, lr}
 801ac82:	b082      	sub	sp, #8
 801ac84:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801ac86:	f00c f89d 	bl	8026dc4 <sys_arch_protect>
 801ac8a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801ac8c:	4b0f      	ldr	r3, [pc, #60]	@ (801accc <pbuf_pool_is_empty+0x4c>)
 801ac8e:	781b      	ldrb	r3, [r3, #0]
 801ac90:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801ac92:	4b0e      	ldr	r3, [pc, #56]	@ (801accc <pbuf_pool_is_empty+0x4c>)
 801ac94:	2201      	movs	r2, #1
 801ac96:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801ac98:	6878      	ldr	r0, [r7, #4]
 801ac9a:	f00c f8a1 	bl	8026de0 <sys_arch_unprotect>

  if (!queued) {
 801ac9e:	78fb      	ldrb	r3, [r7, #3]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d10f      	bne.n	801acc4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801aca4:	2100      	movs	r1, #0
 801aca6:	480a      	ldr	r0, [pc, #40]	@ (801acd0 <pbuf_pool_is_empty+0x50>)
 801aca8:	f7fe fe84 	bl	80199b4 <tcpip_try_callback>
 801acac:	4603      	mov	r3, r0
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d008      	beq.n	801acc4 <pbuf_pool_is_empty+0x44>
 801acb2:	f00c f887 	bl	8026dc4 <sys_arch_protect>
 801acb6:	6078      	str	r0, [r7, #4]
 801acb8:	4b04      	ldr	r3, [pc, #16]	@ (801accc <pbuf_pool_is_empty+0x4c>)
 801acba:	2200      	movs	r2, #0
 801acbc:	701a      	strb	r2, [r3, #0]
 801acbe:	6878      	ldr	r0, [r7, #4]
 801acc0:	f00c f88e 	bl	8026de0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801acc4:	bf00      	nop
 801acc6:	3708      	adds	r7, #8
 801acc8:	46bd      	mov	sp, r7
 801acca:	bd80      	pop	{r7, pc}
 801accc:	2001115d 	.word	0x2001115d
 801acd0:	0801ac6d 	.word	0x0801ac6d

0801acd4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801acd4:	b480      	push	{r7}
 801acd6:	b085      	sub	sp, #20
 801acd8:	af00      	add	r7, sp, #0
 801acda:	60f8      	str	r0, [r7, #12]
 801acdc:	60b9      	str	r1, [r7, #8]
 801acde:	4611      	mov	r1, r2
 801ace0:	461a      	mov	r2, r3
 801ace2:	460b      	mov	r3, r1
 801ace4:	80fb      	strh	r3, [r7, #6]
 801ace6:	4613      	mov	r3, r2
 801ace8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	2200      	movs	r2, #0
 801acee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	68ba      	ldr	r2, [r7, #8]
 801acf4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	88fa      	ldrh	r2, [r7, #6]
 801acfa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	88ba      	ldrh	r2, [r7, #4]
 801ad00:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801ad02:	8b3b      	ldrh	r3, [r7, #24]
 801ad04:	b2da      	uxtb	r2, r3
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	7f3a      	ldrb	r2, [r7, #28]
 801ad0e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	2201      	movs	r2, #1
 801ad14:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	2200      	movs	r2, #0
 801ad1a:	73da      	strb	r2, [r3, #15]
}
 801ad1c:	bf00      	nop
 801ad1e:	3714      	adds	r7, #20
 801ad20:	46bd      	mov	sp, r7
 801ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad26:	4770      	bx	lr

0801ad28 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b08c      	sub	sp, #48	@ 0x30
 801ad2c:	af02      	add	r7, sp, #8
 801ad2e:	4603      	mov	r3, r0
 801ad30:	71fb      	strb	r3, [r7, #7]
 801ad32:	460b      	mov	r3, r1
 801ad34:	80bb      	strh	r3, [r7, #4]
 801ad36:	4613      	mov	r3, r2
 801ad38:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801ad3a:	79fb      	ldrb	r3, [r7, #7]
 801ad3c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801ad3e:	887b      	ldrh	r3, [r7, #2]
 801ad40:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801ad44:	d07f      	beq.n	801ae46 <pbuf_alloc+0x11e>
 801ad46:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801ad4a:	f300 80c8 	bgt.w	801aede <pbuf_alloc+0x1b6>
 801ad4e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801ad52:	d010      	beq.n	801ad76 <pbuf_alloc+0x4e>
 801ad54:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801ad58:	f300 80c1 	bgt.w	801aede <pbuf_alloc+0x1b6>
 801ad5c:	2b01      	cmp	r3, #1
 801ad5e:	d002      	beq.n	801ad66 <pbuf_alloc+0x3e>
 801ad60:	2b41      	cmp	r3, #65	@ 0x41
 801ad62:	f040 80bc 	bne.w	801aede <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801ad66:	887a      	ldrh	r2, [r7, #2]
 801ad68:	88bb      	ldrh	r3, [r7, #4]
 801ad6a:	4619      	mov	r1, r3
 801ad6c:	2000      	movs	r0, #0
 801ad6e:	f000 f8d1 	bl	801af14 <pbuf_alloc_reference>
 801ad72:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801ad74:	e0bd      	b.n	801aef2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801ad76:	2300      	movs	r3, #0
 801ad78:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801ad7e:	88bb      	ldrh	r3, [r7, #4]
 801ad80:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801ad82:	200c      	movs	r0, #12
 801ad84:	f7ff fb8e 	bl	801a4a4 <memp_malloc>
 801ad88:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801ad8a:	693b      	ldr	r3, [r7, #16]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d109      	bne.n	801ada4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801ad90:	f7ff ff76 	bl	801ac80 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801ad94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d002      	beq.n	801ada0 <pbuf_alloc+0x78>
            pbuf_free(p);
 801ad9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ad9c:	f000 fada 	bl	801b354 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801ada0:	2300      	movs	r3, #0
 801ada2:	e0a7      	b.n	801aef4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801ada4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ada6:	3303      	adds	r3, #3
 801ada8:	b29b      	uxth	r3, r3
 801adaa:	f023 0303 	bic.w	r3, r3, #3
 801adae:	b29b      	uxth	r3, r3
 801adb0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801adb4:	b29b      	uxth	r3, r3
 801adb6:	8b7a      	ldrh	r2, [r7, #26]
 801adb8:	4293      	cmp	r3, r2
 801adba:	bf28      	it	cs
 801adbc:	4613      	movcs	r3, r2
 801adbe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801adc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801adc2:	3310      	adds	r3, #16
 801adc4:	693a      	ldr	r2, [r7, #16]
 801adc6:	4413      	add	r3, r2
 801adc8:	3303      	adds	r3, #3
 801adca:	f023 0303 	bic.w	r3, r3, #3
 801adce:	4618      	mov	r0, r3
 801add0:	89f9      	ldrh	r1, [r7, #14]
 801add2:	8b7a      	ldrh	r2, [r7, #26]
 801add4:	2300      	movs	r3, #0
 801add6:	9301      	str	r3, [sp, #4]
 801add8:	887b      	ldrh	r3, [r7, #2]
 801adda:	9300      	str	r3, [sp, #0]
 801addc:	460b      	mov	r3, r1
 801adde:	4601      	mov	r1, r0
 801ade0:	6938      	ldr	r0, [r7, #16]
 801ade2:	f7ff ff77 	bl	801acd4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801ade6:	693b      	ldr	r3, [r7, #16]
 801ade8:	685b      	ldr	r3, [r3, #4]
 801adea:	f003 0303 	and.w	r3, r3, #3
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d006      	beq.n	801ae00 <pbuf_alloc+0xd8>
 801adf2:	4b42      	ldr	r3, [pc, #264]	@ (801aefc <pbuf_alloc+0x1d4>)
 801adf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801adf8:	4941      	ldr	r1, [pc, #260]	@ (801af00 <pbuf_alloc+0x1d8>)
 801adfa:	4842      	ldr	r0, [pc, #264]	@ (801af04 <pbuf_alloc+0x1dc>)
 801adfc:	f00c fcb6 	bl	802776c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801ae00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ae02:	3303      	adds	r3, #3
 801ae04:	f023 0303 	bic.w	r3, r3, #3
 801ae08:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 801ae0c:	d106      	bne.n	801ae1c <pbuf_alloc+0xf4>
 801ae0e:	4b3b      	ldr	r3, [pc, #236]	@ (801aefc <pbuf_alloc+0x1d4>)
 801ae10:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801ae14:	493c      	ldr	r1, [pc, #240]	@ (801af08 <pbuf_alloc+0x1e0>)
 801ae16:	483b      	ldr	r0, [pc, #236]	@ (801af04 <pbuf_alloc+0x1dc>)
 801ae18:	f00c fca8 	bl	802776c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d102      	bne.n	801ae28 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801ae22:	693b      	ldr	r3, [r7, #16]
 801ae24:	627b      	str	r3, [r7, #36]	@ 0x24
 801ae26:	e002      	b.n	801ae2e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801ae28:	69fb      	ldr	r3, [r7, #28]
 801ae2a:	693a      	ldr	r2, [r7, #16]
 801ae2c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801ae2e:	693b      	ldr	r3, [r7, #16]
 801ae30:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801ae32:	8b7a      	ldrh	r2, [r7, #26]
 801ae34:	89fb      	ldrh	r3, [r7, #14]
 801ae36:	1ad3      	subs	r3, r2, r3
 801ae38:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801ae3a:	2300      	movs	r3, #0
 801ae3c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801ae3e:	8b7b      	ldrh	r3, [r7, #26]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d19e      	bne.n	801ad82 <pbuf_alloc+0x5a>
      break;
 801ae44:	e055      	b.n	801aef2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801ae46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ae48:	3303      	adds	r3, #3
 801ae4a:	b29b      	uxth	r3, r3
 801ae4c:	f023 0303 	bic.w	r3, r3, #3
 801ae50:	b29a      	uxth	r2, r3
 801ae52:	88bb      	ldrh	r3, [r7, #4]
 801ae54:	3303      	adds	r3, #3
 801ae56:	b29b      	uxth	r3, r3
 801ae58:	f023 0303 	bic.w	r3, r3, #3
 801ae5c:	b29b      	uxth	r3, r3
 801ae5e:	4413      	add	r3, r2
 801ae60:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801ae62:	8b3b      	ldrh	r3, [r7, #24]
 801ae64:	3310      	adds	r3, #16
 801ae66:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801ae68:	8b3a      	ldrh	r2, [r7, #24]
 801ae6a:	88bb      	ldrh	r3, [r7, #4]
 801ae6c:	3303      	adds	r3, #3
 801ae6e:	f023 0303 	bic.w	r3, r3, #3
 801ae72:	429a      	cmp	r2, r3
 801ae74:	d306      	bcc.n	801ae84 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801ae76:	8afa      	ldrh	r2, [r7, #22]
 801ae78:	88bb      	ldrh	r3, [r7, #4]
 801ae7a:	3303      	adds	r3, #3
 801ae7c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801ae80:	429a      	cmp	r2, r3
 801ae82:	d201      	bcs.n	801ae88 <pbuf_alloc+0x160>
        return NULL;
 801ae84:	2300      	movs	r3, #0
 801ae86:	e035      	b.n	801aef4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801ae88:	8afb      	ldrh	r3, [r7, #22]
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	f7ff f966 	bl	801a15c <mem_malloc>
 801ae90:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801ae92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d101      	bne.n	801ae9c <pbuf_alloc+0x174>
        return NULL;
 801ae98:	2300      	movs	r3, #0
 801ae9a:	e02b      	b.n	801aef4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801ae9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ae9e:	3310      	adds	r3, #16
 801aea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aea2:	4413      	add	r3, r2
 801aea4:	3303      	adds	r3, #3
 801aea6:	f023 0303 	bic.w	r3, r3, #3
 801aeaa:	4618      	mov	r0, r3
 801aeac:	88b9      	ldrh	r1, [r7, #4]
 801aeae:	88ba      	ldrh	r2, [r7, #4]
 801aeb0:	2300      	movs	r3, #0
 801aeb2:	9301      	str	r3, [sp, #4]
 801aeb4:	887b      	ldrh	r3, [r7, #2]
 801aeb6:	9300      	str	r3, [sp, #0]
 801aeb8:	460b      	mov	r3, r1
 801aeba:	4601      	mov	r1, r0
 801aebc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aebe:	f7ff ff09 	bl	801acd4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801aec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aec4:	685b      	ldr	r3, [r3, #4]
 801aec6:	f003 0303 	and.w	r3, r3, #3
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d010      	beq.n	801aef0 <pbuf_alloc+0x1c8>
 801aece:	4b0b      	ldr	r3, [pc, #44]	@ (801aefc <pbuf_alloc+0x1d4>)
 801aed0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801aed4:	490d      	ldr	r1, [pc, #52]	@ (801af0c <pbuf_alloc+0x1e4>)
 801aed6:	480b      	ldr	r0, [pc, #44]	@ (801af04 <pbuf_alloc+0x1dc>)
 801aed8:	f00c fc48 	bl	802776c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801aedc:	e008      	b.n	801aef0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801aede:	4b07      	ldr	r3, [pc, #28]	@ (801aefc <pbuf_alloc+0x1d4>)
 801aee0:	f240 1227 	movw	r2, #295	@ 0x127
 801aee4:	490a      	ldr	r1, [pc, #40]	@ (801af10 <pbuf_alloc+0x1e8>)
 801aee6:	4807      	ldr	r0, [pc, #28]	@ (801af04 <pbuf_alloc+0x1dc>)
 801aee8:	f00c fc40 	bl	802776c <iprintf>
      return NULL;
 801aeec:	2300      	movs	r3, #0
 801aeee:	e001      	b.n	801aef4 <pbuf_alloc+0x1cc>
      break;
 801aef0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801aef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801aef4:	4618      	mov	r0, r3
 801aef6:	3728      	adds	r7, #40	@ 0x28
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd80      	pop	{r7, pc}
 801aefc:	08029c34 	.word	0x08029c34
 801af00:	08029c64 	.word	0x08029c64
 801af04:	08029c94 	.word	0x08029c94
 801af08:	08029cbc 	.word	0x08029cbc
 801af0c:	08029cf0 	.word	0x08029cf0
 801af10:	08029d1c 	.word	0x08029d1c

0801af14 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801af14:	b580      	push	{r7, lr}
 801af16:	b086      	sub	sp, #24
 801af18:	af02      	add	r7, sp, #8
 801af1a:	6078      	str	r0, [r7, #4]
 801af1c:	460b      	mov	r3, r1
 801af1e:	807b      	strh	r3, [r7, #2]
 801af20:	4613      	mov	r3, r2
 801af22:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801af24:	883b      	ldrh	r3, [r7, #0]
 801af26:	2b41      	cmp	r3, #65	@ 0x41
 801af28:	d009      	beq.n	801af3e <pbuf_alloc_reference+0x2a>
 801af2a:	883b      	ldrh	r3, [r7, #0]
 801af2c:	2b01      	cmp	r3, #1
 801af2e:	d006      	beq.n	801af3e <pbuf_alloc_reference+0x2a>
 801af30:	4b0f      	ldr	r3, [pc, #60]	@ (801af70 <pbuf_alloc_reference+0x5c>)
 801af32:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801af36:	490f      	ldr	r1, [pc, #60]	@ (801af74 <pbuf_alloc_reference+0x60>)
 801af38:	480f      	ldr	r0, [pc, #60]	@ (801af78 <pbuf_alloc_reference+0x64>)
 801af3a:	f00c fc17 	bl	802776c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801af3e:	200b      	movs	r0, #11
 801af40:	f7ff fab0 	bl	801a4a4 <memp_malloc>
 801af44:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d101      	bne.n	801af50 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801af4c:	2300      	movs	r3, #0
 801af4e:	e00b      	b.n	801af68 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801af50:	8879      	ldrh	r1, [r7, #2]
 801af52:	887a      	ldrh	r2, [r7, #2]
 801af54:	2300      	movs	r3, #0
 801af56:	9301      	str	r3, [sp, #4]
 801af58:	883b      	ldrh	r3, [r7, #0]
 801af5a:	9300      	str	r3, [sp, #0]
 801af5c:	460b      	mov	r3, r1
 801af5e:	6879      	ldr	r1, [r7, #4]
 801af60:	68f8      	ldr	r0, [r7, #12]
 801af62:	f7ff feb7 	bl	801acd4 <pbuf_init_alloced_pbuf>
  return p;
 801af66:	68fb      	ldr	r3, [r7, #12]
}
 801af68:	4618      	mov	r0, r3
 801af6a:	3710      	adds	r7, #16
 801af6c:	46bd      	mov	sp, r7
 801af6e:	bd80      	pop	{r7, pc}
 801af70:	08029c34 	.word	0x08029c34
 801af74:	08029d38 	.word	0x08029d38
 801af78:	08029c94 	.word	0x08029c94

0801af7c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801af7c:	b580      	push	{r7, lr}
 801af7e:	b088      	sub	sp, #32
 801af80:	af02      	add	r7, sp, #8
 801af82:	607b      	str	r3, [r7, #4]
 801af84:	4603      	mov	r3, r0
 801af86:	73fb      	strb	r3, [r7, #15]
 801af88:	460b      	mov	r3, r1
 801af8a:	81bb      	strh	r3, [r7, #12]
 801af8c:	4613      	mov	r3, r2
 801af8e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801af90:	7bfb      	ldrb	r3, [r7, #15]
 801af92:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801af94:	8a7b      	ldrh	r3, [r7, #18]
 801af96:	3303      	adds	r3, #3
 801af98:	f023 0203 	bic.w	r2, r3, #3
 801af9c:	89bb      	ldrh	r3, [r7, #12]
 801af9e:	441a      	add	r2, r3
 801afa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801afa2:	429a      	cmp	r2, r3
 801afa4:	d901      	bls.n	801afaa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801afa6:	2300      	movs	r3, #0
 801afa8:	e018      	b.n	801afdc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801afaa:	6a3b      	ldr	r3, [r7, #32]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d007      	beq.n	801afc0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801afb0:	8a7b      	ldrh	r3, [r7, #18]
 801afb2:	3303      	adds	r3, #3
 801afb4:	f023 0303 	bic.w	r3, r3, #3
 801afb8:	6a3a      	ldr	r2, [r7, #32]
 801afba:	4413      	add	r3, r2
 801afbc:	617b      	str	r3, [r7, #20]
 801afbe:	e001      	b.n	801afc4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801afc0:	2300      	movs	r3, #0
 801afc2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801afc4:	6878      	ldr	r0, [r7, #4]
 801afc6:	89b9      	ldrh	r1, [r7, #12]
 801afc8:	89ba      	ldrh	r2, [r7, #12]
 801afca:	2302      	movs	r3, #2
 801afcc:	9301      	str	r3, [sp, #4]
 801afce:	897b      	ldrh	r3, [r7, #10]
 801afd0:	9300      	str	r3, [sp, #0]
 801afd2:	460b      	mov	r3, r1
 801afd4:	6979      	ldr	r1, [r7, #20]
 801afd6:	f7ff fe7d 	bl	801acd4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801afda:	687b      	ldr	r3, [r7, #4]
}
 801afdc:	4618      	mov	r0, r3
 801afde:	3718      	adds	r7, #24
 801afe0:	46bd      	mov	sp, r7
 801afe2:	bd80      	pop	{r7, pc}

0801afe4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b084      	sub	sp, #16
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
 801afec:	460b      	mov	r3, r1
 801afee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d106      	bne.n	801b004 <pbuf_realloc+0x20>
 801aff6:	4b3a      	ldr	r3, [pc, #232]	@ (801b0e0 <pbuf_realloc+0xfc>)
 801aff8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 801affc:	4939      	ldr	r1, [pc, #228]	@ (801b0e4 <pbuf_realloc+0x100>)
 801affe:	483a      	ldr	r0, [pc, #232]	@ (801b0e8 <pbuf_realloc+0x104>)
 801b000:	f00c fbb4 	bl	802776c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	891b      	ldrh	r3, [r3, #8]
 801b008:	887a      	ldrh	r2, [r7, #2]
 801b00a:	429a      	cmp	r2, r3
 801b00c:	d263      	bcs.n	801b0d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	891a      	ldrh	r2, [r3, #8]
 801b012:	887b      	ldrh	r3, [r7, #2]
 801b014:	1ad3      	subs	r3, r2, r3
 801b016:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801b018:	887b      	ldrh	r3, [r7, #2]
 801b01a:	817b      	strh	r3, [r7, #10]
  q = p;
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801b020:	e018      	b.n	801b054 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	895b      	ldrh	r3, [r3, #10]
 801b026:	897a      	ldrh	r2, [r7, #10]
 801b028:	1ad3      	subs	r3, r2, r3
 801b02a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	891a      	ldrh	r2, [r3, #8]
 801b030:	893b      	ldrh	r3, [r7, #8]
 801b032:	1ad3      	subs	r3, r2, r3
 801b034:	b29a      	uxth	r2, r3
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d106      	bne.n	801b054 <pbuf_realloc+0x70>
 801b046:	4b26      	ldr	r3, [pc, #152]	@ (801b0e0 <pbuf_realloc+0xfc>)
 801b048:	f240 12af 	movw	r2, #431	@ 0x1af
 801b04c:	4927      	ldr	r1, [pc, #156]	@ (801b0ec <pbuf_realloc+0x108>)
 801b04e:	4826      	ldr	r0, [pc, #152]	@ (801b0e8 <pbuf_realloc+0x104>)
 801b050:	f00c fb8c 	bl	802776c <iprintf>
  while (rem_len > q->len) {
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	895b      	ldrh	r3, [r3, #10]
 801b058:	897a      	ldrh	r2, [r7, #10]
 801b05a:	429a      	cmp	r2, r3
 801b05c:	d8e1      	bhi.n	801b022 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801b05e:	68fb      	ldr	r3, [r7, #12]
 801b060:	7b1b      	ldrb	r3, [r3, #12]
 801b062:	f003 030f 	and.w	r3, r3, #15
 801b066:	2b00      	cmp	r3, #0
 801b068:	d121      	bne.n	801b0ae <pbuf_realloc+0xca>
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	895b      	ldrh	r3, [r3, #10]
 801b06e:	897a      	ldrh	r2, [r7, #10]
 801b070:	429a      	cmp	r2, r3
 801b072:	d01c      	beq.n	801b0ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	7b5b      	ldrb	r3, [r3, #13]
 801b078:	f003 0302 	and.w	r3, r3, #2
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d116      	bne.n	801b0ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	685a      	ldr	r2, [r3, #4]
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	1ad3      	subs	r3, r2, r3
 801b088:	b29a      	uxth	r2, r3
 801b08a:	897b      	ldrh	r3, [r7, #10]
 801b08c:	4413      	add	r3, r2
 801b08e:	b29b      	uxth	r3, r3
 801b090:	4619      	mov	r1, r3
 801b092:	68f8      	ldr	r0, [r7, #12]
 801b094:	f7fe ff58 	bl	8019f48 <mem_trim>
 801b098:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801b09a:	68fb      	ldr	r3, [r7, #12]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d106      	bne.n	801b0ae <pbuf_realloc+0xca>
 801b0a0:	4b0f      	ldr	r3, [pc, #60]	@ (801b0e0 <pbuf_realloc+0xfc>)
 801b0a2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801b0a6:	4912      	ldr	r1, [pc, #72]	@ (801b0f0 <pbuf_realloc+0x10c>)
 801b0a8:	480f      	ldr	r0, [pc, #60]	@ (801b0e8 <pbuf_realloc+0x104>)
 801b0aa:	f00c fb5f 	bl	802776c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	897a      	ldrh	r2, [r7, #10]
 801b0b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	895a      	ldrh	r2, [r3, #10]
 801b0b8:	68fb      	ldr	r3, [r7, #12]
 801b0ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d004      	beq.n	801b0ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f000 f943 	bl	801b354 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	2200      	movs	r2, #0
 801b0d2:	601a      	str	r2, [r3, #0]
 801b0d4:	e000      	b.n	801b0d8 <pbuf_realloc+0xf4>
    return;
 801b0d6:	bf00      	nop

}
 801b0d8:	3710      	adds	r7, #16
 801b0da:	46bd      	mov	sp, r7
 801b0dc:	bd80      	pop	{r7, pc}
 801b0de:	bf00      	nop
 801b0e0:	08029c34 	.word	0x08029c34
 801b0e4:	08029d4c 	.word	0x08029d4c
 801b0e8:	08029c94 	.word	0x08029c94
 801b0ec:	08029d64 	.word	0x08029d64
 801b0f0:	08029d7c 	.word	0x08029d7c

0801b0f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b086      	sub	sp, #24
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	60f8      	str	r0, [r7, #12]
 801b0fc:	60b9      	str	r1, [r7, #8]
 801b0fe:	4613      	mov	r3, r2
 801b100:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801b102:	68fb      	ldr	r3, [r7, #12]
 801b104:	2b00      	cmp	r3, #0
 801b106:	d106      	bne.n	801b116 <pbuf_add_header_impl+0x22>
 801b108:	4b2b      	ldr	r3, [pc, #172]	@ (801b1b8 <pbuf_add_header_impl+0xc4>)
 801b10a:	f240 12df 	movw	r2, #479	@ 0x1df
 801b10e:	492b      	ldr	r1, [pc, #172]	@ (801b1bc <pbuf_add_header_impl+0xc8>)
 801b110:	482b      	ldr	r0, [pc, #172]	@ (801b1c0 <pbuf_add_header_impl+0xcc>)
 801b112:	f00c fb2b 	bl	802776c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d003      	beq.n	801b124 <pbuf_add_header_impl+0x30>
 801b11c:	68bb      	ldr	r3, [r7, #8]
 801b11e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b122:	d301      	bcc.n	801b128 <pbuf_add_header_impl+0x34>
    return 1;
 801b124:	2301      	movs	r3, #1
 801b126:	e043      	b.n	801b1b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801b128:	68bb      	ldr	r3, [r7, #8]
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d101      	bne.n	801b132 <pbuf_add_header_impl+0x3e>
    return 0;
 801b12e:	2300      	movs	r3, #0
 801b130:	e03e      	b.n	801b1b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801b132:	68bb      	ldr	r3, [r7, #8]
 801b134:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	891a      	ldrh	r2, [r3, #8]
 801b13a:	8a7b      	ldrh	r3, [r7, #18]
 801b13c:	4413      	add	r3, r2
 801b13e:	b29b      	uxth	r3, r3
 801b140:	8a7a      	ldrh	r2, [r7, #18]
 801b142:	429a      	cmp	r2, r3
 801b144:	d901      	bls.n	801b14a <pbuf_add_header_impl+0x56>
    return 1;
 801b146:	2301      	movs	r3, #1
 801b148:	e032      	b.n	801b1b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	7b1b      	ldrb	r3, [r3, #12]
 801b14e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801b150:	8a3b      	ldrh	r3, [r7, #16]
 801b152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b156:	2b00      	cmp	r3, #0
 801b158:	d00c      	beq.n	801b174 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	685a      	ldr	r2, [r3, #4]
 801b15e:	68bb      	ldr	r3, [r7, #8]
 801b160:	425b      	negs	r3, r3
 801b162:	4413      	add	r3, r2
 801b164:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	3310      	adds	r3, #16
 801b16a:	697a      	ldr	r2, [r7, #20]
 801b16c:	429a      	cmp	r2, r3
 801b16e:	d20d      	bcs.n	801b18c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801b170:	2301      	movs	r3, #1
 801b172:	e01d      	b.n	801b1b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801b174:	79fb      	ldrb	r3, [r7, #7]
 801b176:	2b00      	cmp	r3, #0
 801b178:	d006      	beq.n	801b188 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	685a      	ldr	r2, [r3, #4]
 801b17e:	68bb      	ldr	r3, [r7, #8]
 801b180:	425b      	negs	r3, r3
 801b182:	4413      	add	r3, r2
 801b184:	617b      	str	r3, [r7, #20]
 801b186:	e001      	b.n	801b18c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801b188:	2301      	movs	r3, #1
 801b18a:	e011      	b.n	801b1b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	697a      	ldr	r2, [r7, #20]
 801b190:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	895a      	ldrh	r2, [r3, #10]
 801b196:	8a7b      	ldrh	r3, [r7, #18]
 801b198:	4413      	add	r3, r2
 801b19a:	b29a      	uxth	r2, r3
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	891a      	ldrh	r2, [r3, #8]
 801b1a4:	8a7b      	ldrh	r3, [r7, #18]
 801b1a6:	4413      	add	r3, r2
 801b1a8:	b29a      	uxth	r2, r3
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	811a      	strh	r2, [r3, #8]


  return 0;
 801b1ae:	2300      	movs	r3, #0
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3718      	adds	r7, #24
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}
 801b1b8:	08029c34 	.word	0x08029c34
 801b1bc:	08029d98 	.word	0x08029d98
 801b1c0:	08029c94 	.word	0x08029c94

0801b1c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b082      	sub	sp, #8
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	6078      	str	r0, [r7, #4]
 801b1cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	6839      	ldr	r1, [r7, #0]
 801b1d2:	6878      	ldr	r0, [r7, #4]
 801b1d4:	f7ff ff8e 	bl	801b0f4 <pbuf_add_header_impl>
 801b1d8:	4603      	mov	r3, r0
}
 801b1da:	4618      	mov	r0, r3
 801b1dc:	3708      	adds	r7, #8
 801b1de:	46bd      	mov	sp, r7
 801b1e0:	bd80      	pop	{r7, pc}
	...

0801b1e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b084      	sub	sp, #16
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
 801b1ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d106      	bne.n	801b202 <pbuf_remove_header+0x1e>
 801b1f4:	4b20      	ldr	r3, [pc, #128]	@ (801b278 <pbuf_remove_header+0x94>)
 801b1f6:	f240 224b 	movw	r2, #587	@ 0x24b
 801b1fa:	4920      	ldr	r1, [pc, #128]	@ (801b27c <pbuf_remove_header+0x98>)
 801b1fc:	4820      	ldr	r0, [pc, #128]	@ (801b280 <pbuf_remove_header+0x9c>)
 801b1fe:	f00c fab5 	bl	802776c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d003      	beq.n	801b210 <pbuf_remove_header+0x2c>
 801b208:	683b      	ldr	r3, [r7, #0]
 801b20a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b20e:	d301      	bcc.n	801b214 <pbuf_remove_header+0x30>
    return 1;
 801b210:	2301      	movs	r3, #1
 801b212:	e02c      	b.n	801b26e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801b214:	683b      	ldr	r3, [r7, #0]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d101      	bne.n	801b21e <pbuf_remove_header+0x3a>
    return 0;
 801b21a:	2300      	movs	r3, #0
 801b21c:	e027      	b.n	801b26e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801b21e:	683b      	ldr	r3, [r7, #0]
 801b220:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	895b      	ldrh	r3, [r3, #10]
 801b226:	89fa      	ldrh	r2, [r7, #14]
 801b228:	429a      	cmp	r2, r3
 801b22a:	d908      	bls.n	801b23e <pbuf_remove_header+0x5a>
 801b22c:	4b12      	ldr	r3, [pc, #72]	@ (801b278 <pbuf_remove_header+0x94>)
 801b22e:	f240 2255 	movw	r2, #597	@ 0x255
 801b232:	4914      	ldr	r1, [pc, #80]	@ (801b284 <pbuf_remove_header+0xa0>)
 801b234:	4812      	ldr	r0, [pc, #72]	@ (801b280 <pbuf_remove_header+0x9c>)
 801b236:	f00c fa99 	bl	802776c <iprintf>
 801b23a:	2301      	movs	r3, #1
 801b23c:	e017      	b.n	801b26e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	685b      	ldr	r3, [r3, #4]
 801b242:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	685a      	ldr	r2, [r3, #4]
 801b248:	683b      	ldr	r3, [r7, #0]
 801b24a:	441a      	add	r2, r3
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	895a      	ldrh	r2, [r3, #10]
 801b254:	89fb      	ldrh	r3, [r7, #14]
 801b256:	1ad3      	subs	r3, r2, r3
 801b258:	b29a      	uxth	r2, r3
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	891a      	ldrh	r2, [r3, #8]
 801b262:	89fb      	ldrh	r3, [r7, #14]
 801b264:	1ad3      	subs	r3, r2, r3
 801b266:	b29a      	uxth	r2, r3
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801b26c:	2300      	movs	r3, #0
}
 801b26e:	4618      	mov	r0, r3
 801b270:	3710      	adds	r7, #16
 801b272:	46bd      	mov	sp, r7
 801b274:	bd80      	pop	{r7, pc}
 801b276:	bf00      	nop
 801b278:	08029c34 	.word	0x08029c34
 801b27c:	08029d98 	.word	0x08029d98
 801b280:	08029c94 	.word	0x08029c94
 801b284:	08029da4 	.word	0x08029da4

0801b288 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801b288:	b580      	push	{r7, lr}
 801b28a:	b082      	sub	sp, #8
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	6078      	str	r0, [r7, #4]
 801b290:	460b      	mov	r3, r1
 801b292:	807b      	strh	r3, [r7, #2]
 801b294:	4613      	mov	r3, r2
 801b296:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801b298:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	da08      	bge.n	801b2b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801b2a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b2a4:	425b      	negs	r3, r3
 801b2a6:	4619      	mov	r1, r3
 801b2a8:	6878      	ldr	r0, [r7, #4]
 801b2aa:	f7ff ff9b 	bl	801b1e4 <pbuf_remove_header>
 801b2ae:	4603      	mov	r3, r0
 801b2b0:	e007      	b.n	801b2c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801b2b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b2b6:	787a      	ldrb	r2, [r7, #1]
 801b2b8:	4619      	mov	r1, r3
 801b2ba:	6878      	ldr	r0, [r7, #4]
 801b2bc:	f7ff ff1a 	bl	801b0f4 <pbuf_add_header_impl>
 801b2c0:	4603      	mov	r3, r0
  }
}
 801b2c2:	4618      	mov	r0, r3
 801b2c4:	3708      	adds	r7, #8
 801b2c6:	46bd      	mov	sp, r7
 801b2c8:	bd80      	pop	{r7, pc}

0801b2ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801b2ca:	b580      	push	{r7, lr}
 801b2cc:	b082      	sub	sp, #8
 801b2ce:	af00      	add	r7, sp, #0
 801b2d0:	6078      	str	r0, [r7, #4]
 801b2d2:	460b      	mov	r3, r1
 801b2d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801b2d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b2da:	2201      	movs	r2, #1
 801b2dc:	4619      	mov	r1, r3
 801b2de:	6878      	ldr	r0, [r7, #4]
 801b2e0:	f7ff ffd2 	bl	801b288 <pbuf_header_impl>
 801b2e4:	4603      	mov	r3, r0
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	3708      	adds	r7, #8
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	bd80      	pop	{r7, pc}

0801b2ee <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 801b2ee:	b580      	push	{r7, lr}
 801b2f0:	b086      	sub	sp, #24
 801b2f2:	af00      	add	r7, sp, #0
 801b2f4:	6078      	str	r0, [r7, #4]
 801b2f6:	460b      	mov	r3, r1
 801b2f8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 801b2fe:	887b      	ldrh	r3, [r7, #2]
 801b300:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801b302:	e01c      	b.n	801b33e <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 801b304:	697b      	ldr	r3, [r7, #20]
 801b306:	895b      	ldrh	r3, [r3, #10]
 801b308:	8a7a      	ldrh	r2, [r7, #18]
 801b30a:	429a      	cmp	r2, r3
 801b30c:	d310      	bcc.n	801b330 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801b30e:	697b      	ldr	r3, [r7, #20]
 801b310:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801b312:	697b      	ldr	r3, [r7, #20]
 801b314:	895b      	ldrh	r3, [r3, #10]
 801b316:	8a7a      	ldrh	r2, [r7, #18]
 801b318:	1ad3      	subs	r3, r2, r3
 801b31a:	827b      	strh	r3, [r7, #18]
      p = p->next;
 801b31c:	697b      	ldr	r3, [r7, #20]
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	2200      	movs	r2, #0
 801b326:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801b328:	68f8      	ldr	r0, [r7, #12]
 801b32a:	f000 f813 	bl	801b354 <pbuf_free>
 801b32e:	e006      	b.n	801b33e <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 801b330:	8a7b      	ldrh	r3, [r7, #18]
 801b332:	4619      	mov	r1, r3
 801b334:	6978      	ldr	r0, [r7, #20]
 801b336:	f7ff ff55 	bl	801b1e4 <pbuf_remove_header>
      free_left = 0;
 801b33a:	2300      	movs	r3, #0
 801b33c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801b33e:	8a7b      	ldrh	r3, [r7, #18]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d002      	beq.n	801b34a <pbuf_free_header+0x5c>
 801b344:	697b      	ldr	r3, [r7, #20]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d1dc      	bne.n	801b304 <pbuf_free_header+0x16>
    }
  }
  return p;
 801b34a:	697b      	ldr	r3, [r7, #20]
}
 801b34c:	4618      	mov	r0, r3
 801b34e:	3718      	adds	r7, #24
 801b350:	46bd      	mov	sp, r7
 801b352:	bd80      	pop	{r7, pc}

0801b354 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801b354:	b580      	push	{r7, lr}
 801b356:	b088      	sub	sp, #32
 801b358:	af00      	add	r7, sp, #0
 801b35a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d10b      	bne.n	801b37a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d106      	bne.n	801b376 <pbuf_free+0x22>
 801b368:	4b3b      	ldr	r3, [pc, #236]	@ (801b458 <pbuf_free+0x104>)
 801b36a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801b36e:	493b      	ldr	r1, [pc, #236]	@ (801b45c <pbuf_free+0x108>)
 801b370:	483b      	ldr	r0, [pc, #236]	@ (801b460 <pbuf_free+0x10c>)
 801b372:	f00c f9fb 	bl	802776c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801b376:	2300      	movs	r3, #0
 801b378:	e069      	b.n	801b44e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801b37a:	2300      	movs	r3, #0
 801b37c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801b37e:	e062      	b.n	801b446 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801b380:	f00b fd20 	bl	8026dc4 <sys_arch_protect>
 801b384:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	7b9b      	ldrb	r3, [r3, #14]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d106      	bne.n	801b39c <pbuf_free+0x48>
 801b38e:	4b32      	ldr	r3, [pc, #200]	@ (801b458 <pbuf_free+0x104>)
 801b390:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801b394:	4933      	ldr	r1, [pc, #204]	@ (801b464 <pbuf_free+0x110>)
 801b396:	4832      	ldr	r0, [pc, #200]	@ (801b460 <pbuf_free+0x10c>)
 801b398:	f00c f9e8 	bl	802776c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	7b9b      	ldrb	r3, [r3, #14]
 801b3a0:	3b01      	subs	r3, #1
 801b3a2:	b2da      	uxtb	r2, r3
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	739a      	strb	r2, [r3, #14]
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	7b9b      	ldrb	r3, [r3, #14]
 801b3ac:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801b3ae:	69b8      	ldr	r0, [r7, #24]
 801b3b0:	f00b fd16 	bl	8026de0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801b3b4:	7dfb      	ldrb	r3, [r7, #23]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d143      	bne.n	801b442 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	7b1b      	ldrb	r3, [r3, #12]
 801b3c4:	f003 030f 	and.w	r3, r3, #15
 801b3c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	7b5b      	ldrb	r3, [r3, #13]
 801b3ce:	f003 0302 	and.w	r3, r3, #2
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d011      	beq.n	801b3fa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	691b      	ldr	r3, [r3, #16]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d106      	bne.n	801b3f0 <pbuf_free+0x9c>
 801b3e2:	4b1d      	ldr	r3, [pc, #116]	@ (801b458 <pbuf_free+0x104>)
 801b3e4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801b3e8:	491f      	ldr	r1, [pc, #124]	@ (801b468 <pbuf_free+0x114>)
 801b3ea:	481d      	ldr	r0, [pc, #116]	@ (801b460 <pbuf_free+0x10c>)
 801b3ec:	f00c f9be 	bl	802776c <iprintf>
        pc->custom_free_function(p);
 801b3f0:	68bb      	ldr	r3, [r7, #8]
 801b3f2:	691b      	ldr	r3, [r3, #16]
 801b3f4:	6878      	ldr	r0, [r7, #4]
 801b3f6:	4798      	blx	r3
 801b3f8:	e01d      	b.n	801b436 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801b3fa:	7bfb      	ldrb	r3, [r7, #15]
 801b3fc:	2b02      	cmp	r3, #2
 801b3fe:	d104      	bne.n	801b40a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801b400:	6879      	ldr	r1, [r7, #4]
 801b402:	200c      	movs	r0, #12
 801b404:	f7ff f8c4 	bl	801a590 <memp_free>
 801b408:	e015      	b.n	801b436 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801b40a:	7bfb      	ldrb	r3, [r7, #15]
 801b40c:	2b01      	cmp	r3, #1
 801b40e:	d104      	bne.n	801b41a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801b410:	6879      	ldr	r1, [r7, #4]
 801b412:	200b      	movs	r0, #11
 801b414:	f7ff f8bc 	bl	801a590 <memp_free>
 801b418:	e00d      	b.n	801b436 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801b41a:	7bfb      	ldrb	r3, [r7, #15]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d103      	bne.n	801b428 <pbuf_free+0xd4>
          mem_free(p);
 801b420:	6878      	ldr	r0, [r7, #4]
 801b422:	f7fe fd01 	bl	8019e28 <mem_free>
 801b426:	e006      	b.n	801b436 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801b428:	4b0b      	ldr	r3, [pc, #44]	@ (801b458 <pbuf_free+0x104>)
 801b42a:	f240 320f 	movw	r2, #783	@ 0x30f
 801b42e:	490f      	ldr	r1, [pc, #60]	@ (801b46c <pbuf_free+0x118>)
 801b430:	480b      	ldr	r0, [pc, #44]	@ (801b460 <pbuf_free+0x10c>)
 801b432:	f00c f99b 	bl	802776c <iprintf>
        }
      }
      count++;
 801b436:	7ffb      	ldrb	r3, [r7, #31]
 801b438:	3301      	adds	r3, #1
 801b43a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801b43c:	693b      	ldr	r3, [r7, #16]
 801b43e:	607b      	str	r3, [r7, #4]
 801b440:	e001      	b.n	801b446 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801b442:	2300      	movs	r3, #0
 801b444:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d199      	bne.n	801b380 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801b44c:	7ffb      	ldrb	r3, [r7, #31]
}
 801b44e:	4618      	mov	r0, r3
 801b450:	3720      	adds	r7, #32
 801b452:	46bd      	mov	sp, r7
 801b454:	bd80      	pop	{r7, pc}
 801b456:	bf00      	nop
 801b458:	08029c34 	.word	0x08029c34
 801b45c:	08029d98 	.word	0x08029d98
 801b460:	08029c94 	.word	0x08029c94
 801b464:	08029dc4 	.word	0x08029dc4
 801b468:	08029ddc 	.word	0x08029ddc
 801b46c:	08029e00 	.word	0x08029e00

0801b470 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801b470:	b480      	push	{r7}
 801b472:	b085      	sub	sp, #20
 801b474:	af00      	add	r7, sp, #0
 801b476:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801b478:	2300      	movs	r3, #0
 801b47a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801b47c:	e005      	b.n	801b48a <pbuf_clen+0x1a>
    ++len;
 801b47e:	89fb      	ldrh	r3, [r7, #14]
 801b480:	3301      	adds	r3, #1
 801b482:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d1f6      	bne.n	801b47e <pbuf_clen+0xe>
  }
  return len;
 801b490:	89fb      	ldrh	r3, [r7, #14]
}
 801b492:	4618      	mov	r0, r3
 801b494:	3714      	adds	r7, #20
 801b496:	46bd      	mov	sp, r7
 801b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b49c:	4770      	bx	lr
	...

0801b4a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b084      	sub	sp, #16
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d016      	beq.n	801b4dc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801b4ae:	f00b fc89 	bl	8026dc4 <sys_arch_protect>
 801b4b2:	60f8      	str	r0, [r7, #12]
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	7b9b      	ldrb	r3, [r3, #14]
 801b4b8:	3301      	adds	r3, #1
 801b4ba:	b2da      	uxtb	r2, r3
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	739a      	strb	r2, [r3, #14]
 801b4c0:	68f8      	ldr	r0, [r7, #12]
 801b4c2:	f00b fc8d 	bl	8026de0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	7b9b      	ldrb	r3, [r3, #14]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d106      	bne.n	801b4dc <pbuf_ref+0x3c>
 801b4ce:	4b05      	ldr	r3, [pc, #20]	@ (801b4e4 <pbuf_ref+0x44>)
 801b4d0:	f240 3242 	movw	r2, #834	@ 0x342
 801b4d4:	4904      	ldr	r1, [pc, #16]	@ (801b4e8 <pbuf_ref+0x48>)
 801b4d6:	4805      	ldr	r0, [pc, #20]	@ (801b4ec <pbuf_ref+0x4c>)
 801b4d8:	f00c f948 	bl	802776c <iprintf>
  }
}
 801b4dc:	bf00      	nop
 801b4de:	3710      	adds	r7, #16
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	bd80      	pop	{r7, pc}
 801b4e4:	08029c34 	.word	0x08029c34
 801b4e8:	08029e14 	.word	0x08029e14
 801b4ec:	08029c94 	.word	0x08029c94

0801b4f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801b4f0:	b580      	push	{r7, lr}
 801b4f2:	b084      	sub	sp, #16
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	6078      	str	r0, [r7, #4]
 801b4f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d002      	beq.n	801b506 <pbuf_cat+0x16>
 801b500:	683b      	ldr	r3, [r7, #0]
 801b502:	2b00      	cmp	r3, #0
 801b504:	d107      	bne.n	801b516 <pbuf_cat+0x26>
 801b506:	4b20      	ldr	r3, [pc, #128]	@ (801b588 <pbuf_cat+0x98>)
 801b508:	f240 3259 	movw	r2, #857	@ 0x359
 801b50c:	491f      	ldr	r1, [pc, #124]	@ (801b58c <pbuf_cat+0x9c>)
 801b50e:	4820      	ldr	r0, [pc, #128]	@ (801b590 <pbuf_cat+0xa0>)
 801b510:	f00c f92c 	bl	802776c <iprintf>
 801b514:	e034      	b.n	801b580 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	60fb      	str	r3, [r7, #12]
 801b51a:	e00a      	b.n	801b532 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	891a      	ldrh	r2, [r3, #8]
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	891b      	ldrh	r3, [r3, #8]
 801b524:	4413      	add	r3, r2
 801b526:	b29a      	uxth	r2, r3
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	60fb      	str	r3, [r7, #12]
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d1f0      	bne.n	801b51c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801b53a:	68fb      	ldr	r3, [r7, #12]
 801b53c:	891a      	ldrh	r2, [r3, #8]
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	895b      	ldrh	r3, [r3, #10]
 801b542:	429a      	cmp	r2, r3
 801b544:	d006      	beq.n	801b554 <pbuf_cat+0x64>
 801b546:	4b10      	ldr	r3, [pc, #64]	@ (801b588 <pbuf_cat+0x98>)
 801b548:	f240 3262 	movw	r2, #866	@ 0x362
 801b54c:	4911      	ldr	r1, [pc, #68]	@ (801b594 <pbuf_cat+0xa4>)
 801b54e:	4810      	ldr	r0, [pc, #64]	@ (801b590 <pbuf_cat+0xa0>)
 801b550:	f00c f90c 	bl	802776c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801b554:	68fb      	ldr	r3, [r7, #12]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d006      	beq.n	801b56a <pbuf_cat+0x7a>
 801b55c:	4b0a      	ldr	r3, [pc, #40]	@ (801b588 <pbuf_cat+0x98>)
 801b55e:	f240 3263 	movw	r2, #867	@ 0x363
 801b562:	490d      	ldr	r1, [pc, #52]	@ (801b598 <pbuf_cat+0xa8>)
 801b564:	480a      	ldr	r0, [pc, #40]	@ (801b590 <pbuf_cat+0xa0>)
 801b566:	f00c f901 	bl	802776c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	891a      	ldrh	r2, [r3, #8]
 801b56e:	683b      	ldr	r3, [r7, #0]
 801b570:	891b      	ldrh	r3, [r3, #8]
 801b572:	4413      	add	r3, r2
 801b574:	b29a      	uxth	r2, r3
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	683a      	ldr	r2, [r7, #0]
 801b57e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801b580:	3710      	adds	r7, #16
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}
 801b586:	bf00      	nop
 801b588:	08029c34 	.word	0x08029c34
 801b58c:	08029e28 	.word	0x08029e28
 801b590:	08029c94 	.word	0x08029c94
 801b594:	08029e60 	.word	0x08029e60
 801b598:	08029e90 	.word	0x08029e90

0801b59c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b082      	sub	sp, #8
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	6078      	str	r0, [r7, #4]
 801b5a4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801b5a6:	6839      	ldr	r1, [r7, #0]
 801b5a8:	6878      	ldr	r0, [r7, #4]
 801b5aa:	f7ff ffa1 	bl	801b4f0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801b5ae:	6838      	ldr	r0, [r7, #0]
 801b5b0:	f7ff ff76 	bl	801b4a0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801b5b4:	bf00      	nop
 801b5b6:	3708      	adds	r7, #8
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	bd80      	pop	{r7, pc}

0801b5bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801b5bc:	b580      	push	{r7, lr}
 801b5be:	b086      	sub	sp, #24
 801b5c0:	af00      	add	r7, sp, #0
 801b5c2:	6078      	str	r0, [r7, #4]
 801b5c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	617b      	str	r3, [r7, #20]
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d008      	beq.n	801b5e6 <pbuf_copy+0x2a>
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	d005      	beq.n	801b5e6 <pbuf_copy+0x2a>
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	891a      	ldrh	r2, [r3, #8]
 801b5de:	683b      	ldr	r3, [r7, #0]
 801b5e0:	891b      	ldrh	r3, [r3, #8]
 801b5e2:	429a      	cmp	r2, r3
 801b5e4:	d209      	bcs.n	801b5fa <pbuf_copy+0x3e>
 801b5e6:	4b57      	ldr	r3, [pc, #348]	@ (801b744 <pbuf_copy+0x188>)
 801b5e8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801b5ec:	4956      	ldr	r1, [pc, #344]	@ (801b748 <pbuf_copy+0x18c>)
 801b5ee:	4857      	ldr	r0, [pc, #348]	@ (801b74c <pbuf_copy+0x190>)
 801b5f0:	f00c f8bc 	bl	802776c <iprintf>
 801b5f4:	f06f 030f 	mvn.w	r3, #15
 801b5f8:	e09f      	b.n	801b73a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	895b      	ldrh	r3, [r3, #10]
 801b5fe:	461a      	mov	r2, r3
 801b600:	697b      	ldr	r3, [r7, #20]
 801b602:	1ad2      	subs	r2, r2, r3
 801b604:	683b      	ldr	r3, [r7, #0]
 801b606:	895b      	ldrh	r3, [r3, #10]
 801b608:	4619      	mov	r1, r3
 801b60a:	693b      	ldr	r3, [r7, #16]
 801b60c:	1acb      	subs	r3, r1, r3
 801b60e:	429a      	cmp	r2, r3
 801b610:	d306      	bcc.n	801b620 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801b612:	683b      	ldr	r3, [r7, #0]
 801b614:	895b      	ldrh	r3, [r3, #10]
 801b616:	461a      	mov	r2, r3
 801b618:	693b      	ldr	r3, [r7, #16]
 801b61a:	1ad3      	subs	r3, r2, r3
 801b61c:	60fb      	str	r3, [r7, #12]
 801b61e:	e005      	b.n	801b62c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	895b      	ldrh	r3, [r3, #10]
 801b624:	461a      	mov	r2, r3
 801b626:	697b      	ldr	r3, [r7, #20]
 801b628:	1ad3      	subs	r3, r2, r3
 801b62a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	685a      	ldr	r2, [r3, #4]
 801b630:	697b      	ldr	r3, [r7, #20]
 801b632:	18d0      	adds	r0, r2, r3
 801b634:	683b      	ldr	r3, [r7, #0]
 801b636:	685a      	ldr	r2, [r3, #4]
 801b638:	693b      	ldr	r3, [r7, #16]
 801b63a:	4413      	add	r3, r2
 801b63c:	68fa      	ldr	r2, [r7, #12]
 801b63e:	4619      	mov	r1, r3
 801b640:	f00c fac7 	bl	8027bd2 <memcpy>
    offset_to += len;
 801b644:	697a      	ldr	r2, [r7, #20]
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	4413      	add	r3, r2
 801b64a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801b64c:	693a      	ldr	r2, [r7, #16]
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	4413      	add	r3, r2
 801b652:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	895b      	ldrh	r3, [r3, #10]
 801b658:	461a      	mov	r2, r3
 801b65a:	697b      	ldr	r3, [r7, #20]
 801b65c:	4293      	cmp	r3, r2
 801b65e:	d906      	bls.n	801b66e <pbuf_copy+0xb2>
 801b660:	4b38      	ldr	r3, [pc, #224]	@ (801b744 <pbuf_copy+0x188>)
 801b662:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801b666:	493a      	ldr	r1, [pc, #232]	@ (801b750 <pbuf_copy+0x194>)
 801b668:	4838      	ldr	r0, [pc, #224]	@ (801b74c <pbuf_copy+0x190>)
 801b66a:	f00c f87f 	bl	802776c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	895b      	ldrh	r3, [r3, #10]
 801b672:	461a      	mov	r2, r3
 801b674:	693b      	ldr	r3, [r7, #16]
 801b676:	4293      	cmp	r3, r2
 801b678:	d906      	bls.n	801b688 <pbuf_copy+0xcc>
 801b67a:	4b32      	ldr	r3, [pc, #200]	@ (801b744 <pbuf_copy+0x188>)
 801b67c:	f240 32da 	movw	r2, #986	@ 0x3da
 801b680:	4934      	ldr	r1, [pc, #208]	@ (801b754 <pbuf_copy+0x198>)
 801b682:	4832      	ldr	r0, [pc, #200]	@ (801b74c <pbuf_copy+0x190>)
 801b684:	f00c f872 	bl	802776c <iprintf>
    if (offset_from >= p_from->len) {
 801b688:	683b      	ldr	r3, [r7, #0]
 801b68a:	895b      	ldrh	r3, [r3, #10]
 801b68c:	461a      	mov	r2, r3
 801b68e:	693b      	ldr	r3, [r7, #16]
 801b690:	4293      	cmp	r3, r2
 801b692:	d304      	bcc.n	801b69e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801b694:	2300      	movs	r3, #0
 801b696:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	895b      	ldrh	r3, [r3, #10]
 801b6a2:	461a      	mov	r2, r3
 801b6a4:	697b      	ldr	r3, [r7, #20]
 801b6a6:	4293      	cmp	r3, r2
 801b6a8:	d114      	bne.n	801b6d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801b6aa:	2300      	movs	r3, #0
 801b6ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d10c      	bne.n	801b6d4 <pbuf_copy+0x118>
 801b6ba:	683b      	ldr	r3, [r7, #0]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d009      	beq.n	801b6d4 <pbuf_copy+0x118>
 801b6c0:	4b20      	ldr	r3, [pc, #128]	@ (801b744 <pbuf_copy+0x188>)
 801b6c2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801b6c6:	4924      	ldr	r1, [pc, #144]	@ (801b758 <pbuf_copy+0x19c>)
 801b6c8:	4820      	ldr	r0, [pc, #128]	@ (801b74c <pbuf_copy+0x190>)
 801b6ca:	f00c f84f 	bl	802776c <iprintf>
 801b6ce:	f06f 030f 	mvn.w	r3, #15
 801b6d2:	e032      	b.n	801b73a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801b6d4:	683b      	ldr	r3, [r7, #0]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d013      	beq.n	801b702 <pbuf_copy+0x146>
 801b6da:	683b      	ldr	r3, [r7, #0]
 801b6dc:	895a      	ldrh	r2, [r3, #10]
 801b6de:	683b      	ldr	r3, [r7, #0]
 801b6e0:	891b      	ldrh	r3, [r3, #8]
 801b6e2:	429a      	cmp	r2, r3
 801b6e4:	d10d      	bne.n	801b702 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801b6e6:	683b      	ldr	r3, [r7, #0]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d009      	beq.n	801b702 <pbuf_copy+0x146>
 801b6ee:	4b15      	ldr	r3, [pc, #84]	@ (801b744 <pbuf_copy+0x188>)
 801b6f0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801b6f4:	4919      	ldr	r1, [pc, #100]	@ (801b75c <pbuf_copy+0x1a0>)
 801b6f6:	4815      	ldr	r0, [pc, #84]	@ (801b74c <pbuf_copy+0x190>)
 801b6f8:	f00c f838 	bl	802776c <iprintf>
 801b6fc:	f06f 0305 	mvn.w	r3, #5
 801b700:	e01b      	b.n	801b73a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d013      	beq.n	801b730 <pbuf_copy+0x174>
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	895a      	ldrh	r2, [r3, #10]
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	891b      	ldrh	r3, [r3, #8]
 801b710:	429a      	cmp	r2, r3
 801b712:	d10d      	bne.n	801b730 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d009      	beq.n	801b730 <pbuf_copy+0x174>
 801b71c:	4b09      	ldr	r3, [pc, #36]	@ (801b744 <pbuf_copy+0x188>)
 801b71e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801b722:	490e      	ldr	r1, [pc, #56]	@ (801b75c <pbuf_copy+0x1a0>)
 801b724:	4809      	ldr	r0, [pc, #36]	@ (801b74c <pbuf_copy+0x190>)
 801b726:	f00c f821 	bl	802776c <iprintf>
 801b72a:	f06f 0305 	mvn.w	r3, #5
 801b72e:	e004      	b.n	801b73a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801b730:	683b      	ldr	r3, [r7, #0]
 801b732:	2b00      	cmp	r3, #0
 801b734:	f47f af61 	bne.w	801b5fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801b738:	2300      	movs	r3, #0
}
 801b73a:	4618      	mov	r0, r3
 801b73c:	3718      	adds	r7, #24
 801b73e:	46bd      	mov	sp, r7
 801b740:	bd80      	pop	{r7, pc}
 801b742:	bf00      	nop
 801b744:	08029c34 	.word	0x08029c34
 801b748:	08029edc 	.word	0x08029edc
 801b74c:	08029c94 	.word	0x08029c94
 801b750:	08029f0c 	.word	0x08029f0c
 801b754:	08029f24 	.word	0x08029f24
 801b758:	08029f40 	.word	0x08029f40
 801b75c:	08029f50 	.word	0x08029f50

0801b760 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b088      	sub	sp, #32
 801b764:	af00      	add	r7, sp, #0
 801b766:	60f8      	str	r0, [r7, #12]
 801b768:	60b9      	str	r1, [r7, #8]
 801b76a:	4611      	mov	r1, r2
 801b76c:	461a      	mov	r2, r3
 801b76e:	460b      	mov	r3, r1
 801b770:	80fb      	strh	r3, [r7, #6]
 801b772:	4613      	mov	r3, r2
 801b774:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801b776:	2300      	movs	r3, #0
 801b778:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801b77a:	2300      	movs	r3, #0
 801b77c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d108      	bne.n	801b796 <pbuf_copy_partial+0x36>
 801b784:	4b2b      	ldr	r3, [pc, #172]	@ (801b834 <pbuf_copy_partial+0xd4>)
 801b786:	f240 420a 	movw	r2, #1034	@ 0x40a
 801b78a:	492b      	ldr	r1, [pc, #172]	@ (801b838 <pbuf_copy_partial+0xd8>)
 801b78c:	482b      	ldr	r0, [pc, #172]	@ (801b83c <pbuf_copy_partial+0xdc>)
 801b78e:	f00b ffed 	bl	802776c <iprintf>
 801b792:	2300      	movs	r3, #0
 801b794:	e04a      	b.n	801b82c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801b796:	68bb      	ldr	r3, [r7, #8]
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d108      	bne.n	801b7ae <pbuf_copy_partial+0x4e>
 801b79c:	4b25      	ldr	r3, [pc, #148]	@ (801b834 <pbuf_copy_partial+0xd4>)
 801b79e:	f240 420b 	movw	r2, #1035	@ 0x40b
 801b7a2:	4927      	ldr	r1, [pc, #156]	@ (801b840 <pbuf_copy_partial+0xe0>)
 801b7a4:	4825      	ldr	r0, [pc, #148]	@ (801b83c <pbuf_copy_partial+0xdc>)
 801b7a6:	f00b ffe1 	bl	802776c <iprintf>
 801b7aa:	2300      	movs	r3, #0
 801b7ac:	e03e      	b.n	801b82c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	61fb      	str	r3, [r7, #28]
 801b7b2:	e034      	b.n	801b81e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801b7b4:	88bb      	ldrh	r3, [r7, #4]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d00a      	beq.n	801b7d0 <pbuf_copy_partial+0x70>
 801b7ba:	69fb      	ldr	r3, [r7, #28]
 801b7bc:	895b      	ldrh	r3, [r3, #10]
 801b7be:	88ba      	ldrh	r2, [r7, #4]
 801b7c0:	429a      	cmp	r2, r3
 801b7c2:	d305      	bcc.n	801b7d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801b7c4:	69fb      	ldr	r3, [r7, #28]
 801b7c6:	895b      	ldrh	r3, [r3, #10]
 801b7c8:	88ba      	ldrh	r2, [r7, #4]
 801b7ca:	1ad3      	subs	r3, r2, r3
 801b7cc:	80bb      	strh	r3, [r7, #4]
 801b7ce:	e023      	b.n	801b818 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801b7d0:	69fb      	ldr	r3, [r7, #28]
 801b7d2:	895a      	ldrh	r2, [r3, #10]
 801b7d4:	88bb      	ldrh	r3, [r7, #4]
 801b7d6:	1ad3      	subs	r3, r2, r3
 801b7d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801b7da:	8b3a      	ldrh	r2, [r7, #24]
 801b7dc:	88fb      	ldrh	r3, [r7, #6]
 801b7de:	429a      	cmp	r2, r3
 801b7e0:	d901      	bls.n	801b7e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801b7e2:	88fb      	ldrh	r3, [r7, #6]
 801b7e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b7e6:	8b7b      	ldrh	r3, [r7, #26]
 801b7e8:	68ba      	ldr	r2, [r7, #8]
 801b7ea:	18d0      	adds	r0, r2, r3
 801b7ec:	69fb      	ldr	r3, [r7, #28]
 801b7ee:	685a      	ldr	r2, [r3, #4]
 801b7f0:	88bb      	ldrh	r3, [r7, #4]
 801b7f2:	4413      	add	r3, r2
 801b7f4:	8b3a      	ldrh	r2, [r7, #24]
 801b7f6:	4619      	mov	r1, r3
 801b7f8:	f00c f9eb 	bl	8027bd2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801b7fc:	8afa      	ldrh	r2, [r7, #22]
 801b7fe:	8b3b      	ldrh	r3, [r7, #24]
 801b800:	4413      	add	r3, r2
 801b802:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801b804:	8b7a      	ldrh	r2, [r7, #26]
 801b806:	8b3b      	ldrh	r3, [r7, #24]
 801b808:	4413      	add	r3, r2
 801b80a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801b80c:	88fa      	ldrh	r2, [r7, #6]
 801b80e:	8b3b      	ldrh	r3, [r7, #24]
 801b810:	1ad3      	subs	r3, r2, r3
 801b812:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801b814:	2300      	movs	r3, #0
 801b816:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b818:	69fb      	ldr	r3, [r7, #28]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	61fb      	str	r3, [r7, #28]
 801b81e:	88fb      	ldrh	r3, [r7, #6]
 801b820:	2b00      	cmp	r3, #0
 801b822:	d002      	beq.n	801b82a <pbuf_copy_partial+0xca>
 801b824:	69fb      	ldr	r3, [r7, #28]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d1c4      	bne.n	801b7b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801b82a:	8afb      	ldrh	r3, [r7, #22]
}
 801b82c:	4618      	mov	r0, r3
 801b82e:	3720      	adds	r7, #32
 801b830:	46bd      	mov	sp, r7
 801b832:	bd80      	pop	{r7, pc}
 801b834:	08029c34 	.word	0x08029c34
 801b838:	08029f7c 	.word	0x08029f7c
 801b83c:	08029c94 	.word	0x08029c94
 801b840:	08029f9c 	.word	0x08029f9c

0801b844 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b084      	sub	sp, #16
 801b848:	af00      	add	r7, sp, #0
 801b84a:	4603      	mov	r3, r0
 801b84c:	603a      	str	r2, [r7, #0]
 801b84e:	71fb      	strb	r3, [r7, #7]
 801b850:	460b      	mov	r3, r1
 801b852:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801b854:	683b      	ldr	r3, [r7, #0]
 801b856:	8919      	ldrh	r1, [r3, #8]
 801b858:	88ba      	ldrh	r2, [r7, #4]
 801b85a:	79fb      	ldrb	r3, [r7, #7]
 801b85c:	4618      	mov	r0, r3
 801b85e:	f7ff fa63 	bl	801ad28 <pbuf_alloc>
 801b862:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	2b00      	cmp	r3, #0
 801b868:	d101      	bne.n	801b86e <pbuf_clone+0x2a>
    return NULL;
 801b86a:	2300      	movs	r3, #0
 801b86c:	e011      	b.n	801b892 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801b86e:	6839      	ldr	r1, [r7, #0]
 801b870:	68f8      	ldr	r0, [r7, #12]
 801b872:	f7ff fea3 	bl	801b5bc <pbuf_copy>
 801b876:	4603      	mov	r3, r0
 801b878:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b87a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d006      	beq.n	801b890 <pbuf_clone+0x4c>
 801b882:	4b06      	ldr	r3, [pc, #24]	@ (801b89c <pbuf_clone+0x58>)
 801b884:	f240 5224 	movw	r2, #1316	@ 0x524
 801b888:	4905      	ldr	r1, [pc, #20]	@ (801b8a0 <pbuf_clone+0x5c>)
 801b88a:	4806      	ldr	r0, [pc, #24]	@ (801b8a4 <pbuf_clone+0x60>)
 801b88c:	f00b ff6e 	bl	802776c <iprintf>
  return q;
 801b890:	68fb      	ldr	r3, [r7, #12]
}
 801b892:	4618      	mov	r0, r3
 801b894:	3710      	adds	r7, #16
 801b896:	46bd      	mov	sp, r7
 801b898:	bd80      	pop	{r7, pc}
 801b89a:	bf00      	nop
 801b89c:	08029c34 	.word	0x08029c34
 801b8a0:	0802a0a8 	.word	0x0802a0a8
 801b8a4:	08029c94 	.word	0x08029c94

0801b8a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b8ac:	f00b fe5e 	bl	802756c <rand>
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	b29b      	uxth	r3, r3
 801b8b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b8b8:	b29b      	uxth	r3, r3
 801b8ba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b8be:	b29a      	uxth	r2, r3
 801b8c0:	4b01      	ldr	r3, [pc, #4]	@ (801b8c8 <tcp_init+0x20>)
 801b8c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b8c4:	bf00      	nop
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	20000044 	.word	0x20000044

0801b8cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b082      	sub	sp, #8
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	7d1b      	ldrb	r3, [r3, #20]
 801b8d8:	2b01      	cmp	r3, #1
 801b8da:	d105      	bne.n	801b8e8 <tcp_free+0x1c>
 801b8dc:	4b06      	ldr	r3, [pc, #24]	@ (801b8f8 <tcp_free+0x2c>)
 801b8de:	22d4      	movs	r2, #212	@ 0xd4
 801b8e0:	4906      	ldr	r1, [pc, #24]	@ (801b8fc <tcp_free+0x30>)
 801b8e2:	4807      	ldr	r0, [pc, #28]	@ (801b900 <tcp_free+0x34>)
 801b8e4:	f00b ff42 	bl	802776c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801b8e8:	6879      	ldr	r1, [r7, #4]
 801b8ea:	2001      	movs	r0, #1
 801b8ec:	f7fe fe50 	bl	801a590 <memp_free>
}
 801b8f0:	bf00      	nop
 801b8f2:	3708      	adds	r7, #8
 801b8f4:	46bd      	mov	sp, r7
 801b8f6:	bd80      	pop	{r7, pc}
 801b8f8:	0802a134 	.word	0x0802a134
 801b8fc:	0802a164 	.word	0x0802a164
 801b900:	0802a178 	.word	0x0802a178

0801b904 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b082      	sub	sp, #8
 801b908:	af00      	add	r7, sp, #0
 801b90a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	7d1b      	ldrb	r3, [r3, #20]
 801b910:	2b01      	cmp	r3, #1
 801b912:	d105      	bne.n	801b920 <tcp_free_listen+0x1c>
 801b914:	4b06      	ldr	r3, [pc, #24]	@ (801b930 <tcp_free_listen+0x2c>)
 801b916:	22df      	movs	r2, #223	@ 0xdf
 801b918:	4906      	ldr	r1, [pc, #24]	@ (801b934 <tcp_free_listen+0x30>)
 801b91a:	4807      	ldr	r0, [pc, #28]	@ (801b938 <tcp_free_listen+0x34>)
 801b91c:	f00b ff26 	bl	802776c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801b920:	6879      	ldr	r1, [r7, #4]
 801b922:	2002      	movs	r0, #2
 801b924:	f7fe fe34 	bl	801a590 <memp_free>
}
 801b928:	bf00      	nop
 801b92a:	3708      	adds	r7, #8
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bd80      	pop	{r7, pc}
 801b930:	0802a134 	.word	0x0802a134
 801b934:	0802a1a0 	.word	0x0802a1a0
 801b938:	0802a178 	.word	0x0802a178

0801b93c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801b940:	f001 f8a8 	bl	801ca94 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801b944:	4b07      	ldr	r3, [pc, #28]	@ (801b964 <tcp_tmr+0x28>)
 801b946:	781b      	ldrb	r3, [r3, #0]
 801b948:	3301      	adds	r3, #1
 801b94a:	b2da      	uxtb	r2, r3
 801b94c:	4b05      	ldr	r3, [pc, #20]	@ (801b964 <tcp_tmr+0x28>)
 801b94e:	701a      	strb	r2, [r3, #0]
 801b950:	4b04      	ldr	r3, [pc, #16]	@ (801b964 <tcp_tmr+0x28>)
 801b952:	781b      	ldrb	r3, [r3, #0]
 801b954:	f003 0301 	and.w	r3, r3, #1
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d001      	beq.n	801b960 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801b95c:	f000 fd58 	bl	801c410 <tcp_slowtmr>
  }
}
 801b960:	bf00      	nop
 801b962:	bd80      	pop	{r7, pc}
 801b964:	20011175 	.word	0x20011175

0801b968 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801b968:	b580      	push	{r7, lr}
 801b96a:	b084      	sub	sp, #16
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	6078      	str	r0, [r7, #4]
 801b970:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801b972:	683b      	ldr	r3, [r7, #0]
 801b974:	2b00      	cmp	r3, #0
 801b976:	d105      	bne.n	801b984 <tcp_remove_listener+0x1c>
 801b978:	4b0d      	ldr	r3, [pc, #52]	@ (801b9b0 <tcp_remove_listener+0x48>)
 801b97a:	22ff      	movs	r2, #255	@ 0xff
 801b97c:	490d      	ldr	r1, [pc, #52]	@ (801b9b4 <tcp_remove_listener+0x4c>)
 801b97e:	480e      	ldr	r0, [pc, #56]	@ (801b9b8 <tcp_remove_listener+0x50>)
 801b980:	f00b fef4 	bl	802776c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	60fb      	str	r3, [r7, #12]
 801b988:	e00a      	b.n	801b9a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801b98a:	68fb      	ldr	r3, [r7, #12]
 801b98c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b98e:	683a      	ldr	r2, [r7, #0]
 801b990:	429a      	cmp	r2, r3
 801b992:	d102      	bne.n	801b99a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	2200      	movs	r2, #0
 801b998:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	68db      	ldr	r3, [r3, #12]
 801b99e:	60fb      	str	r3, [r7, #12]
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d1f1      	bne.n	801b98a <tcp_remove_listener+0x22>
    }
  }
}
 801b9a6:	bf00      	nop
 801b9a8:	bf00      	nop
 801b9aa:	3710      	adds	r7, #16
 801b9ac:	46bd      	mov	sp, r7
 801b9ae:	bd80      	pop	{r7, pc}
 801b9b0:	0802a134 	.word	0x0802a134
 801b9b4:	0802a1bc 	.word	0x0802a1bc
 801b9b8:	0802a178 	.word	0x0802a178

0801b9bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	b084      	sub	sp, #16
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d106      	bne.n	801b9d8 <tcp_listen_closed+0x1c>
 801b9ca:	4b14      	ldr	r3, [pc, #80]	@ (801ba1c <tcp_listen_closed+0x60>)
 801b9cc:	f240 1211 	movw	r2, #273	@ 0x111
 801b9d0:	4913      	ldr	r1, [pc, #76]	@ (801ba20 <tcp_listen_closed+0x64>)
 801b9d2:	4814      	ldr	r0, [pc, #80]	@ (801ba24 <tcp_listen_closed+0x68>)
 801b9d4:	f00b feca 	bl	802776c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	7d1b      	ldrb	r3, [r3, #20]
 801b9dc:	2b01      	cmp	r3, #1
 801b9de:	d006      	beq.n	801b9ee <tcp_listen_closed+0x32>
 801b9e0:	4b0e      	ldr	r3, [pc, #56]	@ (801ba1c <tcp_listen_closed+0x60>)
 801b9e2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801b9e6:	4910      	ldr	r1, [pc, #64]	@ (801ba28 <tcp_listen_closed+0x6c>)
 801b9e8:	480e      	ldr	r0, [pc, #56]	@ (801ba24 <tcp_listen_closed+0x68>)
 801b9ea:	f00b febf 	bl	802776c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801b9ee:	2301      	movs	r3, #1
 801b9f0:	60fb      	str	r3, [r7, #12]
 801b9f2:	e00b      	b.n	801ba0c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801b9f4:	4a0d      	ldr	r2, [pc, #52]	@ (801ba2c <tcp_listen_closed+0x70>)
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	6879      	ldr	r1, [r7, #4]
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7ff ffb1 	bl	801b968 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801ba06:	68fb      	ldr	r3, [r7, #12]
 801ba08:	3301      	adds	r3, #1
 801ba0a:	60fb      	str	r3, [r7, #12]
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	2b03      	cmp	r3, #3
 801ba10:	d9f0      	bls.n	801b9f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801ba12:	bf00      	nop
 801ba14:	bf00      	nop
 801ba16:	3710      	adds	r7, #16
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	bd80      	pop	{r7, pc}
 801ba1c:	0802a134 	.word	0x0802a134
 801ba20:	0802a1e4 	.word	0x0802a1e4
 801ba24:	0802a178 	.word	0x0802a178
 801ba28:	0802a1f0 	.word	0x0802a1f0
 801ba2c:	0802c550 	.word	0x0802c550

0801ba30 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801ba30:	b5b0      	push	{r4, r5, r7, lr}
 801ba32:	b088      	sub	sp, #32
 801ba34:	af04      	add	r7, sp, #16
 801ba36:	6078      	str	r0, [r7, #4]
 801ba38:	460b      	mov	r3, r1
 801ba3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d106      	bne.n	801ba50 <tcp_close_shutdown+0x20>
 801ba42:	4b63      	ldr	r3, [pc, #396]	@ (801bbd0 <tcp_close_shutdown+0x1a0>)
 801ba44:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801ba48:	4962      	ldr	r1, [pc, #392]	@ (801bbd4 <tcp_close_shutdown+0x1a4>)
 801ba4a:	4863      	ldr	r0, [pc, #396]	@ (801bbd8 <tcp_close_shutdown+0x1a8>)
 801ba4c:	f00b fe8e 	bl	802776c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801ba50:	78fb      	ldrb	r3, [r7, #3]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d066      	beq.n	801bb24 <tcp_close_shutdown+0xf4>
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	7d1b      	ldrb	r3, [r3, #20]
 801ba5a:	2b04      	cmp	r3, #4
 801ba5c:	d003      	beq.n	801ba66 <tcp_close_shutdown+0x36>
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	7d1b      	ldrb	r3, [r3, #20]
 801ba62:	2b07      	cmp	r3, #7
 801ba64:	d15e      	bne.n	801bb24 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d104      	bne.n	801ba78 <tcp_close_shutdown+0x48>
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ba72:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801ba76:	d055      	beq.n	801bb24 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	8b5b      	ldrh	r3, [r3, #26]
 801ba7c:	f003 0310 	and.w	r3, r3, #16
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d106      	bne.n	801ba92 <tcp_close_shutdown+0x62>
 801ba84:	4b52      	ldr	r3, [pc, #328]	@ (801bbd0 <tcp_close_shutdown+0x1a0>)
 801ba86:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801ba8a:	4954      	ldr	r1, [pc, #336]	@ (801bbdc <tcp_close_shutdown+0x1ac>)
 801ba8c:	4852      	ldr	r0, [pc, #328]	@ (801bbd8 <tcp_close_shutdown+0x1a8>)
 801ba8e:	f00b fe6d 	bl	802776c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801ba9a:	687d      	ldr	r5, [r7, #4]
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	3304      	adds	r3, #4
 801baa0:	687a      	ldr	r2, [r7, #4]
 801baa2:	8ad2      	ldrh	r2, [r2, #22]
 801baa4:	6879      	ldr	r1, [r7, #4]
 801baa6:	8b09      	ldrh	r1, [r1, #24]
 801baa8:	9102      	str	r1, [sp, #8]
 801baaa:	9201      	str	r2, [sp, #4]
 801baac:	9300      	str	r3, [sp, #0]
 801baae:	462b      	mov	r3, r5
 801bab0:	4622      	mov	r2, r4
 801bab2:	4601      	mov	r1, r0
 801bab4:	6878      	ldr	r0, [r7, #4]
 801bab6:	f005 fdb7 	bl	8021628 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801baba:	6878      	ldr	r0, [r7, #4]
 801babc:	f001 fb9a 	bl	801d1f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801bac0:	4b47      	ldr	r3, [pc, #284]	@ (801bbe0 <tcp_close_shutdown+0x1b0>)
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	687a      	ldr	r2, [r7, #4]
 801bac6:	429a      	cmp	r2, r3
 801bac8:	d105      	bne.n	801bad6 <tcp_close_shutdown+0xa6>
 801baca:	4b45      	ldr	r3, [pc, #276]	@ (801bbe0 <tcp_close_shutdown+0x1b0>)
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	68db      	ldr	r3, [r3, #12]
 801bad0:	4a43      	ldr	r2, [pc, #268]	@ (801bbe0 <tcp_close_shutdown+0x1b0>)
 801bad2:	6013      	str	r3, [r2, #0]
 801bad4:	e013      	b.n	801bafe <tcp_close_shutdown+0xce>
 801bad6:	4b42      	ldr	r3, [pc, #264]	@ (801bbe0 <tcp_close_shutdown+0x1b0>)
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	60fb      	str	r3, [r7, #12]
 801badc:	e00c      	b.n	801baf8 <tcp_close_shutdown+0xc8>
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	68db      	ldr	r3, [r3, #12]
 801bae2:	687a      	ldr	r2, [r7, #4]
 801bae4:	429a      	cmp	r2, r3
 801bae6:	d104      	bne.n	801baf2 <tcp_close_shutdown+0xc2>
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	68da      	ldr	r2, [r3, #12]
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	60da      	str	r2, [r3, #12]
 801baf0:	e005      	b.n	801bafe <tcp_close_shutdown+0xce>
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	68db      	ldr	r3, [r3, #12]
 801baf6:	60fb      	str	r3, [r7, #12]
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d1ef      	bne.n	801bade <tcp_close_shutdown+0xae>
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	2200      	movs	r2, #0
 801bb02:	60da      	str	r2, [r3, #12]
 801bb04:	4b37      	ldr	r3, [pc, #220]	@ (801bbe4 <tcp_close_shutdown+0x1b4>)
 801bb06:	2201      	movs	r2, #1
 801bb08:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801bb0a:	4b37      	ldr	r3, [pc, #220]	@ (801bbe8 <tcp_close_shutdown+0x1b8>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	687a      	ldr	r2, [r7, #4]
 801bb10:	429a      	cmp	r2, r3
 801bb12:	d102      	bne.n	801bb1a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801bb14:	f004 f82e 	bl	801fb74 <tcp_trigger_input_pcb_close>
 801bb18:	e002      	b.n	801bb20 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801bb1a:	6878      	ldr	r0, [r7, #4]
 801bb1c:	f7ff fed6 	bl	801b8cc <tcp_free>
      }
      return ERR_OK;
 801bb20:	2300      	movs	r3, #0
 801bb22:	e050      	b.n	801bbc6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	7d1b      	ldrb	r3, [r3, #20]
 801bb28:	2b02      	cmp	r3, #2
 801bb2a:	d03b      	beq.n	801bba4 <tcp_close_shutdown+0x174>
 801bb2c:	2b02      	cmp	r3, #2
 801bb2e:	dc44      	bgt.n	801bbba <tcp_close_shutdown+0x18a>
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d002      	beq.n	801bb3a <tcp_close_shutdown+0x10a>
 801bb34:	2b01      	cmp	r3, #1
 801bb36:	d02a      	beq.n	801bb8e <tcp_close_shutdown+0x15e>
 801bb38:	e03f      	b.n	801bbba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	8adb      	ldrh	r3, [r3, #22]
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d021      	beq.n	801bb86 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801bb42:	4b2a      	ldr	r3, [pc, #168]	@ (801bbec <tcp_close_shutdown+0x1bc>)
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	687a      	ldr	r2, [r7, #4]
 801bb48:	429a      	cmp	r2, r3
 801bb4a:	d105      	bne.n	801bb58 <tcp_close_shutdown+0x128>
 801bb4c:	4b27      	ldr	r3, [pc, #156]	@ (801bbec <tcp_close_shutdown+0x1bc>)
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	68db      	ldr	r3, [r3, #12]
 801bb52:	4a26      	ldr	r2, [pc, #152]	@ (801bbec <tcp_close_shutdown+0x1bc>)
 801bb54:	6013      	str	r3, [r2, #0]
 801bb56:	e013      	b.n	801bb80 <tcp_close_shutdown+0x150>
 801bb58:	4b24      	ldr	r3, [pc, #144]	@ (801bbec <tcp_close_shutdown+0x1bc>)
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	60bb      	str	r3, [r7, #8]
 801bb5e:	e00c      	b.n	801bb7a <tcp_close_shutdown+0x14a>
 801bb60:	68bb      	ldr	r3, [r7, #8]
 801bb62:	68db      	ldr	r3, [r3, #12]
 801bb64:	687a      	ldr	r2, [r7, #4]
 801bb66:	429a      	cmp	r2, r3
 801bb68:	d104      	bne.n	801bb74 <tcp_close_shutdown+0x144>
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	68da      	ldr	r2, [r3, #12]
 801bb6e:	68bb      	ldr	r3, [r7, #8]
 801bb70:	60da      	str	r2, [r3, #12]
 801bb72:	e005      	b.n	801bb80 <tcp_close_shutdown+0x150>
 801bb74:	68bb      	ldr	r3, [r7, #8]
 801bb76:	68db      	ldr	r3, [r3, #12]
 801bb78:	60bb      	str	r3, [r7, #8]
 801bb7a:	68bb      	ldr	r3, [r7, #8]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d1ef      	bne.n	801bb60 <tcp_close_shutdown+0x130>
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	2200      	movs	r2, #0
 801bb84:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801bb86:	6878      	ldr	r0, [r7, #4]
 801bb88:	f7ff fea0 	bl	801b8cc <tcp_free>
      break;
 801bb8c:	e01a      	b.n	801bbc4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801bb8e:	6878      	ldr	r0, [r7, #4]
 801bb90:	f7ff ff14 	bl	801b9bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801bb94:	6879      	ldr	r1, [r7, #4]
 801bb96:	4816      	ldr	r0, [pc, #88]	@ (801bbf0 <tcp_close_shutdown+0x1c0>)
 801bb98:	f001 fb7c 	bl	801d294 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801bb9c:	6878      	ldr	r0, [r7, #4]
 801bb9e:	f7ff feb1 	bl	801b904 <tcp_free_listen>
      break;
 801bba2:	e00f      	b.n	801bbc4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801bba4:	6879      	ldr	r1, [r7, #4]
 801bba6:	480e      	ldr	r0, [pc, #56]	@ (801bbe0 <tcp_close_shutdown+0x1b0>)
 801bba8:	f001 fb74 	bl	801d294 <tcp_pcb_remove>
 801bbac:	4b0d      	ldr	r3, [pc, #52]	@ (801bbe4 <tcp_close_shutdown+0x1b4>)
 801bbae:	2201      	movs	r2, #1
 801bbb0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801bbb2:	6878      	ldr	r0, [r7, #4]
 801bbb4:	f7ff fe8a 	bl	801b8cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801bbb8:	e004      	b.n	801bbc4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801bbba:	6878      	ldr	r0, [r7, #4]
 801bbbc:	f000 f81a 	bl	801bbf4 <tcp_close_shutdown_fin>
 801bbc0:	4603      	mov	r3, r0
 801bbc2:	e000      	b.n	801bbc6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801bbc4:	2300      	movs	r3, #0
}
 801bbc6:	4618      	mov	r0, r3
 801bbc8:	3710      	adds	r7, #16
 801bbca:	46bd      	mov	sp, r7
 801bbcc:	bdb0      	pop	{r4, r5, r7, pc}
 801bbce:	bf00      	nop
 801bbd0:	0802a134 	.word	0x0802a134
 801bbd4:	0802a208 	.word	0x0802a208
 801bbd8:	0802a178 	.word	0x0802a178
 801bbdc:	0802a228 	.word	0x0802a228
 801bbe0:	2001116c 	.word	0x2001116c
 801bbe4:	20011174 	.word	0x20011174
 801bbe8:	200111ac 	.word	0x200111ac
 801bbec:	20011164 	.word	0x20011164
 801bbf0:	20011168 	.word	0x20011168

0801bbf4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b084      	sub	sp, #16
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d106      	bne.n	801bc10 <tcp_close_shutdown_fin+0x1c>
 801bc02:	4b2e      	ldr	r3, [pc, #184]	@ (801bcbc <tcp_close_shutdown_fin+0xc8>)
 801bc04:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801bc08:	492d      	ldr	r1, [pc, #180]	@ (801bcc0 <tcp_close_shutdown_fin+0xcc>)
 801bc0a:	482e      	ldr	r0, [pc, #184]	@ (801bcc4 <tcp_close_shutdown_fin+0xd0>)
 801bc0c:	f00b fdae 	bl	802776c <iprintf>

  switch (pcb->state) {
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	7d1b      	ldrb	r3, [r3, #20]
 801bc14:	2b07      	cmp	r3, #7
 801bc16:	d020      	beq.n	801bc5a <tcp_close_shutdown_fin+0x66>
 801bc18:	2b07      	cmp	r3, #7
 801bc1a:	dc2b      	bgt.n	801bc74 <tcp_close_shutdown_fin+0x80>
 801bc1c:	2b03      	cmp	r3, #3
 801bc1e:	d002      	beq.n	801bc26 <tcp_close_shutdown_fin+0x32>
 801bc20:	2b04      	cmp	r3, #4
 801bc22:	d00d      	beq.n	801bc40 <tcp_close_shutdown_fin+0x4c>
 801bc24:	e026      	b.n	801bc74 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801bc26:	6878      	ldr	r0, [r7, #4]
 801bc28:	f004 fe0c 	bl	8020844 <tcp_send_fin>
 801bc2c:	4603      	mov	r3, r0
 801bc2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801bc30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d11f      	bne.n	801bc78 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	2205      	movs	r2, #5
 801bc3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801bc3e:	e01b      	b.n	801bc78 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801bc40:	6878      	ldr	r0, [r7, #4]
 801bc42:	f004 fdff 	bl	8020844 <tcp_send_fin>
 801bc46:	4603      	mov	r3, r0
 801bc48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801bc4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d114      	bne.n	801bc7c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	2205      	movs	r2, #5
 801bc56:	751a      	strb	r2, [r3, #20]
      }
      break;
 801bc58:	e010      	b.n	801bc7c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801bc5a:	6878      	ldr	r0, [r7, #4]
 801bc5c:	f004 fdf2 	bl	8020844 <tcp_send_fin>
 801bc60:	4603      	mov	r3, r0
 801bc62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801bc64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d109      	bne.n	801bc80 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	2209      	movs	r2, #9
 801bc70:	751a      	strb	r2, [r3, #20]
      }
      break;
 801bc72:	e005      	b.n	801bc80 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801bc74:	2300      	movs	r3, #0
 801bc76:	e01c      	b.n	801bcb2 <tcp_close_shutdown_fin+0xbe>
      break;
 801bc78:	bf00      	nop
 801bc7a:	e002      	b.n	801bc82 <tcp_close_shutdown_fin+0x8e>
      break;
 801bc7c:	bf00      	nop
 801bc7e:	e000      	b.n	801bc82 <tcp_close_shutdown_fin+0x8e>
      break;
 801bc80:	bf00      	nop
  }

  if (err == ERR_OK) {
 801bc82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d103      	bne.n	801bc92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801bc8a:	6878      	ldr	r0, [r7, #4]
 801bc8c:	f004 ff18 	bl	8020ac0 <tcp_output>
 801bc90:	e00d      	b.n	801bcae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801bc92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc9a:	d108      	bne.n	801bcae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	8b5b      	ldrh	r3, [r3, #26]
 801bca0:	f043 0308 	orr.w	r3, r3, #8
 801bca4:	b29a      	uxth	r2, r3
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801bcaa:	2300      	movs	r3, #0
 801bcac:	e001      	b.n	801bcb2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801bcae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bcb2:	4618      	mov	r0, r3
 801bcb4:	3710      	adds	r7, #16
 801bcb6:	46bd      	mov	sp, r7
 801bcb8:	bd80      	pop	{r7, pc}
 801bcba:	bf00      	nop
 801bcbc:	0802a134 	.word	0x0802a134
 801bcc0:	0802a1e4 	.word	0x0802a1e4
 801bcc4:	0802a178 	.word	0x0802a178

0801bcc8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b082      	sub	sp, #8
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d109      	bne.n	801bcea <tcp_close+0x22>
 801bcd6:	4b0f      	ldr	r3, [pc, #60]	@ (801bd14 <tcp_close+0x4c>)
 801bcd8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 801bcdc:	490e      	ldr	r1, [pc, #56]	@ (801bd18 <tcp_close+0x50>)
 801bcde:	480f      	ldr	r0, [pc, #60]	@ (801bd1c <tcp_close+0x54>)
 801bce0:	f00b fd44 	bl	802776c <iprintf>
 801bce4:	f06f 030f 	mvn.w	r3, #15
 801bce8:	e00f      	b.n	801bd0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	7d1b      	ldrb	r3, [r3, #20]
 801bcee:	2b01      	cmp	r3, #1
 801bcf0:	d006      	beq.n	801bd00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	8b5b      	ldrh	r3, [r3, #26]
 801bcf6:	f043 0310 	orr.w	r3, r3, #16
 801bcfa:	b29a      	uxth	r2, r3
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801bd00:	2101      	movs	r1, #1
 801bd02:	6878      	ldr	r0, [r7, #4]
 801bd04:	f7ff fe94 	bl	801ba30 <tcp_close_shutdown>
 801bd08:	4603      	mov	r3, r0
}
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	3708      	adds	r7, #8
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	bd80      	pop	{r7, pc}
 801bd12:	bf00      	nop
 801bd14:	0802a134 	.word	0x0802a134
 801bd18:	0802a244 	.word	0x0802a244
 801bd1c:	0802a178 	.word	0x0802a178

0801bd20 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b084      	sub	sp, #16
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	60f8      	str	r0, [r7, #12]
 801bd28:	60b9      	str	r1, [r7, #8]
 801bd2a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d109      	bne.n	801bd46 <tcp_shutdown+0x26>
 801bd32:	4b26      	ldr	r3, [pc, #152]	@ (801bdcc <tcp_shutdown+0xac>)
 801bd34:	f240 2207 	movw	r2, #519	@ 0x207
 801bd38:	4925      	ldr	r1, [pc, #148]	@ (801bdd0 <tcp_shutdown+0xb0>)
 801bd3a:	4826      	ldr	r0, [pc, #152]	@ (801bdd4 <tcp_shutdown+0xb4>)
 801bd3c:	f00b fd16 	bl	802776c <iprintf>
 801bd40:	f06f 030f 	mvn.w	r3, #15
 801bd44:	e03d      	b.n	801bdc2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	7d1b      	ldrb	r3, [r3, #20]
 801bd4a:	2b01      	cmp	r3, #1
 801bd4c:	d102      	bne.n	801bd54 <tcp_shutdown+0x34>
    return ERR_CONN;
 801bd4e:	f06f 030a 	mvn.w	r3, #10
 801bd52:	e036      	b.n	801bdc2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801bd54:	68bb      	ldr	r3, [r7, #8]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d01b      	beq.n	801bd92 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	8b5b      	ldrh	r3, [r3, #26]
 801bd5e:	f043 0310 	orr.w	r3, r3, #16
 801bd62:	b29a      	uxth	r2, r3
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d005      	beq.n	801bd7a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801bd6e:	2101      	movs	r1, #1
 801bd70:	68f8      	ldr	r0, [r7, #12]
 801bd72:	f7ff fe5d 	bl	801ba30 <tcp_close_shutdown>
 801bd76:	4603      	mov	r3, r0
 801bd78:	e023      	b.n	801bdc2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d007      	beq.n	801bd92 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801bd86:	4618      	mov	r0, r3
 801bd88:	f7ff fae4 	bl	801b354 <pbuf_free>
      pcb->refused_data = NULL;
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	2200      	movs	r2, #0
 801bd90:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d013      	beq.n	801bdc0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801bd98:	68fb      	ldr	r3, [r7, #12]
 801bd9a:	7d1b      	ldrb	r3, [r3, #20]
 801bd9c:	2b04      	cmp	r3, #4
 801bd9e:	dc02      	bgt.n	801bda6 <tcp_shutdown+0x86>
 801bda0:	2b03      	cmp	r3, #3
 801bda2:	da02      	bge.n	801bdaa <tcp_shutdown+0x8a>
 801bda4:	e009      	b.n	801bdba <tcp_shutdown+0x9a>
 801bda6:	2b07      	cmp	r3, #7
 801bda8:	d107      	bne.n	801bdba <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801bdaa:	68bb      	ldr	r3, [r7, #8]
 801bdac:	b2db      	uxtb	r3, r3
 801bdae:	4619      	mov	r1, r3
 801bdb0:	68f8      	ldr	r0, [r7, #12]
 801bdb2:	f7ff fe3d 	bl	801ba30 <tcp_close_shutdown>
 801bdb6:	4603      	mov	r3, r0
 801bdb8:	e003      	b.n	801bdc2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801bdba:	f06f 030a 	mvn.w	r3, #10
 801bdbe:	e000      	b.n	801bdc2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801bdc0:	2300      	movs	r3, #0
}
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	3710      	adds	r7, #16
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	bd80      	pop	{r7, pc}
 801bdca:	bf00      	nop
 801bdcc:	0802a134 	.word	0x0802a134
 801bdd0:	0802a25c 	.word	0x0802a25c
 801bdd4:	0802a178 	.word	0x0802a178

0801bdd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	b08e      	sub	sp, #56	@ 0x38
 801bddc:	af04      	add	r7, sp, #16
 801bdde:	6078      	str	r0, [r7, #4]
 801bde0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d107      	bne.n	801bdf8 <tcp_abandon+0x20>
 801bde8:	4b52      	ldr	r3, [pc, #328]	@ (801bf34 <tcp_abandon+0x15c>)
 801bdea:	f240 223d 	movw	r2, #573	@ 0x23d
 801bdee:	4952      	ldr	r1, [pc, #328]	@ (801bf38 <tcp_abandon+0x160>)
 801bdf0:	4852      	ldr	r0, [pc, #328]	@ (801bf3c <tcp_abandon+0x164>)
 801bdf2:	f00b fcbb 	bl	802776c <iprintf>
 801bdf6:	e099      	b.n	801bf2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	7d1b      	ldrb	r3, [r3, #20]
 801bdfc:	2b01      	cmp	r3, #1
 801bdfe:	d106      	bne.n	801be0e <tcp_abandon+0x36>
 801be00:	4b4c      	ldr	r3, [pc, #304]	@ (801bf34 <tcp_abandon+0x15c>)
 801be02:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801be06:	494e      	ldr	r1, [pc, #312]	@ (801bf40 <tcp_abandon+0x168>)
 801be08:	484c      	ldr	r0, [pc, #304]	@ (801bf3c <tcp_abandon+0x164>)
 801be0a:	f00b fcaf 	bl	802776c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	7d1b      	ldrb	r3, [r3, #20]
 801be12:	2b0a      	cmp	r3, #10
 801be14:	d107      	bne.n	801be26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801be16:	6879      	ldr	r1, [r7, #4]
 801be18:	484a      	ldr	r0, [pc, #296]	@ (801bf44 <tcp_abandon+0x16c>)
 801be1a:	f001 fa3b 	bl	801d294 <tcp_pcb_remove>
    tcp_free(pcb);
 801be1e:	6878      	ldr	r0, [r7, #4]
 801be20:	f7ff fd54 	bl	801b8cc <tcp_free>
 801be24:	e082      	b.n	801bf2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801be26:	2300      	movs	r3, #0
 801be28:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801be2a:	2300      	movs	r3, #0
 801be2c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801be32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801be40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	691b      	ldr	r3, [r3, #16]
 801be46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	7d1b      	ldrb	r3, [r3, #20]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d126      	bne.n	801be9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	8adb      	ldrh	r3, [r3, #22]
 801be54:	2b00      	cmp	r3, #0
 801be56:	d02e      	beq.n	801beb6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801be58:	4b3b      	ldr	r3, [pc, #236]	@ (801bf48 <tcp_abandon+0x170>)
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	687a      	ldr	r2, [r7, #4]
 801be5e:	429a      	cmp	r2, r3
 801be60:	d105      	bne.n	801be6e <tcp_abandon+0x96>
 801be62:	4b39      	ldr	r3, [pc, #228]	@ (801bf48 <tcp_abandon+0x170>)
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	68db      	ldr	r3, [r3, #12]
 801be68:	4a37      	ldr	r2, [pc, #220]	@ (801bf48 <tcp_abandon+0x170>)
 801be6a:	6013      	str	r3, [r2, #0]
 801be6c:	e013      	b.n	801be96 <tcp_abandon+0xbe>
 801be6e:	4b36      	ldr	r3, [pc, #216]	@ (801bf48 <tcp_abandon+0x170>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	61fb      	str	r3, [r7, #28]
 801be74:	e00c      	b.n	801be90 <tcp_abandon+0xb8>
 801be76:	69fb      	ldr	r3, [r7, #28]
 801be78:	68db      	ldr	r3, [r3, #12]
 801be7a:	687a      	ldr	r2, [r7, #4]
 801be7c:	429a      	cmp	r2, r3
 801be7e:	d104      	bne.n	801be8a <tcp_abandon+0xb2>
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	68da      	ldr	r2, [r3, #12]
 801be84:	69fb      	ldr	r3, [r7, #28]
 801be86:	60da      	str	r2, [r3, #12]
 801be88:	e005      	b.n	801be96 <tcp_abandon+0xbe>
 801be8a:	69fb      	ldr	r3, [r7, #28]
 801be8c:	68db      	ldr	r3, [r3, #12]
 801be8e:	61fb      	str	r3, [r7, #28]
 801be90:	69fb      	ldr	r3, [r7, #28]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d1ef      	bne.n	801be76 <tcp_abandon+0x9e>
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	2200      	movs	r2, #0
 801be9a:	60da      	str	r2, [r3, #12]
 801be9c:	e00b      	b.n	801beb6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801be9e:	683b      	ldr	r3, [r7, #0]
 801bea0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	8adb      	ldrh	r3, [r3, #22]
 801bea6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801bea8:	6879      	ldr	r1, [r7, #4]
 801beaa:	4828      	ldr	r0, [pc, #160]	@ (801bf4c <tcp_abandon+0x174>)
 801beac:	f001 f9f2 	bl	801d294 <tcp_pcb_remove>
 801beb0:	4b27      	ldr	r3, [pc, #156]	@ (801bf50 <tcp_abandon+0x178>)
 801beb2:	2201      	movs	r2, #1
 801beb4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d004      	beq.n	801bec8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bec2:	4618      	mov	r0, r3
 801bec4:	f000 fec6 	bl	801cc54 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801becc:	2b00      	cmp	r3, #0
 801bece:	d004      	beq.n	801beda <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801bed4:	4618      	mov	r0, r3
 801bed6:	f000 febd 	bl	801cc54 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d004      	beq.n	801beec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bee6:	4618      	mov	r0, r3
 801bee8:	f000 feb4 	bl	801cc54 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801beec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d00e      	beq.n	801bf10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801bef2:	6879      	ldr	r1, [r7, #4]
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	3304      	adds	r3, #4
 801bef8:	687a      	ldr	r2, [r7, #4]
 801befa:	8b12      	ldrh	r2, [r2, #24]
 801befc:	9202      	str	r2, [sp, #8]
 801befe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801bf00:	9201      	str	r2, [sp, #4]
 801bf02:	9300      	str	r3, [sp, #0]
 801bf04:	460b      	mov	r3, r1
 801bf06:	697a      	ldr	r2, [r7, #20]
 801bf08:	69b9      	ldr	r1, [r7, #24]
 801bf0a:	6878      	ldr	r0, [r7, #4]
 801bf0c:	f005 fb8c 	bl	8021628 <tcp_rst>
    }
    last_state = pcb->state;
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	7d1b      	ldrb	r3, [r3, #20]
 801bf14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801bf16:	6878      	ldr	r0, [r7, #4]
 801bf18:	f7ff fcd8 	bl	801b8cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801bf1c:	693b      	ldr	r3, [r7, #16]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	d004      	beq.n	801bf2c <tcp_abandon+0x154>
 801bf22:	693b      	ldr	r3, [r7, #16]
 801bf24:	f06f 010c 	mvn.w	r1, #12
 801bf28:	68f8      	ldr	r0, [r7, #12]
 801bf2a:	4798      	blx	r3
  }
}
 801bf2c:	3728      	adds	r7, #40	@ 0x28
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	bd80      	pop	{r7, pc}
 801bf32:	bf00      	nop
 801bf34:	0802a134 	.word	0x0802a134
 801bf38:	0802a278 	.word	0x0802a278
 801bf3c:	0802a178 	.word	0x0802a178
 801bf40:	0802a294 	.word	0x0802a294
 801bf44:	20011170 	.word	0x20011170
 801bf48:	20011164 	.word	0x20011164
 801bf4c:	2001116c 	.word	0x2001116c
 801bf50:	20011174 	.word	0x20011174

0801bf54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801bf54:	b580      	push	{r7, lr}
 801bf56:	b082      	sub	sp, #8
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801bf5c:	2101      	movs	r1, #1
 801bf5e:	6878      	ldr	r0, [r7, #4]
 801bf60:	f7ff ff3a 	bl	801bdd8 <tcp_abandon>
}
 801bf64:	bf00      	nop
 801bf66:	3708      	adds	r7, #8
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	bd80      	pop	{r7, pc}

0801bf6c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bf6c:	b580      	push	{r7, lr}
 801bf6e:	b088      	sub	sp, #32
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	60f8      	str	r0, [r7, #12]
 801bf74:	60b9      	str	r1, [r7, #8]
 801bf76:	4613      	mov	r3, r2
 801bf78:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801bf7a:	2304      	movs	r3, #4
 801bf7c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801bf7e:	68bb      	ldr	r3, [r7, #8]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d101      	bne.n	801bf88 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801bf84:	4b3e      	ldr	r3, [pc, #248]	@ (801c080 <tcp_bind+0x114>)
 801bf86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801bf88:	68fb      	ldr	r3, [r7, #12]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d109      	bne.n	801bfa2 <tcp_bind+0x36>
 801bf8e:	4b3d      	ldr	r3, [pc, #244]	@ (801c084 <tcp_bind+0x118>)
 801bf90:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801bf94:	493c      	ldr	r1, [pc, #240]	@ (801c088 <tcp_bind+0x11c>)
 801bf96:	483d      	ldr	r0, [pc, #244]	@ (801c08c <tcp_bind+0x120>)
 801bf98:	f00b fbe8 	bl	802776c <iprintf>
 801bf9c:	f06f 030f 	mvn.w	r3, #15
 801bfa0:	e06a      	b.n	801c078 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801bfa2:	68fb      	ldr	r3, [r7, #12]
 801bfa4:	7d1b      	ldrb	r3, [r3, #20]
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d009      	beq.n	801bfbe <tcp_bind+0x52>
 801bfaa:	4b36      	ldr	r3, [pc, #216]	@ (801c084 <tcp_bind+0x118>)
 801bfac:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801bfb0:	4937      	ldr	r1, [pc, #220]	@ (801c090 <tcp_bind+0x124>)
 801bfb2:	4836      	ldr	r0, [pc, #216]	@ (801c08c <tcp_bind+0x120>)
 801bfb4:	f00b fbda 	bl	802776c <iprintf>
 801bfb8:	f06f 0305 	mvn.w	r3, #5
 801bfbc:	e05c      	b.n	801c078 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801bfbe:	88fb      	ldrh	r3, [r7, #6]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d109      	bne.n	801bfd8 <tcp_bind+0x6c>
    port = tcp_new_port();
 801bfc4:	f000 f9de 	bl	801c384 <tcp_new_port>
 801bfc8:	4603      	mov	r3, r0
 801bfca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801bfcc:	88fb      	ldrh	r3, [r7, #6]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d135      	bne.n	801c03e <tcp_bind+0xd2>
      return ERR_BUF;
 801bfd2:	f06f 0301 	mvn.w	r3, #1
 801bfd6:	e04f      	b.n	801c078 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801bfd8:	2300      	movs	r3, #0
 801bfda:	61fb      	str	r3, [r7, #28]
 801bfdc:	e02b      	b.n	801c036 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801bfde:	4a2d      	ldr	r2, [pc, #180]	@ (801c094 <tcp_bind+0x128>)
 801bfe0:	69fb      	ldr	r3, [r7, #28]
 801bfe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	61bb      	str	r3, [r7, #24]
 801bfea:	e01e      	b.n	801c02a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801bfec:	69bb      	ldr	r3, [r7, #24]
 801bfee:	8adb      	ldrh	r3, [r3, #22]
 801bff0:	88fa      	ldrh	r2, [r7, #6]
 801bff2:	429a      	cmp	r2, r3
 801bff4:	d116      	bne.n	801c024 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801bff6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d010      	beq.n	801c01e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801bffc:	69bb      	ldr	r3, [r7, #24]
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	2b00      	cmp	r3, #0
 801c002:	d00c      	beq.n	801c01e <tcp_bind+0xb2>
 801c004:	68bb      	ldr	r3, [r7, #8]
 801c006:	2b00      	cmp	r3, #0
 801c008:	d009      	beq.n	801c01e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801c00a:	68bb      	ldr	r3, [r7, #8]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d005      	beq.n	801c01e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801c012:	69bb      	ldr	r3, [r7, #24]
 801c014:	681a      	ldr	r2, [r3, #0]
 801c016:	68bb      	ldr	r3, [r7, #8]
 801c018:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801c01a:	429a      	cmp	r2, r3
 801c01c:	d102      	bne.n	801c024 <tcp_bind+0xb8>
              return ERR_USE;
 801c01e:	f06f 0307 	mvn.w	r3, #7
 801c022:	e029      	b.n	801c078 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801c024:	69bb      	ldr	r3, [r7, #24]
 801c026:	68db      	ldr	r3, [r3, #12]
 801c028:	61bb      	str	r3, [r7, #24]
 801c02a:	69bb      	ldr	r3, [r7, #24]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d1dd      	bne.n	801bfec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801c030:	69fb      	ldr	r3, [r7, #28]
 801c032:	3301      	adds	r3, #1
 801c034:	61fb      	str	r3, [r7, #28]
 801c036:	69fa      	ldr	r2, [r7, #28]
 801c038:	697b      	ldr	r3, [r7, #20]
 801c03a:	429a      	cmp	r2, r3
 801c03c:	dbcf      	blt.n	801bfde <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801c03e:	68bb      	ldr	r3, [r7, #8]
 801c040:	2b00      	cmp	r3, #0
 801c042:	d00c      	beq.n	801c05e <tcp_bind+0xf2>
 801c044:	68bb      	ldr	r3, [r7, #8]
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d008      	beq.n	801c05e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801c04c:	68bb      	ldr	r3, [r7, #8]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d002      	beq.n	801c058 <tcp_bind+0xec>
 801c052:	68bb      	ldr	r3, [r7, #8]
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	e000      	b.n	801c05a <tcp_bind+0xee>
 801c058:	2300      	movs	r3, #0
 801c05a:	68fa      	ldr	r2, [r7, #12]
 801c05c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	88fa      	ldrh	r2, [r7, #6]
 801c062:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801c064:	4b0c      	ldr	r3, [pc, #48]	@ (801c098 <tcp_bind+0x12c>)
 801c066:	681a      	ldr	r2, [r3, #0]
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	60da      	str	r2, [r3, #12]
 801c06c:	4a0a      	ldr	r2, [pc, #40]	@ (801c098 <tcp_bind+0x12c>)
 801c06e:	68fb      	ldr	r3, [r7, #12]
 801c070:	6013      	str	r3, [r2, #0]
 801c072:	f005 fc9b 	bl	80219ac <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801c076:	2300      	movs	r3, #0
}
 801c078:	4618      	mov	r0, r3
 801c07a:	3720      	adds	r7, #32
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bd80      	pop	{r7, pc}
 801c080:	0802c588 	.word	0x0802c588
 801c084:	0802a134 	.word	0x0802a134
 801c088:	0802a2c8 	.word	0x0802a2c8
 801c08c:	0802a178 	.word	0x0802a178
 801c090:	0802a2e0 	.word	0x0802a2e0
 801c094:	0802c550 	.word	0x0802c550
 801c098:	20011164 	.word	0x20011164

0801c09c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b084      	sub	sp, #16
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	60f8      	str	r0, [r7, #12]
 801c0a4:	60b9      	str	r1, [r7, #8]
 801c0a6:	4613      	mov	r3, r2
 801c0a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c0aa:	68bb      	ldr	r3, [r7, #8]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d106      	bne.n	801c0be <tcp_accept_null+0x22>
 801c0b0:	4b07      	ldr	r3, [pc, #28]	@ (801c0d0 <tcp_accept_null+0x34>)
 801c0b2:	f240 320f 	movw	r2, #783	@ 0x30f
 801c0b6:	4907      	ldr	r1, [pc, #28]	@ (801c0d4 <tcp_accept_null+0x38>)
 801c0b8:	4807      	ldr	r0, [pc, #28]	@ (801c0d8 <tcp_accept_null+0x3c>)
 801c0ba:	f00b fb57 	bl	802776c <iprintf>

  tcp_abort(pcb);
 801c0be:	68b8      	ldr	r0, [r7, #8]
 801c0c0:	f7ff ff48 	bl	801bf54 <tcp_abort>

  return ERR_ABRT;
 801c0c4:	f06f 030c 	mvn.w	r3, #12
}
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	3710      	adds	r7, #16
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	bd80      	pop	{r7, pc}
 801c0d0:	0802a134 	.word	0x0802a134
 801c0d4:	0802a308 	.word	0x0802a308
 801c0d8:	0802a178 	.word	0x0802a178

0801c0dc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b088      	sub	sp, #32
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	60f8      	str	r0, [r7, #12]
 801c0e4:	460b      	mov	r3, r1
 801c0e6:	607a      	str	r2, [r7, #4]
 801c0e8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801c0ea:	2300      	movs	r3, #0
 801c0ec:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d109      	bne.n	801c108 <tcp_listen_with_backlog_and_err+0x2c>
 801c0f4:	4b47      	ldr	r3, [pc, #284]	@ (801c214 <tcp_listen_with_backlog_and_err+0x138>)
 801c0f6:	f240 3259 	movw	r2, #857	@ 0x359
 801c0fa:	4947      	ldr	r1, [pc, #284]	@ (801c218 <tcp_listen_with_backlog_and_err+0x13c>)
 801c0fc:	4847      	ldr	r0, [pc, #284]	@ (801c21c <tcp_listen_with_backlog_and_err+0x140>)
 801c0fe:	f00b fb35 	bl	802776c <iprintf>
 801c102:	23f0      	movs	r3, #240	@ 0xf0
 801c104:	76fb      	strb	r3, [r7, #27]
 801c106:	e079      	b.n	801c1fc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801c108:	68fb      	ldr	r3, [r7, #12]
 801c10a:	7d1b      	ldrb	r3, [r3, #20]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d009      	beq.n	801c124 <tcp_listen_with_backlog_and_err+0x48>
 801c110:	4b40      	ldr	r3, [pc, #256]	@ (801c214 <tcp_listen_with_backlog_and_err+0x138>)
 801c112:	f240 325a 	movw	r2, #858	@ 0x35a
 801c116:	4942      	ldr	r1, [pc, #264]	@ (801c220 <tcp_listen_with_backlog_and_err+0x144>)
 801c118:	4840      	ldr	r0, [pc, #256]	@ (801c21c <tcp_listen_with_backlog_and_err+0x140>)
 801c11a:	f00b fb27 	bl	802776c <iprintf>
 801c11e:	23f1      	movs	r3, #241	@ 0xf1
 801c120:	76fb      	strb	r3, [r7, #27]
 801c122:	e06b      	b.n	801c1fc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	7d1b      	ldrb	r3, [r3, #20]
 801c128:	2b01      	cmp	r3, #1
 801c12a:	d104      	bne.n	801c136 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801c130:	23f7      	movs	r3, #247	@ 0xf7
 801c132:	76fb      	strb	r3, [r7, #27]
    goto done;
 801c134:	e062      	b.n	801c1fc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801c136:	2002      	movs	r0, #2
 801c138:	f7fe f9b4 	bl	801a4a4 <memp_malloc>
 801c13c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801c13e:	69fb      	ldr	r3, [r7, #28]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d102      	bne.n	801c14a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801c144:	23ff      	movs	r3, #255	@ 0xff
 801c146:	76fb      	strb	r3, [r7, #27]
    goto done;
 801c148:	e058      	b.n	801c1fc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	691a      	ldr	r2, [r3, #16]
 801c14e:	69fb      	ldr	r3, [r7, #28]
 801c150:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	8ada      	ldrh	r2, [r3, #22]
 801c156:	69fb      	ldr	r3, [r7, #28]
 801c158:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801c15a:	69fb      	ldr	r3, [r7, #28]
 801c15c:	2201      	movs	r2, #1
 801c15e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	7d5a      	ldrb	r2, [r3, #21]
 801c164:	69fb      	ldr	r3, [r7, #28]
 801c166:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	7a5a      	ldrb	r2, [r3, #9]
 801c16c:	69fb      	ldr	r3, [r7, #28]
 801c16e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801c170:	69fb      	ldr	r3, [r7, #28]
 801c172:	2200      	movs	r2, #0
 801c174:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	7ada      	ldrb	r2, [r3, #11]
 801c17a:	69fb      	ldr	r3, [r7, #28]
 801c17c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	7a9a      	ldrb	r2, [r3, #10]
 801c182:	69fb      	ldr	r3, [r7, #28]
 801c184:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801c186:	68fb      	ldr	r3, [r7, #12]
 801c188:	681a      	ldr	r2, [r3, #0]
 801c18a:	69fb      	ldr	r3, [r7, #28]
 801c18c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	8adb      	ldrh	r3, [r3, #22]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d021      	beq.n	801c1da <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801c196:	4b23      	ldr	r3, [pc, #140]	@ (801c224 <tcp_listen_with_backlog_and_err+0x148>)
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	68fa      	ldr	r2, [r7, #12]
 801c19c:	429a      	cmp	r2, r3
 801c19e:	d105      	bne.n	801c1ac <tcp_listen_with_backlog_and_err+0xd0>
 801c1a0:	4b20      	ldr	r3, [pc, #128]	@ (801c224 <tcp_listen_with_backlog_and_err+0x148>)
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	68db      	ldr	r3, [r3, #12]
 801c1a6:	4a1f      	ldr	r2, [pc, #124]	@ (801c224 <tcp_listen_with_backlog_and_err+0x148>)
 801c1a8:	6013      	str	r3, [r2, #0]
 801c1aa:	e013      	b.n	801c1d4 <tcp_listen_with_backlog_and_err+0xf8>
 801c1ac:	4b1d      	ldr	r3, [pc, #116]	@ (801c224 <tcp_listen_with_backlog_and_err+0x148>)
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	617b      	str	r3, [r7, #20]
 801c1b2:	e00c      	b.n	801c1ce <tcp_listen_with_backlog_and_err+0xf2>
 801c1b4:	697b      	ldr	r3, [r7, #20]
 801c1b6:	68db      	ldr	r3, [r3, #12]
 801c1b8:	68fa      	ldr	r2, [r7, #12]
 801c1ba:	429a      	cmp	r2, r3
 801c1bc:	d104      	bne.n	801c1c8 <tcp_listen_with_backlog_and_err+0xec>
 801c1be:	68fb      	ldr	r3, [r7, #12]
 801c1c0:	68da      	ldr	r2, [r3, #12]
 801c1c2:	697b      	ldr	r3, [r7, #20]
 801c1c4:	60da      	str	r2, [r3, #12]
 801c1c6:	e005      	b.n	801c1d4 <tcp_listen_with_backlog_and_err+0xf8>
 801c1c8:	697b      	ldr	r3, [r7, #20]
 801c1ca:	68db      	ldr	r3, [r3, #12]
 801c1cc:	617b      	str	r3, [r7, #20]
 801c1ce:	697b      	ldr	r3, [r7, #20]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d1ef      	bne.n	801c1b4 <tcp_listen_with_backlog_and_err+0xd8>
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801c1da:	68f8      	ldr	r0, [r7, #12]
 801c1dc:	f7ff fb76 	bl	801b8cc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801c1e0:	69fb      	ldr	r3, [r7, #28]
 801c1e2:	4a11      	ldr	r2, [pc, #68]	@ (801c228 <tcp_listen_with_backlog_and_err+0x14c>)
 801c1e4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801c1e6:	4b11      	ldr	r3, [pc, #68]	@ (801c22c <tcp_listen_with_backlog_and_err+0x150>)
 801c1e8:	681a      	ldr	r2, [r3, #0]
 801c1ea:	69fb      	ldr	r3, [r7, #28]
 801c1ec:	60da      	str	r2, [r3, #12]
 801c1ee:	4a0f      	ldr	r2, [pc, #60]	@ (801c22c <tcp_listen_with_backlog_and_err+0x150>)
 801c1f0:	69fb      	ldr	r3, [r7, #28]
 801c1f2:	6013      	str	r3, [r2, #0]
 801c1f4:	f005 fbda 	bl	80219ac <tcp_timer_needed>
  res = ERR_OK;
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d002      	beq.n	801c208 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	7efa      	ldrb	r2, [r7, #27]
 801c206:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801c208:	69fb      	ldr	r3, [r7, #28]
}
 801c20a:	4618      	mov	r0, r3
 801c20c:	3720      	adds	r7, #32
 801c20e:	46bd      	mov	sp, r7
 801c210:	bd80      	pop	{r7, pc}
 801c212:	bf00      	nop
 801c214:	0802a134 	.word	0x0802a134
 801c218:	0802a328 	.word	0x0802a328
 801c21c:	0802a178 	.word	0x0802a178
 801c220:	0802a358 	.word	0x0802a358
 801c224:	20011164 	.word	0x20011164
 801c228:	0801c09d 	.word	0x0801c09d
 801c22c:	20011168 	.word	0x20011168

0801c230 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801c230:	b580      	push	{r7, lr}
 801c232:	b084      	sub	sp, #16
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d106      	bne.n	801c24c <tcp_update_rcv_ann_wnd+0x1c>
 801c23e:	4b25      	ldr	r3, [pc, #148]	@ (801c2d4 <tcp_update_rcv_ann_wnd+0xa4>)
 801c240:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801c244:	4924      	ldr	r1, [pc, #144]	@ (801c2d8 <tcp_update_rcv_ann_wnd+0xa8>)
 801c246:	4825      	ldr	r0, [pc, #148]	@ (801c2dc <tcp_update_rcv_ann_wnd+0xac>)
 801c248:	f00b fa90 	bl	802776c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c250:	687a      	ldr	r2, [r7, #4]
 801c252:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801c254:	4413      	add	r3, r2
 801c256:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c25c:	687a      	ldr	r2, [r7, #4]
 801c25e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801c260:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 801c264:	bf28      	it	cs
 801c266:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801c26a:	b292      	uxth	r2, r2
 801c26c:	4413      	add	r3, r2
 801c26e:	68fa      	ldr	r2, [r7, #12]
 801c270:	1ad3      	subs	r3, r2, r3
 801c272:	2b00      	cmp	r3, #0
 801c274:	db08      	blt.n	801c288 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c282:	68fa      	ldr	r2, [r7, #12]
 801c284:	1ad3      	subs	r3, r2, r3
 801c286:	e020      	b.n	801c2ca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c290:	1ad3      	subs	r3, r2, r3
 801c292:	2b00      	cmp	r3, #0
 801c294:	dd03      	ble.n	801c29e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	2200      	movs	r2, #0
 801c29a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801c29c:	e014      	b.n	801c2c8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2a6:	1ad3      	subs	r3, r2, r3
 801c2a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801c2aa:	68bb      	ldr	r3, [r7, #8]
 801c2ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c2b0:	d306      	bcc.n	801c2c0 <tcp_update_rcv_ann_wnd+0x90>
 801c2b2:	4b08      	ldr	r3, [pc, #32]	@ (801c2d4 <tcp_update_rcv_ann_wnd+0xa4>)
 801c2b4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801c2b8:	4909      	ldr	r1, [pc, #36]	@ (801c2e0 <tcp_update_rcv_ann_wnd+0xb0>)
 801c2ba:	4808      	ldr	r0, [pc, #32]	@ (801c2dc <tcp_update_rcv_ann_wnd+0xac>)
 801c2bc:	f00b fa56 	bl	802776c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801c2c0:	68bb      	ldr	r3, [r7, #8]
 801c2c2:	b29a      	uxth	r2, r3
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801c2c8:	2300      	movs	r3, #0
  }
}
 801c2ca:	4618      	mov	r0, r3
 801c2cc:	3710      	adds	r7, #16
 801c2ce:	46bd      	mov	sp, r7
 801c2d0:	bd80      	pop	{r7, pc}
 801c2d2:	bf00      	nop
 801c2d4:	0802a134 	.word	0x0802a134
 801c2d8:	0802a390 	.word	0x0802a390
 801c2dc:	0802a178 	.word	0x0802a178
 801c2e0:	0802a3b4 	.word	0x0802a3b4

0801c2e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	b084      	sub	sp, #16
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
 801c2ec:	460b      	mov	r3, r1
 801c2ee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d107      	bne.n	801c306 <tcp_recved+0x22>
 801c2f6:	4b1f      	ldr	r3, [pc, #124]	@ (801c374 <tcp_recved+0x90>)
 801c2f8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801c2fc:	491e      	ldr	r1, [pc, #120]	@ (801c378 <tcp_recved+0x94>)
 801c2fe:	481f      	ldr	r0, [pc, #124]	@ (801c37c <tcp_recved+0x98>)
 801c300:	f00b fa34 	bl	802776c <iprintf>
 801c304:	e032      	b.n	801c36c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	7d1b      	ldrb	r3, [r3, #20]
 801c30a:	2b01      	cmp	r3, #1
 801c30c:	d106      	bne.n	801c31c <tcp_recved+0x38>
 801c30e:	4b19      	ldr	r3, [pc, #100]	@ (801c374 <tcp_recved+0x90>)
 801c310:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801c314:	491a      	ldr	r1, [pc, #104]	@ (801c380 <tcp_recved+0x9c>)
 801c316:	4819      	ldr	r0, [pc, #100]	@ (801c37c <tcp_recved+0x98>)
 801c318:	f00b fa28 	bl	802776c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801c320:	887b      	ldrh	r3, [r7, #2]
 801c322:	4413      	add	r3, r2
 801c324:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801c326:	89fb      	ldrh	r3, [r7, #14]
 801c328:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801c32c:	d804      	bhi.n	801c338 <tcp_recved+0x54>
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c332:	89fa      	ldrh	r2, [r7, #14]
 801c334:	429a      	cmp	r2, r3
 801c336:	d204      	bcs.n	801c342 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801c33e:	851a      	strh	r2, [r3, #40]	@ 0x28
 801c340:	e002      	b.n	801c348 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	89fa      	ldrh	r2, [r7, #14]
 801c346:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801c348:	6878      	ldr	r0, [r7, #4]
 801c34a:	f7ff ff71 	bl	801c230 <tcp_update_rcv_ann_wnd>
 801c34e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801c350:	68bb      	ldr	r3, [r7, #8]
 801c352:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801c356:	d309      	bcc.n	801c36c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	8b5b      	ldrh	r3, [r3, #26]
 801c35c:	f043 0302 	orr.w	r3, r3, #2
 801c360:	b29a      	uxth	r2, r3
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c366:	6878      	ldr	r0, [r7, #4]
 801c368:	f004 fbaa 	bl	8020ac0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801c36c:	3710      	adds	r7, #16
 801c36e:	46bd      	mov	sp, r7
 801c370:	bd80      	pop	{r7, pc}
 801c372:	bf00      	nop
 801c374:	0802a134 	.word	0x0802a134
 801c378:	0802a3d0 	.word	0x0802a3d0
 801c37c:	0802a178 	.word	0x0802a178
 801c380:	0802a3e8 	.word	0x0802a3e8

0801c384 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801c384:	b480      	push	{r7}
 801c386:	b083      	sub	sp, #12
 801c388:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801c38a:	2300      	movs	r3, #0
 801c38c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801c38e:	4b1e      	ldr	r3, [pc, #120]	@ (801c408 <tcp_new_port+0x84>)
 801c390:	881b      	ldrh	r3, [r3, #0]
 801c392:	3301      	adds	r3, #1
 801c394:	b29a      	uxth	r2, r3
 801c396:	4b1c      	ldr	r3, [pc, #112]	@ (801c408 <tcp_new_port+0x84>)
 801c398:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801c39a:	4b1b      	ldr	r3, [pc, #108]	@ (801c408 <tcp_new_port+0x84>)
 801c39c:	881b      	ldrh	r3, [r3, #0]
 801c39e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c3a2:	4293      	cmp	r3, r2
 801c3a4:	d103      	bne.n	801c3ae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801c3a6:	4b18      	ldr	r3, [pc, #96]	@ (801c408 <tcp_new_port+0x84>)
 801c3a8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801c3ac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	71fb      	strb	r3, [r7, #7]
 801c3b2:	e01e      	b.n	801c3f2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801c3b4:	79fb      	ldrb	r3, [r7, #7]
 801c3b6:	4a15      	ldr	r2, [pc, #84]	@ (801c40c <tcp_new_port+0x88>)
 801c3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	603b      	str	r3, [r7, #0]
 801c3c0:	e011      	b.n	801c3e6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801c3c2:	683b      	ldr	r3, [r7, #0]
 801c3c4:	8ada      	ldrh	r2, [r3, #22]
 801c3c6:	4b10      	ldr	r3, [pc, #64]	@ (801c408 <tcp_new_port+0x84>)
 801c3c8:	881b      	ldrh	r3, [r3, #0]
 801c3ca:	429a      	cmp	r2, r3
 801c3cc:	d108      	bne.n	801c3e0 <tcp_new_port+0x5c>
        n++;
 801c3ce:	88bb      	ldrh	r3, [r7, #4]
 801c3d0:	3301      	adds	r3, #1
 801c3d2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801c3d4:	88bb      	ldrh	r3, [r7, #4]
 801c3d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c3da:	d3d8      	bcc.n	801c38e <tcp_new_port+0xa>
          return 0;
 801c3dc:	2300      	movs	r3, #0
 801c3de:	e00d      	b.n	801c3fc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801c3e0:	683b      	ldr	r3, [r7, #0]
 801c3e2:	68db      	ldr	r3, [r3, #12]
 801c3e4:	603b      	str	r3, [r7, #0]
 801c3e6:	683b      	ldr	r3, [r7, #0]
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d1ea      	bne.n	801c3c2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801c3ec:	79fb      	ldrb	r3, [r7, #7]
 801c3ee:	3301      	adds	r3, #1
 801c3f0:	71fb      	strb	r3, [r7, #7]
 801c3f2:	79fb      	ldrb	r3, [r7, #7]
 801c3f4:	2b03      	cmp	r3, #3
 801c3f6:	d9dd      	bls.n	801c3b4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801c3f8:	4b03      	ldr	r3, [pc, #12]	@ (801c408 <tcp_new_port+0x84>)
 801c3fa:	881b      	ldrh	r3, [r3, #0]
}
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	370c      	adds	r7, #12
 801c400:	46bd      	mov	sp, r7
 801c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c406:	4770      	bx	lr
 801c408:	20000044 	.word	0x20000044
 801c40c:	0802c550 	.word	0x0802c550

0801c410 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801c410:	b5b0      	push	{r4, r5, r7, lr}
 801c412:	b090      	sub	sp, #64	@ 0x40
 801c414:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801c416:	2300      	movs	r3, #0
 801c418:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801c41c:	4b95      	ldr	r3, [pc, #596]	@ (801c674 <tcp_slowtmr+0x264>)
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	3301      	adds	r3, #1
 801c422:	4a94      	ldr	r2, [pc, #592]	@ (801c674 <tcp_slowtmr+0x264>)
 801c424:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801c426:	4b94      	ldr	r3, [pc, #592]	@ (801c678 <tcp_slowtmr+0x268>)
 801c428:	781b      	ldrb	r3, [r3, #0]
 801c42a:	3301      	adds	r3, #1
 801c42c:	b2da      	uxtb	r2, r3
 801c42e:	4b92      	ldr	r3, [pc, #584]	@ (801c678 <tcp_slowtmr+0x268>)
 801c430:	701a      	strb	r2, [r3, #0]
 801c432:	e000      	b.n	801c436 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801c434:	bf00      	nop
  prev = NULL;
 801c436:	2300      	movs	r3, #0
 801c438:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801c43a:	4b90      	ldr	r3, [pc, #576]	@ (801c67c <tcp_slowtmr+0x26c>)
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801c440:	e29d      	b.n	801c97e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801c442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c444:	7d1b      	ldrb	r3, [r3, #20]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d106      	bne.n	801c458 <tcp_slowtmr+0x48>
 801c44a:	4b8d      	ldr	r3, [pc, #564]	@ (801c680 <tcp_slowtmr+0x270>)
 801c44c:	f240 42be 	movw	r2, #1214	@ 0x4be
 801c450:	498c      	ldr	r1, [pc, #560]	@ (801c684 <tcp_slowtmr+0x274>)
 801c452:	488d      	ldr	r0, [pc, #564]	@ (801c688 <tcp_slowtmr+0x278>)
 801c454:	f00b f98a 	bl	802776c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801c458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c45a:	7d1b      	ldrb	r3, [r3, #20]
 801c45c:	2b01      	cmp	r3, #1
 801c45e:	d106      	bne.n	801c46e <tcp_slowtmr+0x5e>
 801c460:	4b87      	ldr	r3, [pc, #540]	@ (801c680 <tcp_slowtmr+0x270>)
 801c462:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801c466:	4989      	ldr	r1, [pc, #548]	@ (801c68c <tcp_slowtmr+0x27c>)
 801c468:	4887      	ldr	r0, [pc, #540]	@ (801c688 <tcp_slowtmr+0x278>)
 801c46a:	f00b f97f 	bl	802776c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801c46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c470:	7d1b      	ldrb	r3, [r3, #20]
 801c472:	2b0a      	cmp	r3, #10
 801c474:	d106      	bne.n	801c484 <tcp_slowtmr+0x74>
 801c476:	4b82      	ldr	r3, [pc, #520]	@ (801c680 <tcp_slowtmr+0x270>)
 801c478:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801c47c:	4984      	ldr	r1, [pc, #528]	@ (801c690 <tcp_slowtmr+0x280>)
 801c47e:	4882      	ldr	r0, [pc, #520]	@ (801c688 <tcp_slowtmr+0x278>)
 801c480:	f00b f974 	bl	802776c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801c484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c486:	7f9a      	ldrb	r2, [r3, #30]
 801c488:	4b7b      	ldr	r3, [pc, #492]	@ (801c678 <tcp_slowtmr+0x268>)
 801c48a:	781b      	ldrb	r3, [r3, #0]
 801c48c:	429a      	cmp	r2, r3
 801c48e:	d105      	bne.n	801c49c <tcp_slowtmr+0x8c>
      prev = pcb;
 801c490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c492:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801c494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c496:	68db      	ldr	r3, [r3, #12]
 801c498:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801c49a:	e270      	b.n	801c97e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801c49c:	4b76      	ldr	r3, [pc, #472]	@ (801c678 <tcp_slowtmr+0x268>)
 801c49e:	781a      	ldrb	r2, [r3, #0]
 801c4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4a2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801c4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4b2:	7d1b      	ldrb	r3, [r3, #20]
 801c4b4:	2b02      	cmp	r3, #2
 801c4b6:	d10a      	bne.n	801c4ce <tcp_slowtmr+0xbe>
 801c4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801c4be:	2b05      	cmp	r3, #5
 801c4c0:	d905      	bls.n	801c4ce <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801c4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c4c6:	3301      	adds	r3, #1
 801c4c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c4cc:	e11e      	b.n	801c70c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801c4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801c4d4:	2b0b      	cmp	r3, #11
 801c4d6:	d905      	bls.n	801c4e4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801c4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c4dc:	3301      	adds	r3, #1
 801c4de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c4e2:	e113      	b.n	801c70c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801c4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d075      	beq.n	801c5da <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801c4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d006      	beq.n	801c504 <tcp_slowtmr+0xf4>
 801c4f6:	4b62      	ldr	r3, [pc, #392]	@ (801c680 <tcp_slowtmr+0x270>)
 801c4f8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801c4fc:	4965      	ldr	r1, [pc, #404]	@ (801c694 <tcp_slowtmr+0x284>)
 801c4fe:	4862      	ldr	r0, [pc, #392]	@ (801c688 <tcp_slowtmr+0x278>)
 801c500:	f00b f934 	bl	802776c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801c504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d106      	bne.n	801c51a <tcp_slowtmr+0x10a>
 801c50c:	4b5c      	ldr	r3, [pc, #368]	@ (801c680 <tcp_slowtmr+0x270>)
 801c50e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801c512:	4961      	ldr	r1, [pc, #388]	@ (801c698 <tcp_slowtmr+0x288>)
 801c514:	485c      	ldr	r0, [pc, #368]	@ (801c688 <tcp_slowtmr+0x278>)
 801c516:	f00b f929 	bl	802776c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801c51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c51c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801c520:	2b0b      	cmp	r3, #11
 801c522:	d905      	bls.n	801c530 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 801c524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c528:	3301      	adds	r3, #1
 801c52a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c52e:	e0ed      	b.n	801c70c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801c530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c532:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801c536:	3b01      	subs	r3, #1
 801c538:	4a58      	ldr	r2, [pc, #352]	@ (801c69c <tcp_slowtmr+0x28c>)
 801c53a:	5cd3      	ldrb	r3, [r2, r3]
 801c53c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801c53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c540:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801c544:	7c7a      	ldrb	r2, [r7, #17]
 801c546:	429a      	cmp	r2, r3
 801c548:	d907      	bls.n	801c55a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801c54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c54c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801c550:	3301      	adds	r3, #1
 801c552:	b2da      	uxtb	r2, r3
 801c554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c556:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801c55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c55c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801c560:	7c7a      	ldrb	r2, [r7, #17]
 801c562:	429a      	cmp	r2, r3
 801c564:	f200 80d2 	bhi.w	801c70c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801c568:	2301      	movs	r3, #1
 801c56a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801c56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c56e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801c572:	2b00      	cmp	r3, #0
 801c574:	d108      	bne.n	801c588 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801c576:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c578:	f005 f94a 	bl	8021810 <tcp_zero_window_probe>
 801c57c:	4603      	mov	r3, r0
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d014      	beq.n	801c5ac <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801c582:	2300      	movs	r3, #0
 801c584:	623b      	str	r3, [r7, #32]
 801c586:	e011      	b.n	801c5ac <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801c588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c58a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801c58e:	4619      	mov	r1, r3
 801c590:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c592:	f004 f80f 	bl	80205b4 <tcp_split_unsent_seg>
 801c596:	4603      	mov	r3, r0
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d107      	bne.n	801c5ac <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801c59c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c59e:	f004 fa8f 	bl	8020ac0 <tcp_output>
 801c5a2:	4603      	mov	r3, r0
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	d101      	bne.n	801c5ac <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801c5a8:	2300      	movs	r3, #0
 801c5aa:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801c5ac:	6a3b      	ldr	r3, [r7, #32]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	f000 80ac 	beq.w	801c70c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801c5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5b6:	2200      	movs	r2, #0
 801c5b8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801c5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5be:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801c5c2:	2b06      	cmp	r3, #6
 801c5c4:	f200 80a2 	bhi.w	801c70c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801c5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5ca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801c5ce:	3301      	adds	r3, #1
 801c5d0:	b2da      	uxtb	r2, r3
 801c5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5d4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801c5d8:	e098      	b.n	801c70c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801c5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	db0f      	blt.n	801c604 <tcp_slowtmr+0x1f4>
 801c5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801c5ea:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801c5ee:	4293      	cmp	r3, r2
 801c5f0:	d008      	beq.n	801c604 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801c5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801c5f8:	b29b      	uxth	r3, r3
 801c5fa:	3301      	adds	r3, #1
 801c5fc:	b29b      	uxth	r3, r3
 801c5fe:	b21a      	sxth	r2, r3
 801c600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c602:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801c604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c606:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801c60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c60c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801c610:	429a      	cmp	r2, r3
 801c612:	db7b      	blt.n	801c70c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801c614:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c616:	f004 fd47 	bl	80210a8 <tcp_rexmit_rto_prepare>
 801c61a:	4603      	mov	r3, r0
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d007      	beq.n	801c630 <tcp_slowtmr+0x220>
 801c620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c624:	2b00      	cmp	r3, #0
 801c626:	d171      	bne.n	801c70c <tcp_slowtmr+0x2fc>
 801c628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c62a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d06d      	beq.n	801c70c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801c630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c632:	7d1b      	ldrb	r3, [r3, #20]
 801c634:	2b02      	cmp	r3, #2
 801c636:	d03a      	beq.n	801c6ae <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801c638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c63a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801c63e:	2b0c      	cmp	r3, #12
 801c640:	bf28      	it	cs
 801c642:	230c      	movcs	r3, #12
 801c644:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801c646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c648:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801c64c:	10db      	asrs	r3, r3, #3
 801c64e:	b21b      	sxth	r3, r3
 801c650:	461a      	mov	r2, r3
 801c652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c654:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801c658:	4413      	add	r3, r2
 801c65a:	7efa      	ldrb	r2, [r7, #27]
 801c65c:	4910      	ldr	r1, [pc, #64]	@ (801c6a0 <tcp_slowtmr+0x290>)
 801c65e:	5c8a      	ldrb	r2, [r1, r2]
 801c660:	4093      	lsls	r3, r2
 801c662:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801c664:	697b      	ldr	r3, [r7, #20]
 801c666:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801c66a:	4293      	cmp	r3, r2
 801c66c:	dc1a      	bgt.n	801c6a4 <tcp_slowtmr+0x294>
 801c66e:	697b      	ldr	r3, [r7, #20]
 801c670:	b21a      	sxth	r2, r3
 801c672:	e019      	b.n	801c6a8 <tcp_slowtmr+0x298>
 801c674:	20011160 	.word	0x20011160
 801c678:	20011176 	.word	0x20011176
 801c67c:	2001116c 	.word	0x2001116c
 801c680:	0802a134 	.word	0x0802a134
 801c684:	0802a478 	.word	0x0802a478
 801c688:	0802a178 	.word	0x0802a178
 801c68c:	0802a4a4 	.word	0x0802a4a4
 801c690:	0802a4d0 	.word	0x0802a4d0
 801c694:	0802a500 	.word	0x0802a500
 801c698:	0802a534 	.word	0x0802a534
 801c69c:	0802c548 	.word	0x0802c548
 801c6a0:	0802c538 	.word	0x0802c538
 801c6a4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801c6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801c6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6b0:	2200      	movs	r2, #0
 801c6b2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801c6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801c6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801c6c0:	4293      	cmp	r3, r2
 801c6c2:	bf28      	it	cs
 801c6c4:	4613      	movcs	r3, r2
 801c6c6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801c6c8:	8a7b      	ldrh	r3, [r7, #18]
 801c6ca:	085b      	lsrs	r3, r3, #1
 801c6cc:	b29a      	uxth	r2, r3
 801c6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801c6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c6de:	005b      	lsls	r3, r3, #1
 801c6e0:	b29b      	uxth	r3, r3
 801c6e2:	429a      	cmp	r2, r3
 801c6e4:	d206      	bcs.n	801c6f4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801c6ea:	005b      	lsls	r3, r3, #1
 801c6ec:	b29a      	uxth	r2, r3
 801c6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801c6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6f6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801c6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801c6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c700:	2200      	movs	r2, #0
 801c702:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801c706:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c708:	f004 fd3e 	bl	8021188 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801c70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c70e:	7d1b      	ldrb	r3, [r3, #20]
 801c710:	2b06      	cmp	r3, #6
 801c712:	d111      	bne.n	801c738 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801c714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c716:	8b5b      	ldrh	r3, [r3, #26]
 801c718:	f003 0310 	and.w	r3, r3, #16
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d00b      	beq.n	801c738 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c720:	4b9c      	ldr	r3, [pc, #624]	@ (801c994 <tcp_slowtmr+0x584>)
 801c722:	681a      	ldr	r2, [r3, #0]
 801c724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c726:	6a1b      	ldr	r3, [r3, #32]
 801c728:	1ad3      	subs	r3, r2, r3
 801c72a:	2b28      	cmp	r3, #40	@ 0x28
 801c72c:	d904      	bls.n	801c738 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801c72e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c732:	3301      	adds	r3, #1
 801c734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801c738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c73a:	7a5b      	ldrb	r3, [r3, #9]
 801c73c:	f003 0308 	and.w	r3, r3, #8
 801c740:	2b00      	cmp	r3, #0
 801c742:	d04a      	beq.n	801c7da <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801c744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c746:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801c748:	2b04      	cmp	r3, #4
 801c74a:	d003      	beq.n	801c754 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801c74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c74e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801c750:	2b07      	cmp	r3, #7
 801c752:	d142      	bne.n	801c7da <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c754:	4b8f      	ldr	r3, [pc, #572]	@ (801c994 <tcp_slowtmr+0x584>)
 801c756:	681a      	ldr	r2, [r3, #0]
 801c758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c75a:	6a1b      	ldr	r3, [r3, #32]
 801c75c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801c75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c760:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801c764:	4b8c      	ldr	r3, [pc, #560]	@ (801c998 <tcp_slowtmr+0x588>)
 801c766:	440b      	add	r3, r1
 801c768:	498c      	ldr	r1, [pc, #560]	@ (801c99c <tcp_slowtmr+0x58c>)
 801c76a:	fba1 1303 	umull	r1, r3, r1, r3
 801c76e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c770:	429a      	cmp	r2, r3
 801c772:	d90a      	bls.n	801c78a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801c774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c778:	3301      	adds	r3, #1
 801c77a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801c77e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c782:	3301      	adds	r3, #1
 801c784:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c788:	e027      	b.n	801c7da <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c78a:	4b82      	ldr	r3, [pc, #520]	@ (801c994 <tcp_slowtmr+0x584>)
 801c78c:	681a      	ldr	r2, [r3, #0]
 801c78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c790:	6a1b      	ldr	r3, [r3, #32]
 801c792:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801c794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c796:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801c79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c79c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	4b7f      	ldr	r3, [pc, #508]	@ (801c9a0 <tcp_slowtmr+0x590>)
 801c7a4:	fb00 f303 	mul.w	r3, r0, r3
 801c7a8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801c7aa:	497c      	ldr	r1, [pc, #496]	@ (801c99c <tcp_slowtmr+0x58c>)
 801c7ac:	fba1 1303 	umull	r1, r3, r1, r3
 801c7b0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c7b2:	429a      	cmp	r2, r3
 801c7b4:	d911      	bls.n	801c7da <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801c7b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c7b8:	f004 ffea 	bl	8021790 <tcp_keepalive>
 801c7bc:	4603      	mov	r3, r0
 801c7be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801c7c2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d107      	bne.n	801c7da <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801c7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7cc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801c7d0:	3301      	adds	r3, #1
 801c7d2:	b2da      	uxtb	r2, r3
 801c7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7d6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801c7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d011      	beq.n	801c806 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801c7e2:	4b6c      	ldr	r3, [pc, #432]	@ (801c994 <tcp_slowtmr+0x584>)
 801c7e4:	681a      	ldr	r2, [r3, #0]
 801c7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7e8:	6a1b      	ldr	r3, [r3, #32]
 801c7ea:	1ad2      	subs	r2, r2, r3
 801c7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801c7f2:	4619      	mov	r1, r3
 801c7f4:	460b      	mov	r3, r1
 801c7f6:	005b      	lsls	r3, r3, #1
 801c7f8:	440b      	add	r3, r1
 801c7fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801c7fc:	429a      	cmp	r2, r3
 801c7fe:	d302      	bcc.n	801c806 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801c800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c802:	f000 feab 	bl	801d55c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801c806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c808:	7d1b      	ldrb	r3, [r3, #20]
 801c80a:	2b03      	cmp	r3, #3
 801c80c:	d10b      	bne.n	801c826 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c80e:	4b61      	ldr	r3, [pc, #388]	@ (801c994 <tcp_slowtmr+0x584>)
 801c810:	681a      	ldr	r2, [r3, #0]
 801c812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c814:	6a1b      	ldr	r3, [r3, #32]
 801c816:	1ad3      	subs	r3, r2, r3
 801c818:	2b28      	cmp	r3, #40	@ 0x28
 801c81a:	d904      	bls.n	801c826 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801c81c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c820:	3301      	adds	r3, #1
 801c822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801c826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c828:	7d1b      	ldrb	r3, [r3, #20]
 801c82a:	2b09      	cmp	r3, #9
 801c82c:	d10b      	bne.n	801c846 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c82e:	4b59      	ldr	r3, [pc, #356]	@ (801c994 <tcp_slowtmr+0x584>)
 801c830:	681a      	ldr	r2, [r3, #0]
 801c832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c834:	6a1b      	ldr	r3, [r3, #32]
 801c836:	1ad3      	subs	r3, r2, r3
 801c838:	2bf0      	cmp	r3, #240	@ 0xf0
 801c83a:	d904      	bls.n	801c846 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801c83c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c840:	3301      	adds	r3, #1
 801c842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801c846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d060      	beq.n	801c910 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801c84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c854:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801c856:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c858:	f000 fccc 	bl	801d1f4 <tcp_pcb_purge>
      if (prev != NULL) {
 801c85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d010      	beq.n	801c884 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c862:	4b50      	ldr	r3, [pc, #320]	@ (801c9a4 <tcp_slowtmr+0x594>)
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c868:	429a      	cmp	r2, r3
 801c86a:	d106      	bne.n	801c87a <tcp_slowtmr+0x46a>
 801c86c:	4b4e      	ldr	r3, [pc, #312]	@ (801c9a8 <tcp_slowtmr+0x598>)
 801c86e:	f240 526d 	movw	r2, #1389	@ 0x56d
 801c872:	494e      	ldr	r1, [pc, #312]	@ (801c9ac <tcp_slowtmr+0x59c>)
 801c874:	484e      	ldr	r0, [pc, #312]	@ (801c9b0 <tcp_slowtmr+0x5a0>)
 801c876:	f00a ff79 	bl	802776c <iprintf>
        prev->next = pcb->next;
 801c87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c87c:	68da      	ldr	r2, [r3, #12]
 801c87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c880:	60da      	str	r2, [r3, #12]
 801c882:	e00f      	b.n	801c8a4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801c884:	4b47      	ldr	r3, [pc, #284]	@ (801c9a4 <tcp_slowtmr+0x594>)
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c88a:	429a      	cmp	r2, r3
 801c88c:	d006      	beq.n	801c89c <tcp_slowtmr+0x48c>
 801c88e:	4b46      	ldr	r3, [pc, #280]	@ (801c9a8 <tcp_slowtmr+0x598>)
 801c890:	f240 5271 	movw	r2, #1393	@ 0x571
 801c894:	4947      	ldr	r1, [pc, #284]	@ (801c9b4 <tcp_slowtmr+0x5a4>)
 801c896:	4846      	ldr	r0, [pc, #280]	@ (801c9b0 <tcp_slowtmr+0x5a0>)
 801c898:	f00a ff68 	bl	802776c <iprintf>
        tcp_active_pcbs = pcb->next;
 801c89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c89e:	68db      	ldr	r3, [r3, #12]
 801c8a0:	4a40      	ldr	r2, [pc, #256]	@ (801c9a4 <tcp_slowtmr+0x594>)
 801c8a2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801c8a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d013      	beq.n	801c8d4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8ae:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801c8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8b2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801c8b4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801c8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8b8:	3304      	adds	r3, #4
 801c8ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c8bc:	8ad2      	ldrh	r2, [r2, #22]
 801c8be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c8c0:	8b09      	ldrh	r1, [r1, #24]
 801c8c2:	9102      	str	r1, [sp, #8]
 801c8c4:	9201      	str	r2, [sp, #4]
 801c8c6:	9300      	str	r3, [sp, #0]
 801c8c8:	462b      	mov	r3, r5
 801c8ca:	4622      	mov	r2, r4
 801c8cc:	4601      	mov	r1, r0
 801c8ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c8d0:	f004 feaa 	bl	8021628 <tcp_rst>
      err_arg = pcb->callback_arg;
 801c8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8d6:	691b      	ldr	r3, [r3, #16]
 801c8d8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801c8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8dc:	7d1b      	ldrb	r3, [r3, #20]
 801c8de:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801c8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8e2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801c8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8e6:	68db      	ldr	r3, [r3, #12]
 801c8e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801c8ea:	6838      	ldr	r0, [r7, #0]
 801c8ec:	f7fe ffee 	bl	801b8cc <tcp_free>
      tcp_active_pcbs_changed = 0;
 801c8f0:	4b31      	ldr	r3, [pc, #196]	@ (801c9b8 <tcp_slowtmr+0x5a8>)
 801c8f2:	2200      	movs	r2, #0
 801c8f4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d004      	beq.n	801c906 <tcp_slowtmr+0x4f6>
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	f06f 010c 	mvn.w	r1, #12
 801c902:	68b8      	ldr	r0, [r7, #8]
 801c904:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801c906:	4b2c      	ldr	r3, [pc, #176]	@ (801c9b8 <tcp_slowtmr+0x5a8>)
 801c908:	781b      	ldrb	r3, [r3, #0]
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d037      	beq.n	801c97e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801c90e:	e592      	b.n	801c436 <tcp_slowtmr+0x26>
      prev = pcb;
 801c910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c912:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801c914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c916:	68db      	ldr	r3, [r3, #12]
 801c918:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801c91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c91c:	7f1b      	ldrb	r3, [r3, #28]
 801c91e:	3301      	adds	r3, #1
 801c920:	b2da      	uxtb	r2, r3
 801c922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c924:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801c926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c928:	7f1a      	ldrb	r2, [r3, #28]
 801c92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c92c:	7f5b      	ldrb	r3, [r3, #29]
 801c92e:	429a      	cmp	r2, r3
 801c930:	d325      	bcc.n	801c97e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801c932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c934:	2200      	movs	r2, #0
 801c936:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801c938:	4b1f      	ldr	r3, [pc, #124]	@ (801c9b8 <tcp_slowtmr+0x5a8>)
 801c93a:	2200      	movs	r2, #0
 801c93c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801c93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c944:	2b00      	cmp	r3, #0
 801c946:	d00b      	beq.n	801c960 <tcp_slowtmr+0x550>
 801c948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c94a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c94e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c950:	6912      	ldr	r2, [r2, #16]
 801c952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c954:	4610      	mov	r0, r2
 801c956:	4798      	blx	r3
 801c958:	4603      	mov	r3, r0
 801c95a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801c95e:	e002      	b.n	801c966 <tcp_slowtmr+0x556>
 801c960:	2300      	movs	r3, #0
 801c962:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801c966:	4b14      	ldr	r3, [pc, #80]	@ (801c9b8 <tcp_slowtmr+0x5a8>)
 801c968:	781b      	ldrb	r3, [r3, #0]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	f47f ad62 	bne.w	801c434 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801c970:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801c974:	2b00      	cmp	r3, #0
 801c976:	d102      	bne.n	801c97e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801c978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c97a:	f004 f8a1 	bl	8020ac0 <tcp_output>
  while (pcb != NULL) {
 801c97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c980:	2b00      	cmp	r3, #0
 801c982:	f47f ad5e 	bne.w	801c442 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801c986:	2300      	movs	r3, #0
 801c988:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801c98a:	4b0c      	ldr	r3, [pc, #48]	@ (801c9bc <tcp_slowtmr+0x5ac>)
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801c990:	e069      	b.n	801ca66 <tcp_slowtmr+0x656>
 801c992:	bf00      	nop
 801c994:	20011160 	.word	0x20011160
 801c998:	000a4cb8 	.word	0x000a4cb8
 801c99c:	10624dd3 	.word	0x10624dd3
 801c9a0:	000124f8 	.word	0x000124f8
 801c9a4:	2001116c 	.word	0x2001116c
 801c9a8:	0802a134 	.word	0x0802a134
 801c9ac:	0802a56c 	.word	0x0802a56c
 801c9b0:	0802a178 	.word	0x0802a178
 801c9b4:	0802a598 	.word	0x0802a598
 801c9b8:	20011174 	.word	0x20011174
 801c9bc:	20011170 	.word	0x20011170
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9c2:	7d1b      	ldrb	r3, [r3, #20]
 801c9c4:	2b0a      	cmp	r3, #10
 801c9c6:	d006      	beq.n	801c9d6 <tcp_slowtmr+0x5c6>
 801c9c8:	4b2b      	ldr	r3, [pc, #172]	@ (801ca78 <tcp_slowtmr+0x668>)
 801c9ca:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801c9ce:	492b      	ldr	r1, [pc, #172]	@ (801ca7c <tcp_slowtmr+0x66c>)
 801c9d0:	482b      	ldr	r0, [pc, #172]	@ (801ca80 <tcp_slowtmr+0x670>)
 801c9d2:	f00a fecb 	bl	802776c <iprintf>
    pcb_remove = 0;
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c9dc:	4b29      	ldr	r3, [pc, #164]	@ (801ca84 <tcp_slowtmr+0x674>)
 801c9de:	681a      	ldr	r2, [r3, #0]
 801c9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9e2:	6a1b      	ldr	r3, [r3, #32]
 801c9e4:	1ad3      	subs	r3, r2, r3
 801c9e6:	2bf0      	cmp	r3, #240	@ 0xf0
 801c9e8:	d904      	bls.n	801c9f4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801c9ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c9ee:	3301      	adds	r3, #1
 801c9f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801c9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d02f      	beq.n	801ca5c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801c9fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c9fe:	f000 fbf9 	bl	801d1f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801ca02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d010      	beq.n	801ca2a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801ca08:	4b1f      	ldr	r3, [pc, #124]	@ (801ca88 <tcp_slowtmr+0x678>)
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ca0e:	429a      	cmp	r2, r3
 801ca10:	d106      	bne.n	801ca20 <tcp_slowtmr+0x610>
 801ca12:	4b19      	ldr	r3, [pc, #100]	@ (801ca78 <tcp_slowtmr+0x668>)
 801ca14:	f240 52af 	movw	r2, #1455	@ 0x5af
 801ca18:	491c      	ldr	r1, [pc, #112]	@ (801ca8c <tcp_slowtmr+0x67c>)
 801ca1a:	4819      	ldr	r0, [pc, #100]	@ (801ca80 <tcp_slowtmr+0x670>)
 801ca1c:	f00a fea6 	bl	802776c <iprintf>
        prev->next = pcb->next;
 801ca20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca22:	68da      	ldr	r2, [r3, #12]
 801ca24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca26:	60da      	str	r2, [r3, #12]
 801ca28:	e00f      	b.n	801ca4a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801ca2a:	4b17      	ldr	r3, [pc, #92]	@ (801ca88 <tcp_slowtmr+0x678>)
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ca30:	429a      	cmp	r2, r3
 801ca32:	d006      	beq.n	801ca42 <tcp_slowtmr+0x632>
 801ca34:	4b10      	ldr	r3, [pc, #64]	@ (801ca78 <tcp_slowtmr+0x668>)
 801ca36:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801ca3a:	4915      	ldr	r1, [pc, #84]	@ (801ca90 <tcp_slowtmr+0x680>)
 801ca3c:	4810      	ldr	r0, [pc, #64]	@ (801ca80 <tcp_slowtmr+0x670>)
 801ca3e:	f00a fe95 	bl	802776c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801ca42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca44:	68db      	ldr	r3, [r3, #12]
 801ca46:	4a10      	ldr	r2, [pc, #64]	@ (801ca88 <tcp_slowtmr+0x678>)
 801ca48:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801ca4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca4c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801ca4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca50:	68db      	ldr	r3, [r3, #12]
 801ca52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801ca54:	69f8      	ldr	r0, [r7, #28]
 801ca56:	f7fe ff39 	bl	801b8cc <tcp_free>
 801ca5a:	e004      	b.n	801ca66 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801ca5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca62:	68db      	ldr	r3, [r3, #12]
 801ca64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801ca66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d1a9      	bne.n	801c9c0 <tcp_slowtmr+0x5b0>
    }
  }
}
 801ca6c:	bf00      	nop
 801ca6e:	bf00      	nop
 801ca70:	3730      	adds	r7, #48	@ 0x30
 801ca72:	46bd      	mov	sp, r7
 801ca74:	bdb0      	pop	{r4, r5, r7, pc}
 801ca76:	bf00      	nop
 801ca78:	0802a134 	.word	0x0802a134
 801ca7c:	0802a5c4 	.word	0x0802a5c4
 801ca80:	0802a178 	.word	0x0802a178
 801ca84:	20011160 	.word	0x20011160
 801ca88:	20011170 	.word	0x20011170
 801ca8c:	0802a5f4 	.word	0x0802a5f4
 801ca90:	0802a61c 	.word	0x0802a61c

0801ca94 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801ca94:	b580      	push	{r7, lr}
 801ca96:	b082      	sub	sp, #8
 801ca98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801ca9a:	4b2d      	ldr	r3, [pc, #180]	@ (801cb50 <tcp_fasttmr+0xbc>)
 801ca9c:	781b      	ldrb	r3, [r3, #0]
 801ca9e:	3301      	adds	r3, #1
 801caa0:	b2da      	uxtb	r2, r3
 801caa2:	4b2b      	ldr	r3, [pc, #172]	@ (801cb50 <tcp_fasttmr+0xbc>)
 801caa4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801caa6:	4b2b      	ldr	r3, [pc, #172]	@ (801cb54 <tcp_fasttmr+0xc0>)
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801caac:	e048      	b.n	801cb40 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	7f9a      	ldrb	r2, [r3, #30]
 801cab2:	4b27      	ldr	r3, [pc, #156]	@ (801cb50 <tcp_fasttmr+0xbc>)
 801cab4:	781b      	ldrb	r3, [r3, #0]
 801cab6:	429a      	cmp	r2, r3
 801cab8:	d03f      	beq.n	801cb3a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801caba:	4b25      	ldr	r3, [pc, #148]	@ (801cb50 <tcp_fasttmr+0xbc>)
 801cabc:	781a      	ldrb	r2, [r3, #0]
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	8b5b      	ldrh	r3, [r3, #26]
 801cac6:	f003 0301 	and.w	r3, r3, #1
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d010      	beq.n	801caf0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	8b5b      	ldrh	r3, [r3, #26]
 801cad2:	f043 0302 	orr.w	r3, r3, #2
 801cad6:	b29a      	uxth	r2, r3
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801cadc:	6878      	ldr	r0, [r7, #4]
 801cade:	f003 ffef 	bl	8020ac0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	8b5b      	ldrh	r3, [r3, #26]
 801cae6:	f023 0303 	bic.w	r3, r3, #3
 801caea:	b29a      	uxth	r2, r3
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	8b5b      	ldrh	r3, [r3, #26]
 801caf4:	f003 0308 	and.w	r3, r3, #8
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d009      	beq.n	801cb10 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	8b5b      	ldrh	r3, [r3, #26]
 801cb00:	f023 0308 	bic.w	r3, r3, #8
 801cb04:	b29a      	uxth	r2, r3
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801cb0a:	6878      	ldr	r0, [r7, #4]
 801cb0c:	f7ff f872 	bl	801bbf4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	68db      	ldr	r3, [r3, #12]
 801cb14:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d00a      	beq.n	801cb34 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801cb1e:	4b0e      	ldr	r3, [pc, #56]	@ (801cb58 <tcp_fasttmr+0xc4>)
 801cb20:	2200      	movs	r2, #0
 801cb22:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801cb24:	6878      	ldr	r0, [r7, #4]
 801cb26:	f000 f819 	bl	801cb5c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801cb2a:	4b0b      	ldr	r3, [pc, #44]	@ (801cb58 <tcp_fasttmr+0xc4>)
 801cb2c:	781b      	ldrb	r3, [r3, #0]
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d000      	beq.n	801cb34 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801cb32:	e7b8      	b.n	801caa6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801cb34:	683b      	ldr	r3, [r7, #0]
 801cb36:	607b      	str	r3, [r7, #4]
 801cb38:	e002      	b.n	801cb40 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	68db      	ldr	r3, [r3, #12]
 801cb3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d1b3      	bne.n	801caae <tcp_fasttmr+0x1a>
    }
  }
}
 801cb46:	bf00      	nop
 801cb48:	bf00      	nop
 801cb4a:	3708      	adds	r7, #8
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	bd80      	pop	{r7, pc}
 801cb50:	20011176 	.word	0x20011176
 801cb54:	2001116c 	.word	0x2001116c
 801cb58:	20011174 	.word	0x20011174

0801cb5c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801cb5c:	b590      	push	{r4, r7, lr}
 801cb5e:	b085      	sub	sp, #20
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d109      	bne.n	801cb7e <tcp_process_refused_data+0x22>
 801cb6a:	4b37      	ldr	r3, [pc, #220]	@ (801cc48 <tcp_process_refused_data+0xec>)
 801cb6c:	f240 6209 	movw	r2, #1545	@ 0x609
 801cb70:	4936      	ldr	r1, [pc, #216]	@ (801cc4c <tcp_process_refused_data+0xf0>)
 801cb72:	4837      	ldr	r0, [pc, #220]	@ (801cc50 <tcp_process_refused_data+0xf4>)
 801cb74:	f00a fdfa 	bl	802776c <iprintf>
 801cb78:	f06f 030f 	mvn.w	r3, #15
 801cb7c:	e060      	b.n	801cc40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cb82:	7b5b      	ldrb	r3, [r3, #13]
 801cb84:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801cb8a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	2200      	movs	r2, #0
 801cb90:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d00b      	beq.n	801cbb4 <tcp_process_refused_data+0x58>
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	6918      	ldr	r0, [r3, #16]
 801cba6:	2300      	movs	r3, #0
 801cba8:	68ba      	ldr	r2, [r7, #8]
 801cbaa:	6879      	ldr	r1, [r7, #4]
 801cbac:	47a0      	blx	r4
 801cbae:	4603      	mov	r3, r0
 801cbb0:	73fb      	strb	r3, [r7, #15]
 801cbb2:	e007      	b.n	801cbc4 <tcp_process_refused_data+0x68>
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	68ba      	ldr	r2, [r7, #8]
 801cbb8:	6879      	ldr	r1, [r7, #4]
 801cbba:	2000      	movs	r0, #0
 801cbbc:	f000 f8a4 	bl	801cd08 <tcp_recv_null>
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801cbc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d12a      	bne.n	801cc22 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801cbcc:	7bbb      	ldrb	r3, [r7, #14]
 801cbce:	f003 0320 	and.w	r3, r3, #32
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d033      	beq.n	801cc3e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cbda:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801cbde:	d005      	beq.n	801cbec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cbe4:	3301      	adds	r3, #1
 801cbe6:	b29a      	uxth	r2, r3
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d00b      	beq.n	801cc0e <tcp_process_refused_data+0xb2>
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	6918      	ldr	r0, [r3, #16]
 801cc00:	2300      	movs	r3, #0
 801cc02:	2200      	movs	r2, #0
 801cc04:	6879      	ldr	r1, [r7, #4]
 801cc06:	47a0      	blx	r4
 801cc08:	4603      	mov	r3, r0
 801cc0a:	73fb      	strb	r3, [r7, #15]
 801cc0c:	e001      	b.n	801cc12 <tcp_process_refused_data+0xb6>
 801cc0e:	2300      	movs	r3, #0
 801cc10:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801cc12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cc16:	f113 0f0d 	cmn.w	r3, #13
 801cc1a:	d110      	bne.n	801cc3e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801cc1c:	f06f 030c 	mvn.w	r3, #12
 801cc20:	e00e      	b.n	801cc40 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801cc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cc26:	f113 0f0d 	cmn.w	r3, #13
 801cc2a:	d102      	bne.n	801cc32 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801cc2c:	f06f 030c 	mvn.w	r3, #12
 801cc30:	e006      	b.n	801cc40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	68ba      	ldr	r2, [r7, #8]
 801cc36:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801cc38:	f06f 0304 	mvn.w	r3, #4
 801cc3c:	e000      	b.n	801cc40 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801cc3e:	2300      	movs	r3, #0
}
 801cc40:	4618      	mov	r0, r3
 801cc42:	3714      	adds	r7, #20
 801cc44:	46bd      	mov	sp, r7
 801cc46:	bd90      	pop	{r4, r7, pc}
 801cc48:	0802a134 	.word	0x0802a134
 801cc4c:	0802a644 	.word	0x0802a644
 801cc50:	0802a178 	.word	0x0802a178

0801cc54 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b084      	sub	sp, #16
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801cc5c:	e007      	b.n	801cc6e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801cc64:	6878      	ldr	r0, [r7, #4]
 801cc66:	f000 f80a 	bl	801cc7e <tcp_seg_free>
    seg = next;
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d1f4      	bne.n	801cc5e <tcp_segs_free+0xa>
  }
}
 801cc74:	bf00      	nop
 801cc76:	bf00      	nop
 801cc78:	3710      	adds	r7, #16
 801cc7a:	46bd      	mov	sp, r7
 801cc7c:	bd80      	pop	{r7, pc}

0801cc7e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801cc7e:	b580      	push	{r7, lr}
 801cc80:	b082      	sub	sp, #8
 801cc82:	af00      	add	r7, sp, #0
 801cc84:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d00c      	beq.n	801cca6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	685b      	ldr	r3, [r3, #4]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d004      	beq.n	801cc9e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	685b      	ldr	r3, [r3, #4]
 801cc98:	4618      	mov	r0, r3
 801cc9a:	f7fe fb5b 	bl	801b354 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801cc9e:	6879      	ldr	r1, [r7, #4]
 801cca0:	2003      	movs	r0, #3
 801cca2:	f7fd fc75 	bl	801a590 <memp_free>
  }
}
 801cca6:	bf00      	nop
 801cca8:	3708      	adds	r7, #8
 801ccaa:	46bd      	mov	sp, r7
 801ccac:	bd80      	pop	{r7, pc}
	...

0801ccb0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801ccb0:	b580      	push	{r7, lr}
 801ccb2:	b084      	sub	sp, #16
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d106      	bne.n	801cccc <tcp_seg_copy+0x1c>
 801ccbe:	4b0f      	ldr	r3, [pc, #60]	@ (801ccfc <tcp_seg_copy+0x4c>)
 801ccc0:	f240 6282 	movw	r2, #1666	@ 0x682
 801ccc4:	490e      	ldr	r1, [pc, #56]	@ (801cd00 <tcp_seg_copy+0x50>)
 801ccc6:	480f      	ldr	r0, [pc, #60]	@ (801cd04 <tcp_seg_copy+0x54>)
 801ccc8:	f00a fd50 	bl	802776c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801cccc:	2003      	movs	r0, #3
 801ccce:	f7fd fbe9 	bl	801a4a4 <memp_malloc>
 801ccd2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d101      	bne.n	801ccde <tcp_seg_copy+0x2e>
    return NULL;
 801ccda:	2300      	movs	r3, #0
 801ccdc:	e00a      	b.n	801ccf4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801ccde:	2210      	movs	r2, #16
 801cce0:	6879      	ldr	r1, [r7, #4]
 801cce2:	68f8      	ldr	r0, [r7, #12]
 801cce4:	f00a ff75 	bl	8027bd2 <memcpy>
  pbuf_ref(cseg->p);
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	685b      	ldr	r3, [r3, #4]
 801ccec:	4618      	mov	r0, r3
 801ccee:	f7fe fbd7 	bl	801b4a0 <pbuf_ref>
  return cseg;
 801ccf2:	68fb      	ldr	r3, [r7, #12]
}
 801ccf4:	4618      	mov	r0, r3
 801ccf6:	3710      	adds	r7, #16
 801ccf8:	46bd      	mov	sp, r7
 801ccfa:	bd80      	pop	{r7, pc}
 801ccfc:	0802a134 	.word	0x0802a134
 801cd00:	0802a688 	.word	0x0802a688
 801cd04:	0802a178 	.word	0x0802a178

0801cd08 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	b084      	sub	sp, #16
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	60f8      	str	r0, [r7, #12]
 801cd10:	60b9      	str	r1, [r7, #8]
 801cd12:	607a      	str	r2, [r7, #4]
 801cd14:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801cd16:	68bb      	ldr	r3, [r7, #8]
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d109      	bne.n	801cd30 <tcp_recv_null+0x28>
 801cd1c:	4b12      	ldr	r3, [pc, #72]	@ (801cd68 <tcp_recv_null+0x60>)
 801cd1e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801cd22:	4912      	ldr	r1, [pc, #72]	@ (801cd6c <tcp_recv_null+0x64>)
 801cd24:	4812      	ldr	r0, [pc, #72]	@ (801cd70 <tcp_recv_null+0x68>)
 801cd26:	f00a fd21 	bl	802776c <iprintf>
 801cd2a:	f06f 030f 	mvn.w	r3, #15
 801cd2e:	e016      	b.n	801cd5e <tcp_recv_null+0x56>

  if (p != NULL) {
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d009      	beq.n	801cd4a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	891b      	ldrh	r3, [r3, #8]
 801cd3a:	4619      	mov	r1, r3
 801cd3c:	68b8      	ldr	r0, [r7, #8]
 801cd3e:	f7ff fad1 	bl	801c2e4 <tcp_recved>
    pbuf_free(p);
 801cd42:	6878      	ldr	r0, [r7, #4]
 801cd44:	f7fe fb06 	bl	801b354 <pbuf_free>
 801cd48:	e008      	b.n	801cd5c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801cd4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d104      	bne.n	801cd5c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801cd52:	68b8      	ldr	r0, [r7, #8]
 801cd54:	f7fe ffb8 	bl	801bcc8 <tcp_close>
 801cd58:	4603      	mov	r3, r0
 801cd5a:	e000      	b.n	801cd5e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801cd5c:	2300      	movs	r3, #0
}
 801cd5e:	4618      	mov	r0, r3
 801cd60:	3710      	adds	r7, #16
 801cd62:	46bd      	mov	sp, r7
 801cd64:	bd80      	pop	{r7, pc}
 801cd66:	bf00      	nop
 801cd68:	0802a134 	.word	0x0802a134
 801cd6c:	0802a6a4 	.word	0x0802a6a4
 801cd70:	0802a178 	.word	0x0802a178

0801cd74 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801cd74:	b580      	push	{r7, lr}
 801cd76:	b086      	sub	sp, #24
 801cd78:	af00      	add	r7, sp, #0
 801cd7a:	4603      	mov	r3, r0
 801cd7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801cd7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	db01      	blt.n	801cd8a <tcp_kill_prio+0x16>
 801cd86:	79fb      	ldrb	r3, [r7, #7]
 801cd88:	e000      	b.n	801cd8c <tcp_kill_prio+0x18>
 801cd8a:	237f      	movs	r3, #127	@ 0x7f
 801cd8c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801cd8e:	7afb      	ldrb	r3, [r7, #11]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d034      	beq.n	801cdfe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801cd94:	7afb      	ldrb	r3, [r7, #11]
 801cd96:	3b01      	subs	r3, #1
 801cd98:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801cd9a:	2300      	movs	r3, #0
 801cd9c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801cd9e:	2300      	movs	r3, #0
 801cda0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801cda2:	4b19      	ldr	r3, [pc, #100]	@ (801ce08 <tcp_kill_prio+0x94>)
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	617b      	str	r3, [r7, #20]
 801cda8:	e01f      	b.n	801cdea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801cdaa:	697b      	ldr	r3, [r7, #20]
 801cdac:	7d5b      	ldrb	r3, [r3, #21]
 801cdae:	7afa      	ldrb	r2, [r7, #11]
 801cdb0:	429a      	cmp	r2, r3
 801cdb2:	d80c      	bhi.n	801cdce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801cdb4:	697b      	ldr	r3, [r7, #20]
 801cdb6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801cdb8:	7afa      	ldrb	r2, [r7, #11]
 801cdba:	429a      	cmp	r2, r3
 801cdbc:	d112      	bne.n	801cde4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801cdbe:	4b13      	ldr	r3, [pc, #76]	@ (801ce0c <tcp_kill_prio+0x98>)
 801cdc0:	681a      	ldr	r2, [r3, #0]
 801cdc2:	697b      	ldr	r3, [r7, #20]
 801cdc4:	6a1b      	ldr	r3, [r3, #32]
 801cdc6:	1ad3      	subs	r3, r2, r3
 801cdc8:	68fa      	ldr	r2, [r7, #12]
 801cdca:	429a      	cmp	r2, r3
 801cdcc:	d80a      	bhi.n	801cde4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801cdce:	4b0f      	ldr	r3, [pc, #60]	@ (801ce0c <tcp_kill_prio+0x98>)
 801cdd0:	681a      	ldr	r2, [r3, #0]
 801cdd2:	697b      	ldr	r3, [r7, #20]
 801cdd4:	6a1b      	ldr	r3, [r3, #32]
 801cdd6:	1ad3      	subs	r3, r2, r3
 801cdd8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801cdda:	697b      	ldr	r3, [r7, #20]
 801cddc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801cdde:	697b      	ldr	r3, [r7, #20]
 801cde0:	7d5b      	ldrb	r3, [r3, #21]
 801cde2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801cde4:	697b      	ldr	r3, [r7, #20]
 801cde6:	68db      	ldr	r3, [r3, #12]
 801cde8:	617b      	str	r3, [r7, #20]
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d1dc      	bne.n	801cdaa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801cdf0:	693b      	ldr	r3, [r7, #16]
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d004      	beq.n	801ce00 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801cdf6:	6938      	ldr	r0, [r7, #16]
 801cdf8:	f7ff f8ac 	bl	801bf54 <tcp_abort>
 801cdfc:	e000      	b.n	801ce00 <tcp_kill_prio+0x8c>
    return;
 801cdfe:	bf00      	nop
  }
}
 801ce00:	3718      	adds	r7, #24
 801ce02:	46bd      	mov	sp, r7
 801ce04:	bd80      	pop	{r7, pc}
 801ce06:	bf00      	nop
 801ce08:	2001116c 	.word	0x2001116c
 801ce0c:	20011160 	.word	0x20011160

0801ce10 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b086      	sub	sp, #24
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	4603      	mov	r3, r0
 801ce18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801ce1a:	79fb      	ldrb	r3, [r7, #7]
 801ce1c:	2b08      	cmp	r3, #8
 801ce1e:	d009      	beq.n	801ce34 <tcp_kill_state+0x24>
 801ce20:	79fb      	ldrb	r3, [r7, #7]
 801ce22:	2b09      	cmp	r3, #9
 801ce24:	d006      	beq.n	801ce34 <tcp_kill_state+0x24>
 801ce26:	4b1a      	ldr	r3, [pc, #104]	@ (801ce90 <tcp_kill_state+0x80>)
 801ce28:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801ce2c:	4919      	ldr	r1, [pc, #100]	@ (801ce94 <tcp_kill_state+0x84>)
 801ce2e:	481a      	ldr	r0, [pc, #104]	@ (801ce98 <tcp_kill_state+0x88>)
 801ce30:	f00a fc9c 	bl	802776c <iprintf>

  inactivity = 0;
 801ce34:	2300      	movs	r3, #0
 801ce36:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801ce38:	2300      	movs	r3, #0
 801ce3a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ce3c:	4b17      	ldr	r3, [pc, #92]	@ (801ce9c <tcp_kill_state+0x8c>)
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	617b      	str	r3, [r7, #20]
 801ce42:	e017      	b.n	801ce74 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801ce44:	697b      	ldr	r3, [r7, #20]
 801ce46:	7d1b      	ldrb	r3, [r3, #20]
 801ce48:	79fa      	ldrb	r2, [r7, #7]
 801ce4a:	429a      	cmp	r2, r3
 801ce4c:	d10f      	bne.n	801ce6e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801ce4e:	4b14      	ldr	r3, [pc, #80]	@ (801cea0 <tcp_kill_state+0x90>)
 801ce50:	681a      	ldr	r2, [r3, #0]
 801ce52:	697b      	ldr	r3, [r7, #20]
 801ce54:	6a1b      	ldr	r3, [r3, #32]
 801ce56:	1ad3      	subs	r3, r2, r3
 801ce58:	68fa      	ldr	r2, [r7, #12]
 801ce5a:	429a      	cmp	r2, r3
 801ce5c:	d807      	bhi.n	801ce6e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801ce5e:	4b10      	ldr	r3, [pc, #64]	@ (801cea0 <tcp_kill_state+0x90>)
 801ce60:	681a      	ldr	r2, [r3, #0]
 801ce62:	697b      	ldr	r3, [r7, #20]
 801ce64:	6a1b      	ldr	r3, [r3, #32]
 801ce66:	1ad3      	subs	r3, r2, r3
 801ce68:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801ce6a:	697b      	ldr	r3, [r7, #20]
 801ce6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ce6e:	697b      	ldr	r3, [r7, #20]
 801ce70:	68db      	ldr	r3, [r3, #12]
 801ce72:	617b      	str	r3, [r7, #20]
 801ce74:	697b      	ldr	r3, [r7, #20]
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d1e4      	bne.n	801ce44 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801ce7a:	693b      	ldr	r3, [r7, #16]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d003      	beq.n	801ce88 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801ce80:	2100      	movs	r1, #0
 801ce82:	6938      	ldr	r0, [r7, #16]
 801ce84:	f7fe ffa8 	bl	801bdd8 <tcp_abandon>
  }
}
 801ce88:	bf00      	nop
 801ce8a:	3718      	adds	r7, #24
 801ce8c:	46bd      	mov	sp, r7
 801ce8e:	bd80      	pop	{r7, pc}
 801ce90:	0802a134 	.word	0x0802a134
 801ce94:	0802a6c0 	.word	0x0802a6c0
 801ce98:	0802a178 	.word	0x0802a178
 801ce9c:	2001116c 	.word	0x2001116c
 801cea0:	20011160 	.word	0x20011160

0801cea4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801cea4:	b580      	push	{r7, lr}
 801cea6:	b084      	sub	sp, #16
 801cea8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801ceaa:	2300      	movs	r3, #0
 801ceac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801ceae:	2300      	movs	r3, #0
 801ceb0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ceb2:	4b12      	ldr	r3, [pc, #72]	@ (801cefc <tcp_kill_timewait+0x58>)
 801ceb4:	681b      	ldr	r3, [r3, #0]
 801ceb6:	60fb      	str	r3, [r7, #12]
 801ceb8:	e012      	b.n	801cee0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801ceba:	4b11      	ldr	r3, [pc, #68]	@ (801cf00 <tcp_kill_timewait+0x5c>)
 801cebc:	681a      	ldr	r2, [r3, #0]
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	6a1b      	ldr	r3, [r3, #32]
 801cec2:	1ad3      	subs	r3, r2, r3
 801cec4:	687a      	ldr	r2, [r7, #4]
 801cec6:	429a      	cmp	r2, r3
 801cec8:	d807      	bhi.n	801ceda <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801ceca:	4b0d      	ldr	r3, [pc, #52]	@ (801cf00 <tcp_kill_timewait+0x5c>)
 801cecc:	681a      	ldr	r2, [r3, #0]
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	6a1b      	ldr	r3, [r3, #32]
 801ced2:	1ad3      	subs	r3, r2, r3
 801ced4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	68db      	ldr	r3, [r3, #12]
 801cede:	60fb      	str	r3, [r7, #12]
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d1e9      	bne.n	801ceba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801cee6:	68bb      	ldr	r3, [r7, #8]
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d002      	beq.n	801cef2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801ceec:	68b8      	ldr	r0, [r7, #8]
 801ceee:	f7ff f831 	bl	801bf54 <tcp_abort>
  }
}
 801cef2:	bf00      	nop
 801cef4:	3710      	adds	r7, #16
 801cef6:	46bd      	mov	sp, r7
 801cef8:	bd80      	pop	{r7, pc}
 801cefa:	bf00      	nop
 801cefc:	20011170 	.word	0x20011170
 801cf00:	20011160 	.word	0x20011160

0801cf04 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801cf04:	b580      	push	{r7, lr}
 801cf06:	b082      	sub	sp, #8
 801cf08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801cf0a:	4b10      	ldr	r3, [pc, #64]	@ (801cf4c <tcp_handle_closepend+0x48>)
 801cf0c:	681b      	ldr	r3, [r3, #0]
 801cf0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801cf10:	e014      	b.n	801cf3c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	68db      	ldr	r3, [r3, #12]
 801cf16:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	8b5b      	ldrh	r3, [r3, #26]
 801cf1c:	f003 0308 	and.w	r3, r3, #8
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d009      	beq.n	801cf38 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	8b5b      	ldrh	r3, [r3, #26]
 801cf28:	f023 0308 	bic.w	r3, r3, #8
 801cf2c:	b29a      	uxth	r2, r3
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801cf32:	6878      	ldr	r0, [r7, #4]
 801cf34:	f7fe fe5e 	bl	801bbf4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801cf38:	683b      	ldr	r3, [r7, #0]
 801cf3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d1e7      	bne.n	801cf12 <tcp_handle_closepend+0xe>
  }
}
 801cf42:	bf00      	nop
 801cf44:	bf00      	nop
 801cf46:	3708      	adds	r7, #8
 801cf48:	46bd      	mov	sp, r7
 801cf4a:	bd80      	pop	{r7, pc}
 801cf4c:	2001116c 	.word	0x2001116c

0801cf50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801cf50:	b580      	push	{r7, lr}
 801cf52:	b084      	sub	sp, #16
 801cf54:	af00      	add	r7, sp, #0
 801cf56:	4603      	mov	r3, r0
 801cf58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801cf5a:	2001      	movs	r0, #1
 801cf5c:	f7fd faa2 	bl	801a4a4 <memp_malloc>
 801cf60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801cf62:	68fb      	ldr	r3, [r7, #12]
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	d126      	bne.n	801cfb6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801cf68:	f7ff ffcc 	bl	801cf04 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801cf6c:	f7ff ff9a 	bl	801cea4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801cf70:	2001      	movs	r0, #1
 801cf72:	f7fd fa97 	bl	801a4a4 <memp_malloc>
 801cf76:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d11b      	bne.n	801cfb6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801cf7e:	2009      	movs	r0, #9
 801cf80:	f7ff ff46 	bl	801ce10 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801cf84:	2001      	movs	r0, #1
 801cf86:	f7fd fa8d 	bl	801a4a4 <memp_malloc>
 801cf8a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d111      	bne.n	801cfb6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801cf92:	2008      	movs	r0, #8
 801cf94:	f7ff ff3c 	bl	801ce10 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801cf98:	2001      	movs	r0, #1
 801cf9a:	f7fd fa83 	bl	801a4a4 <memp_malloc>
 801cf9e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d107      	bne.n	801cfb6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801cfa6:	79fb      	ldrb	r3, [r7, #7]
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	f7ff fee3 	bl	801cd74 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801cfae:	2001      	movs	r0, #1
 801cfb0:	f7fd fa78 	bl	801a4a4 <memp_malloc>
 801cfb4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d03f      	beq.n	801d03c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801cfbc:	229c      	movs	r2, #156	@ 0x9c
 801cfbe:	2100      	movs	r1, #0
 801cfc0:	68f8      	ldr	r0, [r7, #12]
 801cfc2:	f00a fd2b 	bl	8027a1c <memset>
    pcb->prio = prio;
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	79fa      	ldrb	r2, [r7, #7]
 801cfca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801cfd2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801cfdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801cfe2:	68fb      	ldr	r3, [r7, #12]
 801cfe4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	22ff      	movs	r2, #255	@ 0xff
 801cfea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801cfec:	68fb      	ldr	r3, [r7, #12]
 801cfee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801cff2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	2206      	movs	r2, #6
 801cff8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801cffc:	68fb      	ldr	r3, [r7, #12]
 801cffe:	2206      	movs	r2, #6
 801d000:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d008:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	2201      	movs	r2, #1
 801d00e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801d012:	4b0d      	ldr	r3, [pc, #52]	@ (801d048 <tcp_alloc+0xf8>)
 801d014:	681a      	ldr	r2, [r3, #0]
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801d01a:	4b0c      	ldr	r3, [pc, #48]	@ (801d04c <tcp_alloc+0xfc>)
 801d01c:	781a      	ldrb	r2, [r3, #0]
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801d028:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	4a08      	ldr	r2, [pc, #32]	@ (801d050 <tcp_alloc+0x100>)
 801d030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	4a07      	ldr	r2, [pc, #28]	@ (801d054 <tcp_alloc+0x104>)
 801d038:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801d03c:	68fb      	ldr	r3, [r7, #12]
}
 801d03e:	4618      	mov	r0, r3
 801d040:	3710      	adds	r7, #16
 801d042:	46bd      	mov	sp, r7
 801d044:	bd80      	pop	{r7, pc}
 801d046:	bf00      	nop
 801d048:	20011160 	.word	0x20011160
 801d04c:	20011176 	.word	0x20011176
 801d050:	0801cd09 	.word	0x0801cd09
 801d054:	006ddd00 	.word	0x006ddd00

0801d058 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801d058:	b580      	push	{r7, lr}
 801d05a:	b084      	sub	sp, #16
 801d05c:	af00      	add	r7, sp, #0
 801d05e:	4603      	mov	r3, r0
 801d060:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801d062:	2040      	movs	r0, #64	@ 0x40
 801d064:	f7ff ff74 	bl	801cf50 <tcp_alloc>
 801d068:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801d06a:	68fb      	ldr	r3, [r7, #12]
}
 801d06c:	4618      	mov	r0, r3
 801d06e:	3710      	adds	r7, #16
 801d070:	46bd      	mov	sp, r7
 801d072:	bd80      	pop	{r7, pc}

0801d074 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801d074:	b480      	push	{r7}
 801d076:	b083      	sub	sp, #12
 801d078:	af00      	add	r7, sp, #0
 801d07a:	6078      	str	r0, [r7, #4]
 801d07c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d002      	beq.n	801d08a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	683a      	ldr	r2, [r7, #0]
 801d088:	611a      	str	r2, [r3, #16]
  }
}
 801d08a:	bf00      	nop
 801d08c:	370c      	adds	r7, #12
 801d08e:	46bd      	mov	sp, r7
 801d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d094:	4770      	bx	lr
	...

0801d098 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801d098:	b580      	push	{r7, lr}
 801d09a:	b082      	sub	sp, #8
 801d09c:	af00      	add	r7, sp, #0
 801d09e:	6078      	str	r0, [r7, #4]
 801d0a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d00e      	beq.n	801d0c6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	7d1b      	ldrb	r3, [r3, #20]
 801d0ac:	2b01      	cmp	r3, #1
 801d0ae:	d106      	bne.n	801d0be <tcp_recv+0x26>
 801d0b0:	4b07      	ldr	r3, [pc, #28]	@ (801d0d0 <tcp_recv+0x38>)
 801d0b2:	f240 72df 	movw	r2, #2015	@ 0x7df
 801d0b6:	4907      	ldr	r1, [pc, #28]	@ (801d0d4 <tcp_recv+0x3c>)
 801d0b8:	4807      	ldr	r0, [pc, #28]	@ (801d0d8 <tcp_recv+0x40>)
 801d0ba:	f00a fb57 	bl	802776c <iprintf>
    pcb->recv = recv;
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	683a      	ldr	r2, [r7, #0]
 801d0c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801d0c6:	bf00      	nop
 801d0c8:	3708      	adds	r7, #8
 801d0ca:	46bd      	mov	sp, r7
 801d0cc:	bd80      	pop	{r7, pc}
 801d0ce:	bf00      	nop
 801d0d0:	0802a134 	.word	0x0802a134
 801d0d4:	0802a6d0 	.word	0x0802a6d0
 801d0d8:	0802a178 	.word	0x0802a178

0801d0dc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801d0dc:	b580      	push	{r7, lr}
 801d0de:	b082      	sub	sp, #8
 801d0e0:	af00      	add	r7, sp, #0
 801d0e2:	6078      	str	r0, [r7, #4]
 801d0e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d00e      	beq.n	801d10a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	7d1b      	ldrb	r3, [r3, #20]
 801d0f0:	2b01      	cmp	r3, #1
 801d0f2:	d106      	bne.n	801d102 <tcp_sent+0x26>
 801d0f4:	4b07      	ldr	r3, [pc, #28]	@ (801d114 <tcp_sent+0x38>)
 801d0f6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801d0fa:	4907      	ldr	r1, [pc, #28]	@ (801d118 <tcp_sent+0x3c>)
 801d0fc:	4807      	ldr	r0, [pc, #28]	@ (801d11c <tcp_sent+0x40>)
 801d0fe:	f00a fb35 	bl	802776c <iprintf>
    pcb->sent = sent;
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	683a      	ldr	r2, [r7, #0]
 801d106:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801d10a:	bf00      	nop
 801d10c:	3708      	adds	r7, #8
 801d10e:	46bd      	mov	sp, r7
 801d110:	bd80      	pop	{r7, pc}
 801d112:	bf00      	nop
 801d114:	0802a134 	.word	0x0802a134
 801d118:	0802a6f8 	.word	0x0802a6f8
 801d11c:	0802a178 	.word	0x0802a178

0801d120 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801d120:	b580      	push	{r7, lr}
 801d122:	b082      	sub	sp, #8
 801d124:	af00      	add	r7, sp, #0
 801d126:	6078      	str	r0, [r7, #4]
 801d128:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d00e      	beq.n	801d14e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	7d1b      	ldrb	r3, [r3, #20]
 801d134:	2b01      	cmp	r3, #1
 801d136:	d106      	bne.n	801d146 <tcp_err+0x26>
 801d138:	4b07      	ldr	r3, [pc, #28]	@ (801d158 <tcp_err+0x38>)
 801d13a:	f640 020d 	movw	r2, #2061	@ 0x80d
 801d13e:	4907      	ldr	r1, [pc, #28]	@ (801d15c <tcp_err+0x3c>)
 801d140:	4807      	ldr	r0, [pc, #28]	@ (801d160 <tcp_err+0x40>)
 801d142:	f00a fb13 	bl	802776c <iprintf>
    pcb->errf = err;
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	683a      	ldr	r2, [r7, #0]
 801d14a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801d14e:	bf00      	nop
 801d150:	3708      	adds	r7, #8
 801d152:	46bd      	mov	sp, r7
 801d154:	bd80      	pop	{r7, pc}
 801d156:	bf00      	nop
 801d158:	0802a134 	.word	0x0802a134
 801d15c:	0802a720 	.word	0x0802a720
 801d160:	0802a178 	.word	0x0802a178

0801d164 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801d164:	b480      	push	{r7}
 801d166:	b085      	sub	sp, #20
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
 801d16c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	2b00      	cmp	r3, #0
 801d172:	d008      	beq.n	801d186 <tcp_accept+0x22>
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	7d1b      	ldrb	r3, [r3, #20]
 801d178:	2b01      	cmp	r3, #1
 801d17a:	d104      	bne.n	801d186 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	683a      	ldr	r2, [r7, #0]
 801d184:	619a      	str	r2, [r3, #24]
  }
}
 801d186:	bf00      	nop
 801d188:	3714      	adds	r7, #20
 801d18a:	46bd      	mov	sp, r7
 801d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d190:	4770      	bx	lr
	...

0801d194 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b084      	sub	sp, #16
 801d198:	af00      	add	r7, sp, #0
 801d19a:	60f8      	str	r0, [r7, #12]
 801d19c:	60b9      	str	r1, [r7, #8]
 801d19e:	4613      	mov	r3, r2
 801d1a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d107      	bne.n	801d1b8 <tcp_poll+0x24>
 801d1a8:	4b0e      	ldr	r3, [pc, #56]	@ (801d1e4 <tcp_poll+0x50>)
 801d1aa:	f640 023d 	movw	r2, #2109	@ 0x83d
 801d1ae:	490e      	ldr	r1, [pc, #56]	@ (801d1e8 <tcp_poll+0x54>)
 801d1b0:	480e      	ldr	r0, [pc, #56]	@ (801d1ec <tcp_poll+0x58>)
 801d1b2:	f00a fadb 	bl	802776c <iprintf>
 801d1b6:	e011      	b.n	801d1dc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	7d1b      	ldrb	r3, [r3, #20]
 801d1bc:	2b01      	cmp	r3, #1
 801d1be:	d106      	bne.n	801d1ce <tcp_poll+0x3a>
 801d1c0:	4b08      	ldr	r3, [pc, #32]	@ (801d1e4 <tcp_poll+0x50>)
 801d1c2:	f640 023e 	movw	r2, #2110	@ 0x83e
 801d1c6:	490a      	ldr	r1, [pc, #40]	@ (801d1f0 <tcp_poll+0x5c>)
 801d1c8:	4808      	ldr	r0, [pc, #32]	@ (801d1ec <tcp_poll+0x58>)
 801d1ca:	f00a facf 	bl	802776c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	68ba      	ldr	r2, [r7, #8]
 801d1d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	79fa      	ldrb	r2, [r7, #7]
 801d1da:	775a      	strb	r2, [r3, #29]
}
 801d1dc:	3710      	adds	r7, #16
 801d1de:	46bd      	mov	sp, r7
 801d1e0:	bd80      	pop	{r7, pc}
 801d1e2:	bf00      	nop
 801d1e4:	0802a134 	.word	0x0802a134
 801d1e8:	0802a748 	.word	0x0802a748
 801d1ec:	0802a178 	.word	0x0802a178
 801d1f0:	0802a760 	.word	0x0802a760

0801d1f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b082      	sub	sp, #8
 801d1f8:	af00      	add	r7, sp, #0
 801d1fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d107      	bne.n	801d212 <tcp_pcb_purge+0x1e>
 801d202:	4b21      	ldr	r3, [pc, #132]	@ (801d288 <tcp_pcb_purge+0x94>)
 801d204:	f640 0251 	movw	r2, #2129	@ 0x851
 801d208:	4920      	ldr	r1, [pc, #128]	@ (801d28c <tcp_pcb_purge+0x98>)
 801d20a:	4821      	ldr	r0, [pc, #132]	@ (801d290 <tcp_pcb_purge+0x9c>)
 801d20c:	f00a faae 	bl	802776c <iprintf>
 801d210:	e037      	b.n	801d282 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	7d1b      	ldrb	r3, [r3, #20]
 801d216:	2b00      	cmp	r3, #0
 801d218:	d033      	beq.n	801d282 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801d21e:	2b0a      	cmp	r3, #10
 801d220:	d02f      	beq.n	801d282 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801d226:	2b01      	cmp	r3, #1
 801d228:	d02b      	beq.n	801d282 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d007      	beq.n	801d242 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d236:	4618      	mov	r0, r3
 801d238:	f7fe f88c 	bl	801b354 <pbuf_free>
      pcb->refused_data = NULL;
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	2200      	movs	r2, #0
 801d240:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d246:	2b00      	cmp	r3, #0
 801d248:	d002      	beq.n	801d250 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801d24a:	6878      	ldr	r0, [r7, #4]
 801d24c:	f000 f986 	bl	801d55c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d256:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d25c:	4618      	mov	r0, r3
 801d25e:	f7ff fcf9 	bl	801cc54 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d266:	4618      	mov	r0, r3
 801d268:	f7ff fcf4 	bl	801cc54 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	2200      	movs	r2, #0
 801d270:	66da      	str	r2, [r3, #108]	@ 0x6c
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	2200      	movs	r2, #0
 801d27e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801d282:	3708      	adds	r7, #8
 801d284:	46bd      	mov	sp, r7
 801d286:	bd80      	pop	{r7, pc}
 801d288:	0802a134 	.word	0x0802a134
 801d28c:	0802a780 	.word	0x0802a780
 801d290:	0802a178 	.word	0x0802a178

0801d294 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b084      	sub	sp, #16
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
 801d29c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d29e:	683b      	ldr	r3, [r7, #0]
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d106      	bne.n	801d2b2 <tcp_pcb_remove+0x1e>
 801d2a4:	4b3e      	ldr	r3, [pc, #248]	@ (801d3a0 <tcp_pcb_remove+0x10c>)
 801d2a6:	f640 0283 	movw	r2, #2179	@ 0x883
 801d2aa:	493e      	ldr	r1, [pc, #248]	@ (801d3a4 <tcp_pcb_remove+0x110>)
 801d2ac:	483e      	ldr	r0, [pc, #248]	@ (801d3a8 <tcp_pcb_remove+0x114>)
 801d2ae:	f00a fa5d 	bl	802776c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d106      	bne.n	801d2c6 <tcp_pcb_remove+0x32>
 801d2b8:	4b39      	ldr	r3, [pc, #228]	@ (801d3a0 <tcp_pcb_remove+0x10c>)
 801d2ba:	f640 0284 	movw	r2, #2180	@ 0x884
 801d2be:	493b      	ldr	r1, [pc, #236]	@ (801d3ac <tcp_pcb_remove+0x118>)
 801d2c0:	4839      	ldr	r0, [pc, #228]	@ (801d3a8 <tcp_pcb_remove+0x114>)
 801d2c2:	f00a fa53 	bl	802776c <iprintf>

  TCP_RMV(pcblist, pcb);
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	681b      	ldr	r3, [r3, #0]
 801d2ca:	683a      	ldr	r2, [r7, #0]
 801d2cc:	429a      	cmp	r2, r3
 801d2ce:	d105      	bne.n	801d2dc <tcp_pcb_remove+0x48>
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	68da      	ldr	r2, [r3, #12]
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	601a      	str	r2, [r3, #0]
 801d2da:	e013      	b.n	801d304 <tcp_pcb_remove+0x70>
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	60fb      	str	r3, [r7, #12]
 801d2e2:	e00c      	b.n	801d2fe <tcp_pcb_remove+0x6a>
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	68db      	ldr	r3, [r3, #12]
 801d2e8:	683a      	ldr	r2, [r7, #0]
 801d2ea:	429a      	cmp	r2, r3
 801d2ec:	d104      	bne.n	801d2f8 <tcp_pcb_remove+0x64>
 801d2ee:	683b      	ldr	r3, [r7, #0]
 801d2f0:	68da      	ldr	r2, [r3, #12]
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	60da      	str	r2, [r3, #12]
 801d2f6:	e005      	b.n	801d304 <tcp_pcb_remove+0x70>
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	68db      	ldr	r3, [r3, #12]
 801d2fc:	60fb      	str	r3, [r7, #12]
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	2b00      	cmp	r3, #0
 801d302:	d1ef      	bne.n	801d2e4 <tcp_pcb_remove+0x50>
 801d304:	683b      	ldr	r3, [r7, #0]
 801d306:	2200      	movs	r2, #0
 801d308:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801d30a:	6838      	ldr	r0, [r7, #0]
 801d30c:	f7ff ff72 	bl	801d1f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801d310:	683b      	ldr	r3, [r7, #0]
 801d312:	7d1b      	ldrb	r3, [r3, #20]
 801d314:	2b0a      	cmp	r3, #10
 801d316:	d013      	beq.n	801d340 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801d318:	683b      	ldr	r3, [r7, #0]
 801d31a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801d31c:	2b01      	cmp	r3, #1
 801d31e:	d00f      	beq.n	801d340 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801d320:	683b      	ldr	r3, [r7, #0]
 801d322:	8b5b      	ldrh	r3, [r3, #26]
 801d324:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d009      	beq.n	801d340 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801d32c:	683b      	ldr	r3, [r7, #0]
 801d32e:	8b5b      	ldrh	r3, [r3, #26]
 801d330:	f043 0302 	orr.w	r3, r3, #2
 801d334:	b29a      	uxth	r2, r3
 801d336:	683b      	ldr	r3, [r7, #0]
 801d338:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801d33a:	6838      	ldr	r0, [r7, #0]
 801d33c:	f003 fbc0 	bl	8020ac0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801d340:	683b      	ldr	r3, [r7, #0]
 801d342:	7d1b      	ldrb	r3, [r3, #20]
 801d344:	2b01      	cmp	r3, #1
 801d346:	d020      	beq.n	801d38a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d348:	683b      	ldr	r3, [r7, #0]
 801d34a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d006      	beq.n	801d35e <tcp_pcb_remove+0xca>
 801d350:	4b13      	ldr	r3, [pc, #76]	@ (801d3a0 <tcp_pcb_remove+0x10c>)
 801d352:	f640 0293 	movw	r2, #2195	@ 0x893
 801d356:	4916      	ldr	r1, [pc, #88]	@ (801d3b0 <tcp_pcb_remove+0x11c>)
 801d358:	4813      	ldr	r0, [pc, #76]	@ (801d3a8 <tcp_pcb_remove+0x114>)
 801d35a:	f00a fa07 	bl	802776c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801d35e:	683b      	ldr	r3, [r7, #0]
 801d360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d362:	2b00      	cmp	r3, #0
 801d364:	d006      	beq.n	801d374 <tcp_pcb_remove+0xe0>
 801d366:	4b0e      	ldr	r3, [pc, #56]	@ (801d3a0 <tcp_pcb_remove+0x10c>)
 801d368:	f640 0294 	movw	r2, #2196	@ 0x894
 801d36c:	4911      	ldr	r1, [pc, #68]	@ (801d3b4 <tcp_pcb_remove+0x120>)
 801d36e:	480e      	ldr	r0, [pc, #56]	@ (801d3a8 <tcp_pcb_remove+0x114>)
 801d370:	f00a f9fc 	bl	802776c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801d374:	683b      	ldr	r3, [r7, #0]
 801d376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d006      	beq.n	801d38a <tcp_pcb_remove+0xf6>
 801d37c:	4b08      	ldr	r3, [pc, #32]	@ (801d3a0 <tcp_pcb_remove+0x10c>)
 801d37e:	f640 0296 	movw	r2, #2198	@ 0x896
 801d382:	490d      	ldr	r1, [pc, #52]	@ (801d3b8 <tcp_pcb_remove+0x124>)
 801d384:	4808      	ldr	r0, [pc, #32]	@ (801d3a8 <tcp_pcb_remove+0x114>)
 801d386:	f00a f9f1 	bl	802776c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801d38a:	683b      	ldr	r3, [r7, #0]
 801d38c:	2200      	movs	r2, #0
 801d38e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801d390:	683b      	ldr	r3, [r7, #0]
 801d392:	2200      	movs	r2, #0
 801d394:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801d396:	bf00      	nop
 801d398:	3710      	adds	r7, #16
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd80      	pop	{r7, pc}
 801d39e:	bf00      	nop
 801d3a0:	0802a134 	.word	0x0802a134
 801d3a4:	0802a79c 	.word	0x0802a79c
 801d3a8:	0802a178 	.word	0x0802a178
 801d3ac:	0802a7b8 	.word	0x0802a7b8
 801d3b0:	0802a7d8 	.word	0x0802a7d8
 801d3b4:	0802a7f0 	.word	0x0802a7f0
 801d3b8:	0802a80c 	.word	0x0802a80c

0801d3bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801d3bc:	b580      	push	{r7, lr}
 801d3be:	b082      	sub	sp, #8
 801d3c0:	af00      	add	r7, sp, #0
 801d3c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d106      	bne.n	801d3d8 <tcp_next_iss+0x1c>
 801d3ca:	4b0a      	ldr	r3, [pc, #40]	@ (801d3f4 <tcp_next_iss+0x38>)
 801d3cc:	f640 02af 	movw	r2, #2223	@ 0x8af
 801d3d0:	4909      	ldr	r1, [pc, #36]	@ (801d3f8 <tcp_next_iss+0x3c>)
 801d3d2:	480a      	ldr	r0, [pc, #40]	@ (801d3fc <tcp_next_iss+0x40>)
 801d3d4:	f00a f9ca 	bl	802776c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801d3d8:	4b09      	ldr	r3, [pc, #36]	@ (801d400 <tcp_next_iss+0x44>)
 801d3da:	681a      	ldr	r2, [r3, #0]
 801d3dc:	4b09      	ldr	r3, [pc, #36]	@ (801d404 <tcp_next_iss+0x48>)
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	4413      	add	r3, r2
 801d3e2:	4a07      	ldr	r2, [pc, #28]	@ (801d400 <tcp_next_iss+0x44>)
 801d3e4:	6013      	str	r3, [r2, #0]
  return iss;
 801d3e6:	4b06      	ldr	r3, [pc, #24]	@ (801d400 <tcp_next_iss+0x44>)
 801d3e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	3708      	adds	r7, #8
 801d3ee:	46bd      	mov	sp, r7
 801d3f0:	bd80      	pop	{r7, pc}
 801d3f2:	bf00      	nop
 801d3f4:	0802a134 	.word	0x0802a134
 801d3f8:	0802a824 	.word	0x0802a824
 801d3fc:	0802a178 	.word	0x0802a178
 801d400:	20000048 	.word	0x20000048
 801d404:	20011160 	.word	0x20011160

0801d408 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801d408:	b580      	push	{r7, lr}
 801d40a:	b086      	sub	sp, #24
 801d40c:	af00      	add	r7, sp, #0
 801d40e:	4603      	mov	r3, r0
 801d410:	60b9      	str	r1, [r7, #8]
 801d412:	607a      	str	r2, [r7, #4]
 801d414:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d106      	bne.n	801d42a <tcp_eff_send_mss_netif+0x22>
 801d41c:	4b14      	ldr	r3, [pc, #80]	@ (801d470 <tcp_eff_send_mss_netif+0x68>)
 801d41e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801d422:	4914      	ldr	r1, [pc, #80]	@ (801d474 <tcp_eff_send_mss_netif+0x6c>)
 801d424:	4814      	ldr	r0, [pc, #80]	@ (801d478 <tcp_eff_send_mss_netif+0x70>)
 801d426:	f00a f9a1 	bl	802776c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801d42a:	68bb      	ldr	r3, [r7, #8]
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d101      	bne.n	801d434 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801d430:	89fb      	ldrh	r3, [r7, #14]
 801d432:	e019      	b.n	801d468 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801d434:	68bb      	ldr	r3, [r7, #8]
 801d436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d438:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801d43a:	8afb      	ldrh	r3, [r7, #22]
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d012      	beq.n	801d466 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801d440:	2328      	movs	r3, #40	@ 0x28
 801d442:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801d444:	8afa      	ldrh	r2, [r7, #22]
 801d446:	8abb      	ldrh	r3, [r7, #20]
 801d448:	429a      	cmp	r2, r3
 801d44a:	d904      	bls.n	801d456 <tcp_eff_send_mss_netif+0x4e>
 801d44c:	8afa      	ldrh	r2, [r7, #22]
 801d44e:	8abb      	ldrh	r3, [r7, #20]
 801d450:	1ad3      	subs	r3, r2, r3
 801d452:	b29b      	uxth	r3, r3
 801d454:	e000      	b.n	801d458 <tcp_eff_send_mss_netif+0x50>
 801d456:	2300      	movs	r3, #0
 801d458:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801d45a:	8a7a      	ldrh	r2, [r7, #18]
 801d45c:	89fb      	ldrh	r3, [r7, #14]
 801d45e:	4293      	cmp	r3, r2
 801d460:	bf28      	it	cs
 801d462:	4613      	movcs	r3, r2
 801d464:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801d466:	89fb      	ldrh	r3, [r7, #14]
}
 801d468:	4618      	mov	r0, r3
 801d46a:	3718      	adds	r7, #24
 801d46c:	46bd      	mov	sp, r7
 801d46e:	bd80      	pop	{r7, pc}
 801d470:	0802a134 	.word	0x0802a134
 801d474:	0802a840 	.word	0x0802a840
 801d478:	0802a178 	.word	0x0802a178

0801d47c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801d47c:	b580      	push	{r7, lr}
 801d47e:	b084      	sub	sp, #16
 801d480:	af00      	add	r7, sp, #0
 801d482:	6078      	str	r0, [r7, #4]
 801d484:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801d486:	683b      	ldr	r3, [r7, #0]
 801d488:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d119      	bne.n	801d4c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801d490:	4b10      	ldr	r3, [pc, #64]	@ (801d4d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801d492:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801d496:	4910      	ldr	r1, [pc, #64]	@ (801d4d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801d498:	4810      	ldr	r0, [pc, #64]	@ (801d4dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801d49a:	f00a f967 	bl	802776c <iprintf>

  while (pcb != NULL) {
 801d49e:	e011      	b.n	801d4c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801d4a0:	68fb      	ldr	r3, [r7, #12]
 801d4a2:	681a      	ldr	r2, [r3, #0]
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	d108      	bne.n	801d4be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	68db      	ldr	r3, [r3, #12]
 801d4b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801d4b2:	68f8      	ldr	r0, [r7, #12]
 801d4b4:	f7fe fd4e 	bl	801bf54 <tcp_abort>
      pcb = next;
 801d4b8:	68bb      	ldr	r3, [r7, #8]
 801d4ba:	60fb      	str	r3, [r7, #12]
 801d4bc:	e002      	b.n	801d4c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	68db      	ldr	r3, [r3, #12]
 801d4c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d1ea      	bne.n	801d4a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801d4ca:	bf00      	nop
 801d4cc:	bf00      	nop
 801d4ce:	3710      	adds	r7, #16
 801d4d0:	46bd      	mov	sp, r7
 801d4d2:	bd80      	pop	{r7, pc}
 801d4d4:	0802a134 	.word	0x0802a134
 801d4d8:	0802a868 	.word	0x0802a868
 801d4dc:	0802a178 	.word	0x0802a178

0801d4e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d4e0:	b580      	push	{r7, lr}
 801d4e2:	b084      	sub	sp, #16
 801d4e4:	af00      	add	r7, sp, #0
 801d4e6:	6078      	str	r0, [r7, #4]
 801d4e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d02a      	beq.n	801d546 <tcp_netif_ip_addr_changed+0x66>
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d026      	beq.n	801d546 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801d4f8:	4b15      	ldr	r3, [pc, #84]	@ (801d550 <tcp_netif_ip_addr_changed+0x70>)
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	4619      	mov	r1, r3
 801d4fe:	6878      	ldr	r0, [r7, #4]
 801d500:	f7ff ffbc 	bl	801d47c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801d504:	4b13      	ldr	r3, [pc, #76]	@ (801d554 <tcp_netif_ip_addr_changed+0x74>)
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	4619      	mov	r1, r3
 801d50a:	6878      	ldr	r0, [r7, #4]
 801d50c:	f7ff ffb6 	bl	801d47c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801d510:	683b      	ldr	r3, [r7, #0]
 801d512:	2b00      	cmp	r3, #0
 801d514:	d017      	beq.n	801d546 <tcp_netif_ip_addr_changed+0x66>
 801d516:	683b      	ldr	r3, [r7, #0]
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d013      	beq.n	801d546 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d51e:	4b0e      	ldr	r3, [pc, #56]	@ (801d558 <tcp_netif_ip_addr_changed+0x78>)
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	60fb      	str	r3, [r7, #12]
 801d524:	e00c      	b.n	801d540 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	681a      	ldr	r2, [r3, #0]
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	429a      	cmp	r2, r3
 801d530:	d103      	bne.n	801d53a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801d532:	683b      	ldr	r3, [r7, #0]
 801d534:	681a      	ldr	r2, [r3, #0]
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d53a:	68fb      	ldr	r3, [r7, #12]
 801d53c:	68db      	ldr	r3, [r3, #12]
 801d53e:	60fb      	str	r3, [r7, #12]
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	2b00      	cmp	r3, #0
 801d544:	d1ef      	bne.n	801d526 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801d546:	bf00      	nop
 801d548:	3710      	adds	r7, #16
 801d54a:	46bd      	mov	sp, r7
 801d54c:	bd80      	pop	{r7, pc}
 801d54e:	bf00      	nop
 801d550:	2001116c 	.word	0x2001116c
 801d554:	20011164 	.word	0x20011164
 801d558:	20011168 	.word	0x20011168

0801d55c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801d55c:	b580      	push	{r7, lr}
 801d55e:	b082      	sub	sp, #8
 801d560:	af00      	add	r7, sp, #0
 801d562:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d007      	beq.n	801d57c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d570:	4618      	mov	r0, r3
 801d572:	f7ff fb6f 	bl	801cc54 <tcp_segs_free>
    pcb->ooseq = NULL;
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	2200      	movs	r2, #0
 801d57a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801d57c:	bf00      	nop
 801d57e:	3708      	adds	r7, #8
 801d580:	46bd      	mov	sp, r7
 801d582:	bd80      	pop	{r7, pc}

0801d584 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801d584:	b590      	push	{r4, r7, lr}
 801d586:	b08d      	sub	sp, #52	@ 0x34
 801d588:	af04      	add	r7, sp, #16
 801d58a:	6078      	str	r0, [r7, #4]
 801d58c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d105      	bne.n	801d5a0 <tcp_input+0x1c>
 801d594:	4b9b      	ldr	r3, [pc, #620]	@ (801d804 <tcp_input+0x280>)
 801d596:	2283      	movs	r2, #131	@ 0x83
 801d598:	499b      	ldr	r1, [pc, #620]	@ (801d808 <tcp_input+0x284>)
 801d59a:	489c      	ldr	r0, [pc, #624]	@ (801d80c <tcp_input+0x288>)
 801d59c:	f00a f8e6 	bl	802776c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	685b      	ldr	r3, [r3, #4]
 801d5a4:	4a9a      	ldr	r2, [pc, #616]	@ (801d810 <tcp_input+0x28c>)
 801d5a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	895b      	ldrh	r3, [r3, #10]
 801d5ac:	2b13      	cmp	r3, #19
 801d5ae:	f240 83d1 	bls.w	801dd54 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d5b2:	4b98      	ldr	r3, [pc, #608]	@ (801d814 <tcp_input+0x290>)
 801d5b4:	695b      	ldr	r3, [r3, #20]
 801d5b6:	4a97      	ldr	r2, [pc, #604]	@ (801d814 <tcp_input+0x290>)
 801d5b8:	6812      	ldr	r2, [r2, #0]
 801d5ba:	4611      	mov	r1, r2
 801d5bc:	4618      	mov	r0, r3
 801d5be:	f008 fae7 	bl	8025b90 <ip4_addr_isbroadcast_u32>
 801d5c2:	4603      	mov	r3, r0
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	f040 83c7 	bne.w	801dd58 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801d5ca:	4b92      	ldr	r3, [pc, #584]	@ (801d814 <tcp_input+0x290>)
 801d5cc:	695b      	ldr	r3, [r3, #20]
 801d5ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d5d2:	2be0      	cmp	r3, #224	@ 0xe0
 801d5d4:	f000 83c0 	beq.w	801dd58 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801d5d8:	4b8d      	ldr	r3, [pc, #564]	@ (801d810 <tcp_input+0x28c>)
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	899b      	ldrh	r3, [r3, #12]
 801d5de:	b29b      	uxth	r3, r3
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	f7fc fa87 	bl	8019af4 <lwip_htons>
 801d5e6:	4603      	mov	r3, r0
 801d5e8:	0b1b      	lsrs	r3, r3, #12
 801d5ea:	b29b      	uxth	r3, r3
 801d5ec:	b2db      	uxtb	r3, r3
 801d5ee:	009b      	lsls	r3, r3, #2
 801d5f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801d5f2:	7cbb      	ldrb	r3, [r7, #18]
 801d5f4:	2b13      	cmp	r3, #19
 801d5f6:	f240 83b1 	bls.w	801dd5c <tcp_input+0x7d8>
 801d5fa:	7cbb      	ldrb	r3, [r7, #18]
 801d5fc:	b29a      	uxth	r2, r3
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	891b      	ldrh	r3, [r3, #8]
 801d602:	429a      	cmp	r2, r3
 801d604:	f200 83aa 	bhi.w	801dd5c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d608:	7cbb      	ldrb	r3, [r7, #18]
 801d60a:	b29b      	uxth	r3, r3
 801d60c:	3b14      	subs	r3, #20
 801d60e:	b29a      	uxth	r2, r3
 801d610:	4b81      	ldr	r3, [pc, #516]	@ (801d818 <tcp_input+0x294>)
 801d612:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801d614:	4b81      	ldr	r3, [pc, #516]	@ (801d81c <tcp_input+0x298>)
 801d616:	2200      	movs	r2, #0
 801d618:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	895a      	ldrh	r2, [r3, #10]
 801d61e:	7cbb      	ldrb	r3, [r7, #18]
 801d620:	b29b      	uxth	r3, r3
 801d622:	429a      	cmp	r2, r3
 801d624:	d309      	bcc.n	801d63a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801d626:	4b7c      	ldr	r3, [pc, #496]	@ (801d818 <tcp_input+0x294>)
 801d628:	881a      	ldrh	r2, [r3, #0]
 801d62a:	4b7d      	ldr	r3, [pc, #500]	@ (801d820 <tcp_input+0x29c>)
 801d62c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801d62e:	7cbb      	ldrb	r3, [r7, #18]
 801d630:	4619      	mov	r1, r3
 801d632:	6878      	ldr	r0, [r7, #4]
 801d634:	f7fd fdd6 	bl	801b1e4 <pbuf_remove_header>
 801d638:	e04e      	b.n	801d6d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d105      	bne.n	801d64e <tcp_input+0xca>
 801d642:	4b70      	ldr	r3, [pc, #448]	@ (801d804 <tcp_input+0x280>)
 801d644:	22c2      	movs	r2, #194	@ 0xc2
 801d646:	4977      	ldr	r1, [pc, #476]	@ (801d824 <tcp_input+0x2a0>)
 801d648:	4870      	ldr	r0, [pc, #448]	@ (801d80c <tcp_input+0x288>)
 801d64a:	f00a f88f 	bl	802776c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801d64e:	2114      	movs	r1, #20
 801d650:	6878      	ldr	r0, [r7, #4]
 801d652:	f7fd fdc7 	bl	801b1e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	895a      	ldrh	r2, [r3, #10]
 801d65a:	4b71      	ldr	r3, [pc, #452]	@ (801d820 <tcp_input+0x29c>)
 801d65c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d65e:	4b6e      	ldr	r3, [pc, #440]	@ (801d818 <tcp_input+0x294>)
 801d660:	881a      	ldrh	r2, [r3, #0]
 801d662:	4b6f      	ldr	r3, [pc, #444]	@ (801d820 <tcp_input+0x29c>)
 801d664:	881b      	ldrh	r3, [r3, #0]
 801d666:	1ad3      	subs	r3, r2, r3
 801d668:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801d66a:	4b6d      	ldr	r3, [pc, #436]	@ (801d820 <tcp_input+0x29c>)
 801d66c:	881b      	ldrh	r3, [r3, #0]
 801d66e:	4619      	mov	r1, r3
 801d670:	6878      	ldr	r0, [r7, #4]
 801d672:	f7fd fdb7 	bl	801b1e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	895b      	ldrh	r3, [r3, #10]
 801d67c:	8a3a      	ldrh	r2, [r7, #16]
 801d67e:	429a      	cmp	r2, r3
 801d680:	f200 836e 	bhi.w	801dd60 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	685b      	ldr	r3, [r3, #4]
 801d68a:	4a64      	ldr	r2, [pc, #400]	@ (801d81c <tcp_input+0x298>)
 801d68c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	8a3a      	ldrh	r2, [r7, #16]
 801d694:	4611      	mov	r1, r2
 801d696:	4618      	mov	r0, r3
 801d698:	f7fd fda4 	bl	801b1e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	891a      	ldrh	r2, [r3, #8]
 801d6a0:	8a3b      	ldrh	r3, [r7, #16]
 801d6a2:	1ad3      	subs	r3, r2, r3
 801d6a4:	b29a      	uxth	r2, r3
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	895b      	ldrh	r3, [r3, #10]
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	d005      	beq.n	801d6be <tcp_input+0x13a>
 801d6b2:	4b54      	ldr	r3, [pc, #336]	@ (801d804 <tcp_input+0x280>)
 801d6b4:	22df      	movs	r2, #223	@ 0xdf
 801d6b6:	495c      	ldr	r1, [pc, #368]	@ (801d828 <tcp_input+0x2a4>)
 801d6b8:	4854      	ldr	r0, [pc, #336]	@ (801d80c <tcp_input+0x288>)
 801d6ba:	f00a f857 	bl	802776c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	891a      	ldrh	r2, [r3, #8]
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	891b      	ldrh	r3, [r3, #8]
 801d6c8:	429a      	cmp	r2, r3
 801d6ca:	d005      	beq.n	801d6d8 <tcp_input+0x154>
 801d6cc:	4b4d      	ldr	r3, [pc, #308]	@ (801d804 <tcp_input+0x280>)
 801d6ce:	22e0      	movs	r2, #224	@ 0xe0
 801d6d0:	4956      	ldr	r1, [pc, #344]	@ (801d82c <tcp_input+0x2a8>)
 801d6d2:	484e      	ldr	r0, [pc, #312]	@ (801d80c <tcp_input+0x288>)
 801d6d4:	f00a f84a 	bl	802776c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801d6d8:	4b4d      	ldr	r3, [pc, #308]	@ (801d810 <tcp_input+0x28c>)
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	881b      	ldrh	r3, [r3, #0]
 801d6de:	b29b      	uxth	r3, r3
 801d6e0:	4a4b      	ldr	r2, [pc, #300]	@ (801d810 <tcp_input+0x28c>)
 801d6e2:	6814      	ldr	r4, [r2, #0]
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f7fc fa05 	bl	8019af4 <lwip_htons>
 801d6ea:	4603      	mov	r3, r0
 801d6ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801d6ee:	4b48      	ldr	r3, [pc, #288]	@ (801d810 <tcp_input+0x28c>)
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	885b      	ldrh	r3, [r3, #2]
 801d6f4:	b29b      	uxth	r3, r3
 801d6f6:	4a46      	ldr	r2, [pc, #280]	@ (801d810 <tcp_input+0x28c>)
 801d6f8:	6814      	ldr	r4, [r2, #0]
 801d6fa:	4618      	mov	r0, r3
 801d6fc:	f7fc f9fa 	bl	8019af4 <lwip_htons>
 801d700:	4603      	mov	r3, r0
 801d702:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d704:	4b42      	ldr	r3, [pc, #264]	@ (801d810 <tcp_input+0x28c>)
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	685b      	ldr	r3, [r3, #4]
 801d70a:	4a41      	ldr	r2, [pc, #260]	@ (801d810 <tcp_input+0x28c>)
 801d70c:	6814      	ldr	r4, [r2, #0]
 801d70e:	4618      	mov	r0, r3
 801d710:	f7fc fa05 	bl	8019b1e <lwip_htonl>
 801d714:	4603      	mov	r3, r0
 801d716:	6063      	str	r3, [r4, #4]
 801d718:	6863      	ldr	r3, [r4, #4]
 801d71a:	4a45      	ldr	r2, [pc, #276]	@ (801d830 <tcp_input+0x2ac>)
 801d71c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d71e:	4b3c      	ldr	r3, [pc, #240]	@ (801d810 <tcp_input+0x28c>)
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	689b      	ldr	r3, [r3, #8]
 801d724:	4a3a      	ldr	r2, [pc, #232]	@ (801d810 <tcp_input+0x28c>)
 801d726:	6814      	ldr	r4, [r2, #0]
 801d728:	4618      	mov	r0, r3
 801d72a:	f7fc f9f8 	bl	8019b1e <lwip_htonl>
 801d72e:	4603      	mov	r3, r0
 801d730:	60a3      	str	r3, [r4, #8]
 801d732:	68a3      	ldr	r3, [r4, #8]
 801d734:	4a3f      	ldr	r2, [pc, #252]	@ (801d834 <tcp_input+0x2b0>)
 801d736:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d738:	4b35      	ldr	r3, [pc, #212]	@ (801d810 <tcp_input+0x28c>)
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	89db      	ldrh	r3, [r3, #14]
 801d73e:	b29b      	uxth	r3, r3
 801d740:	4a33      	ldr	r2, [pc, #204]	@ (801d810 <tcp_input+0x28c>)
 801d742:	6814      	ldr	r4, [r2, #0]
 801d744:	4618      	mov	r0, r3
 801d746:	f7fc f9d5 	bl	8019af4 <lwip_htons>
 801d74a:	4603      	mov	r3, r0
 801d74c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801d74e:	4b30      	ldr	r3, [pc, #192]	@ (801d810 <tcp_input+0x28c>)
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	899b      	ldrh	r3, [r3, #12]
 801d754:	b29b      	uxth	r3, r3
 801d756:	4618      	mov	r0, r3
 801d758:	f7fc f9cc 	bl	8019af4 <lwip_htons>
 801d75c:	4603      	mov	r3, r0
 801d75e:	b2db      	uxtb	r3, r3
 801d760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d764:	b2da      	uxtb	r2, r3
 801d766:	4b34      	ldr	r3, [pc, #208]	@ (801d838 <tcp_input+0x2b4>)
 801d768:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	891a      	ldrh	r2, [r3, #8]
 801d76e:	4b33      	ldr	r3, [pc, #204]	@ (801d83c <tcp_input+0x2b8>)
 801d770:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801d772:	4b31      	ldr	r3, [pc, #196]	@ (801d838 <tcp_input+0x2b4>)
 801d774:	781b      	ldrb	r3, [r3, #0]
 801d776:	f003 0303 	and.w	r3, r3, #3
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d00c      	beq.n	801d798 <tcp_input+0x214>
    tcplen++;
 801d77e:	4b2f      	ldr	r3, [pc, #188]	@ (801d83c <tcp_input+0x2b8>)
 801d780:	881b      	ldrh	r3, [r3, #0]
 801d782:	3301      	adds	r3, #1
 801d784:	b29a      	uxth	r2, r3
 801d786:	4b2d      	ldr	r3, [pc, #180]	@ (801d83c <tcp_input+0x2b8>)
 801d788:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	891a      	ldrh	r2, [r3, #8]
 801d78e:	4b2b      	ldr	r3, [pc, #172]	@ (801d83c <tcp_input+0x2b8>)
 801d790:	881b      	ldrh	r3, [r3, #0]
 801d792:	429a      	cmp	r2, r3
 801d794:	f200 82e6 	bhi.w	801dd64 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801d798:	2300      	movs	r3, #0
 801d79a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d79c:	4b28      	ldr	r3, [pc, #160]	@ (801d840 <tcp_input+0x2bc>)
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	61fb      	str	r3, [r7, #28]
 801d7a2:	e09d      	b.n	801d8e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d7a4:	69fb      	ldr	r3, [r7, #28]
 801d7a6:	7d1b      	ldrb	r3, [r3, #20]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d105      	bne.n	801d7b8 <tcp_input+0x234>
 801d7ac:	4b15      	ldr	r3, [pc, #84]	@ (801d804 <tcp_input+0x280>)
 801d7ae:	22fb      	movs	r2, #251	@ 0xfb
 801d7b0:	4924      	ldr	r1, [pc, #144]	@ (801d844 <tcp_input+0x2c0>)
 801d7b2:	4816      	ldr	r0, [pc, #88]	@ (801d80c <tcp_input+0x288>)
 801d7b4:	f009 ffda 	bl	802776c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d7b8:	69fb      	ldr	r3, [r7, #28]
 801d7ba:	7d1b      	ldrb	r3, [r3, #20]
 801d7bc:	2b0a      	cmp	r3, #10
 801d7be:	d105      	bne.n	801d7cc <tcp_input+0x248>
 801d7c0:	4b10      	ldr	r3, [pc, #64]	@ (801d804 <tcp_input+0x280>)
 801d7c2:	22fc      	movs	r2, #252	@ 0xfc
 801d7c4:	4920      	ldr	r1, [pc, #128]	@ (801d848 <tcp_input+0x2c4>)
 801d7c6:	4811      	ldr	r0, [pc, #68]	@ (801d80c <tcp_input+0x288>)
 801d7c8:	f009 ffd0 	bl	802776c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d7cc:	69fb      	ldr	r3, [r7, #28]
 801d7ce:	7d1b      	ldrb	r3, [r3, #20]
 801d7d0:	2b01      	cmp	r3, #1
 801d7d2:	d105      	bne.n	801d7e0 <tcp_input+0x25c>
 801d7d4:	4b0b      	ldr	r3, [pc, #44]	@ (801d804 <tcp_input+0x280>)
 801d7d6:	22fd      	movs	r2, #253	@ 0xfd
 801d7d8:	491c      	ldr	r1, [pc, #112]	@ (801d84c <tcp_input+0x2c8>)
 801d7da:	480c      	ldr	r0, [pc, #48]	@ (801d80c <tcp_input+0x288>)
 801d7dc:	f009 ffc6 	bl	802776c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d7e0:	69fb      	ldr	r3, [r7, #28]
 801d7e2:	7a1b      	ldrb	r3, [r3, #8]
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d033      	beq.n	801d850 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d7e8:	69fb      	ldr	r3, [r7, #28]
 801d7ea:	7a1a      	ldrb	r2, [r3, #8]
 801d7ec:	4b09      	ldr	r3, [pc, #36]	@ (801d814 <tcp_input+0x290>)
 801d7ee:	685b      	ldr	r3, [r3, #4]
 801d7f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d7f4:	3301      	adds	r3, #1
 801d7f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d7f8:	429a      	cmp	r2, r3
 801d7fa:	d029      	beq.n	801d850 <tcp_input+0x2cc>
      prev = pcb;
 801d7fc:	69fb      	ldr	r3, [r7, #28]
 801d7fe:	61bb      	str	r3, [r7, #24]
      continue;
 801d800:	e06b      	b.n	801d8da <tcp_input+0x356>
 801d802:	bf00      	nop
 801d804:	0802a89c 	.word	0x0802a89c
 801d808:	0802a8d0 	.word	0x0802a8d0
 801d80c:	0802a8e8 	.word	0x0802a8e8
 801d810:	20011188 	.word	0x20011188
 801d814:	2000d9ec 	.word	0x2000d9ec
 801d818:	2001118c 	.word	0x2001118c
 801d81c:	20011190 	.word	0x20011190
 801d820:	2001118e 	.word	0x2001118e
 801d824:	0802a910 	.word	0x0802a910
 801d828:	0802a920 	.word	0x0802a920
 801d82c:	0802a92c 	.word	0x0802a92c
 801d830:	20011198 	.word	0x20011198
 801d834:	2001119c 	.word	0x2001119c
 801d838:	200111a4 	.word	0x200111a4
 801d83c:	200111a2 	.word	0x200111a2
 801d840:	2001116c 	.word	0x2001116c
 801d844:	0802a94c 	.word	0x0802a94c
 801d848:	0802a974 	.word	0x0802a974
 801d84c:	0802a9a0 	.word	0x0802a9a0
    }

    if (pcb->remote_port == tcphdr->src &&
 801d850:	69fb      	ldr	r3, [r7, #28]
 801d852:	8b1a      	ldrh	r2, [r3, #24]
 801d854:	4b72      	ldr	r3, [pc, #456]	@ (801da20 <tcp_input+0x49c>)
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	881b      	ldrh	r3, [r3, #0]
 801d85a:	b29b      	uxth	r3, r3
 801d85c:	429a      	cmp	r2, r3
 801d85e:	d13a      	bne.n	801d8d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801d860:	69fb      	ldr	r3, [r7, #28]
 801d862:	8ada      	ldrh	r2, [r3, #22]
 801d864:	4b6e      	ldr	r3, [pc, #440]	@ (801da20 <tcp_input+0x49c>)
 801d866:	681b      	ldr	r3, [r3, #0]
 801d868:	885b      	ldrh	r3, [r3, #2]
 801d86a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801d86c:	429a      	cmp	r2, r3
 801d86e:	d132      	bne.n	801d8d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d870:	69fb      	ldr	r3, [r7, #28]
 801d872:	685a      	ldr	r2, [r3, #4]
 801d874:	4b6b      	ldr	r3, [pc, #428]	@ (801da24 <tcp_input+0x4a0>)
 801d876:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801d878:	429a      	cmp	r2, r3
 801d87a:	d12c      	bne.n	801d8d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d87c:	69fb      	ldr	r3, [r7, #28]
 801d87e:	681a      	ldr	r2, [r3, #0]
 801d880:	4b68      	ldr	r3, [pc, #416]	@ (801da24 <tcp_input+0x4a0>)
 801d882:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d884:	429a      	cmp	r2, r3
 801d886:	d126      	bne.n	801d8d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801d888:	69fb      	ldr	r3, [r7, #28]
 801d88a:	68db      	ldr	r3, [r3, #12]
 801d88c:	69fa      	ldr	r2, [r7, #28]
 801d88e:	429a      	cmp	r2, r3
 801d890:	d106      	bne.n	801d8a0 <tcp_input+0x31c>
 801d892:	4b65      	ldr	r3, [pc, #404]	@ (801da28 <tcp_input+0x4a4>)
 801d894:	f240 120d 	movw	r2, #269	@ 0x10d
 801d898:	4964      	ldr	r1, [pc, #400]	@ (801da2c <tcp_input+0x4a8>)
 801d89a:	4865      	ldr	r0, [pc, #404]	@ (801da30 <tcp_input+0x4ac>)
 801d89c:	f009 ff66 	bl	802776c <iprintf>
      if (prev != NULL) {
 801d8a0:	69bb      	ldr	r3, [r7, #24]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d00a      	beq.n	801d8bc <tcp_input+0x338>
        prev->next = pcb->next;
 801d8a6:	69fb      	ldr	r3, [r7, #28]
 801d8a8:	68da      	ldr	r2, [r3, #12]
 801d8aa:	69bb      	ldr	r3, [r7, #24]
 801d8ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801d8ae:	4b61      	ldr	r3, [pc, #388]	@ (801da34 <tcp_input+0x4b0>)
 801d8b0:	681a      	ldr	r2, [r3, #0]
 801d8b2:	69fb      	ldr	r3, [r7, #28]
 801d8b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801d8b6:	4a5f      	ldr	r2, [pc, #380]	@ (801da34 <tcp_input+0x4b0>)
 801d8b8:	69fb      	ldr	r3, [r7, #28]
 801d8ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801d8bc:	69fb      	ldr	r3, [r7, #28]
 801d8be:	68db      	ldr	r3, [r3, #12]
 801d8c0:	69fa      	ldr	r2, [r7, #28]
 801d8c2:	429a      	cmp	r2, r3
 801d8c4:	d111      	bne.n	801d8ea <tcp_input+0x366>
 801d8c6:	4b58      	ldr	r3, [pc, #352]	@ (801da28 <tcp_input+0x4a4>)
 801d8c8:	f240 1215 	movw	r2, #277	@ 0x115
 801d8cc:	495a      	ldr	r1, [pc, #360]	@ (801da38 <tcp_input+0x4b4>)
 801d8ce:	4858      	ldr	r0, [pc, #352]	@ (801da30 <tcp_input+0x4ac>)
 801d8d0:	f009 ff4c 	bl	802776c <iprintf>
      break;
 801d8d4:	e009      	b.n	801d8ea <tcp_input+0x366>
    }
    prev = pcb;
 801d8d6:	69fb      	ldr	r3, [r7, #28]
 801d8d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d8da:	69fb      	ldr	r3, [r7, #28]
 801d8dc:	68db      	ldr	r3, [r3, #12]
 801d8de:	61fb      	str	r3, [r7, #28]
 801d8e0:	69fb      	ldr	r3, [r7, #28]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	f47f af5e 	bne.w	801d7a4 <tcp_input+0x220>
 801d8e8:	e000      	b.n	801d8ec <tcp_input+0x368>
      break;
 801d8ea:	bf00      	nop
  }

  if (pcb == NULL) {
 801d8ec:	69fb      	ldr	r3, [r7, #28]
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	f040 80aa 	bne.w	801da48 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d8f4:	4b51      	ldr	r3, [pc, #324]	@ (801da3c <tcp_input+0x4b8>)
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	61fb      	str	r3, [r7, #28]
 801d8fa:	e03f      	b.n	801d97c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d8fc:	69fb      	ldr	r3, [r7, #28]
 801d8fe:	7d1b      	ldrb	r3, [r3, #20]
 801d900:	2b0a      	cmp	r3, #10
 801d902:	d006      	beq.n	801d912 <tcp_input+0x38e>
 801d904:	4b48      	ldr	r3, [pc, #288]	@ (801da28 <tcp_input+0x4a4>)
 801d906:	f240 121f 	movw	r2, #287	@ 0x11f
 801d90a:	494d      	ldr	r1, [pc, #308]	@ (801da40 <tcp_input+0x4bc>)
 801d90c:	4848      	ldr	r0, [pc, #288]	@ (801da30 <tcp_input+0x4ac>)
 801d90e:	f009 ff2d 	bl	802776c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d912:	69fb      	ldr	r3, [r7, #28]
 801d914:	7a1b      	ldrb	r3, [r3, #8]
 801d916:	2b00      	cmp	r3, #0
 801d918:	d009      	beq.n	801d92e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d91a:	69fb      	ldr	r3, [r7, #28]
 801d91c:	7a1a      	ldrb	r2, [r3, #8]
 801d91e:	4b41      	ldr	r3, [pc, #260]	@ (801da24 <tcp_input+0x4a0>)
 801d920:	685b      	ldr	r3, [r3, #4]
 801d922:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d926:	3301      	adds	r3, #1
 801d928:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d92a:	429a      	cmp	r2, r3
 801d92c:	d122      	bne.n	801d974 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801d92e:	69fb      	ldr	r3, [r7, #28]
 801d930:	8b1a      	ldrh	r2, [r3, #24]
 801d932:	4b3b      	ldr	r3, [pc, #236]	@ (801da20 <tcp_input+0x49c>)
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	881b      	ldrh	r3, [r3, #0]
 801d938:	b29b      	uxth	r3, r3
 801d93a:	429a      	cmp	r2, r3
 801d93c:	d11b      	bne.n	801d976 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801d93e:	69fb      	ldr	r3, [r7, #28]
 801d940:	8ada      	ldrh	r2, [r3, #22]
 801d942:	4b37      	ldr	r3, [pc, #220]	@ (801da20 <tcp_input+0x49c>)
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	885b      	ldrh	r3, [r3, #2]
 801d948:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801d94a:	429a      	cmp	r2, r3
 801d94c:	d113      	bne.n	801d976 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d94e:	69fb      	ldr	r3, [r7, #28]
 801d950:	685a      	ldr	r2, [r3, #4]
 801d952:	4b34      	ldr	r3, [pc, #208]	@ (801da24 <tcp_input+0x4a0>)
 801d954:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801d956:	429a      	cmp	r2, r3
 801d958:	d10d      	bne.n	801d976 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d95a:	69fb      	ldr	r3, [r7, #28]
 801d95c:	681a      	ldr	r2, [r3, #0]
 801d95e:	4b31      	ldr	r3, [pc, #196]	@ (801da24 <tcp_input+0x4a0>)
 801d960:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d962:	429a      	cmp	r2, r3
 801d964:	d107      	bne.n	801d976 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801d966:	69f8      	ldr	r0, [r7, #28]
 801d968:	f000 fb56 	bl	801e018 <tcp_timewait_input>
        }
        pbuf_free(p);
 801d96c:	6878      	ldr	r0, [r7, #4]
 801d96e:	f7fd fcf1 	bl	801b354 <pbuf_free>
        return;
 801d972:	e1fd      	b.n	801dd70 <tcp_input+0x7ec>
        continue;
 801d974:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d976:	69fb      	ldr	r3, [r7, #28]
 801d978:	68db      	ldr	r3, [r3, #12]
 801d97a:	61fb      	str	r3, [r7, #28]
 801d97c:	69fb      	ldr	r3, [r7, #28]
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d1bc      	bne.n	801d8fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801d982:	2300      	movs	r3, #0
 801d984:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d986:	4b2f      	ldr	r3, [pc, #188]	@ (801da44 <tcp_input+0x4c0>)
 801d988:	681b      	ldr	r3, [r3, #0]
 801d98a:	617b      	str	r3, [r7, #20]
 801d98c:	e02a      	b.n	801d9e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d98e:	697b      	ldr	r3, [r7, #20]
 801d990:	7a1b      	ldrb	r3, [r3, #8]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d00c      	beq.n	801d9b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d996:	697b      	ldr	r3, [r7, #20]
 801d998:	7a1a      	ldrb	r2, [r3, #8]
 801d99a:	4b22      	ldr	r3, [pc, #136]	@ (801da24 <tcp_input+0x4a0>)
 801d99c:	685b      	ldr	r3, [r3, #4]
 801d99e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d9a2:	3301      	adds	r3, #1
 801d9a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d9a6:	429a      	cmp	r2, r3
 801d9a8:	d002      	beq.n	801d9b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801d9aa:	697b      	ldr	r3, [r7, #20]
 801d9ac:	61bb      	str	r3, [r7, #24]
        continue;
 801d9ae:	e016      	b.n	801d9de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801d9b0:	697b      	ldr	r3, [r7, #20]
 801d9b2:	8ada      	ldrh	r2, [r3, #22]
 801d9b4:	4b1a      	ldr	r3, [pc, #104]	@ (801da20 <tcp_input+0x49c>)
 801d9b6:	681b      	ldr	r3, [r3, #0]
 801d9b8:	885b      	ldrh	r3, [r3, #2]
 801d9ba:	b29b      	uxth	r3, r3
 801d9bc:	429a      	cmp	r2, r3
 801d9be:	d10c      	bne.n	801d9da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801d9c0:	697b      	ldr	r3, [r7, #20]
 801d9c2:	681a      	ldr	r2, [r3, #0]
 801d9c4:	4b17      	ldr	r3, [pc, #92]	@ (801da24 <tcp_input+0x4a0>)
 801d9c6:	695b      	ldr	r3, [r3, #20]
 801d9c8:	429a      	cmp	r2, r3
 801d9ca:	d00f      	beq.n	801d9ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801d9cc:	697b      	ldr	r3, [r7, #20]
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	d00d      	beq.n	801d9ee <tcp_input+0x46a>
 801d9d2:	697b      	ldr	r3, [r7, #20]
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d009      	beq.n	801d9ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801d9da:	697b      	ldr	r3, [r7, #20]
 801d9dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d9de:	697b      	ldr	r3, [r7, #20]
 801d9e0:	68db      	ldr	r3, [r3, #12]
 801d9e2:	617b      	str	r3, [r7, #20]
 801d9e4:	697b      	ldr	r3, [r7, #20]
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d1d1      	bne.n	801d98e <tcp_input+0x40a>
 801d9ea:	e000      	b.n	801d9ee <tcp_input+0x46a>
            break;
 801d9ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801d9ee:	697b      	ldr	r3, [r7, #20]
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d029      	beq.n	801da48 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801d9f4:	69bb      	ldr	r3, [r7, #24]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d00a      	beq.n	801da10 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801d9fa:	697b      	ldr	r3, [r7, #20]
 801d9fc:	68da      	ldr	r2, [r3, #12]
 801d9fe:	69bb      	ldr	r3, [r7, #24]
 801da00:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801da02:	4b10      	ldr	r3, [pc, #64]	@ (801da44 <tcp_input+0x4c0>)
 801da04:	681a      	ldr	r2, [r3, #0]
 801da06:	697b      	ldr	r3, [r7, #20]
 801da08:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801da0a:	4a0e      	ldr	r2, [pc, #56]	@ (801da44 <tcp_input+0x4c0>)
 801da0c:	697b      	ldr	r3, [r7, #20]
 801da0e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801da10:	6978      	ldr	r0, [r7, #20]
 801da12:	f000 fa03 	bl	801de1c <tcp_listen_input>
      }
      pbuf_free(p);
 801da16:	6878      	ldr	r0, [r7, #4]
 801da18:	f7fd fc9c 	bl	801b354 <pbuf_free>
      return;
 801da1c:	e1a8      	b.n	801dd70 <tcp_input+0x7ec>
 801da1e:	bf00      	nop
 801da20:	20011188 	.word	0x20011188
 801da24:	2000d9ec 	.word	0x2000d9ec
 801da28:	0802a89c 	.word	0x0802a89c
 801da2c:	0802a9c8 	.word	0x0802a9c8
 801da30:	0802a8e8 	.word	0x0802a8e8
 801da34:	2001116c 	.word	0x2001116c
 801da38:	0802a9f4 	.word	0x0802a9f4
 801da3c:	20011170 	.word	0x20011170
 801da40:	0802aa20 	.word	0x0802aa20
 801da44:	20011168 	.word	0x20011168
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801da48:	69fb      	ldr	r3, [r7, #28]
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	f000 8158 	beq.w	801dd00 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801da50:	4b95      	ldr	r3, [pc, #596]	@ (801dca8 <tcp_input+0x724>)
 801da52:	2200      	movs	r2, #0
 801da54:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	891a      	ldrh	r2, [r3, #8]
 801da5a:	4b93      	ldr	r3, [pc, #588]	@ (801dca8 <tcp_input+0x724>)
 801da5c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801da5e:	4a92      	ldr	r2, [pc, #584]	@ (801dca8 <tcp_input+0x724>)
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801da64:	4b91      	ldr	r3, [pc, #580]	@ (801dcac <tcp_input+0x728>)
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	4a8f      	ldr	r2, [pc, #572]	@ (801dca8 <tcp_input+0x724>)
 801da6a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801da6c:	4b90      	ldr	r3, [pc, #576]	@ (801dcb0 <tcp_input+0x72c>)
 801da6e:	2200      	movs	r2, #0
 801da70:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801da72:	4b90      	ldr	r3, [pc, #576]	@ (801dcb4 <tcp_input+0x730>)
 801da74:	2200      	movs	r2, #0
 801da76:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801da78:	4b8f      	ldr	r3, [pc, #572]	@ (801dcb8 <tcp_input+0x734>)
 801da7a:	2200      	movs	r2, #0
 801da7c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801da7e:	4b8f      	ldr	r3, [pc, #572]	@ (801dcbc <tcp_input+0x738>)
 801da80:	781b      	ldrb	r3, [r3, #0]
 801da82:	f003 0308 	and.w	r3, r3, #8
 801da86:	2b00      	cmp	r3, #0
 801da88:	d006      	beq.n	801da98 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	7b5b      	ldrb	r3, [r3, #13]
 801da8e:	f043 0301 	orr.w	r3, r3, #1
 801da92:	b2da      	uxtb	r2, r3
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801da98:	69fb      	ldr	r3, [r7, #28]
 801da9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801da9c:	2b00      	cmp	r3, #0
 801da9e:	d017      	beq.n	801dad0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801daa0:	69f8      	ldr	r0, [r7, #28]
 801daa2:	f7ff f85b 	bl	801cb5c <tcp_process_refused_data>
 801daa6:	4603      	mov	r3, r0
 801daa8:	f113 0f0d 	cmn.w	r3, #13
 801daac:	d007      	beq.n	801dabe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801daae:	69fb      	ldr	r3, [r7, #28]
 801dab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	d00c      	beq.n	801dad0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801dab6:	4b82      	ldr	r3, [pc, #520]	@ (801dcc0 <tcp_input+0x73c>)
 801dab8:	881b      	ldrh	r3, [r3, #0]
 801daba:	2b00      	cmp	r3, #0
 801dabc:	d008      	beq.n	801dad0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801dabe:	69fb      	ldr	r3, [r7, #28]
 801dac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	f040 80e3 	bne.w	801dc8e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801dac8:	69f8      	ldr	r0, [r7, #28]
 801daca:	f003 fdff 	bl	80216cc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801dace:	e0de      	b.n	801dc8e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801dad0:	4a7c      	ldr	r2, [pc, #496]	@ (801dcc4 <tcp_input+0x740>)
 801dad2:	69fb      	ldr	r3, [r7, #28]
 801dad4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801dad6:	69f8      	ldr	r0, [r7, #28]
 801dad8:	f000 fb18 	bl	801e10c <tcp_process>
 801dadc:	4603      	mov	r3, r0
 801dade:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801dae0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dae4:	f113 0f0d 	cmn.w	r3, #13
 801dae8:	f000 80d3 	beq.w	801dc92 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801daec:	4b71      	ldr	r3, [pc, #452]	@ (801dcb4 <tcp_input+0x730>)
 801daee:	781b      	ldrb	r3, [r3, #0]
 801daf0:	f003 0308 	and.w	r3, r3, #8
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d015      	beq.n	801db24 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801daf8:	69fb      	ldr	r3, [r7, #28]
 801dafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d008      	beq.n	801db14 <tcp_input+0x590>
 801db02:	69fb      	ldr	r3, [r7, #28]
 801db04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801db08:	69fa      	ldr	r2, [r7, #28]
 801db0a:	6912      	ldr	r2, [r2, #16]
 801db0c:	f06f 010d 	mvn.w	r1, #13
 801db10:	4610      	mov	r0, r2
 801db12:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801db14:	69f9      	ldr	r1, [r7, #28]
 801db16:	486c      	ldr	r0, [pc, #432]	@ (801dcc8 <tcp_input+0x744>)
 801db18:	f7ff fbbc 	bl	801d294 <tcp_pcb_remove>
        tcp_free(pcb);
 801db1c:	69f8      	ldr	r0, [r7, #28]
 801db1e:	f7fd fed5 	bl	801b8cc <tcp_free>
 801db22:	e0da      	b.n	801dcda <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801db24:	2300      	movs	r3, #0
 801db26:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801db28:	4b63      	ldr	r3, [pc, #396]	@ (801dcb8 <tcp_input+0x734>)
 801db2a:	881b      	ldrh	r3, [r3, #0]
 801db2c:	2b00      	cmp	r3, #0
 801db2e:	d01d      	beq.n	801db6c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801db30:	4b61      	ldr	r3, [pc, #388]	@ (801dcb8 <tcp_input+0x734>)
 801db32:	881b      	ldrh	r3, [r3, #0]
 801db34:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801db36:	69fb      	ldr	r3, [r7, #28]
 801db38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d00a      	beq.n	801db56 <tcp_input+0x5d2>
 801db40:	69fb      	ldr	r3, [r7, #28]
 801db42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801db46:	69fa      	ldr	r2, [r7, #28]
 801db48:	6910      	ldr	r0, [r2, #16]
 801db4a:	89fa      	ldrh	r2, [r7, #14]
 801db4c:	69f9      	ldr	r1, [r7, #28]
 801db4e:	4798      	blx	r3
 801db50:	4603      	mov	r3, r0
 801db52:	74fb      	strb	r3, [r7, #19]
 801db54:	e001      	b.n	801db5a <tcp_input+0x5d6>
 801db56:	2300      	movs	r3, #0
 801db58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801db5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801db5e:	f113 0f0d 	cmn.w	r3, #13
 801db62:	f000 8098 	beq.w	801dc96 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801db66:	4b54      	ldr	r3, [pc, #336]	@ (801dcb8 <tcp_input+0x734>)
 801db68:	2200      	movs	r2, #0
 801db6a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801db6c:	69f8      	ldr	r0, [r7, #28]
 801db6e:	f000 f915 	bl	801dd9c <tcp_input_delayed_close>
 801db72:	4603      	mov	r3, r0
 801db74:	2b00      	cmp	r3, #0
 801db76:	f040 8090 	bne.w	801dc9a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801db7a:	4b4d      	ldr	r3, [pc, #308]	@ (801dcb0 <tcp_input+0x72c>)
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d041      	beq.n	801dc06 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801db82:	69fb      	ldr	r3, [r7, #28]
 801db84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801db86:	2b00      	cmp	r3, #0
 801db88:	d006      	beq.n	801db98 <tcp_input+0x614>
 801db8a:	4b50      	ldr	r3, [pc, #320]	@ (801dccc <tcp_input+0x748>)
 801db8c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801db90:	494f      	ldr	r1, [pc, #316]	@ (801dcd0 <tcp_input+0x74c>)
 801db92:	4850      	ldr	r0, [pc, #320]	@ (801dcd4 <tcp_input+0x750>)
 801db94:	f009 fdea 	bl	802776c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801db98:	69fb      	ldr	r3, [r7, #28]
 801db9a:	8b5b      	ldrh	r3, [r3, #26]
 801db9c:	f003 0310 	and.w	r3, r3, #16
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d008      	beq.n	801dbb6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801dba4:	4b42      	ldr	r3, [pc, #264]	@ (801dcb0 <tcp_input+0x72c>)
 801dba6:	681b      	ldr	r3, [r3, #0]
 801dba8:	4618      	mov	r0, r3
 801dbaa:	f7fd fbd3 	bl	801b354 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801dbae:	69f8      	ldr	r0, [r7, #28]
 801dbb0:	f7fe f9d0 	bl	801bf54 <tcp_abort>
            goto aborted;
 801dbb4:	e091      	b.n	801dcda <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801dbb6:	69fb      	ldr	r3, [r7, #28]
 801dbb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	d00c      	beq.n	801dbda <tcp_input+0x656>
 801dbc0:	69fb      	ldr	r3, [r7, #28]
 801dbc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801dbc6:	69fb      	ldr	r3, [r7, #28]
 801dbc8:	6918      	ldr	r0, [r3, #16]
 801dbca:	4b39      	ldr	r3, [pc, #228]	@ (801dcb0 <tcp_input+0x72c>)
 801dbcc:	681a      	ldr	r2, [r3, #0]
 801dbce:	2300      	movs	r3, #0
 801dbd0:	69f9      	ldr	r1, [r7, #28]
 801dbd2:	47a0      	blx	r4
 801dbd4:	4603      	mov	r3, r0
 801dbd6:	74fb      	strb	r3, [r7, #19]
 801dbd8:	e008      	b.n	801dbec <tcp_input+0x668>
 801dbda:	4b35      	ldr	r3, [pc, #212]	@ (801dcb0 <tcp_input+0x72c>)
 801dbdc:	681a      	ldr	r2, [r3, #0]
 801dbde:	2300      	movs	r3, #0
 801dbe0:	69f9      	ldr	r1, [r7, #28]
 801dbe2:	2000      	movs	r0, #0
 801dbe4:	f7ff f890 	bl	801cd08 <tcp_recv_null>
 801dbe8:	4603      	mov	r3, r0
 801dbea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801dbec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dbf0:	f113 0f0d 	cmn.w	r3, #13
 801dbf4:	d053      	beq.n	801dc9e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801dbf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d003      	beq.n	801dc06 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801dbfe:	4b2c      	ldr	r3, [pc, #176]	@ (801dcb0 <tcp_input+0x72c>)
 801dc00:	681a      	ldr	r2, [r3, #0]
 801dc02:	69fb      	ldr	r3, [r7, #28]
 801dc04:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801dc06:	4b2b      	ldr	r3, [pc, #172]	@ (801dcb4 <tcp_input+0x730>)
 801dc08:	781b      	ldrb	r3, [r3, #0]
 801dc0a:	f003 0320 	and.w	r3, r3, #32
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d030      	beq.n	801dc74 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801dc12:	69fb      	ldr	r3, [r7, #28]
 801dc14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d009      	beq.n	801dc2e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801dc1a:	69fb      	ldr	r3, [r7, #28]
 801dc1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801dc1e:	7b5a      	ldrb	r2, [r3, #13]
 801dc20:	69fb      	ldr	r3, [r7, #28]
 801dc22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801dc24:	f042 0220 	orr.w	r2, r2, #32
 801dc28:	b2d2      	uxtb	r2, r2
 801dc2a:	735a      	strb	r2, [r3, #13]
 801dc2c:	e022      	b.n	801dc74 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801dc2e:	69fb      	ldr	r3, [r7, #28]
 801dc30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801dc32:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801dc36:	d005      	beq.n	801dc44 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801dc38:	69fb      	ldr	r3, [r7, #28]
 801dc3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801dc3c:	3301      	adds	r3, #1
 801dc3e:	b29a      	uxth	r2, r3
 801dc40:	69fb      	ldr	r3, [r7, #28]
 801dc42:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801dc44:	69fb      	ldr	r3, [r7, #28]
 801dc46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d00b      	beq.n	801dc66 <tcp_input+0x6e2>
 801dc4e:	69fb      	ldr	r3, [r7, #28]
 801dc50:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801dc54:	69fb      	ldr	r3, [r7, #28]
 801dc56:	6918      	ldr	r0, [r3, #16]
 801dc58:	2300      	movs	r3, #0
 801dc5a:	2200      	movs	r2, #0
 801dc5c:	69f9      	ldr	r1, [r7, #28]
 801dc5e:	47a0      	blx	r4
 801dc60:	4603      	mov	r3, r0
 801dc62:	74fb      	strb	r3, [r7, #19]
 801dc64:	e001      	b.n	801dc6a <tcp_input+0x6e6>
 801dc66:	2300      	movs	r3, #0
 801dc68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801dc6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dc6e:	f113 0f0d 	cmn.w	r3, #13
 801dc72:	d016      	beq.n	801dca2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801dc74:	4b13      	ldr	r3, [pc, #76]	@ (801dcc4 <tcp_input+0x740>)
 801dc76:	2200      	movs	r2, #0
 801dc78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801dc7a:	69f8      	ldr	r0, [r7, #28]
 801dc7c:	f000 f88e 	bl	801dd9c <tcp_input_delayed_close>
 801dc80:	4603      	mov	r3, r0
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	d128      	bne.n	801dcd8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801dc86:	69f8      	ldr	r0, [r7, #28]
 801dc88:	f002 ff1a 	bl	8020ac0 <tcp_output>
 801dc8c:	e025      	b.n	801dcda <tcp_input+0x756>
        goto aborted;
 801dc8e:	bf00      	nop
 801dc90:	e023      	b.n	801dcda <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801dc92:	bf00      	nop
 801dc94:	e021      	b.n	801dcda <tcp_input+0x756>
              goto aborted;
 801dc96:	bf00      	nop
 801dc98:	e01f      	b.n	801dcda <tcp_input+0x756>
          goto aborted;
 801dc9a:	bf00      	nop
 801dc9c:	e01d      	b.n	801dcda <tcp_input+0x756>
            goto aborted;
 801dc9e:	bf00      	nop
 801dca0:	e01b      	b.n	801dcda <tcp_input+0x756>
              goto aborted;
 801dca2:	bf00      	nop
 801dca4:	e019      	b.n	801dcda <tcp_input+0x756>
 801dca6:	bf00      	nop
 801dca8:	20011178 	.word	0x20011178
 801dcac:	20011188 	.word	0x20011188
 801dcb0:	200111a8 	.word	0x200111a8
 801dcb4:	200111a5 	.word	0x200111a5
 801dcb8:	200111a0 	.word	0x200111a0
 801dcbc:	200111a4 	.word	0x200111a4
 801dcc0:	200111a2 	.word	0x200111a2
 801dcc4:	200111ac 	.word	0x200111ac
 801dcc8:	2001116c 	.word	0x2001116c
 801dccc:	0802a89c 	.word	0x0802a89c
 801dcd0:	0802aa50 	.word	0x0802aa50
 801dcd4:	0802a8e8 	.word	0x0802a8e8
          goto aborted;
 801dcd8:	bf00      	nop
    tcp_input_pcb = NULL;
 801dcda:	4b27      	ldr	r3, [pc, #156]	@ (801dd78 <tcp_input+0x7f4>)
 801dcdc:	2200      	movs	r2, #0
 801dcde:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801dce0:	4b26      	ldr	r3, [pc, #152]	@ (801dd7c <tcp_input+0x7f8>)
 801dce2:	2200      	movs	r2, #0
 801dce4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801dce6:	4b26      	ldr	r3, [pc, #152]	@ (801dd80 <tcp_input+0x7fc>)
 801dce8:	685b      	ldr	r3, [r3, #4]
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d03f      	beq.n	801dd6e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801dcee:	4b24      	ldr	r3, [pc, #144]	@ (801dd80 <tcp_input+0x7fc>)
 801dcf0:	685b      	ldr	r3, [r3, #4]
 801dcf2:	4618      	mov	r0, r3
 801dcf4:	f7fd fb2e 	bl	801b354 <pbuf_free>
      inseg.p = NULL;
 801dcf8:	4b21      	ldr	r3, [pc, #132]	@ (801dd80 <tcp_input+0x7fc>)
 801dcfa:	2200      	movs	r2, #0
 801dcfc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801dcfe:	e036      	b.n	801dd6e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801dd00:	4b20      	ldr	r3, [pc, #128]	@ (801dd84 <tcp_input+0x800>)
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	899b      	ldrh	r3, [r3, #12]
 801dd06:	b29b      	uxth	r3, r3
 801dd08:	4618      	mov	r0, r3
 801dd0a:	f7fb fef3 	bl	8019af4 <lwip_htons>
 801dd0e:	4603      	mov	r3, r0
 801dd10:	b2db      	uxtb	r3, r3
 801dd12:	f003 0304 	and.w	r3, r3, #4
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d118      	bne.n	801dd4c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dd1a:	4b1b      	ldr	r3, [pc, #108]	@ (801dd88 <tcp_input+0x804>)
 801dd1c:	6819      	ldr	r1, [r3, #0]
 801dd1e:	4b1b      	ldr	r3, [pc, #108]	@ (801dd8c <tcp_input+0x808>)
 801dd20:	881b      	ldrh	r3, [r3, #0]
 801dd22:	461a      	mov	r2, r3
 801dd24:	4b1a      	ldr	r3, [pc, #104]	@ (801dd90 <tcp_input+0x80c>)
 801dd26:	681b      	ldr	r3, [r3, #0]
 801dd28:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801dd2a:	4b16      	ldr	r3, [pc, #88]	@ (801dd84 <tcp_input+0x800>)
 801dd2c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dd2e:	885b      	ldrh	r3, [r3, #2]
 801dd30:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801dd32:	4a14      	ldr	r2, [pc, #80]	@ (801dd84 <tcp_input+0x800>)
 801dd34:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dd36:	8812      	ldrh	r2, [r2, #0]
 801dd38:	b292      	uxth	r2, r2
 801dd3a:	9202      	str	r2, [sp, #8]
 801dd3c:	9301      	str	r3, [sp, #4]
 801dd3e:	4b15      	ldr	r3, [pc, #84]	@ (801dd94 <tcp_input+0x810>)
 801dd40:	9300      	str	r3, [sp, #0]
 801dd42:	4b15      	ldr	r3, [pc, #84]	@ (801dd98 <tcp_input+0x814>)
 801dd44:	4602      	mov	r2, r0
 801dd46:	2000      	movs	r0, #0
 801dd48:	f003 fc6e 	bl	8021628 <tcp_rst>
    pbuf_free(p);
 801dd4c:	6878      	ldr	r0, [r7, #4]
 801dd4e:	f7fd fb01 	bl	801b354 <pbuf_free>
  return;
 801dd52:	e00c      	b.n	801dd6e <tcp_input+0x7ea>
    goto dropped;
 801dd54:	bf00      	nop
 801dd56:	e006      	b.n	801dd66 <tcp_input+0x7e2>
    goto dropped;
 801dd58:	bf00      	nop
 801dd5a:	e004      	b.n	801dd66 <tcp_input+0x7e2>
    goto dropped;
 801dd5c:	bf00      	nop
 801dd5e:	e002      	b.n	801dd66 <tcp_input+0x7e2>
      goto dropped;
 801dd60:	bf00      	nop
 801dd62:	e000      	b.n	801dd66 <tcp_input+0x7e2>
      goto dropped;
 801dd64:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801dd66:	6878      	ldr	r0, [r7, #4]
 801dd68:	f7fd faf4 	bl	801b354 <pbuf_free>
 801dd6c:	e000      	b.n	801dd70 <tcp_input+0x7ec>
  return;
 801dd6e:	bf00      	nop
}
 801dd70:	3724      	adds	r7, #36	@ 0x24
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd90      	pop	{r4, r7, pc}
 801dd76:	bf00      	nop
 801dd78:	200111ac 	.word	0x200111ac
 801dd7c:	200111a8 	.word	0x200111a8
 801dd80:	20011178 	.word	0x20011178
 801dd84:	20011188 	.word	0x20011188
 801dd88:	2001119c 	.word	0x2001119c
 801dd8c:	200111a2 	.word	0x200111a2
 801dd90:	20011198 	.word	0x20011198
 801dd94:	2000d9fc 	.word	0x2000d9fc
 801dd98:	2000da00 	.word	0x2000da00

0801dd9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801dd9c:	b580      	push	{r7, lr}
 801dd9e:	b082      	sub	sp, #8
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d106      	bne.n	801ddb8 <tcp_input_delayed_close+0x1c>
 801ddaa:	4b17      	ldr	r3, [pc, #92]	@ (801de08 <tcp_input_delayed_close+0x6c>)
 801ddac:	f240 225a 	movw	r2, #602	@ 0x25a
 801ddb0:	4916      	ldr	r1, [pc, #88]	@ (801de0c <tcp_input_delayed_close+0x70>)
 801ddb2:	4817      	ldr	r0, [pc, #92]	@ (801de10 <tcp_input_delayed_close+0x74>)
 801ddb4:	f009 fcda 	bl	802776c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801ddb8:	4b16      	ldr	r3, [pc, #88]	@ (801de14 <tcp_input_delayed_close+0x78>)
 801ddba:	781b      	ldrb	r3, [r3, #0]
 801ddbc:	f003 0310 	and.w	r3, r3, #16
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d01c      	beq.n	801ddfe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	8b5b      	ldrh	r3, [r3, #26]
 801ddc8:	f003 0310 	and.w	r3, r3, #16
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d10d      	bne.n	801ddec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d008      	beq.n	801ddec <tcp_input_delayed_close+0x50>
 801ddda:	687b      	ldr	r3, [r7, #4]
 801dddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dde0:	687a      	ldr	r2, [r7, #4]
 801dde2:	6912      	ldr	r2, [r2, #16]
 801dde4:	f06f 010e 	mvn.w	r1, #14
 801dde8:	4610      	mov	r0, r2
 801ddea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ddec:	6879      	ldr	r1, [r7, #4]
 801ddee:	480a      	ldr	r0, [pc, #40]	@ (801de18 <tcp_input_delayed_close+0x7c>)
 801ddf0:	f7ff fa50 	bl	801d294 <tcp_pcb_remove>
    tcp_free(pcb);
 801ddf4:	6878      	ldr	r0, [r7, #4]
 801ddf6:	f7fd fd69 	bl	801b8cc <tcp_free>
    return 1;
 801ddfa:	2301      	movs	r3, #1
 801ddfc:	e000      	b.n	801de00 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801ddfe:	2300      	movs	r3, #0
}
 801de00:	4618      	mov	r0, r3
 801de02:	3708      	adds	r7, #8
 801de04:	46bd      	mov	sp, r7
 801de06:	bd80      	pop	{r7, pc}
 801de08:	0802a89c 	.word	0x0802a89c
 801de0c:	0802aa6c 	.word	0x0802aa6c
 801de10:	0802a8e8 	.word	0x0802a8e8
 801de14:	200111a5 	.word	0x200111a5
 801de18:	2001116c 	.word	0x2001116c

0801de1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801de1c:	b590      	push	{r4, r7, lr}
 801de1e:	b08b      	sub	sp, #44	@ 0x2c
 801de20:	af04      	add	r7, sp, #16
 801de22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801de24:	4b6f      	ldr	r3, [pc, #444]	@ (801dfe4 <tcp_listen_input+0x1c8>)
 801de26:	781b      	ldrb	r3, [r3, #0]
 801de28:	f003 0304 	and.w	r3, r3, #4
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	f040 80d2 	bne.w	801dfd6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	2b00      	cmp	r3, #0
 801de36:	d106      	bne.n	801de46 <tcp_listen_input+0x2a>
 801de38:	4b6b      	ldr	r3, [pc, #428]	@ (801dfe8 <tcp_listen_input+0x1cc>)
 801de3a:	f240 2281 	movw	r2, #641	@ 0x281
 801de3e:	496b      	ldr	r1, [pc, #428]	@ (801dfec <tcp_listen_input+0x1d0>)
 801de40:	486b      	ldr	r0, [pc, #428]	@ (801dff0 <tcp_listen_input+0x1d4>)
 801de42:	f009 fc93 	bl	802776c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801de46:	4b67      	ldr	r3, [pc, #412]	@ (801dfe4 <tcp_listen_input+0x1c8>)
 801de48:	781b      	ldrb	r3, [r3, #0]
 801de4a:	f003 0310 	and.w	r3, r3, #16
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d019      	beq.n	801de86 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801de52:	4b68      	ldr	r3, [pc, #416]	@ (801dff4 <tcp_listen_input+0x1d8>)
 801de54:	6819      	ldr	r1, [r3, #0]
 801de56:	4b68      	ldr	r3, [pc, #416]	@ (801dff8 <tcp_listen_input+0x1dc>)
 801de58:	881b      	ldrh	r3, [r3, #0]
 801de5a:	461a      	mov	r2, r3
 801de5c:	4b67      	ldr	r3, [pc, #412]	@ (801dffc <tcp_listen_input+0x1e0>)
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801de62:	4b67      	ldr	r3, [pc, #412]	@ (801e000 <tcp_listen_input+0x1e4>)
 801de64:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801de66:	885b      	ldrh	r3, [r3, #2]
 801de68:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801de6a:	4a65      	ldr	r2, [pc, #404]	@ (801e000 <tcp_listen_input+0x1e4>)
 801de6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801de6e:	8812      	ldrh	r2, [r2, #0]
 801de70:	b292      	uxth	r2, r2
 801de72:	9202      	str	r2, [sp, #8]
 801de74:	9301      	str	r3, [sp, #4]
 801de76:	4b63      	ldr	r3, [pc, #396]	@ (801e004 <tcp_listen_input+0x1e8>)
 801de78:	9300      	str	r3, [sp, #0]
 801de7a:	4b63      	ldr	r3, [pc, #396]	@ (801e008 <tcp_listen_input+0x1ec>)
 801de7c:	4602      	mov	r2, r0
 801de7e:	6878      	ldr	r0, [r7, #4]
 801de80:	f003 fbd2 	bl	8021628 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801de84:	e0a9      	b.n	801dfda <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801de86:	4b57      	ldr	r3, [pc, #348]	@ (801dfe4 <tcp_listen_input+0x1c8>)
 801de88:	781b      	ldrb	r3, [r3, #0]
 801de8a:	f003 0302 	and.w	r3, r3, #2
 801de8e:	2b00      	cmp	r3, #0
 801de90:	f000 80a3 	beq.w	801dfda <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	7d5b      	ldrb	r3, [r3, #21]
 801de98:	4618      	mov	r0, r3
 801de9a:	f7ff f859 	bl	801cf50 <tcp_alloc>
 801de9e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801dea0:	697b      	ldr	r3, [r7, #20]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d111      	bne.n	801deca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	699b      	ldr	r3, [r3, #24]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d00a      	beq.n	801dec4 <tcp_listen_input+0xa8>
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	699b      	ldr	r3, [r3, #24]
 801deb2:	687a      	ldr	r2, [r7, #4]
 801deb4:	6910      	ldr	r0, [r2, #16]
 801deb6:	f04f 32ff 	mov.w	r2, #4294967295
 801deba:	2100      	movs	r1, #0
 801debc:	4798      	blx	r3
 801debe:	4603      	mov	r3, r0
 801dec0:	73bb      	strb	r3, [r7, #14]
      return;
 801dec2:	e08b      	b.n	801dfdc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801dec4:	23f0      	movs	r3, #240	@ 0xf0
 801dec6:	73bb      	strb	r3, [r7, #14]
      return;
 801dec8:	e088      	b.n	801dfdc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801deca:	4b50      	ldr	r3, [pc, #320]	@ (801e00c <tcp_listen_input+0x1f0>)
 801decc:	695a      	ldr	r2, [r3, #20]
 801dece:	697b      	ldr	r3, [r7, #20]
 801ded0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801ded2:	4b4e      	ldr	r3, [pc, #312]	@ (801e00c <tcp_listen_input+0x1f0>)
 801ded4:	691a      	ldr	r2, [r3, #16]
 801ded6:	697b      	ldr	r3, [r7, #20]
 801ded8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801deda:	687b      	ldr	r3, [r7, #4]
 801dedc:	8ada      	ldrh	r2, [r3, #22]
 801dede:	697b      	ldr	r3, [r7, #20]
 801dee0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801dee2:	4b47      	ldr	r3, [pc, #284]	@ (801e000 <tcp_listen_input+0x1e4>)
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	881b      	ldrh	r3, [r3, #0]
 801dee8:	b29a      	uxth	r2, r3
 801deea:	697b      	ldr	r3, [r7, #20]
 801deec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801deee:	697b      	ldr	r3, [r7, #20]
 801def0:	2203      	movs	r2, #3
 801def2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801def4:	4b41      	ldr	r3, [pc, #260]	@ (801dffc <tcp_listen_input+0x1e0>)
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	1c5a      	adds	r2, r3, #1
 801defa:	697b      	ldr	r3, [r7, #20]
 801defc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801defe:	697b      	ldr	r3, [r7, #20]
 801df00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801df02:	697b      	ldr	r3, [r7, #20]
 801df04:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801df06:	6978      	ldr	r0, [r7, #20]
 801df08:	f7ff fa58 	bl	801d3bc <tcp_next_iss>
 801df0c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801df0e:	697b      	ldr	r3, [r7, #20]
 801df10:	693a      	ldr	r2, [r7, #16]
 801df12:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801df14:	697b      	ldr	r3, [r7, #20]
 801df16:	693a      	ldr	r2, [r7, #16]
 801df18:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801df1a:	697b      	ldr	r3, [r7, #20]
 801df1c:	693a      	ldr	r2, [r7, #16]
 801df1e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801df20:	697b      	ldr	r3, [r7, #20]
 801df22:	693a      	ldr	r2, [r7, #16]
 801df24:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801df26:	4b35      	ldr	r3, [pc, #212]	@ (801dffc <tcp_listen_input+0x1e0>)
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	1e5a      	subs	r2, r3, #1
 801df2c:	697b      	ldr	r3, [r7, #20]
 801df2e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	691a      	ldr	r2, [r3, #16]
 801df34:	697b      	ldr	r3, [r7, #20]
 801df36:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801df38:	697b      	ldr	r3, [r7, #20]
 801df3a:	687a      	ldr	r2, [r7, #4]
 801df3c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	7a5b      	ldrb	r3, [r3, #9]
 801df42:	f003 030c 	and.w	r3, r3, #12
 801df46:	b2da      	uxtb	r2, r3
 801df48:	697b      	ldr	r3, [r7, #20]
 801df4a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	7a1a      	ldrb	r2, [r3, #8]
 801df50:	697b      	ldr	r3, [r7, #20]
 801df52:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801df54:	4b2e      	ldr	r3, [pc, #184]	@ (801e010 <tcp_listen_input+0x1f4>)
 801df56:	681a      	ldr	r2, [r3, #0]
 801df58:	697b      	ldr	r3, [r7, #20]
 801df5a:	60da      	str	r2, [r3, #12]
 801df5c:	4a2c      	ldr	r2, [pc, #176]	@ (801e010 <tcp_listen_input+0x1f4>)
 801df5e:	697b      	ldr	r3, [r7, #20]
 801df60:	6013      	str	r3, [r2, #0]
 801df62:	f003 fd23 	bl	80219ac <tcp_timer_needed>
 801df66:	4b2b      	ldr	r3, [pc, #172]	@ (801e014 <tcp_listen_input+0x1f8>)
 801df68:	2201      	movs	r2, #1
 801df6a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801df6c:	6978      	ldr	r0, [r7, #20]
 801df6e:	f001 fd8b 	bl	801fa88 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801df72:	4b23      	ldr	r3, [pc, #140]	@ (801e000 <tcp_listen_input+0x1e4>)
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	89db      	ldrh	r3, [r3, #14]
 801df78:	b29a      	uxth	r2, r3
 801df7a:	697b      	ldr	r3, [r7, #20]
 801df7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801df80:	697b      	ldr	r3, [r7, #20]
 801df82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801df86:	697b      	ldr	r3, [r7, #20]
 801df88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801df8c:	697b      	ldr	r3, [r7, #20]
 801df8e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801df90:	697b      	ldr	r3, [r7, #20]
 801df92:	3304      	adds	r3, #4
 801df94:	4618      	mov	r0, r3
 801df96:	f007 fb47 	bl	8025628 <ip4_route>
 801df9a:	4601      	mov	r1, r0
 801df9c:	697b      	ldr	r3, [r7, #20]
 801df9e:	3304      	adds	r3, #4
 801dfa0:	461a      	mov	r2, r3
 801dfa2:	4620      	mov	r0, r4
 801dfa4:	f7ff fa30 	bl	801d408 <tcp_eff_send_mss_netif>
 801dfa8:	4603      	mov	r3, r0
 801dfaa:	461a      	mov	r2, r3
 801dfac:	697b      	ldr	r3, [r7, #20]
 801dfae:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801dfb0:	2112      	movs	r1, #18
 801dfb2:	6978      	ldr	r0, [r7, #20]
 801dfb4:	f002 fc96 	bl	80208e4 <tcp_enqueue_flags>
 801dfb8:	4603      	mov	r3, r0
 801dfba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801dfbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d004      	beq.n	801dfce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801dfc4:	2100      	movs	r1, #0
 801dfc6:	6978      	ldr	r0, [r7, #20]
 801dfc8:	f7fd ff06 	bl	801bdd8 <tcp_abandon>
      return;
 801dfcc:	e006      	b.n	801dfdc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801dfce:	6978      	ldr	r0, [r7, #20]
 801dfd0:	f002 fd76 	bl	8020ac0 <tcp_output>
  return;
 801dfd4:	e001      	b.n	801dfda <tcp_listen_input+0x1be>
    return;
 801dfd6:	bf00      	nop
 801dfd8:	e000      	b.n	801dfdc <tcp_listen_input+0x1c0>
  return;
 801dfda:	bf00      	nop
}
 801dfdc:	371c      	adds	r7, #28
 801dfde:	46bd      	mov	sp, r7
 801dfe0:	bd90      	pop	{r4, r7, pc}
 801dfe2:	bf00      	nop
 801dfe4:	200111a4 	.word	0x200111a4
 801dfe8:	0802a89c 	.word	0x0802a89c
 801dfec:	0802aa94 	.word	0x0802aa94
 801dff0:	0802a8e8 	.word	0x0802a8e8
 801dff4:	2001119c 	.word	0x2001119c
 801dff8:	200111a2 	.word	0x200111a2
 801dffc:	20011198 	.word	0x20011198
 801e000:	20011188 	.word	0x20011188
 801e004:	2000d9fc 	.word	0x2000d9fc
 801e008:	2000da00 	.word	0x2000da00
 801e00c:	2000d9ec 	.word	0x2000d9ec
 801e010:	2001116c 	.word	0x2001116c
 801e014:	20011174 	.word	0x20011174

0801e018 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801e018:	b580      	push	{r7, lr}
 801e01a:	b086      	sub	sp, #24
 801e01c:	af04      	add	r7, sp, #16
 801e01e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801e020:	4b2f      	ldr	r3, [pc, #188]	@ (801e0e0 <tcp_timewait_input+0xc8>)
 801e022:	781b      	ldrb	r3, [r3, #0]
 801e024:	f003 0304 	and.w	r3, r3, #4
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d153      	bne.n	801e0d4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d106      	bne.n	801e040 <tcp_timewait_input+0x28>
 801e032:	4b2c      	ldr	r3, [pc, #176]	@ (801e0e4 <tcp_timewait_input+0xcc>)
 801e034:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801e038:	492b      	ldr	r1, [pc, #172]	@ (801e0e8 <tcp_timewait_input+0xd0>)
 801e03a:	482c      	ldr	r0, [pc, #176]	@ (801e0ec <tcp_timewait_input+0xd4>)
 801e03c:	f009 fb96 	bl	802776c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801e040:	4b27      	ldr	r3, [pc, #156]	@ (801e0e0 <tcp_timewait_input+0xc8>)
 801e042:	781b      	ldrb	r3, [r3, #0]
 801e044:	f003 0302 	and.w	r3, r3, #2
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d02a      	beq.n	801e0a2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801e04c:	4b28      	ldr	r3, [pc, #160]	@ (801e0f0 <tcp_timewait_input+0xd8>)
 801e04e:	681a      	ldr	r2, [r3, #0]
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e054:	1ad3      	subs	r3, r2, r3
 801e056:	2b00      	cmp	r3, #0
 801e058:	db2d      	blt.n	801e0b6 <tcp_timewait_input+0x9e>
 801e05a:	4b25      	ldr	r3, [pc, #148]	@ (801e0f0 <tcp_timewait_input+0xd8>)
 801e05c:	681a      	ldr	r2, [r3, #0]
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e062:	6879      	ldr	r1, [r7, #4]
 801e064:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e066:	440b      	add	r3, r1
 801e068:	1ad3      	subs	r3, r2, r3
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	dc23      	bgt.n	801e0b6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e06e:	4b21      	ldr	r3, [pc, #132]	@ (801e0f4 <tcp_timewait_input+0xdc>)
 801e070:	6819      	ldr	r1, [r3, #0]
 801e072:	4b21      	ldr	r3, [pc, #132]	@ (801e0f8 <tcp_timewait_input+0xe0>)
 801e074:	881b      	ldrh	r3, [r3, #0]
 801e076:	461a      	mov	r2, r3
 801e078:	4b1d      	ldr	r3, [pc, #116]	@ (801e0f0 <tcp_timewait_input+0xd8>)
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e07e:	4b1f      	ldr	r3, [pc, #124]	@ (801e0fc <tcp_timewait_input+0xe4>)
 801e080:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e082:	885b      	ldrh	r3, [r3, #2]
 801e084:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e086:	4a1d      	ldr	r2, [pc, #116]	@ (801e0fc <tcp_timewait_input+0xe4>)
 801e088:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e08a:	8812      	ldrh	r2, [r2, #0]
 801e08c:	b292      	uxth	r2, r2
 801e08e:	9202      	str	r2, [sp, #8]
 801e090:	9301      	str	r3, [sp, #4]
 801e092:	4b1b      	ldr	r3, [pc, #108]	@ (801e100 <tcp_timewait_input+0xe8>)
 801e094:	9300      	str	r3, [sp, #0]
 801e096:	4b1b      	ldr	r3, [pc, #108]	@ (801e104 <tcp_timewait_input+0xec>)
 801e098:	4602      	mov	r2, r0
 801e09a:	6878      	ldr	r0, [r7, #4]
 801e09c:	f003 fac4 	bl	8021628 <tcp_rst>
      return;
 801e0a0:	e01b      	b.n	801e0da <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801e0a2:	4b0f      	ldr	r3, [pc, #60]	@ (801e0e0 <tcp_timewait_input+0xc8>)
 801e0a4:	781b      	ldrb	r3, [r3, #0]
 801e0a6:	f003 0301 	and.w	r3, r3, #1
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d003      	beq.n	801e0b6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801e0ae:	4b16      	ldr	r3, [pc, #88]	@ (801e108 <tcp_timewait_input+0xf0>)
 801e0b0:	681a      	ldr	r2, [r3, #0]
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801e0b6:	4b10      	ldr	r3, [pc, #64]	@ (801e0f8 <tcp_timewait_input+0xe0>)
 801e0b8:	881b      	ldrh	r3, [r3, #0]
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d00c      	beq.n	801e0d8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	8b5b      	ldrh	r3, [r3, #26]
 801e0c2:	f043 0302 	orr.w	r3, r3, #2
 801e0c6:	b29a      	uxth	r2, r3
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801e0cc:	6878      	ldr	r0, [r7, #4]
 801e0ce:	f002 fcf7 	bl	8020ac0 <tcp_output>
  }
  return;
 801e0d2:	e001      	b.n	801e0d8 <tcp_timewait_input+0xc0>
    return;
 801e0d4:	bf00      	nop
 801e0d6:	e000      	b.n	801e0da <tcp_timewait_input+0xc2>
  return;
 801e0d8:	bf00      	nop
}
 801e0da:	3708      	adds	r7, #8
 801e0dc:	46bd      	mov	sp, r7
 801e0de:	bd80      	pop	{r7, pc}
 801e0e0:	200111a4 	.word	0x200111a4
 801e0e4:	0802a89c 	.word	0x0802a89c
 801e0e8:	0802aab4 	.word	0x0802aab4
 801e0ec:	0802a8e8 	.word	0x0802a8e8
 801e0f0:	20011198 	.word	0x20011198
 801e0f4:	2001119c 	.word	0x2001119c
 801e0f8:	200111a2 	.word	0x200111a2
 801e0fc:	20011188 	.word	0x20011188
 801e100:	2000d9fc 	.word	0x2000d9fc
 801e104:	2000da00 	.word	0x2000da00
 801e108:	20011160 	.word	0x20011160

0801e10c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801e10c:	b590      	push	{r4, r7, lr}
 801e10e:	b08d      	sub	sp, #52	@ 0x34
 801e110:	af04      	add	r7, sp, #16
 801e112:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801e114:	2300      	movs	r3, #0
 801e116:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801e118:	2300      	movs	r3, #0
 801e11a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d106      	bne.n	801e130 <tcp_process+0x24>
 801e122:	4b9d      	ldr	r3, [pc, #628]	@ (801e398 <tcp_process+0x28c>)
 801e124:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801e128:	499c      	ldr	r1, [pc, #624]	@ (801e39c <tcp_process+0x290>)
 801e12a:	489d      	ldr	r0, [pc, #628]	@ (801e3a0 <tcp_process+0x294>)
 801e12c:	f009 fb1e 	bl	802776c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801e130:	4b9c      	ldr	r3, [pc, #624]	@ (801e3a4 <tcp_process+0x298>)
 801e132:	781b      	ldrb	r3, [r3, #0]
 801e134:	f003 0304 	and.w	r3, r3, #4
 801e138:	2b00      	cmp	r3, #0
 801e13a:	d04e      	beq.n	801e1da <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	7d1b      	ldrb	r3, [r3, #20]
 801e140:	2b02      	cmp	r3, #2
 801e142:	d108      	bne.n	801e156 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e148:	4b97      	ldr	r3, [pc, #604]	@ (801e3a8 <tcp_process+0x29c>)
 801e14a:	681b      	ldr	r3, [r3, #0]
 801e14c:	429a      	cmp	r2, r3
 801e14e:	d123      	bne.n	801e198 <tcp_process+0x8c>
        acceptable = 1;
 801e150:	2301      	movs	r3, #1
 801e152:	76fb      	strb	r3, [r7, #27]
 801e154:	e020      	b.n	801e198 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e15a:	4b94      	ldr	r3, [pc, #592]	@ (801e3ac <tcp_process+0x2a0>)
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	429a      	cmp	r2, r3
 801e160:	d102      	bne.n	801e168 <tcp_process+0x5c>
        acceptable = 1;
 801e162:	2301      	movs	r3, #1
 801e164:	76fb      	strb	r3, [r7, #27]
 801e166:	e017      	b.n	801e198 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e168:	4b90      	ldr	r3, [pc, #576]	@ (801e3ac <tcp_process+0x2a0>)
 801e16a:	681a      	ldr	r2, [r3, #0]
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e170:	1ad3      	subs	r3, r2, r3
 801e172:	2b00      	cmp	r3, #0
 801e174:	db10      	blt.n	801e198 <tcp_process+0x8c>
 801e176:	4b8d      	ldr	r3, [pc, #564]	@ (801e3ac <tcp_process+0x2a0>)
 801e178:	681a      	ldr	r2, [r3, #0]
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e17e:	6879      	ldr	r1, [r7, #4]
 801e180:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801e182:	440b      	add	r3, r1
 801e184:	1ad3      	subs	r3, r2, r3
 801e186:	2b00      	cmp	r3, #0
 801e188:	dc06      	bgt.n	801e198 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801e18a:	687b      	ldr	r3, [r7, #4]
 801e18c:	8b5b      	ldrh	r3, [r3, #26]
 801e18e:	f043 0302 	orr.w	r3, r3, #2
 801e192:	b29a      	uxth	r2, r3
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801e198:	7efb      	ldrb	r3, [r7, #27]
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d01b      	beq.n	801e1d6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	7d1b      	ldrb	r3, [r3, #20]
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	d106      	bne.n	801e1b4 <tcp_process+0xa8>
 801e1a6:	4b7c      	ldr	r3, [pc, #496]	@ (801e398 <tcp_process+0x28c>)
 801e1a8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801e1ac:	4980      	ldr	r1, [pc, #512]	@ (801e3b0 <tcp_process+0x2a4>)
 801e1ae:	487c      	ldr	r0, [pc, #496]	@ (801e3a0 <tcp_process+0x294>)
 801e1b0:	f009 fadc 	bl	802776c <iprintf>
      recv_flags |= TF_RESET;
 801e1b4:	4b7f      	ldr	r3, [pc, #508]	@ (801e3b4 <tcp_process+0x2a8>)
 801e1b6:	781b      	ldrb	r3, [r3, #0]
 801e1b8:	f043 0308 	orr.w	r3, r3, #8
 801e1bc:	b2da      	uxtb	r2, r3
 801e1be:	4b7d      	ldr	r3, [pc, #500]	@ (801e3b4 <tcp_process+0x2a8>)
 801e1c0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	8b5b      	ldrh	r3, [r3, #26]
 801e1c6:	f023 0301 	bic.w	r3, r3, #1
 801e1ca:	b29a      	uxth	r2, r3
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801e1d0:	f06f 030d 	mvn.w	r3, #13
 801e1d4:	e37a      	b.n	801e8cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	e378      	b.n	801e8cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801e1da:	4b72      	ldr	r3, [pc, #456]	@ (801e3a4 <tcp_process+0x298>)
 801e1dc:	781b      	ldrb	r3, [r3, #0]
 801e1de:	f003 0302 	and.w	r3, r3, #2
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d010      	beq.n	801e208 <tcp_process+0xfc>
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	7d1b      	ldrb	r3, [r3, #20]
 801e1ea:	2b02      	cmp	r3, #2
 801e1ec:	d00c      	beq.n	801e208 <tcp_process+0xfc>
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	7d1b      	ldrb	r3, [r3, #20]
 801e1f2:	2b03      	cmp	r3, #3
 801e1f4:	d008      	beq.n	801e208 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	8b5b      	ldrh	r3, [r3, #26]
 801e1fa:	f043 0302 	orr.w	r3, r3, #2
 801e1fe:	b29a      	uxth	r2, r3
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801e204:	2300      	movs	r3, #0
 801e206:	e361      	b.n	801e8cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	8b5b      	ldrh	r3, [r3, #26]
 801e20c:	f003 0310 	and.w	r3, r3, #16
 801e210:	2b00      	cmp	r3, #0
 801e212:	d103      	bne.n	801e21c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801e214:	4b68      	ldr	r3, [pc, #416]	@ (801e3b8 <tcp_process+0x2ac>)
 801e216:	681a      	ldr	r2, [r3, #0]
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801e21c:	687b      	ldr	r3, [r7, #4]
 801e21e:	2200      	movs	r2, #0
 801e220:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	2200      	movs	r2, #0
 801e228:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801e22c:	6878      	ldr	r0, [r7, #4]
 801e22e:	f001 fc2b 	bl	801fa88 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	7d1b      	ldrb	r3, [r3, #20]
 801e236:	3b02      	subs	r3, #2
 801e238:	2b07      	cmp	r3, #7
 801e23a:	f200 8337 	bhi.w	801e8ac <tcp_process+0x7a0>
 801e23e:	a201      	add	r2, pc, #4	@ (adr r2, 801e244 <tcp_process+0x138>)
 801e240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e244:	0801e265 	.word	0x0801e265
 801e248:	0801e495 	.word	0x0801e495
 801e24c:	0801e60d 	.word	0x0801e60d
 801e250:	0801e637 	.word	0x0801e637
 801e254:	0801e75b 	.word	0x0801e75b
 801e258:	0801e60d 	.word	0x0801e60d
 801e25c:	0801e7e7 	.word	0x0801e7e7
 801e260:	0801e877 	.word	0x0801e877
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801e264:	4b4f      	ldr	r3, [pc, #316]	@ (801e3a4 <tcp_process+0x298>)
 801e266:	781b      	ldrb	r3, [r3, #0]
 801e268:	f003 0310 	and.w	r3, r3, #16
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	f000 80e4 	beq.w	801e43a <tcp_process+0x32e>
 801e272:	4b4c      	ldr	r3, [pc, #304]	@ (801e3a4 <tcp_process+0x298>)
 801e274:	781b      	ldrb	r3, [r3, #0]
 801e276:	f003 0302 	and.w	r3, r3, #2
 801e27a:	2b00      	cmp	r3, #0
 801e27c:	f000 80dd 	beq.w	801e43a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e284:	1c5a      	adds	r2, r3, #1
 801e286:	4b48      	ldr	r3, [pc, #288]	@ (801e3a8 <tcp_process+0x29c>)
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	429a      	cmp	r2, r3
 801e28c:	f040 80d5 	bne.w	801e43a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801e290:	4b46      	ldr	r3, [pc, #280]	@ (801e3ac <tcp_process+0x2a0>)
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	1c5a      	adds	r2, r3, #1
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801e2a2:	4b41      	ldr	r3, [pc, #260]	@ (801e3a8 <tcp_process+0x29c>)
 801e2a4:	681a      	ldr	r2, [r3, #0]
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801e2aa:	4b44      	ldr	r3, [pc, #272]	@ (801e3bc <tcp_process+0x2b0>)
 801e2ac:	681b      	ldr	r3, [r3, #0]
 801e2ae:	89db      	ldrh	r3, [r3, #14]
 801e2b0:	b29a      	uxth	r2, r3
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801e2c4:	4b39      	ldr	r3, [pc, #228]	@ (801e3ac <tcp_process+0x2a0>)
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	1e5a      	subs	r2, r3, #1
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	2204      	movs	r2, #4
 801e2d2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	3304      	adds	r3, #4
 801e2dc:	4618      	mov	r0, r3
 801e2de:	f007 f9a3 	bl	8025628 <ip4_route>
 801e2e2:	4601      	mov	r1, r0
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	3304      	adds	r3, #4
 801e2e8:	461a      	mov	r2, r3
 801e2ea:	4620      	mov	r0, r4
 801e2ec:	f7ff f88c 	bl	801d408 <tcp_eff_send_mss_netif>
 801e2f0:	4603      	mov	r3, r0
 801e2f2:	461a      	mov	r2, r3
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e2fc:	009a      	lsls	r2, r3, #2
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e302:	005b      	lsls	r3, r3, #1
 801e304:	f241 111c 	movw	r1, #4380	@ 0x111c
 801e308:	428b      	cmp	r3, r1
 801e30a:	bf38      	it	cc
 801e30c:	460b      	movcc	r3, r1
 801e30e:	429a      	cmp	r2, r3
 801e310:	d204      	bcs.n	801e31c <tcp_process+0x210>
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e316:	009b      	lsls	r3, r3, #2
 801e318:	b29b      	uxth	r3, r3
 801e31a:	e00d      	b.n	801e338 <tcp_process+0x22c>
 801e31c:	687b      	ldr	r3, [r7, #4]
 801e31e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e320:	005b      	lsls	r3, r3, #1
 801e322:	f241 121c 	movw	r2, #4380	@ 0x111c
 801e326:	4293      	cmp	r3, r2
 801e328:	d904      	bls.n	801e334 <tcp_process+0x228>
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e32e:	005b      	lsls	r3, r3, #1
 801e330:	b29b      	uxth	r3, r3
 801e332:	e001      	b.n	801e338 <tcp_process+0x22c>
 801e334:	f241 131c 	movw	r3, #4380	@ 0x111c
 801e338:	687a      	ldr	r2, [r7, #4]
 801e33a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e344:	2b00      	cmp	r3, #0
 801e346:	d106      	bne.n	801e356 <tcp_process+0x24a>
 801e348:	4b13      	ldr	r3, [pc, #76]	@ (801e398 <tcp_process+0x28c>)
 801e34a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801e34e:	491c      	ldr	r1, [pc, #112]	@ (801e3c0 <tcp_process+0x2b4>)
 801e350:	4813      	ldr	r0, [pc, #76]	@ (801e3a0 <tcp_process+0x294>)
 801e352:	f009 fa0b 	bl	802776c <iprintf>
        --pcb->snd_queuelen;
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801e35c:	3b01      	subs	r3, #1
 801e35e:	b29a      	uxth	r2, r3
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e36a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801e36c:	69fb      	ldr	r3, [r7, #28]
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d12a      	bne.n	801e3c8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e376:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e378:	69fb      	ldr	r3, [r7, #28]
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	d106      	bne.n	801e38c <tcp_process+0x280>
 801e37e:	4b06      	ldr	r3, [pc, #24]	@ (801e398 <tcp_process+0x28c>)
 801e380:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801e384:	490f      	ldr	r1, [pc, #60]	@ (801e3c4 <tcp_process+0x2b8>)
 801e386:	4806      	ldr	r0, [pc, #24]	@ (801e3a0 <tcp_process+0x294>)
 801e388:	f009 f9f0 	bl	802776c <iprintf>
          pcb->unsent = rseg->next;
 801e38c:	69fb      	ldr	r3, [r7, #28]
 801e38e:	681a      	ldr	r2, [r3, #0]
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	66da      	str	r2, [r3, #108]	@ 0x6c
 801e394:	e01c      	b.n	801e3d0 <tcp_process+0x2c4>
 801e396:	bf00      	nop
 801e398:	0802a89c 	.word	0x0802a89c
 801e39c:	0802aad4 	.word	0x0802aad4
 801e3a0:	0802a8e8 	.word	0x0802a8e8
 801e3a4:	200111a4 	.word	0x200111a4
 801e3a8:	2001119c 	.word	0x2001119c
 801e3ac:	20011198 	.word	0x20011198
 801e3b0:	0802aaf0 	.word	0x0802aaf0
 801e3b4:	200111a5 	.word	0x200111a5
 801e3b8:	20011160 	.word	0x20011160
 801e3bc:	20011188 	.word	0x20011188
 801e3c0:	0802ab10 	.word	0x0802ab10
 801e3c4:	0802ab28 	.word	0x0802ab28
        } else {
          pcb->unacked = rseg->next;
 801e3c8:	69fb      	ldr	r3, [r7, #28]
 801e3ca:	681a      	ldr	r2, [r3, #0]
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 801e3d0:	69f8      	ldr	r0, [r7, #28]
 801e3d2:	f7fe fc54 	bl	801cc7e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801e3d6:	687b      	ldr	r3, [r7, #4]
 801e3d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d104      	bne.n	801e3e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e3e4:	861a      	strh	r2, [r3, #48]	@ 0x30
 801e3e6:	e006      	b.n	801e3f6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	2200      	movs	r2, #0
 801e3ec:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801e3ee:	687b      	ldr	r3, [r7, #4]
 801e3f0:	2200      	movs	r2, #0
 801e3f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d00a      	beq.n	801e416 <tcp_process+0x30a>
 801e400:	687b      	ldr	r3, [r7, #4]
 801e402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e406:	687a      	ldr	r2, [r7, #4]
 801e408:	6910      	ldr	r0, [r2, #16]
 801e40a:	2200      	movs	r2, #0
 801e40c:	6879      	ldr	r1, [r7, #4]
 801e40e:	4798      	blx	r3
 801e410:	4603      	mov	r3, r0
 801e412:	76bb      	strb	r3, [r7, #26]
 801e414:	e001      	b.n	801e41a <tcp_process+0x30e>
 801e416:	2300      	movs	r3, #0
 801e418:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801e41a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801e41e:	f113 0f0d 	cmn.w	r3, #13
 801e422:	d102      	bne.n	801e42a <tcp_process+0x31e>
          return ERR_ABRT;
 801e424:	f06f 030c 	mvn.w	r3, #12
 801e428:	e250      	b.n	801e8cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	8b5b      	ldrh	r3, [r3, #26]
 801e42e:	f043 0302 	orr.w	r3, r3, #2
 801e432:	b29a      	uxth	r2, r3
 801e434:	687b      	ldr	r3, [r7, #4]
 801e436:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801e438:	e23a      	b.n	801e8b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801e43a:	4b98      	ldr	r3, [pc, #608]	@ (801e69c <tcp_process+0x590>)
 801e43c:	781b      	ldrb	r3, [r3, #0]
 801e43e:	f003 0310 	and.w	r3, r3, #16
 801e442:	2b00      	cmp	r3, #0
 801e444:	f000 8234 	beq.w	801e8b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e448:	4b95      	ldr	r3, [pc, #596]	@ (801e6a0 <tcp_process+0x594>)
 801e44a:	6819      	ldr	r1, [r3, #0]
 801e44c:	4b95      	ldr	r3, [pc, #596]	@ (801e6a4 <tcp_process+0x598>)
 801e44e:	881b      	ldrh	r3, [r3, #0]
 801e450:	461a      	mov	r2, r3
 801e452:	4b95      	ldr	r3, [pc, #596]	@ (801e6a8 <tcp_process+0x59c>)
 801e454:	681b      	ldr	r3, [r3, #0]
 801e456:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e458:	4b94      	ldr	r3, [pc, #592]	@ (801e6ac <tcp_process+0x5a0>)
 801e45a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e45c:	885b      	ldrh	r3, [r3, #2]
 801e45e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e460:	4a92      	ldr	r2, [pc, #584]	@ (801e6ac <tcp_process+0x5a0>)
 801e462:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e464:	8812      	ldrh	r2, [r2, #0]
 801e466:	b292      	uxth	r2, r2
 801e468:	9202      	str	r2, [sp, #8]
 801e46a:	9301      	str	r3, [sp, #4]
 801e46c:	4b90      	ldr	r3, [pc, #576]	@ (801e6b0 <tcp_process+0x5a4>)
 801e46e:	9300      	str	r3, [sp, #0]
 801e470:	4b90      	ldr	r3, [pc, #576]	@ (801e6b4 <tcp_process+0x5a8>)
 801e472:	4602      	mov	r2, r0
 801e474:	6878      	ldr	r0, [r7, #4]
 801e476:	f003 f8d7 	bl	8021628 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801e480:	2b05      	cmp	r3, #5
 801e482:	f200 8215 	bhi.w	801e8b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	2200      	movs	r2, #0
 801e48a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801e48c:	6878      	ldr	r0, [r7, #4]
 801e48e:	f002 fea3 	bl	80211d8 <tcp_rexmit_rto>
      break;
 801e492:	e20d      	b.n	801e8b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801e494:	4b81      	ldr	r3, [pc, #516]	@ (801e69c <tcp_process+0x590>)
 801e496:	781b      	ldrb	r3, [r3, #0]
 801e498:	f003 0310 	and.w	r3, r3, #16
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	f000 80a1 	beq.w	801e5e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e4a2:	4b7f      	ldr	r3, [pc, #508]	@ (801e6a0 <tcp_process+0x594>)
 801e4a4:	681a      	ldr	r2, [r3, #0]
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e4aa:	1ad3      	subs	r3, r2, r3
 801e4ac:	3b01      	subs	r3, #1
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	db7e      	blt.n	801e5b0 <tcp_process+0x4a4>
 801e4b2:	4b7b      	ldr	r3, [pc, #492]	@ (801e6a0 <tcp_process+0x594>)
 801e4b4:	681a      	ldr	r2, [r3, #0]
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e4ba:	1ad3      	subs	r3, r2, r3
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	dc77      	bgt.n	801e5b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	2204      	movs	r2, #4
 801e4c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d102      	bne.n	801e4d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801e4ce:	23fa      	movs	r3, #250	@ 0xfa
 801e4d0:	76bb      	strb	r3, [r7, #26]
 801e4d2:	e01d      	b.n	801e510 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e4d4:	687b      	ldr	r3, [r7, #4]
 801e4d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e4d8:	699b      	ldr	r3, [r3, #24]
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	d106      	bne.n	801e4ec <tcp_process+0x3e0>
 801e4de:	4b76      	ldr	r3, [pc, #472]	@ (801e6b8 <tcp_process+0x5ac>)
 801e4e0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801e4e4:	4975      	ldr	r1, [pc, #468]	@ (801e6bc <tcp_process+0x5b0>)
 801e4e6:	4876      	ldr	r0, [pc, #472]	@ (801e6c0 <tcp_process+0x5b4>)
 801e4e8:	f009 f940 	bl	802776c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e4f0:	699b      	ldr	r3, [r3, #24]
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d00a      	beq.n	801e50c <tcp_process+0x400>
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e4fa:	699b      	ldr	r3, [r3, #24]
 801e4fc:	687a      	ldr	r2, [r7, #4]
 801e4fe:	6910      	ldr	r0, [r2, #16]
 801e500:	2200      	movs	r2, #0
 801e502:	6879      	ldr	r1, [r7, #4]
 801e504:	4798      	blx	r3
 801e506:	4603      	mov	r3, r0
 801e508:	76bb      	strb	r3, [r7, #26]
 801e50a:	e001      	b.n	801e510 <tcp_process+0x404>
 801e50c:	23f0      	movs	r3, #240	@ 0xf0
 801e50e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801e510:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801e514:	2b00      	cmp	r3, #0
 801e516:	d00a      	beq.n	801e52e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801e518:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801e51c:	f113 0f0d 	cmn.w	r3, #13
 801e520:	d002      	beq.n	801e528 <tcp_process+0x41c>
              tcp_abort(pcb);
 801e522:	6878      	ldr	r0, [r7, #4]
 801e524:	f7fd fd16 	bl	801bf54 <tcp_abort>
            }
            return ERR_ABRT;
 801e528:	f06f 030c 	mvn.w	r3, #12
 801e52c:	e1ce      	b.n	801e8cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801e52e:	6878      	ldr	r0, [r7, #4]
 801e530:	f000 fae0 	bl	801eaf4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801e534:	4b63      	ldr	r3, [pc, #396]	@ (801e6c4 <tcp_process+0x5b8>)
 801e536:	881b      	ldrh	r3, [r3, #0]
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d005      	beq.n	801e548 <tcp_process+0x43c>
            recv_acked--;
 801e53c:	4b61      	ldr	r3, [pc, #388]	@ (801e6c4 <tcp_process+0x5b8>)
 801e53e:	881b      	ldrh	r3, [r3, #0]
 801e540:	3b01      	subs	r3, #1
 801e542:	b29a      	uxth	r2, r3
 801e544:	4b5f      	ldr	r3, [pc, #380]	@ (801e6c4 <tcp_process+0x5b8>)
 801e546:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e54c:	009a      	lsls	r2, r3, #2
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e552:	005b      	lsls	r3, r3, #1
 801e554:	f241 111c 	movw	r1, #4380	@ 0x111c
 801e558:	428b      	cmp	r3, r1
 801e55a:	bf38      	it	cc
 801e55c:	460b      	movcc	r3, r1
 801e55e:	429a      	cmp	r2, r3
 801e560:	d204      	bcs.n	801e56c <tcp_process+0x460>
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e566:	009b      	lsls	r3, r3, #2
 801e568:	b29b      	uxth	r3, r3
 801e56a:	e00d      	b.n	801e588 <tcp_process+0x47c>
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e570:	005b      	lsls	r3, r3, #1
 801e572:	f241 121c 	movw	r2, #4380	@ 0x111c
 801e576:	4293      	cmp	r3, r2
 801e578:	d904      	bls.n	801e584 <tcp_process+0x478>
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e57e:	005b      	lsls	r3, r3, #1
 801e580:	b29b      	uxth	r3, r3
 801e582:	e001      	b.n	801e588 <tcp_process+0x47c>
 801e584:	f241 131c 	movw	r3, #4380	@ 0x111c
 801e588:	687a      	ldr	r2, [r7, #4]
 801e58a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801e58e:	4b4e      	ldr	r3, [pc, #312]	@ (801e6c8 <tcp_process+0x5bc>)
 801e590:	781b      	ldrb	r3, [r3, #0]
 801e592:	f003 0320 	and.w	r3, r3, #32
 801e596:	2b00      	cmp	r3, #0
 801e598:	d037      	beq.n	801e60a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	8b5b      	ldrh	r3, [r3, #26]
 801e59e:	f043 0302 	orr.w	r3, r3, #2
 801e5a2:	b29a      	uxth	r2, r3
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	2207      	movs	r2, #7
 801e5ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801e5ae:	e02c      	b.n	801e60a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e5b0:	4b3b      	ldr	r3, [pc, #236]	@ (801e6a0 <tcp_process+0x594>)
 801e5b2:	6819      	ldr	r1, [r3, #0]
 801e5b4:	4b3b      	ldr	r3, [pc, #236]	@ (801e6a4 <tcp_process+0x598>)
 801e5b6:	881b      	ldrh	r3, [r3, #0]
 801e5b8:	461a      	mov	r2, r3
 801e5ba:	4b3b      	ldr	r3, [pc, #236]	@ (801e6a8 <tcp_process+0x59c>)
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e5c0:	4b3a      	ldr	r3, [pc, #232]	@ (801e6ac <tcp_process+0x5a0>)
 801e5c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e5c4:	885b      	ldrh	r3, [r3, #2]
 801e5c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e5c8:	4a38      	ldr	r2, [pc, #224]	@ (801e6ac <tcp_process+0x5a0>)
 801e5ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e5cc:	8812      	ldrh	r2, [r2, #0]
 801e5ce:	b292      	uxth	r2, r2
 801e5d0:	9202      	str	r2, [sp, #8]
 801e5d2:	9301      	str	r3, [sp, #4]
 801e5d4:	4b36      	ldr	r3, [pc, #216]	@ (801e6b0 <tcp_process+0x5a4>)
 801e5d6:	9300      	str	r3, [sp, #0]
 801e5d8:	4b36      	ldr	r3, [pc, #216]	@ (801e6b4 <tcp_process+0x5a8>)
 801e5da:	4602      	mov	r2, r0
 801e5dc:	6878      	ldr	r0, [r7, #4]
 801e5de:	f003 f823 	bl	8021628 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801e5e2:	e167      	b.n	801e8b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801e5e4:	4b2d      	ldr	r3, [pc, #180]	@ (801e69c <tcp_process+0x590>)
 801e5e6:	781b      	ldrb	r3, [r3, #0]
 801e5e8:	f003 0302 	and.w	r3, r3, #2
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	f000 8161 	beq.w	801e8b4 <tcp_process+0x7a8>
 801e5f2:	687b      	ldr	r3, [r7, #4]
 801e5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e5f6:	1e5a      	subs	r2, r3, #1
 801e5f8:	4b2b      	ldr	r3, [pc, #172]	@ (801e6a8 <tcp_process+0x59c>)
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	429a      	cmp	r2, r3
 801e5fe:	f040 8159 	bne.w	801e8b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801e602:	6878      	ldr	r0, [r7, #4]
 801e604:	f002 fe0a 	bl	802121c <tcp_rexmit>
      break;
 801e608:	e154      	b.n	801e8b4 <tcp_process+0x7a8>
 801e60a:	e153      	b.n	801e8b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801e60c:	6878      	ldr	r0, [r7, #4]
 801e60e:	f000 fa71 	bl	801eaf4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801e612:	4b2d      	ldr	r3, [pc, #180]	@ (801e6c8 <tcp_process+0x5bc>)
 801e614:	781b      	ldrb	r3, [r3, #0]
 801e616:	f003 0320 	and.w	r3, r3, #32
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	f000 814c 	beq.w	801e8b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	8b5b      	ldrh	r3, [r3, #26]
 801e624:	f043 0302 	orr.w	r3, r3, #2
 801e628:	b29a      	uxth	r2, r3
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801e62e:	687b      	ldr	r3, [r7, #4]
 801e630:	2207      	movs	r2, #7
 801e632:	751a      	strb	r2, [r3, #20]
      }
      break;
 801e634:	e140      	b.n	801e8b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801e636:	6878      	ldr	r0, [r7, #4]
 801e638:	f000 fa5c 	bl	801eaf4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e63c:	4b22      	ldr	r3, [pc, #136]	@ (801e6c8 <tcp_process+0x5bc>)
 801e63e:	781b      	ldrb	r3, [r3, #0]
 801e640:	f003 0320 	and.w	r3, r3, #32
 801e644:	2b00      	cmp	r3, #0
 801e646:	d071      	beq.n	801e72c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e648:	4b14      	ldr	r3, [pc, #80]	@ (801e69c <tcp_process+0x590>)
 801e64a:	781b      	ldrb	r3, [r3, #0]
 801e64c:	f003 0310 	and.w	r3, r3, #16
 801e650:	2b00      	cmp	r3, #0
 801e652:	d060      	beq.n	801e716 <tcp_process+0x60a>
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e658:	4b11      	ldr	r3, [pc, #68]	@ (801e6a0 <tcp_process+0x594>)
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	429a      	cmp	r2, r3
 801e65e:	d15a      	bne.n	801e716 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e664:	2b00      	cmp	r3, #0
 801e666:	d156      	bne.n	801e716 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	8b5b      	ldrh	r3, [r3, #26]
 801e66c:	f043 0302 	orr.w	r3, r3, #2
 801e670:	b29a      	uxth	r2, r3
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801e676:	6878      	ldr	r0, [r7, #4]
 801e678:	f7fe fdbc 	bl	801d1f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801e67c:	4b13      	ldr	r3, [pc, #76]	@ (801e6cc <tcp_process+0x5c0>)
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	687a      	ldr	r2, [r7, #4]
 801e682:	429a      	cmp	r2, r3
 801e684:	d105      	bne.n	801e692 <tcp_process+0x586>
 801e686:	4b11      	ldr	r3, [pc, #68]	@ (801e6cc <tcp_process+0x5c0>)
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	68db      	ldr	r3, [r3, #12]
 801e68c:	4a0f      	ldr	r2, [pc, #60]	@ (801e6cc <tcp_process+0x5c0>)
 801e68e:	6013      	str	r3, [r2, #0]
 801e690:	e02e      	b.n	801e6f0 <tcp_process+0x5e4>
 801e692:	4b0e      	ldr	r3, [pc, #56]	@ (801e6cc <tcp_process+0x5c0>)
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	617b      	str	r3, [r7, #20]
 801e698:	e027      	b.n	801e6ea <tcp_process+0x5de>
 801e69a:	bf00      	nop
 801e69c:	200111a4 	.word	0x200111a4
 801e6a0:	2001119c 	.word	0x2001119c
 801e6a4:	200111a2 	.word	0x200111a2
 801e6a8:	20011198 	.word	0x20011198
 801e6ac:	20011188 	.word	0x20011188
 801e6b0:	2000d9fc 	.word	0x2000d9fc
 801e6b4:	2000da00 	.word	0x2000da00
 801e6b8:	0802a89c 	.word	0x0802a89c
 801e6bc:	0802ab3c 	.word	0x0802ab3c
 801e6c0:	0802a8e8 	.word	0x0802a8e8
 801e6c4:	200111a0 	.word	0x200111a0
 801e6c8:	200111a5 	.word	0x200111a5
 801e6cc:	2001116c 	.word	0x2001116c
 801e6d0:	697b      	ldr	r3, [r7, #20]
 801e6d2:	68db      	ldr	r3, [r3, #12]
 801e6d4:	687a      	ldr	r2, [r7, #4]
 801e6d6:	429a      	cmp	r2, r3
 801e6d8:	d104      	bne.n	801e6e4 <tcp_process+0x5d8>
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	68da      	ldr	r2, [r3, #12]
 801e6de:	697b      	ldr	r3, [r7, #20]
 801e6e0:	60da      	str	r2, [r3, #12]
 801e6e2:	e005      	b.n	801e6f0 <tcp_process+0x5e4>
 801e6e4:	697b      	ldr	r3, [r7, #20]
 801e6e6:	68db      	ldr	r3, [r3, #12]
 801e6e8:	617b      	str	r3, [r7, #20]
 801e6ea:	697b      	ldr	r3, [r7, #20]
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	d1ef      	bne.n	801e6d0 <tcp_process+0x5c4>
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	60da      	str	r2, [r3, #12]
 801e6f6:	4b77      	ldr	r3, [pc, #476]	@ (801e8d4 <tcp_process+0x7c8>)
 801e6f8:	2201      	movs	r2, #1
 801e6fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	220a      	movs	r2, #10
 801e700:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801e702:	4b75      	ldr	r3, [pc, #468]	@ (801e8d8 <tcp_process+0x7cc>)
 801e704:	681a      	ldr	r2, [r3, #0]
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	60da      	str	r2, [r3, #12]
 801e70a:	4a73      	ldr	r2, [pc, #460]	@ (801e8d8 <tcp_process+0x7cc>)
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	6013      	str	r3, [r2, #0]
 801e710:	f003 f94c 	bl	80219ac <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801e714:	e0d2      	b.n	801e8bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	8b5b      	ldrh	r3, [r3, #26]
 801e71a:	f043 0302 	orr.w	r3, r3, #2
 801e71e:	b29a      	uxth	r2, r3
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	2208      	movs	r2, #8
 801e728:	751a      	strb	r2, [r3, #20]
      break;
 801e72a:	e0c7      	b.n	801e8bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e72c:	4b6b      	ldr	r3, [pc, #428]	@ (801e8dc <tcp_process+0x7d0>)
 801e72e:	781b      	ldrb	r3, [r3, #0]
 801e730:	f003 0310 	and.w	r3, r3, #16
 801e734:	2b00      	cmp	r3, #0
 801e736:	f000 80c1 	beq.w	801e8bc <tcp_process+0x7b0>
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e73e:	4b68      	ldr	r3, [pc, #416]	@ (801e8e0 <tcp_process+0x7d4>)
 801e740:	681b      	ldr	r3, [r3, #0]
 801e742:	429a      	cmp	r2, r3
 801e744:	f040 80ba 	bne.w	801e8bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	f040 80b5 	bne.w	801e8bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	2206      	movs	r2, #6
 801e756:	751a      	strb	r2, [r3, #20]
      break;
 801e758:	e0b0      	b.n	801e8bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801e75a:	6878      	ldr	r0, [r7, #4]
 801e75c:	f000 f9ca 	bl	801eaf4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e760:	4b60      	ldr	r3, [pc, #384]	@ (801e8e4 <tcp_process+0x7d8>)
 801e762:	781b      	ldrb	r3, [r3, #0]
 801e764:	f003 0320 	and.w	r3, r3, #32
 801e768:	2b00      	cmp	r3, #0
 801e76a:	f000 80a9 	beq.w	801e8c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	8b5b      	ldrh	r3, [r3, #26]
 801e772:	f043 0302 	orr.w	r3, r3, #2
 801e776:	b29a      	uxth	r2, r3
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801e77c:	6878      	ldr	r0, [r7, #4]
 801e77e:	f7fe fd39 	bl	801d1f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e782:	4b59      	ldr	r3, [pc, #356]	@ (801e8e8 <tcp_process+0x7dc>)
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	687a      	ldr	r2, [r7, #4]
 801e788:	429a      	cmp	r2, r3
 801e78a:	d105      	bne.n	801e798 <tcp_process+0x68c>
 801e78c:	4b56      	ldr	r3, [pc, #344]	@ (801e8e8 <tcp_process+0x7dc>)
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	68db      	ldr	r3, [r3, #12]
 801e792:	4a55      	ldr	r2, [pc, #340]	@ (801e8e8 <tcp_process+0x7dc>)
 801e794:	6013      	str	r3, [r2, #0]
 801e796:	e013      	b.n	801e7c0 <tcp_process+0x6b4>
 801e798:	4b53      	ldr	r3, [pc, #332]	@ (801e8e8 <tcp_process+0x7dc>)
 801e79a:	681b      	ldr	r3, [r3, #0]
 801e79c:	613b      	str	r3, [r7, #16]
 801e79e:	e00c      	b.n	801e7ba <tcp_process+0x6ae>
 801e7a0:	693b      	ldr	r3, [r7, #16]
 801e7a2:	68db      	ldr	r3, [r3, #12]
 801e7a4:	687a      	ldr	r2, [r7, #4]
 801e7a6:	429a      	cmp	r2, r3
 801e7a8:	d104      	bne.n	801e7b4 <tcp_process+0x6a8>
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	68da      	ldr	r2, [r3, #12]
 801e7ae:	693b      	ldr	r3, [r7, #16]
 801e7b0:	60da      	str	r2, [r3, #12]
 801e7b2:	e005      	b.n	801e7c0 <tcp_process+0x6b4>
 801e7b4:	693b      	ldr	r3, [r7, #16]
 801e7b6:	68db      	ldr	r3, [r3, #12]
 801e7b8:	613b      	str	r3, [r7, #16]
 801e7ba:	693b      	ldr	r3, [r7, #16]
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d1ef      	bne.n	801e7a0 <tcp_process+0x694>
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	2200      	movs	r2, #0
 801e7c4:	60da      	str	r2, [r3, #12]
 801e7c6:	4b43      	ldr	r3, [pc, #268]	@ (801e8d4 <tcp_process+0x7c8>)
 801e7c8:	2201      	movs	r2, #1
 801e7ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	220a      	movs	r2, #10
 801e7d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e7d2:	4b41      	ldr	r3, [pc, #260]	@ (801e8d8 <tcp_process+0x7cc>)
 801e7d4:	681a      	ldr	r2, [r3, #0]
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	60da      	str	r2, [r3, #12]
 801e7da:	4a3f      	ldr	r2, [pc, #252]	@ (801e8d8 <tcp_process+0x7cc>)
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	6013      	str	r3, [r2, #0]
 801e7e0:	f003 f8e4 	bl	80219ac <tcp_timer_needed>
      }
      break;
 801e7e4:	e06c      	b.n	801e8c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801e7e6:	6878      	ldr	r0, [r7, #4]
 801e7e8:	f000 f984 	bl	801eaf4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e7ec:	4b3b      	ldr	r3, [pc, #236]	@ (801e8dc <tcp_process+0x7d0>)
 801e7ee:	781b      	ldrb	r3, [r3, #0]
 801e7f0:	f003 0310 	and.w	r3, r3, #16
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	d065      	beq.n	801e8c4 <tcp_process+0x7b8>
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e7fc:	4b38      	ldr	r3, [pc, #224]	@ (801e8e0 <tcp_process+0x7d4>)
 801e7fe:	681b      	ldr	r3, [r3, #0]
 801e800:	429a      	cmp	r2, r3
 801e802:	d15f      	bne.n	801e8c4 <tcp_process+0x7b8>
 801e804:	687b      	ldr	r3, [r7, #4]
 801e806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e808:	2b00      	cmp	r3, #0
 801e80a:	d15b      	bne.n	801e8c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801e80c:	6878      	ldr	r0, [r7, #4]
 801e80e:	f7fe fcf1 	bl	801d1f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e812:	4b35      	ldr	r3, [pc, #212]	@ (801e8e8 <tcp_process+0x7dc>)
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	687a      	ldr	r2, [r7, #4]
 801e818:	429a      	cmp	r2, r3
 801e81a:	d105      	bne.n	801e828 <tcp_process+0x71c>
 801e81c:	4b32      	ldr	r3, [pc, #200]	@ (801e8e8 <tcp_process+0x7dc>)
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	68db      	ldr	r3, [r3, #12]
 801e822:	4a31      	ldr	r2, [pc, #196]	@ (801e8e8 <tcp_process+0x7dc>)
 801e824:	6013      	str	r3, [r2, #0]
 801e826:	e013      	b.n	801e850 <tcp_process+0x744>
 801e828:	4b2f      	ldr	r3, [pc, #188]	@ (801e8e8 <tcp_process+0x7dc>)
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	60fb      	str	r3, [r7, #12]
 801e82e:	e00c      	b.n	801e84a <tcp_process+0x73e>
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	68db      	ldr	r3, [r3, #12]
 801e834:	687a      	ldr	r2, [r7, #4]
 801e836:	429a      	cmp	r2, r3
 801e838:	d104      	bne.n	801e844 <tcp_process+0x738>
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	68da      	ldr	r2, [r3, #12]
 801e83e:	68fb      	ldr	r3, [r7, #12]
 801e840:	60da      	str	r2, [r3, #12]
 801e842:	e005      	b.n	801e850 <tcp_process+0x744>
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	68db      	ldr	r3, [r3, #12]
 801e848:	60fb      	str	r3, [r7, #12]
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d1ef      	bne.n	801e830 <tcp_process+0x724>
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	2200      	movs	r2, #0
 801e854:	60da      	str	r2, [r3, #12]
 801e856:	4b1f      	ldr	r3, [pc, #124]	@ (801e8d4 <tcp_process+0x7c8>)
 801e858:	2201      	movs	r2, #1
 801e85a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	220a      	movs	r2, #10
 801e860:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e862:	4b1d      	ldr	r3, [pc, #116]	@ (801e8d8 <tcp_process+0x7cc>)
 801e864:	681a      	ldr	r2, [r3, #0]
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	60da      	str	r2, [r3, #12]
 801e86a:	4a1b      	ldr	r2, [pc, #108]	@ (801e8d8 <tcp_process+0x7cc>)
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	6013      	str	r3, [r2, #0]
 801e870:	f003 f89c 	bl	80219ac <tcp_timer_needed>
      }
      break;
 801e874:	e026      	b.n	801e8c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801e876:	6878      	ldr	r0, [r7, #4]
 801e878:	f000 f93c 	bl	801eaf4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e87c:	4b17      	ldr	r3, [pc, #92]	@ (801e8dc <tcp_process+0x7d0>)
 801e87e:	781b      	ldrb	r3, [r3, #0]
 801e880:	f003 0310 	and.w	r3, r3, #16
 801e884:	2b00      	cmp	r3, #0
 801e886:	d01f      	beq.n	801e8c8 <tcp_process+0x7bc>
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e88c:	4b14      	ldr	r3, [pc, #80]	@ (801e8e0 <tcp_process+0x7d4>)
 801e88e:	681b      	ldr	r3, [r3, #0]
 801e890:	429a      	cmp	r2, r3
 801e892:	d119      	bne.n	801e8c8 <tcp_process+0x7bc>
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d115      	bne.n	801e8c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801e89c:	4b11      	ldr	r3, [pc, #68]	@ (801e8e4 <tcp_process+0x7d8>)
 801e89e:	781b      	ldrb	r3, [r3, #0]
 801e8a0:	f043 0310 	orr.w	r3, r3, #16
 801e8a4:	b2da      	uxtb	r2, r3
 801e8a6:	4b0f      	ldr	r3, [pc, #60]	@ (801e8e4 <tcp_process+0x7d8>)
 801e8a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 801e8aa:	e00d      	b.n	801e8c8 <tcp_process+0x7bc>
    default:
      break;
 801e8ac:	bf00      	nop
 801e8ae:	e00c      	b.n	801e8ca <tcp_process+0x7be>
      break;
 801e8b0:	bf00      	nop
 801e8b2:	e00a      	b.n	801e8ca <tcp_process+0x7be>
      break;
 801e8b4:	bf00      	nop
 801e8b6:	e008      	b.n	801e8ca <tcp_process+0x7be>
      break;
 801e8b8:	bf00      	nop
 801e8ba:	e006      	b.n	801e8ca <tcp_process+0x7be>
      break;
 801e8bc:	bf00      	nop
 801e8be:	e004      	b.n	801e8ca <tcp_process+0x7be>
      break;
 801e8c0:	bf00      	nop
 801e8c2:	e002      	b.n	801e8ca <tcp_process+0x7be>
      break;
 801e8c4:	bf00      	nop
 801e8c6:	e000      	b.n	801e8ca <tcp_process+0x7be>
      break;
 801e8c8:	bf00      	nop
  }
  return ERR_OK;
 801e8ca:	2300      	movs	r3, #0
}
 801e8cc:	4618      	mov	r0, r3
 801e8ce:	3724      	adds	r7, #36	@ 0x24
 801e8d0:	46bd      	mov	sp, r7
 801e8d2:	bd90      	pop	{r4, r7, pc}
 801e8d4:	20011174 	.word	0x20011174
 801e8d8:	20011170 	.word	0x20011170
 801e8dc:	200111a4 	.word	0x200111a4
 801e8e0:	2001119c 	.word	0x2001119c
 801e8e4:	200111a5 	.word	0x200111a5
 801e8e8:	2001116c 	.word	0x2001116c

0801e8ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801e8ec:	b590      	push	{r4, r7, lr}
 801e8ee:	b085      	sub	sp, #20
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	6078      	str	r0, [r7, #4]
 801e8f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	d106      	bne.n	801e90a <tcp_oos_insert_segment+0x1e>
 801e8fc:	4b3b      	ldr	r3, [pc, #236]	@ (801e9ec <tcp_oos_insert_segment+0x100>)
 801e8fe:	f240 421f 	movw	r2, #1055	@ 0x41f
 801e902:	493b      	ldr	r1, [pc, #236]	@ (801e9f0 <tcp_oos_insert_segment+0x104>)
 801e904:	483b      	ldr	r0, [pc, #236]	@ (801e9f4 <tcp_oos_insert_segment+0x108>)
 801e906:	f008 ff31 	bl	802776c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	68db      	ldr	r3, [r3, #12]
 801e90e:	899b      	ldrh	r3, [r3, #12]
 801e910:	b29b      	uxth	r3, r3
 801e912:	4618      	mov	r0, r3
 801e914:	f7fb f8ee 	bl	8019af4 <lwip_htons>
 801e918:	4603      	mov	r3, r0
 801e91a:	b2db      	uxtb	r3, r3
 801e91c:	f003 0301 	and.w	r3, r3, #1
 801e920:	2b00      	cmp	r3, #0
 801e922:	d028      	beq.n	801e976 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801e924:	6838      	ldr	r0, [r7, #0]
 801e926:	f7fe f995 	bl	801cc54 <tcp_segs_free>
    next = NULL;
 801e92a:	2300      	movs	r3, #0
 801e92c:	603b      	str	r3, [r7, #0]
 801e92e:	e056      	b.n	801e9de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e930:	683b      	ldr	r3, [r7, #0]
 801e932:	68db      	ldr	r3, [r3, #12]
 801e934:	899b      	ldrh	r3, [r3, #12]
 801e936:	b29b      	uxth	r3, r3
 801e938:	4618      	mov	r0, r3
 801e93a:	f7fb f8db 	bl	8019af4 <lwip_htons>
 801e93e:	4603      	mov	r3, r0
 801e940:	b2db      	uxtb	r3, r3
 801e942:	f003 0301 	and.w	r3, r3, #1
 801e946:	2b00      	cmp	r3, #0
 801e948:	d00d      	beq.n	801e966 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	68db      	ldr	r3, [r3, #12]
 801e94e:	899b      	ldrh	r3, [r3, #12]
 801e950:	b29c      	uxth	r4, r3
 801e952:	2001      	movs	r0, #1
 801e954:	f7fb f8ce 	bl	8019af4 <lwip_htons>
 801e958:	4603      	mov	r3, r0
 801e95a:	461a      	mov	r2, r3
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	68db      	ldr	r3, [r3, #12]
 801e960:	4322      	orrs	r2, r4
 801e962:	b292      	uxth	r2, r2
 801e964:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801e966:	683b      	ldr	r3, [r7, #0]
 801e968:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801e96a:	683b      	ldr	r3, [r7, #0]
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801e970:	68f8      	ldr	r0, [r7, #12]
 801e972:	f7fe f984 	bl	801cc7e <tcp_seg_free>
    while (next &&
 801e976:	683b      	ldr	r3, [r7, #0]
 801e978:	2b00      	cmp	r3, #0
 801e97a:	d00e      	beq.n	801e99a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	891b      	ldrh	r3, [r3, #8]
 801e980:	461a      	mov	r2, r3
 801e982:	4b1d      	ldr	r3, [pc, #116]	@ (801e9f8 <tcp_oos_insert_segment+0x10c>)
 801e984:	681b      	ldr	r3, [r3, #0]
 801e986:	441a      	add	r2, r3
 801e988:	683b      	ldr	r3, [r7, #0]
 801e98a:	68db      	ldr	r3, [r3, #12]
 801e98c:	685b      	ldr	r3, [r3, #4]
 801e98e:	6839      	ldr	r1, [r7, #0]
 801e990:	8909      	ldrh	r1, [r1, #8]
 801e992:	440b      	add	r3, r1
 801e994:	1ad3      	subs	r3, r2, r3
    while (next &&
 801e996:	2b00      	cmp	r3, #0
 801e998:	daca      	bge.n	801e930 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801e99a:	683b      	ldr	r3, [r7, #0]
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d01e      	beq.n	801e9de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	891b      	ldrh	r3, [r3, #8]
 801e9a4:	461a      	mov	r2, r3
 801e9a6:	4b14      	ldr	r3, [pc, #80]	@ (801e9f8 <tcp_oos_insert_segment+0x10c>)
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	441a      	add	r2, r3
 801e9ac:	683b      	ldr	r3, [r7, #0]
 801e9ae:	68db      	ldr	r3, [r3, #12]
 801e9b0:	685b      	ldr	r3, [r3, #4]
 801e9b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	dd12      	ble.n	801e9de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801e9b8:	683b      	ldr	r3, [r7, #0]
 801e9ba:	68db      	ldr	r3, [r3, #12]
 801e9bc:	685b      	ldr	r3, [r3, #4]
 801e9be:	b29a      	uxth	r2, r3
 801e9c0:	4b0d      	ldr	r3, [pc, #52]	@ (801e9f8 <tcp_oos_insert_segment+0x10c>)
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	b29b      	uxth	r3, r3
 801e9c6:	1ad3      	subs	r3, r2, r3
 801e9c8:	b29a      	uxth	r2, r3
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	685a      	ldr	r2, [r3, #4]
 801e9d2:	687b      	ldr	r3, [r7, #4]
 801e9d4:	891b      	ldrh	r3, [r3, #8]
 801e9d6:	4619      	mov	r1, r3
 801e9d8:	4610      	mov	r0, r2
 801e9da:	f7fc fb03 	bl	801afe4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	683a      	ldr	r2, [r7, #0]
 801e9e2:	601a      	str	r2, [r3, #0]
}
 801e9e4:	bf00      	nop
 801e9e6:	3714      	adds	r7, #20
 801e9e8:	46bd      	mov	sp, r7
 801e9ea:	bd90      	pop	{r4, r7, pc}
 801e9ec:	0802a89c 	.word	0x0802a89c
 801e9f0:	0802ab5c 	.word	0x0802ab5c
 801e9f4:	0802a8e8 	.word	0x0802a8e8
 801e9f8:	20011198 	.word	0x20011198

0801e9fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801e9fc:	b5b0      	push	{r4, r5, r7, lr}
 801e9fe:	b086      	sub	sp, #24
 801ea00:	af00      	add	r7, sp, #0
 801ea02:	60f8      	str	r0, [r7, #12]
 801ea04:	60b9      	str	r1, [r7, #8]
 801ea06:	607a      	str	r2, [r7, #4]
 801ea08:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801ea0a:	e03e      	b.n	801ea8a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801ea0c:	68bb      	ldr	r3, [r7, #8]
 801ea0e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801ea10:	68bb      	ldr	r3, [r7, #8]
 801ea12:	681b      	ldr	r3, [r3, #0]
 801ea14:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801ea16:	697b      	ldr	r3, [r7, #20]
 801ea18:	685b      	ldr	r3, [r3, #4]
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	f7fc fd28 	bl	801b470 <pbuf_clen>
 801ea20:	4603      	mov	r3, r0
 801ea22:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ea2a:	8a7a      	ldrh	r2, [r7, #18]
 801ea2c:	429a      	cmp	r2, r3
 801ea2e:	d906      	bls.n	801ea3e <tcp_free_acked_segments+0x42>
 801ea30:	4b2a      	ldr	r3, [pc, #168]	@ (801eadc <tcp_free_acked_segments+0xe0>)
 801ea32:	f240 4257 	movw	r2, #1111	@ 0x457
 801ea36:	492a      	ldr	r1, [pc, #168]	@ (801eae0 <tcp_free_acked_segments+0xe4>)
 801ea38:	482a      	ldr	r0, [pc, #168]	@ (801eae4 <tcp_free_acked_segments+0xe8>)
 801ea3a:	f008 fe97 	bl	802776c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801ea3e:	68fb      	ldr	r3, [r7, #12]
 801ea40:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801ea44:	8a7b      	ldrh	r3, [r7, #18]
 801ea46:	1ad3      	subs	r3, r2, r3
 801ea48:	b29a      	uxth	r2, r3
 801ea4a:	68fb      	ldr	r3, [r7, #12]
 801ea4c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801ea50:	697b      	ldr	r3, [r7, #20]
 801ea52:	891a      	ldrh	r2, [r3, #8]
 801ea54:	4b24      	ldr	r3, [pc, #144]	@ (801eae8 <tcp_free_acked_segments+0xec>)
 801ea56:	881b      	ldrh	r3, [r3, #0]
 801ea58:	4413      	add	r3, r2
 801ea5a:	b29a      	uxth	r2, r3
 801ea5c:	4b22      	ldr	r3, [pc, #136]	@ (801eae8 <tcp_free_acked_segments+0xec>)
 801ea5e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801ea60:	6978      	ldr	r0, [r7, #20]
 801ea62:	f7fe f90c 	bl	801cc7e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801ea66:	68fb      	ldr	r3, [r7, #12]
 801ea68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d00c      	beq.n	801ea8a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801ea70:	68bb      	ldr	r3, [r7, #8]
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d109      	bne.n	801ea8a <tcp_free_acked_segments+0x8e>
 801ea76:	683b      	ldr	r3, [r7, #0]
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	d106      	bne.n	801ea8a <tcp_free_acked_segments+0x8e>
 801ea7c:	4b17      	ldr	r3, [pc, #92]	@ (801eadc <tcp_free_acked_segments+0xe0>)
 801ea7e:	f240 4261 	movw	r2, #1121	@ 0x461
 801ea82:	491a      	ldr	r1, [pc, #104]	@ (801eaec <tcp_free_acked_segments+0xf0>)
 801ea84:	4817      	ldr	r0, [pc, #92]	@ (801eae4 <tcp_free_acked_segments+0xe8>)
 801ea86:	f008 fe71 	bl	802776c <iprintf>
  while (seg_list != NULL &&
 801ea8a:	68bb      	ldr	r3, [r7, #8]
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	d020      	beq.n	801ead2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801ea90:	68bb      	ldr	r3, [r7, #8]
 801ea92:	68db      	ldr	r3, [r3, #12]
 801ea94:	685b      	ldr	r3, [r3, #4]
 801ea96:	4618      	mov	r0, r3
 801ea98:	f7fb f841 	bl	8019b1e <lwip_htonl>
 801ea9c:	4604      	mov	r4, r0
 801ea9e:	68bb      	ldr	r3, [r7, #8]
 801eaa0:	891b      	ldrh	r3, [r3, #8]
 801eaa2:	461d      	mov	r5, r3
 801eaa4:	68bb      	ldr	r3, [r7, #8]
 801eaa6:	68db      	ldr	r3, [r3, #12]
 801eaa8:	899b      	ldrh	r3, [r3, #12]
 801eaaa:	b29b      	uxth	r3, r3
 801eaac:	4618      	mov	r0, r3
 801eaae:	f7fb f821 	bl	8019af4 <lwip_htons>
 801eab2:	4603      	mov	r3, r0
 801eab4:	b2db      	uxtb	r3, r3
 801eab6:	f003 0303 	and.w	r3, r3, #3
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	d001      	beq.n	801eac2 <tcp_free_acked_segments+0xc6>
 801eabe:	2301      	movs	r3, #1
 801eac0:	e000      	b.n	801eac4 <tcp_free_acked_segments+0xc8>
 801eac2:	2300      	movs	r3, #0
 801eac4:	442b      	add	r3, r5
 801eac6:	18e2      	adds	r2, r4, r3
 801eac8:	4b09      	ldr	r3, [pc, #36]	@ (801eaf0 <tcp_free_acked_segments+0xf4>)
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801eace:	2b00      	cmp	r3, #0
 801ead0:	dd9c      	ble.n	801ea0c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801ead2:	68bb      	ldr	r3, [r7, #8]
}
 801ead4:	4618      	mov	r0, r3
 801ead6:	3718      	adds	r7, #24
 801ead8:	46bd      	mov	sp, r7
 801eada:	bdb0      	pop	{r4, r5, r7, pc}
 801eadc:	0802a89c 	.word	0x0802a89c
 801eae0:	0802ab84 	.word	0x0802ab84
 801eae4:	0802a8e8 	.word	0x0802a8e8
 801eae8:	200111a0 	.word	0x200111a0
 801eaec:	0802abac 	.word	0x0802abac
 801eaf0:	2001119c 	.word	0x2001119c

0801eaf4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801eaf4:	b5b0      	push	{r4, r5, r7, lr}
 801eaf6:	b094      	sub	sp, #80	@ 0x50
 801eaf8:	af00      	add	r7, sp, #0
 801eafa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801eafc:	2300      	movs	r3, #0
 801eafe:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	d106      	bne.n	801eb14 <tcp_receive+0x20>
 801eb06:	4b91      	ldr	r3, [pc, #580]	@ (801ed4c <tcp_receive+0x258>)
 801eb08:	f240 427b 	movw	r2, #1147	@ 0x47b
 801eb0c:	4990      	ldr	r1, [pc, #576]	@ (801ed50 <tcp_receive+0x25c>)
 801eb0e:	4891      	ldr	r0, [pc, #580]	@ (801ed54 <tcp_receive+0x260>)
 801eb10:	f008 fe2c 	bl	802776c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	7d1b      	ldrb	r3, [r3, #20]
 801eb18:	2b03      	cmp	r3, #3
 801eb1a:	d806      	bhi.n	801eb2a <tcp_receive+0x36>
 801eb1c:	4b8b      	ldr	r3, [pc, #556]	@ (801ed4c <tcp_receive+0x258>)
 801eb1e:	f240 427c 	movw	r2, #1148	@ 0x47c
 801eb22:	498d      	ldr	r1, [pc, #564]	@ (801ed58 <tcp_receive+0x264>)
 801eb24:	488b      	ldr	r0, [pc, #556]	@ (801ed54 <tcp_receive+0x260>)
 801eb26:	f008 fe21 	bl	802776c <iprintf>

  if (flags & TCP_ACK) {
 801eb2a:	4b8c      	ldr	r3, [pc, #560]	@ (801ed5c <tcp_receive+0x268>)
 801eb2c:	781b      	ldrb	r3, [r3, #0]
 801eb2e:	f003 0310 	and.w	r3, r3, #16
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	f000 8264 	beq.w	801f000 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801eb3e:	461a      	mov	r2, r3
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eb44:	4413      	add	r3, r2
 801eb46:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801eb4c:	4b84      	ldr	r3, [pc, #528]	@ (801ed60 <tcp_receive+0x26c>)
 801eb4e:	681b      	ldr	r3, [r3, #0]
 801eb50:	1ad3      	subs	r3, r2, r3
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	db1b      	blt.n	801eb8e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801eb5a:	4b81      	ldr	r3, [pc, #516]	@ (801ed60 <tcp_receive+0x26c>)
 801eb5c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801eb5e:	429a      	cmp	r2, r3
 801eb60:	d106      	bne.n	801eb70 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801eb66:	4b7f      	ldr	r3, [pc, #508]	@ (801ed64 <tcp_receive+0x270>)
 801eb68:	681b      	ldr	r3, [r3, #0]
 801eb6a:	1ad3      	subs	r3, r2, r3
 801eb6c:	2b00      	cmp	r3, #0
 801eb6e:	db0e      	blt.n	801eb8e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801eb74:	4b7b      	ldr	r3, [pc, #492]	@ (801ed64 <tcp_receive+0x270>)
 801eb76:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801eb78:	429a      	cmp	r2, r3
 801eb7a:	d125      	bne.n	801ebc8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801eb7c:	4b7a      	ldr	r3, [pc, #488]	@ (801ed68 <tcp_receive+0x274>)
 801eb7e:	681b      	ldr	r3, [r3, #0]
 801eb80:	89db      	ldrh	r3, [r3, #14]
 801eb82:	b29a      	uxth	r2, r3
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801eb8a:	429a      	cmp	r2, r3
 801eb8c:	d91c      	bls.n	801ebc8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801eb8e:	4b76      	ldr	r3, [pc, #472]	@ (801ed68 <tcp_receive+0x274>)
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	89db      	ldrh	r3, [r3, #14]
 801eb94:	b29a      	uxth	r2, r3
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801eba2:	687b      	ldr	r3, [r7, #4]
 801eba4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801eba8:	429a      	cmp	r2, r3
 801ebaa:	d205      	bcs.n	801ebb8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801ebb2:	687b      	ldr	r3, [r7, #4]
 801ebb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801ebb8:	4b69      	ldr	r3, [pc, #420]	@ (801ed60 <tcp_receive+0x26c>)
 801ebba:	681a      	ldr	r2, [r3, #0]
 801ebbc:	687b      	ldr	r3, [r7, #4]
 801ebbe:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801ebc0:	4b68      	ldr	r3, [pc, #416]	@ (801ed64 <tcp_receive+0x270>)
 801ebc2:	681a      	ldr	r2, [r3, #0]
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801ebc8:	4b66      	ldr	r3, [pc, #408]	@ (801ed64 <tcp_receive+0x270>)
 801ebca:	681a      	ldr	r2, [r3, #0]
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ebd0:	1ad3      	subs	r3, r2, r3
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	dc58      	bgt.n	801ec88 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801ebd6:	4b65      	ldr	r3, [pc, #404]	@ (801ed6c <tcp_receive+0x278>)
 801ebd8:	881b      	ldrh	r3, [r3, #0]
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d14b      	bne.n	801ec76 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ebde:	687b      	ldr	r3, [r7, #4]
 801ebe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ebe2:	687a      	ldr	r2, [r7, #4]
 801ebe4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801ebe8:	4413      	add	r3, r2
 801ebea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ebec:	429a      	cmp	r2, r3
 801ebee:	d142      	bne.n	801ec76 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	db3d      	blt.n	801ec76 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ebfe:	4b59      	ldr	r3, [pc, #356]	@ (801ed64 <tcp_receive+0x270>)
 801ec00:	681b      	ldr	r3, [r3, #0]
 801ec02:	429a      	cmp	r2, r3
 801ec04:	d137      	bne.n	801ec76 <tcp_receive+0x182>
              found_dupack = 1;
 801ec06:	2301      	movs	r3, #1
 801ec08:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801ec10:	2bff      	cmp	r3, #255	@ 0xff
 801ec12:	d007      	beq.n	801ec24 <tcp_receive+0x130>
                ++pcb->dupacks;
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801ec1a:	3301      	adds	r3, #1
 801ec1c:	b2da      	uxtb	r2, r3
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801ec2a:	2b03      	cmp	r3, #3
 801ec2c:	d91b      	bls.n	801ec66 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ec38:	4413      	add	r3, r2
 801ec3a:	b29a      	uxth	r2, r3
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ec42:	429a      	cmp	r2, r3
 801ec44:	d30a      	bcc.n	801ec5c <tcp_receive+0x168>
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ec50:	4413      	add	r3, r2
 801ec52:	b29a      	uxth	r2, r3
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801ec5a:	e004      	b.n	801ec66 <tcp_receive+0x172>
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ec62:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801ec6c:	2b02      	cmp	r3, #2
 801ec6e:	d902      	bls.n	801ec76 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ec70:	6878      	ldr	r0, [r7, #4]
 801ec72:	f002 fb3f 	bl	80212f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ec76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	f040 8161 	bne.w	801ef40 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	2200      	movs	r2, #0
 801ec82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801ec86:	e15b      	b.n	801ef40 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ec88:	4b36      	ldr	r3, [pc, #216]	@ (801ed64 <tcp_receive+0x270>)
 801ec8a:	681a      	ldr	r2, [r3, #0]
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ec90:	1ad3      	subs	r3, r2, r3
 801ec92:	3b01      	subs	r3, #1
 801ec94:	2b00      	cmp	r3, #0
 801ec96:	f2c0 814e 	blt.w	801ef36 <tcp_receive+0x442>
 801ec9a:	4b32      	ldr	r3, [pc, #200]	@ (801ed64 <tcp_receive+0x270>)
 801ec9c:	681a      	ldr	r2, [r3, #0]
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801eca2:	1ad3      	subs	r3, r2, r3
 801eca4:	2b00      	cmp	r3, #0
 801eca6:	f300 8146 	bgt.w	801ef36 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	8b5b      	ldrh	r3, [r3, #26]
 801ecae:	f003 0304 	and.w	r3, r3, #4
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d010      	beq.n	801ecd8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	8b5b      	ldrh	r3, [r3, #26]
 801ecba:	f023 0304 	bic.w	r3, r3, #4
 801ecbe:	b29a      	uxth	r2, r3
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	2200      	movs	r2, #0
 801ecd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	2200      	movs	r2, #0
 801ecdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801ece6:	10db      	asrs	r3, r3, #3
 801ece8:	b21b      	sxth	r3, r3
 801ecea:	b29a      	uxth	r2, r3
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801ecf2:	b29b      	uxth	r3, r3
 801ecf4:	4413      	add	r3, r2
 801ecf6:	b29b      	uxth	r3, r3
 801ecf8:	b21a      	sxth	r2, r3
 801ecfa:	687b      	ldr	r3, [r7, #4]
 801ecfc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801ed00:	4b18      	ldr	r3, [pc, #96]	@ (801ed64 <tcp_receive+0x270>)
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	b29a      	uxth	r2, r3
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ed0a:	b29b      	uxth	r3, r3
 801ed0c:	1ad3      	subs	r3, r2, r3
 801ed0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	2200      	movs	r2, #0
 801ed14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801ed18:	4b12      	ldr	r3, [pc, #72]	@ (801ed64 <tcp_receive+0x270>)
 801ed1a:	681a      	ldr	r2, [r3, #0]
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	7d1b      	ldrb	r3, [r3, #20]
 801ed24:	2b03      	cmp	r3, #3
 801ed26:	f240 8097 	bls.w	801ee58 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801ed36:	429a      	cmp	r2, r3
 801ed38:	d245      	bcs.n	801edc6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	8b5b      	ldrh	r3, [r3, #26]
 801ed3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	d014      	beq.n	801ed70 <tcp_receive+0x27c>
 801ed46:	2301      	movs	r3, #1
 801ed48:	e013      	b.n	801ed72 <tcp_receive+0x27e>
 801ed4a:	bf00      	nop
 801ed4c:	0802a89c 	.word	0x0802a89c
 801ed50:	0802abcc 	.word	0x0802abcc
 801ed54:	0802a8e8 	.word	0x0802a8e8
 801ed58:	0802abe8 	.word	0x0802abe8
 801ed5c:	200111a4 	.word	0x200111a4
 801ed60:	20011198 	.word	0x20011198
 801ed64:	2001119c 	.word	0x2001119c
 801ed68:	20011188 	.word	0x20011188
 801ed6c:	200111a2 	.word	0x200111a2
 801ed70:	2302      	movs	r3, #2
 801ed72:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801ed76:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801ed7a:	b29a      	uxth	r2, r3
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ed80:	fb12 f303 	smulbb	r3, r2, r3
 801ed84:	b29b      	uxth	r3, r3
 801ed86:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801ed88:	4293      	cmp	r3, r2
 801ed8a:	bf28      	it	cs
 801ed8c:	4613      	movcs	r3, r2
 801ed8e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801ed96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ed98:	4413      	add	r3, r2
 801ed9a:	b29a      	uxth	r2, r3
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801eda2:	429a      	cmp	r2, r3
 801eda4:	d309      	bcc.n	801edba <tcp_receive+0x2c6>
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801edac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801edae:	4413      	add	r3, r2
 801edb0:	b29a      	uxth	r2, r3
 801edb2:	687b      	ldr	r3, [r7, #4]
 801edb4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801edb8:	e04e      	b.n	801ee58 <tcp_receive+0x364>
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801edc0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801edc4:	e048      	b.n	801ee58 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801edcc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801edce:	4413      	add	r3, r2
 801edd0:	b29a      	uxth	r2, r3
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801edd8:	429a      	cmp	r2, r3
 801edda:	d309      	bcc.n	801edf0 <tcp_receive+0x2fc>
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801ede2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801ede4:	4413      	add	r3, r2
 801ede6:	b29a      	uxth	r2, r3
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801edee:	e004      	b.n	801edfa <tcp_receive+0x306>
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801edf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ee06:	429a      	cmp	r2, r3
 801ee08:	d326      	bcc.n	801ee58 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ee16:	1ad3      	subs	r3, r2, r3
 801ee18:	b29a      	uxth	r2, r3
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ee2a:	4413      	add	r3, r2
 801ee2c:	b29a      	uxth	r2, r3
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ee34:	429a      	cmp	r2, r3
 801ee36:	d30a      	bcc.n	801ee4e <tcp_receive+0x35a>
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ee42:	4413      	add	r3, r2
 801ee44:	b29a      	uxth	r2, r3
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801ee4c:	e004      	b.n	801ee58 <tcp_receive+0x364>
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ee54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ee60:	4a98      	ldr	r2, [pc, #608]	@ (801f0c4 <tcp_receive+0x5d0>)
 801ee62:	6878      	ldr	r0, [r7, #4]
 801ee64:	f7ff fdca 	bl	801e9fc <tcp_free_acked_segments>
 801ee68:	4602      	mov	r2, r0
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ee76:	4a94      	ldr	r2, [pc, #592]	@ (801f0c8 <tcp_receive+0x5d4>)
 801ee78:	6878      	ldr	r0, [r7, #4]
 801ee7a:	f7ff fdbf 	bl	801e9fc <tcp_free_acked_segments>
 801ee7e:	4602      	mov	r2, r0
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ee88:	2b00      	cmp	r3, #0
 801ee8a:	d104      	bne.n	801ee96 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ee92:	861a      	strh	r2, [r3, #48]	@ 0x30
 801ee94:	e002      	b.n	801ee9c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	2200      	movs	r2, #0
 801ee9a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	2200      	movs	r2, #0
 801eea0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801eea2:	687b      	ldr	r3, [r7, #4]
 801eea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	d103      	bne.n	801eeb2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	2200      	movs	r2, #0
 801eeae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801eeb8:	4b84      	ldr	r3, [pc, #528]	@ (801f0cc <tcp_receive+0x5d8>)
 801eeba:	881b      	ldrh	r3, [r3, #0]
 801eebc:	4413      	add	r3, r2
 801eebe:	b29a      	uxth	r2, r3
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	8b5b      	ldrh	r3, [r3, #26]
 801eeca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d035      	beq.n	801ef3e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801eed2:	687b      	ldr	r3, [r7, #4]
 801eed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	d118      	bne.n	801ef0c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d00c      	beq.n	801eefc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801eeea:	68db      	ldr	r3, [r3, #12]
 801eeec:	685b      	ldr	r3, [r3, #4]
 801eeee:	4618      	mov	r0, r3
 801eef0:	f7fa fe15 	bl	8019b1e <lwip_htonl>
 801eef4:	4603      	mov	r3, r0
 801eef6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801eef8:	2b00      	cmp	r3, #0
 801eefa:	dc20      	bgt.n	801ef3e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	8b5b      	ldrh	r3, [r3, #26]
 801ef00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ef04:	b29a      	uxth	r2, r3
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ef0a:	e018      	b.n	801ef3e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef14:	68db      	ldr	r3, [r3, #12]
 801ef16:	685b      	ldr	r3, [r3, #4]
 801ef18:	4618      	mov	r0, r3
 801ef1a:	f7fa fe00 	bl	8019b1e <lwip_htonl>
 801ef1e:	4603      	mov	r3, r0
 801ef20:	1ae3      	subs	r3, r4, r3
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	dc0b      	bgt.n	801ef3e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	8b5b      	ldrh	r3, [r3, #26]
 801ef2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ef2e:	b29a      	uxth	r2, r3
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ef34:	e003      	b.n	801ef3e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801ef36:	6878      	ldr	r0, [r7, #4]
 801ef38:	f002 fbc8 	bl	80216cc <tcp_send_empty_ack>
 801ef3c:	e000      	b.n	801ef40 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ef3e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d05b      	beq.n	801f000 <tcp_receive+0x50c>
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ef4c:	4b60      	ldr	r3, [pc, #384]	@ (801f0d0 <tcp_receive+0x5dc>)
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	1ad3      	subs	r3, r2, r3
 801ef52:	2b00      	cmp	r3, #0
 801ef54:	da54      	bge.n	801f000 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801ef56:	4b5f      	ldr	r3, [pc, #380]	@ (801f0d4 <tcp_receive+0x5e0>)
 801ef58:	681b      	ldr	r3, [r3, #0]
 801ef5a:	b29a      	uxth	r2, r3
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ef60:	b29b      	uxth	r3, r3
 801ef62:	1ad3      	subs	r3, r2, r3
 801ef64:	b29b      	uxth	r3, r3
 801ef66:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801ef6a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801ef74:	10db      	asrs	r3, r3, #3
 801ef76:	b21b      	sxth	r3, r3
 801ef78:	b29b      	uxth	r3, r3
 801ef7a:	1ad3      	subs	r3, r2, r3
 801ef7c:	b29b      	uxth	r3, r3
 801ef7e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801ef88:	b29a      	uxth	r2, r3
 801ef8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801ef8e:	4413      	add	r3, r2
 801ef90:	b29b      	uxth	r3, r3
 801ef92:	b21a      	sxth	r2, r3
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801ef98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	da05      	bge.n	801efac <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801efa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801efa4:	425b      	negs	r3, r3
 801efa6:	b29b      	uxth	r3, r3
 801efa8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801efac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801efb6:	109b      	asrs	r3, r3, #2
 801efb8:	b21b      	sxth	r3, r3
 801efba:	b29b      	uxth	r3, r3
 801efbc:	1ad3      	subs	r3, r2, r3
 801efbe:	b29b      	uxth	r3, r3
 801efc0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801efca:	b29a      	uxth	r2, r3
 801efcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801efd0:	4413      	add	r3, r2
 801efd2:	b29b      	uxth	r3, r3
 801efd4:	b21a      	sxth	r2, r3
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801efe0:	10db      	asrs	r3, r3, #3
 801efe2:	b21b      	sxth	r3, r3
 801efe4:	b29a      	uxth	r2, r3
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801efec:	b29b      	uxth	r3, r3
 801efee:	4413      	add	r3, r2
 801eff0:	b29b      	uxth	r3, r3
 801eff2:	b21a      	sxth	r2, r3
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	2200      	movs	r2, #0
 801effe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801f000:	4b35      	ldr	r3, [pc, #212]	@ (801f0d8 <tcp_receive+0x5e4>)
 801f002:	881b      	ldrh	r3, [r3, #0]
 801f004:	2b00      	cmp	r3, #0
 801f006:	f000 84df 	beq.w	801f9c8 <tcp_receive+0xed4>
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	7d1b      	ldrb	r3, [r3, #20]
 801f00e:	2b06      	cmp	r3, #6
 801f010:	f200 84da 	bhi.w	801f9c8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f018:	4b30      	ldr	r3, [pc, #192]	@ (801f0dc <tcp_receive+0x5e8>)
 801f01a:	681b      	ldr	r3, [r3, #0]
 801f01c:	1ad3      	subs	r3, r2, r3
 801f01e:	3b01      	subs	r3, #1
 801f020:	2b00      	cmp	r3, #0
 801f022:	f2c0 808f 	blt.w	801f144 <tcp_receive+0x650>
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f02a:	4b2b      	ldr	r3, [pc, #172]	@ (801f0d8 <tcp_receive+0x5e4>)
 801f02c:	881b      	ldrh	r3, [r3, #0]
 801f02e:	4619      	mov	r1, r3
 801f030:	4b2a      	ldr	r3, [pc, #168]	@ (801f0dc <tcp_receive+0x5e8>)
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	440b      	add	r3, r1
 801f036:	1ad3      	subs	r3, r2, r3
 801f038:	3301      	adds	r3, #1
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	f300 8082 	bgt.w	801f144 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801f040:	4b27      	ldr	r3, [pc, #156]	@ (801f0e0 <tcp_receive+0x5ec>)
 801f042:	685b      	ldr	r3, [r3, #4]
 801f044:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f04a:	4b24      	ldr	r3, [pc, #144]	@ (801f0dc <tcp_receive+0x5e8>)
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	1ad3      	subs	r3, r2, r3
 801f050:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801f052:	4b23      	ldr	r3, [pc, #140]	@ (801f0e0 <tcp_receive+0x5ec>)
 801f054:	685b      	ldr	r3, [r3, #4]
 801f056:	2b00      	cmp	r3, #0
 801f058:	d106      	bne.n	801f068 <tcp_receive+0x574>
 801f05a:	4b22      	ldr	r3, [pc, #136]	@ (801f0e4 <tcp_receive+0x5f0>)
 801f05c:	f240 5294 	movw	r2, #1428	@ 0x594
 801f060:	4921      	ldr	r1, [pc, #132]	@ (801f0e8 <tcp_receive+0x5f4>)
 801f062:	4822      	ldr	r0, [pc, #136]	@ (801f0ec <tcp_receive+0x5f8>)
 801f064:	f008 fb82 	bl	802776c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801f068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f06a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f06e:	4293      	cmp	r3, r2
 801f070:	d906      	bls.n	801f080 <tcp_receive+0x58c>
 801f072:	4b1c      	ldr	r3, [pc, #112]	@ (801f0e4 <tcp_receive+0x5f0>)
 801f074:	f240 5295 	movw	r2, #1429	@ 0x595
 801f078:	491d      	ldr	r1, [pc, #116]	@ (801f0f0 <tcp_receive+0x5fc>)
 801f07a:	481c      	ldr	r0, [pc, #112]	@ (801f0ec <tcp_receive+0x5f8>)
 801f07c:	f008 fb76 	bl	802776c <iprintf>
      off = (u16_t)off32;
 801f080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f082:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801f086:	4b16      	ldr	r3, [pc, #88]	@ (801f0e0 <tcp_receive+0x5ec>)
 801f088:	685b      	ldr	r3, [r3, #4]
 801f08a:	891b      	ldrh	r3, [r3, #8]
 801f08c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f090:	429a      	cmp	r2, r3
 801f092:	d906      	bls.n	801f0a2 <tcp_receive+0x5ae>
 801f094:	4b13      	ldr	r3, [pc, #76]	@ (801f0e4 <tcp_receive+0x5f0>)
 801f096:	f240 5297 	movw	r2, #1431	@ 0x597
 801f09a:	4916      	ldr	r1, [pc, #88]	@ (801f0f4 <tcp_receive+0x600>)
 801f09c:	4813      	ldr	r0, [pc, #76]	@ (801f0ec <tcp_receive+0x5f8>)
 801f09e:	f008 fb65 	bl	802776c <iprintf>
      inseg.len -= off;
 801f0a2:	4b0f      	ldr	r3, [pc, #60]	@ (801f0e0 <tcp_receive+0x5ec>)
 801f0a4:	891a      	ldrh	r2, [r3, #8]
 801f0a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f0aa:	1ad3      	subs	r3, r2, r3
 801f0ac:	b29a      	uxth	r2, r3
 801f0ae:	4b0c      	ldr	r3, [pc, #48]	@ (801f0e0 <tcp_receive+0x5ec>)
 801f0b0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801f0b2:	4b0b      	ldr	r3, [pc, #44]	@ (801f0e0 <tcp_receive+0x5ec>)
 801f0b4:	685b      	ldr	r3, [r3, #4]
 801f0b6:	891a      	ldrh	r2, [r3, #8]
 801f0b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f0bc:	1ad3      	subs	r3, r2, r3
 801f0be:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801f0c0:	e02a      	b.n	801f118 <tcp_receive+0x624>
 801f0c2:	bf00      	nop
 801f0c4:	0802ac04 	.word	0x0802ac04
 801f0c8:	0802ac0c 	.word	0x0802ac0c
 801f0cc:	200111a0 	.word	0x200111a0
 801f0d0:	2001119c 	.word	0x2001119c
 801f0d4:	20011160 	.word	0x20011160
 801f0d8:	200111a2 	.word	0x200111a2
 801f0dc:	20011198 	.word	0x20011198
 801f0e0:	20011178 	.word	0x20011178
 801f0e4:	0802a89c 	.word	0x0802a89c
 801f0e8:	0802ac14 	.word	0x0802ac14
 801f0ec:	0802a8e8 	.word	0x0802a8e8
 801f0f0:	0802ac24 	.word	0x0802ac24
 801f0f4:	0802ac34 	.word	0x0802ac34
        off -= p->len;
 801f0f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f0fa:	895b      	ldrh	r3, [r3, #10]
 801f0fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f100:	1ad3      	subs	r3, r2, r3
 801f102:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801f106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f108:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801f10a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801f10c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f10e:	2200      	movs	r2, #0
 801f110:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801f112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801f118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f11a:	895b      	ldrh	r3, [r3, #10]
 801f11c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f120:	429a      	cmp	r2, r3
 801f122:	d8e9      	bhi.n	801f0f8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801f124:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f128:	4619      	mov	r1, r3
 801f12a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801f12c:	f7fc f85a 	bl	801b1e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f134:	4a90      	ldr	r2, [pc, #576]	@ (801f378 <tcp_receive+0x884>)
 801f136:	6013      	str	r3, [r2, #0]
 801f138:	4b90      	ldr	r3, [pc, #576]	@ (801f37c <tcp_receive+0x888>)
 801f13a:	68db      	ldr	r3, [r3, #12]
 801f13c:	4a8e      	ldr	r2, [pc, #568]	@ (801f378 <tcp_receive+0x884>)
 801f13e:	6812      	ldr	r2, [r2, #0]
 801f140:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801f142:	e00d      	b.n	801f160 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801f144:	4b8c      	ldr	r3, [pc, #560]	@ (801f378 <tcp_receive+0x884>)
 801f146:	681a      	ldr	r2, [r3, #0]
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f14c:	1ad3      	subs	r3, r2, r3
 801f14e:	2b00      	cmp	r3, #0
 801f150:	da06      	bge.n	801f160 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	8b5b      	ldrh	r3, [r3, #26]
 801f156:	f043 0302 	orr.w	r3, r3, #2
 801f15a:	b29a      	uxth	r2, r3
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f160:	4b85      	ldr	r3, [pc, #532]	@ (801f378 <tcp_receive+0x884>)
 801f162:	681a      	ldr	r2, [r3, #0]
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f168:	1ad3      	subs	r3, r2, r3
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	f2c0 8427 	blt.w	801f9be <tcp_receive+0xeca>
 801f170:	4b81      	ldr	r3, [pc, #516]	@ (801f378 <tcp_receive+0x884>)
 801f172:	681a      	ldr	r2, [r3, #0]
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f178:	6879      	ldr	r1, [r7, #4]
 801f17a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f17c:	440b      	add	r3, r1
 801f17e:	1ad3      	subs	r3, r2, r3
 801f180:	3301      	adds	r3, #1
 801f182:	2b00      	cmp	r3, #0
 801f184:	f300 841b 	bgt.w	801f9be <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f18c:	4b7a      	ldr	r3, [pc, #488]	@ (801f378 <tcp_receive+0x884>)
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	429a      	cmp	r2, r3
 801f192:	f040 8298 	bne.w	801f6c6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801f196:	4b79      	ldr	r3, [pc, #484]	@ (801f37c <tcp_receive+0x888>)
 801f198:	891c      	ldrh	r4, [r3, #8]
 801f19a:	4b78      	ldr	r3, [pc, #480]	@ (801f37c <tcp_receive+0x888>)
 801f19c:	68db      	ldr	r3, [r3, #12]
 801f19e:	899b      	ldrh	r3, [r3, #12]
 801f1a0:	b29b      	uxth	r3, r3
 801f1a2:	4618      	mov	r0, r3
 801f1a4:	f7fa fca6 	bl	8019af4 <lwip_htons>
 801f1a8:	4603      	mov	r3, r0
 801f1aa:	b2db      	uxtb	r3, r3
 801f1ac:	f003 0303 	and.w	r3, r3, #3
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d001      	beq.n	801f1b8 <tcp_receive+0x6c4>
 801f1b4:	2301      	movs	r3, #1
 801f1b6:	e000      	b.n	801f1ba <tcp_receive+0x6c6>
 801f1b8:	2300      	movs	r3, #0
 801f1ba:	4423      	add	r3, r4
 801f1bc:	b29a      	uxth	r2, r3
 801f1be:	4b70      	ldr	r3, [pc, #448]	@ (801f380 <tcp_receive+0x88c>)
 801f1c0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801f1c6:	4b6e      	ldr	r3, [pc, #440]	@ (801f380 <tcp_receive+0x88c>)
 801f1c8:	881b      	ldrh	r3, [r3, #0]
 801f1ca:	429a      	cmp	r2, r3
 801f1cc:	d274      	bcs.n	801f2b8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801f1ce:	4b6b      	ldr	r3, [pc, #428]	@ (801f37c <tcp_receive+0x888>)
 801f1d0:	68db      	ldr	r3, [r3, #12]
 801f1d2:	899b      	ldrh	r3, [r3, #12]
 801f1d4:	b29b      	uxth	r3, r3
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	f7fa fc8c 	bl	8019af4 <lwip_htons>
 801f1dc:	4603      	mov	r3, r0
 801f1de:	b2db      	uxtb	r3, r3
 801f1e0:	f003 0301 	and.w	r3, r3, #1
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d01e      	beq.n	801f226 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801f1e8:	4b64      	ldr	r3, [pc, #400]	@ (801f37c <tcp_receive+0x888>)
 801f1ea:	68db      	ldr	r3, [r3, #12]
 801f1ec:	899b      	ldrh	r3, [r3, #12]
 801f1ee:	b29b      	uxth	r3, r3
 801f1f0:	b21b      	sxth	r3, r3
 801f1f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801f1f6:	b21c      	sxth	r4, r3
 801f1f8:	4b60      	ldr	r3, [pc, #384]	@ (801f37c <tcp_receive+0x888>)
 801f1fa:	68db      	ldr	r3, [r3, #12]
 801f1fc:	899b      	ldrh	r3, [r3, #12]
 801f1fe:	b29b      	uxth	r3, r3
 801f200:	4618      	mov	r0, r3
 801f202:	f7fa fc77 	bl	8019af4 <lwip_htons>
 801f206:	4603      	mov	r3, r0
 801f208:	b2db      	uxtb	r3, r3
 801f20a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801f20e:	b29b      	uxth	r3, r3
 801f210:	4618      	mov	r0, r3
 801f212:	f7fa fc6f 	bl	8019af4 <lwip_htons>
 801f216:	4603      	mov	r3, r0
 801f218:	b21b      	sxth	r3, r3
 801f21a:	4323      	orrs	r3, r4
 801f21c:	b21a      	sxth	r2, r3
 801f21e:	4b57      	ldr	r3, [pc, #348]	@ (801f37c <tcp_receive+0x888>)
 801f220:	68db      	ldr	r3, [r3, #12]
 801f222:	b292      	uxth	r2, r2
 801f224:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801f22a:	4b54      	ldr	r3, [pc, #336]	@ (801f37c <tcp_receive+0x888>)
 801f22c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801f22e:	4b53      	ldr	r3, [pc, #332]	@ (801f37c <tcp_receive+0x888>)
 801f230:	68db      	ldr	r3, [r3, #12]
 801f232:	899b      	ldrh	r3, [r3, #12]
 801f234:	b29b      	uxth	r3, r3
 801f236:	4618      	mov	r0, r3
 801f238:	f7fa fc5c 	bl	8019af4 <lwip_htons>
 801f23c:	4603      	mov	r3, r0
 801f23e:	b2db      	uxtb	r3, r3
 801f240:	f003 0302 	and.w	r3, r3, #2
 801f244:	2b00      	cmp	r3, #0
 801f246:	d005      	beq.n	801f254 <tcp_receive+0x760>
            inseg.len -= 1;
 801f248:	4b4c      	ldr	r3, [pc, #304]	@ (801f37c <tcp_receive+0x888>)
 801f24a:	891b      	ldrh	r3, [r3, #8]
 801f24c:	3b01      	subs	r3, #1
 801f24e:	b29a      	uxth	r2, r3
 801f250:	4b4a      	ldr	r3, [pc, #296]	@ (801f37c <tcp_receive+0x888>)
 801f252:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801f254:	4b49      	ldr	r3, [pc, #292]	@ (801f37c <tcp_receive+0x888>)
 801f256:	685b      	ldr	r3, [r3, #4]
 801f258:	4a48      	ldr	r2, [pc, #288]	@ (801f37c <tcp_receive+0x888>)
 801f25a:	8912      	ldrh	r2, [r2, #8]
 801f25c:	4611      	mov	r1, r2
 801f25e:	4618      	mov	r0, r3
 801f260:	f7fb fec0 	bl	801afe4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801f264:	4b45      	ldr	r3, [pc, #276]	@ (801f37c <tcp_receive+0x888>)
 801f266:	891c      	ldrh	r4, [r3, #8]
 801f268:	4b44      	ldr	r3, [pc, #272]	@ (801f37c <tcp_receive+0x888>)
 801f26a:	68db      	ldr	r3, [r3, #12]
 801f26c:	899b      	ldrh	r3, [r3, #12]
 801f26e:	b29b      	uxth	r3, r3
 801f270:	4618      	mov	r0, r3
 801f272:	f7fa fc3f 	bl	8019af4 <lwip_htons>
 801f276:	4603      	mov	r3, r0
 801f278:	b2db      	uxtb	r3, r3
 801f27a:	f003 0303 	and.w	r3, r3, #3
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d001      	beq.n	801f286 <tcp_receive+0x792>
 801f282:	2301      	movs	r3, #1
 801f284:	e000      	b.n	801f288 <tcp_receive+0x794>
 801f286:	2300      	movs	r3, #0
 801f288:	4423      	add	r3, r4
 801f28a:	b29a      	uxth	r2, r3
 801f28c:	4b3c      	ldr	r3, [pc, #240]	@ (801f380 <tcp_receive+0x88c>)
 801f28e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801f290:	4b3b      	ldr	r3, [pc, #236]	@ (801f380 <tcp_receive+0x88c>)
 801f292:	881b      	ldrh	r3, [r3, #0]
 801f294:	461a      	mov	r2, r3
 801f296:	4b38      	ldr	r3, [pc, #224]	@ (801f378 <tcp_receive+0x884>)
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	441a      	add	r2, r3
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f2a0:	6879      	ldr	r1, [r7, #4]
 801f2a2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f2a4:	440b      	add	r3, r1
 801f2a6:	429a      	cmp	r2, r3
 801f2a8:	d006      	beq.n	801f2b8 <tcp_receive+0x7c4>
 801f2aa:	4b36      	ldr	r3, [pc, #216]	@ (801f384 <tcp_receive+0x890>)
 801f2ac:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801f2b0:	4935      	ldr	r1, [pc, #212]	@ (801f388 <tcp_receive+0x894>)
 801f2b2:	4836      	ldr	r0, [pc, #216]	@ (801f38c <tcp_receive+0x898>)
 801f2b4:	f008 fa5a 	bl	802776c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	f000 80e6 	beq.w	801f48e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801f2c2:	4b2e      	ldr	r3, [pc, #184]	@ (801f37c <tcp_receive+0x888>)
 801f2c4:	68db      	ldr	r3, [r3, #12]
 801f2c6:	899b      	ldrh	r3, [r3, #12]
 801f2c8:	b29b      	uxth	r3, r3
 801f2ca:	4618      	mov	r0, r3
 801f2cc:	f7fa fc12 	bl	8019af4 <lwip_htons>
 801f2d0:	4603      	mov	r3, r0
 801f2d2:	b2db      	uxtb	r3, r3
 801f2d4:	f003 0301 	and.w	r3, r3, #1
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d010      	beq.n	801f2fe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801f2dc:	e00a      	b.n	801f2f4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801f2de:	687b      	ldr	r3, [r7, #4]
 801f2e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f2e2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f2e8:	681a      	ldr	r2, [r3, #0]
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801f2ee:	68f8      	ldr	r0, [r7, #12]
 801f2f0:	f7fd fcc5 	bl	801cc7e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801f2f4:	687b      	ldr	r3, [r7, #4]
 801f2f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f2f8:	2b00      	cmp	r3, #0
 801f2fa:	d1f0      	bne.n	801f2de <tcp_receive+0x7ea>
 801f2fc:	e0c7      	b.n	801f48e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801f2fe:	687b      	ldr	r3, [r7, #4]
 801f300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f302:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801f304:	e051      	b.n	801f3aa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801f306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f308:	68db      	ldr	r3, [r3, #12]
 801f30a:	899b      	ldrh	r3, [r3, #12]
 801f30c:	b29b      	uxth	r3, r3
 801f30e:	4618      	mov	r0, r3
 801f310:	f7fa fbf0 	bl	8019af4 <lwip_htons>
 801f314:	4603      	mov	r3, r0
 801f316:	b2db      	uxtb	r3, r3
 801f318:	f003 0301 	and.w	r3, r3, #1
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d03c      	beq.n	801f39a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801f320:	4b16      	ldr	r3, [pc, #88]	@ (801f37c <tcp_receive+0x888>)
 801f322:	68db      	ldr	r3, [r3, #12]
 801f324:	899b      	ldrh	r3, [r3, #12]
 801f326:	b29b      	uxth	r3, r3
 801f328:	4618      	mov	r0, r3
 801f32a:	f7fa fbe3 	bl	8019af4 <lwip_htons>
 801f32e:	4603      	mov	r3, r0
 801f330:	b2db      	uxtb	r3, r3
 801f332:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801f336:	2b00      	cmp	r3, #0
 801f338:	d12f      	bne.n	801f39a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801f33a:	4b10      	ldr	r3, [pc, #64]	@ (801f37c <tcp_receive+0x888>)
 801f33c:	68db      	ldr	r3, [r3, #12]
 801f33e:	899b      	ldrh	r3, [r3, #12]
 801f340:	b29c      	uxth	r4, r3
 801f342:	2001      	movs	r0, #1
 801f344:	f7fa fbd6 	bl	8019af4 <lwip_htons>
 801f348:	4603      	mov	r3, r0
 801f34a:	461a      	mov	r2, r3
 801f34c:	4b0b      	ldr	r3, [pc, #44]	@ (801f37c <tcp_receive+0x888>)
 801f34e:	68db      	ldr	r3, [r3, #12]
 801f350:	4322      	orrs	r2, r4
 801f352:	b292      	uxth	r2, r2
 801f354:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801f356:	4b09      	ldr	r3, [pc, #36]	@ (801f37c <tcp_receive+0x888>)
 801f358:	891c      	ldrh	r4, [r3, #8]
 801f35a:	4b08      	ldr	r3, [pc, #32]	@ (801f37c <tcp_receive+0x888>)
 801f35c:	68db      	ldr	r3, [r3, #12]
 801f35e:	899b      	ldrh	r3, [r3, #12]
 801f360:	b29b      	uxth	r3, r3
 801f362:	4618      	mov	r0, r3
 801f364:	f7fa fbc6 	bl	8019af4 <lwip_htons>
 801f368:	4603      	mov	r3, r0
 801f36a:	b2db      	uxtb	r3, r3
 801f36c:	f003 0303 	and.w	r3, r3, #3
 801f370:	2b00      	cmp	r3, #0
 801f372:	d00d      	beq.n	801f390 <tcp_receive+0x89c>
 801f374:	2301      	movs	r3, #1
 801f376:	e00c      	b.n	801f392 <tcp_receive+0x89e>
 801f378:	20011198 	.word	0x20011198
 801f37c:	20011178 	.word	0x20011178
 801f380:	200111a2 	.word	0x200111a2
 801f384:	0802a89c 	.word	0x0802a89c
 801f388:	0802ac44 	.word	0x0802ac44
 801f38c:	0802a8e8 	.word	0x0802a8e8
 801f390:	2300      	movs	r3, #0
 801f392:	4423      	add	r3, r4
 801f394:	b29a      	uxth	r2, r3
 801f396:	4b98      	ldr	r3, [pc, #608]	@ (801f5f8 <tcp_receive+0xb04>)
 801f398:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801f39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f39c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801f39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801f3a4:	6938      	ldr	r0, [r7, #16]
 801f3a6:	f7fd fc6a 	bl	801cc7e <tcp_seg_free>
            while (next &&
 801f3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d00e      	beq.n	801f3ce <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801f3b0:	4b91      	ldr	r3, [pc, #580]	@ (801f5f8 <tcp_receive+0xb04>)
 801f3b2:	881b      	ldrh	r3, [r3, #0]
 801f3b4:	461a      	mov	r2, r3
 801f3b6:	4b91      	ldr	r3, [pc, #580]	@ (801f5fc <tcp_receive+0xb08>)
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	441a      	add	r2, r3
 801f3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f3be:	68db      	ldr	r3, [r3, #12]
 801f3c0:	685b      	ldr	r3, [r3, #4]
 801f3c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801f3c4:	8909      	ldrh	r1, [r1, #8]
 801f3c6:	440b      	add	r3, r1
 801f3c8:	1ad3      	subs	r3, r2, r3
            while (next &&
 801f3ca:	2b00      	cmp	r3, #0
 801f3cc:	da9b      	bge.n	801f306 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801f3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d059      	beq.n	801f488 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801f3d4:	4b88      	ldr	r3, [pc, #544]	@ (801f5f8 <tcp_receive+0xb04>)
 801f3d6:	881b      	ldrh	r3, [r3, #0]
 801f3d8:	461a      	mov	r2, r3
 801f3da:	4b88      	ldr	r3, [pc, #544]	@ (801f5fc <tcp_receive+0xb08>)
 801f3dc:	681b      	ldr	r3, [r3, #0]
 801f3de:	441a      	add	r2, r3
 801f3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f3e2:	68db      	ldr	r3, [r3, #12]
 801f3e4:	685b      	ldr	r3, [r3, #4]
 801f3e6:	1ad3      	subs	r3, r2, r3
            if (next &&
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	dd4d      	ble.n	801f488 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801f3ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f3ee:	68db      	ldr	r3, [r3, #12]
 801f3f0:	685b      	ldr	r3, [r3, #4]
 801f3f2:	b29a      	uxth	r2, r3
 801f3f4:	4b81      	ldr	r3, [pc, #516]	@ (801f5fc <tcp_receive+0xb08>)
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	b29b      	uxth	r3, r3
 801f3fa:	1ad3      	subs	r3, r2, r3
 801f3fc:	b29a      	uxth	r2, r3
 801f3fe:	4b80      	ldr	r3, [pc, #512]	@ (801f600 <tcp_receive+0xb0c>)
 801f400:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801f402:	4b7f      	ldr	r3, [pc, #508]	@ (801f600 <tcp_receive+0xb0c>)
 801f404:	68db      	ldr	r3, [r3, #12]
 801f406:	899b      	ldrh	r3, [r3, #12]
 801f408:	b29b      	uxth	r3, r3
 801f40a:	4618      	mov	r0, r3
 801f40c:	f7fa fb72 	bl	8019af4 <lwip_htons>
 801f410:	4603      	mov	r3, r0
 801f412:	b2db      	uxtb	r3, r3
 801f414:	f003 0302 	and.w	r3, r3, #2
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d005      	beq.n	801f428 <tcp_receive+0x934>
                inseg.len -= 1;
 801f41c:	4b78      	ldr	r3, [pc, #480]	@ (801f600 <tcp_receive+0xb0c>)
 801f41e:	891b      	ldrh	r3, [r3, #8]
 801f420:	3b01      	subs	r3, #1
 801f422:	b29a      	uxth	r2, r3
 801f424:	4b76      	ldr	r3, [pc, #472]	@ (801f600 <tcp_receive+0xb0c>)
 801f426:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801f428:	4b75      	ldr	r3, [pc, #468]	@ (801f600 <tcp_receive+0xb0c>)
 801f42a:	685b      	ldr	r3, [r3, #4]
 801f42c:	4a74      	ldr	r2, [pc, #464]	@ (801f600 <tcp_receive+0xb0c>)
 801f42e:	8912      	ldrh	r2, [r2, #8]
 801f430:	4611      	mov	r1, r2
 801f432:	4618      	mov	r0, r3
 801f434:	f7fb fdd6 	bl	801afe4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801f438:	4b71      	ldr	r3, [pc, #452]	@ (801f600 <tcp_receive+0xb0c>)
 801f43a:	891c      	ldrh	r4, [r3, #8]
 801f43c:	4b70      	ldr	r3, [pc, #448]	@ (801f600 <tcp_receive+0xb0c>)
 801f43e:	68db      	ldr	r3, [r3, #12]
 801f440:	899b      	ldrh	r3, [r3, #12]
 801f442:	b29b      	uxth	r3, r3
 801f444:	4618      	mov	r0, r3
 801f446:	f7fa fb55 	bl	8019af4 <lwip_htons>
 801f44a:	4603      	mov	r3, r0
 801f44c:	b2db      	uxtb	r3, r3
 801f44e:	f003 0303 	and.w	r3, r3, #3
 801f452:	2b00      	cmp	r3, #0
 801f454:	d001      	beq.n	801f45a <tcp_receive+0x966>
 801f456:	2301      	movs	r3, #1
 801f458:	e000      	b.n	801f45c <tcp_receive+0x968>
 801f45a:	2300      	movs	r3, #0
 801f45c:	4423      	add	r3, r4
 801f45e:	b29a      	uxth	r2, r3
 801f460:	4b65      	ldr	r3, [pc, #404]	@ (801f5f8 <tcp_receive+0xb04>)
 801f462:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801f464:	4b64      	ldr	r3, [pc, #400]	@ (801f5f8 <tcp_receive+0xb04>)
 801f466:	881b      	ldrh	r3, [r3, #0]
 801f468:	461a      	mov	r2, r3
 801f46a:	4b64      	ldr	r3, [pc, #400]	@ (801f5fc <tcp_receive+0xb08>)
 801f46c:	681b      	ldr	r3, [r3, #0]
 801f46e:	441a      	add	r2, r3
 801f470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f472:	68db      	ldr	r3, [r3, #12]
 801f474:	685b      	ldr	r3, [r3, #4]
 801f476:	429a      	cmp	r2, r3
 801f478:	d006      	beq.n	801f488 <tcp_receive+0x994>
 801f47a:	4b62      	ldr	r3, [pc, #392]	@ (801f604 <tcp_receive+0xb10>)
 801f47c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801f480:	4961      	ldr	r1, [pc, #388]	@ (801f608 <tcp_receive+0xb14>)
 801f482:	4862      	ldr	r0, [pc, #392]	@ (801f60c <tcp_receive+0xb18>)
 801f484:	f008 f972 	bl	802776c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801f48c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801f48e:	4b5a      	ldr	r3, [pc, #360]	@ (801f5f8 <tcp_receive+0xb04>)
 801f490:	881b      	ldrh	r3, [r3, #0]
 801f492:	461a      	mov	r2, r3
 801f494:	4b59      	ldr	r3, [pc, #356]	@ (801f5fc <tcp_receive+0xb08>)
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	441a      	add	r2, r3
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801f4a2:	4b55      	ldr	r3, [pc, #340]	@ (801f5f8 <tcp_receive+0xb04>)
 801f4a4:	881b      	ldrh	r3, [r3, #0]
 801f4a6:	429a      	cmp	r2, r3
 801f4a8:	d206      	bcs.n	801f4b8 <tcp_receive+0x9c4>
 801f4aa:	4b56      	ldr	r3, [pc, #344]	@ (801f604 <tcp_receive+0xb10>)
 801f4ac:	f240 6207 	movw	r2, #1543	@ 0x607
 801f4b0:	4957      	ldr	r1, [pc, #348]	@ (801f610 <tcp_receive+0xb1c>)
 801f4b2:	4856      	ldr	r0, [pc, #344]	@ (801f60c <tcp_receive+0xb18>)
 801f4b4:	f008 f95a 	bl	802776c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801f4bc:	4b4e      	ldr	r3, [pc, #312]	@ (801f5f8 <tcp_receive+0xb04>)
 801f4be:	881b      	ldrh	r3, [r3, #0]
 801f4c0:	1ad3      	subs	r3, r2, r3
 801f4c2:	b29a      	uxth	r2, r3
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801f4c8:	6878      	ldr	r0, [r7, #4]
 801f4ca:	f7fc feb1 	bl	801c230 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801f4ce:	4b4c      	ldr	r3, [pc, #304]	@ (801f600 <tcp_receive+0xb0c>)
 801f4d0:	685b      	ldr	r3, [r3, #4]
 801f4d2:	891b      	ldrh	r3, [r3, #8]
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d006      	beq.n	801f4e6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801f4d8:	4b49      	ldr	r3, [pc, #292]	@ (801f600 <tcp_receive+0xb0c>)
 801f4da:	685b      	ldr	r3, [r3, #4]
 801f4dc:	4a4d      	ldr	r2, [pc, #308]	@ (801f614 <tcp_receive+0xb20>)
 801f4de:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801f4e0:	4b47      	ldr	r3, [pc, #284]	@ (801f600 <tcp_receive+0xb0c>)
 801f4e2:	2200      	movs	r2, #0
 801f4e4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801f4e6:	4b46      	ldr	r3, [pc, #280]	@ (801f600 <tcp_receive+0xb0c>)
 801f4e8:	68db      	ldr	r3, [r3, #12]
 801f4ea:	899b      	ldrh	r3, [r3, #12]
 801f4ec:	b29b      	uxth	r3, r3
 801f4ee:	4618      	mov	r0, r3
 801f4f0:	f7fa fb00 	bl	8019af4 <lwip_htons>
 801f4f4:	4603      	mov	r3, r0
 801f4f6:	b2db      	uxtb	r3, r3
 801f4f8:	f003 0301 	and.w	r3, r3, #1
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	f000 80b8 	beq.w	801f672 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801f502:	4b45      	ldr	r3, [pc, #276]	@ (801f618 <tcp_receive+0xb24>)
 801f504:	781b      	ldrb	r3, [r3, #0]
 801f506:	f043 0320 	orr.w	r3, r3, #32
 801f50a:	b2da      	uxtb	r2, r3
 801f50c:	4b42      	ldr	r3, [pc, #264]	@ (801f618 <tcp_receive+0xb24>)
 801f50e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801f510:	e0af      	b.n	801f672 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f516:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f51c:	68db      	ldr	r3, [r3, #12]
 801f51e:	685b      	ldr	r3, [r3, #4]
 801f520:	4a36      	ldr	r2, [pc, #216]	@ (801f5fc <tcp_receive+0xb08>)
 801f522:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801f524:	68bb      	ldr	r3, [r7, #8]
 801f526:	891b      	ldrh	r3, [r3, #8]
 801f528:	461c      	mov	r4, r3
 801f52a:	68bb      	ldr	r3, [r7, #8]
 801f52c:	68db      	ldr	r3, [r3, #12]
 801f52e:	899b      	ldrh	r3, [r3, #12]
 801f530:	b29b      	uxth	r3, r3
 801f532:	4618      	mov	r0, r3
 801f534:	f7fa fade 	bl	8019af4 <lwip_htons>
 801f538:	4603      	mov	r3, r0
 801f53a:	b2db      	uxtb	r3, r3
 801f53c:	f003 0303 	and.w	r3, r3, #3
 801f540:	2b00      	cmp	r3, #0
 801f542:	d001      	beq.n	801f548 <tcp_receive+0xa54>
 801f544:	2301      	movs	r3, #1
 801f546:	e000      	b.n	801f54a <tcp_receive+0xa56>
 801f548:	2300      	movs	r3, #0
 801f54a:	191a      	adds	r2, r3, r4
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f550:	441a      	add	r2, r3
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f55a:	461c      	mov	r4, r3
 801f55c:	68bb      	ldr	r3, [r7, #8]
 801f55e:	891b      	ldrh	r3, [r3, #8]
 801f560:	461d      	mov	r5, r3
 801f562:	68bb      	ldr	r3, [r7, #8]
 801f564:	68db      	ldr	r3, [r3, #12]
 801f566:	899b      	ldrh	r3, [r3, #12]
 801f568:	b29b      	uxth	r3, r3
 801f56a:	4618      	mov	r0, r3
 801f56c:	f7fa fac2 	bl	8019af4 <lwip_htons>
 801f570:	4603      	mov	r3, r0
 801f572:	b2db      	uxtb	r3, r3
 801f574:	f003 0303 	and.w	r3, r3, #3
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d001      	beq.n	801f580 <tcp_receive+0xa8c>
 801f57c:	2301      	movs	r3, #1
 801f57e:	e000      	b.n	801f582 <tcp_receive+0xa8e>
 801f580:	2300      	movs	r3, #0
 801f582:	442b      	add	r3, r5
 801f584:	429c      	cmp	r4, r3
 801f586:	d206      	bcs.n	801f596 <tcp_receive+0xaa2>
 801f588:	4b1e      	ldr	r3, [pc, #120]	@ (801f604 <tcp_receive+0xb10>)
 801f58a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801f58e:	4923      	ldr	r1, [pc, #140]	@ (801f61c <tcp_receive+0xb28>)
 801f590:	481e      	ldr	r0, [pc, #120]	@ (801f60c <tcp_receive+0xb18>)
 801f592:	f008 f8eb 	bl	802776c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801f596:	68bb      	ldr	r3, [r7, #8]
 801f598:	891b      	ldrh	r3, [r3, #8]
 801f59a:	461c      	mov	r4, r3
 801f59c:	68bb      	ldr	r3, [r7, #8]
 801f59e:	68db      	ldr	r3, [r3, #12]
 801f5a0:	899b      	ldrh	r3, [r3, #12]
 801f5a2:	b29b      	uxth	r3, r3
 801f5a4:	4618      	mov	r0, r3
 801f5a6:	f7fa faa5 	bl	8019af4 <lwip_htons>
 801f5aa:	4603      	mov	r3, r0
 801f5ac:	b2db      	uxtb	r3, r3
 801f5ae:	f003 0303 	and.w	r3, r3, #3
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d001      	beq.n	801f5ba <tcp_receive+0xac6>
 801f5b6:	2301      	movs	r3, #1
 801f5b8:	e000      	b.n	801f5bc <tcp_receive+0xac8>
 801f5ba:	2300      	movs	r3, #0
 801f5bc:	1919      	adds	r1, r3, r4
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801f5c2:	b28b      	uxth	r3, r1
 801f5c4:	1ad3      	subs	r3, r2, r3
 801f5c6:	b29a      	uxth	r2, r3
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801f5cc:	6878      	ldr	r0, [r7, #4]
 801f5ce:	f7fc fe2f 	bl	801c230 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801f5d2:	68bb      	ldr	r3, [r7, #8]
 801f5d4:	685b      	ldr	r3, [r3, #4]
 801f5d6:	891b      	ldrh	r3, [r3, #8]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d028      	beq.n	801f62e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801f5dc:	4b0d      	ldr	r3, [pc, #52]	@ (801f614 <tcp_receive+0xb20>)
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d01d      	beq.n	801f620 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801f5e4:	4b0b      	ldr	r3, [pc, #44]	@ (801f614 <tcp_receive+0xb20>)
 801f5e6:	681a      	ldr	r2, [r3, #0]
 801f5e8:	68bb      	ldr	r3, [r7, #8]
 801f5ea:	685b      	ldr	r3, [r3, #4]
 801f5ec:	4619      	mov	r1, r3
 801f5ee:	4610      	mov	r0, r2
 801f5f0:	f7fb ff7e 	bl	801b4f0 <pbuf_cat>
 801f5f4:	e018      	b.n	801f628 <tcp_receive+0xb34>
 801f5f6:	bf00      	nop
 801f5f8:	200111a2 	.word	0x200111a2
 801f5fc:	20011198 	.word	0x20011198
 801f600:	20011178 	.word	0x20011178
 801f604:	0802a89c 	.word	0x0802a89c
 801f608:	0802ac7c 	.word	0x0802ac7c
 801f60c:	0802a8e8 	.word	0x0802a8e8
 801f610:	0802acb8 	.word	0x0802acb8
 801f614:	200111a8 	.word	0x200111a8
 801f618:	200111a5 	.word	0x200111a5
 801f61c:	0802acd8 	.word	0x0802acd8
            } else {
              recv_data = cseg->p;
 801f620:	68bb      	ldr	r3, [r7, #8]
 801f622:	685b      	ldr	r3, [r3, #4]
 801f624:	4a70      	ldr	r2, [pc, #448]	@ (801f7e8 <tcp_receive+0xcf4>)
 801f626:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801f628:	68bb      	ldr	r3, [r7, #8]
 801f62a:	2200      	movs	r2, #0
 801f62c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801f62e:	68bb      	ldr	r3, [r7, #8]
 801f630:	68db      	ldr	r3, [r3, #12]
 801f632:	899b      	ldrh	r3, [r3, #12]
 801f634:	b29b      	uxth	r3, r3
 801f636:	4618      	mov	r0, r3
 801f638:	f7fa fa5c 	bl	8019af4 <lwip_htons>
 801f63c:	4603      	mov	r3, r0
 801f63e:	b2db      	uxtb	r3, r3
 801f640:	f003 0301 	and.w	r3, r3, #1
 801f644:	2b00      	cmp	r3, #0
 801f646:	d00d      	beq.n	801f664 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801f648:	4b68      	ldr	r3, [pc, #416]	@ (801f7ec <tcp_receive+0xcf8>)
 801f64a:	781b      	ldrb	r3, [r3, #0]
 801f64c:	f043 0320 	orr.w	r3, r3, #32
 801f650:	b2da      	uxtb	r2, r3
 801f652:	4b66      	ldr	r3, [pc, #408]	@ (801f7ec <tcp_receive+0xcf8>)
 801f654:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	7d1b      	ldrb	r3, [r3, #20]
 801f65a:	2b04      	cmp	r3, #4
 801f65c:	d102      	bne.n	801f664 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	2207      	movs	r2, #7
 801f662:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801f664:	68bb      	ldr	r3, [r7, #8]
 801f666:	681a      	ldr	r2, [r3, #0]
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801f66c:	68b8      	ldr	r0, [r7, #8]
 801f66e:	f7fd fb06 	bl	801cc7e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f676:	2b00      	cmp	r3, #0
 801f678:	d008      	beq.n	801f68c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801f67a:	687b      	ldr	r3, [r7, #4]
 801f67c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f67e:	68db      	ldr	r3, [r3, #12]
 801f680:	685a      	ldr	r2, [r3, #4]
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801f686:	429a      	cmp	r2, r3
 801f688:	f43f af43 	beq.w	801f512 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	8b5b      	ldrh	r3, [r3, #26]
 801f690:	f003 0301 	and.w	r3, r3, #1
 801f694:	2b00      	cmp	r3, #0
 801f696:	d00e      	beq.n	801f6b6 <tcp_receive+0xbc2>
 801f698:	687b      	ldr	r3, [r7, #4]
 801f69a:	8b5b      	ldrh	r3, [r3, #26]
 801f69c:	f023 0301 	bic.w	r3, r3, #1
 801f6a0:	b29a      	uxth	r2, r3
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	835a      	strh	r2, [r3, #26]
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	8b5b      	ldrh	r3, [r3, #26]
 801f6aa:	f043 0302 	orr.w	r3, r3, #2
 801f6ae:	b29a      	uxth	r2, r3
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801f6b4:	e187      	b.n	801f9c6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	8b5b      	ldrh	r3, [r3, #26]
 801f6ba:	f043 0301 	orr.w	r3, r3, #1
 801f6be:	b29a      	uxth	r2, r3
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801f6c4:	e17f      	b.n	801f9c6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d106      	bne.n	801f6dc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801f6ce:	4848      	ldr	r0, [pc, #288]	@ (801f7f0 <tcp_receive+0xcfc>)
 801f6d0:	f7fd faee 	bl	801ccb0 <tcp_seg_copy>
 801f6d4:	4602      	mov	r2, r0
 801f6d6:	687b      	ldr	r3, [r7, #4]
 801f6d8:	675a      	str	r2, [r3, #116]	@ 0x74
 801f6da:	e16c      	b.n	801f9b6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801f6dc:	2300      	movs	r3, #0
 801f6de:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f6e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f6e6:	e156      	b.n	801f996 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801f6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f6ea:	68db      	ldr	r3, [r3, #12]
 801f6ec:	685a      	ldr	r2, [r3, #4]
 801f6ee:	4b41      	ldr	r3, [pc, #260]	@ (801f7f4 <tcp_receive+0xd00>)
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	429a      	cmp	r2, r3
 801f6f4:	d11d      	bne.n	801f732 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801f6f6:	4b3e      	ldr	r3, [pc, #248]	@ (801f7f0 <tcp_receive+0xcfc>)
 801f6f8:	891a      	ldrh	r2, [r3, #8]
 801f6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f6fc:	891b      	ldrh	r3, [r3, #8]
 801f6fe:	429a      	cmp	r2, r3
 801f700:	f240 814e 	bls.w	801f9a0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f704:	483a      	ldr	r0, [pc, #232]	@ (801f7f0 <tcp_receive+0xcfc>)
 801f706:	f7fd fad3 	bl	801ccb0 <tcp_seg_copy>
 801f70a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801f70c:	697b      	ldr	r3, [r7, #20]
 801f70e:	2b00      	cmp	r3, #0
 801f710:	f000 8148 	beq.w	801f9a4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801f714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f716:	2b00      	cmp	r3, #0
 801f718:	d003      	beq.n	801f722 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801f71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f71c:	697a      	ldr	r2, [r7, #20]
 801f71e:	601a      	str	r2, [r3, #0]
 801f720:	e002      	b.n	801f728 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	697a      	ldr	r2, [r7, #20]
 801f726:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801f728:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f72a:	6978      	ldr	r0, [r7, #20]
 801f72c:	f7ff f8de 	bl	801e8ec <tcp_oos_insert_segment>
                }
                break;
 801f730:	e138      	b.n	801f9a4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801f732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f734:	2b00      	cmp	r3, #0
 801f736:	d117      	bne.n	801f768 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801f738:	4b2e      	ldr	r3, [pc, #184]	@ (801f7f4 <tcp_receive+0xd00>)
 801f73a:	681a      	ldr	r2, [r3, #0]
 801f73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f73e:	68db      	ldr	r3, [r3, #12]
 801f740:	685b      	ldr	r3, [r3, #4]
 801f742:	1ad3      	subs	r3, r2, r3
 801f744:	2b00      	cmp	r3, #0
 801f746:	da57      	bge.n	801f7f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f748:	4829      	ldr	r0, [pc, #164]	@ (801f7f0 <tcp_receive+0xcfc>)
 801f74a:	f7fd fab1 	bl	801ccb0 <tcp_seg_copy>
 801f74e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801f750:	69bb      	ldr	r3, [r7, #24]
 801f752:	2b00      	cmp	r3, #0
 801f754:	f000 8128 	beq.w	801f9a8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	69ba      	ldr	r2, [r7, #24]
 801f75c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801f75e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f760:	69b8      	ldr	r0, [r7, #24]
 801f762:	f7ff f8c3 	bl	801e8ec <tcp_oos_insert_segment>
                  }
                  break;
 801f766:	e11f      	b.n	801f9a8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801f768:	4b22      	ldr	r3, [pc, #136]	@ (801f7f4 <tcp_receive+0xd00>)
 801f76a:	681a      	ldr	r2, [r3, #0]
 801f76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f76e:	68db      	ldr	r3, [r3, #12]
 801f770:	685b      	ldr	r3, [r3, #4]
 801f772:	1ad3      	subs	r3, r2, r3
 801f774:	3b01      	subs	r3, #1
 801f776:	2b00      	cmp	r3, #0
 801f778:	db3e      	blt.n	801f7f8 <tcp_receive+0xd04>
 801f77a:	4b1e      	ldr	r3, [pc, #120]	@ (801f7f4 <tcp_receive+0xd00>)
 801f77c:	681a      	ldr	r2, [r3, #0]
 801f77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f780:	68db      	ldr	r3, [r3, #12]
 801f782:	685b      	ldr	r3, [r3, #4]
 801f784:	1ad3      	subs	r3, r2, r3
 801f786:	3301      	adds	r3, #1
 801f788:	2b00      	cmp	r3, #0
 801f78a:	dc35      	bgt.n	801f7f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801f78c:	4818      	ldr	r0, [pc, #96]	@ (801f7f0 <tcp_receive+0xcfc>)
 801f78e:	f7fd fa8f 	bl	801ccb0 <tcp_seg_copy>
 801f792:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801f794:	69fb      	ldr	r3, [r7, #28]
 801f796:	2b00      	cmp	r3, #0
 801f798:	f000 8108 	beq.w	801f9ac <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801f79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f79e:	68db      	ldr	r3, [r3, #12]
 801f7a0:	685b      	ldr	r3, [r3, #4]
 801f7a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f7a4:	8912      	ldrh	r2, [r2, #8]
 801f7a6:	441a      	add	r2, r3
 801f7a8:	4b12      	ldr	r3, [pc, #72]	@ (801f7f4 <tcp_receive+0xd00>)
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	1ad3      	subs	r3, r2, r3
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	dd12      	ble.n	801f7d8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801f7b2:	4b10      	ldr	r3, [pc, #64]	@ (801f7f4 <tcp_receive+0xd00>)
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	b29a      	uxth	r2, r3
 801f7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7ba:	68db      	ldr	r3, [r3, #12]
 801f7bc:	685b      	ldr	r3, [r3, #4]
 801f7be:	b29b      	uxth	r3, r3
 801f7c0:	1ad3      	subs	r3, r2, r3
 801f7c2:	b29a      	uxth	r2, r3
 801f7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801f7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7ca:	685a      	ldr	r2, [r3, #4]
 801f7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7ce:	891b      	ldrh	r3, [r3, #8]
 801f7d0:	4619      	mov	r1, r3
 801f7d2:	4610      	mov	r0, r2
 801f7d4:	f7fb fc06 	bl	801afe4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801f7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f7da:	69fa      	ldr	r2, [r7, #28]
 801f7dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801f7de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f7e0:	69f8      	ldr	r0, [r7, #28]
 801f7e2:	f7ff f883 	bl	801e8ec <tcp_oos_insert_segment>
                  }
                  break;
 801f7e6:	e0e1      	b.n	801f9ac <tcp_receive+0xeb8>
 801f7e8:	200111a8 	.word	0x200111a8
 801f7ec:	200111a5 	.word	0x200111a5
 801f7f0:	20011178 	.word	0x20011178
 801f7f4:	20011198 	.word	0x20011198
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801f7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f7fa:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801f7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	2b00      	cmp	r3, #0
 801f802:	f040 80c5 	bne.w	801f990 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801f806:	4b7f      	ldr	r3, [pc, #508]	@ (801fa04 <tcp_receive+0xf10>)
 801f808:	681a      	ldr	r2, [r3, #0]
 801f80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f80c:	68db      	ldr	r3, [r3, #12]
 801f80e:	685b      	ldr	r3, [r3, #4]
 801f810:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801f812:	2b00      	cmp	r3, #0
 801f814:	f340 80bc 	ble.w	801f990 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f81a:	68db      	ldr	r3, [r3, #12]
 801f81c:	899b      	ldrh	r3, [r3, #12]
 801f81e:	b29b      	uxth	r3, r3
 801f820:	4618      	mov	r0, r3
 801f822:	f7fa f967 	bl	8019af4 <lwip_htons>
 801f826:	4603      	mov	r3, r0
 801f828:	b2db      	uxtb	r3, r3
 801f82a:	f003 0301 	and.w	r3, r3, #1
 801f82e:	2b00      	cmp	r3, #0
 801f830:	f040 80be 	bne.w	801f9b0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801f834:	4874      	ldr	r0, [pc, #464]	@ (801fa08 <tcp_receive+0xf14>)
 801f836:	f7fd fa3b 	bl	801ccb0 <tcp_seg_copy>
 801f83a:	4602      	mov	r2, r0
 801f83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f83e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801f840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f842:	681b      	ldr	r3, [r3, #0]
 801f844:	2b00      	cmp	r3, #0
 801f846:	f000 80b5 	beq.w	801f9b4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801f84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f84c:	68db      	ldr	r3, [r3, #12]
 801f84e:	685b      	ldr	r3, [r3, #4]
 801f850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801f852:	8912      	ldrh	r2, [r2, #8]
 801f854:	441a      	add	r2, r3
 801f856:	4b6b      	ldr	r3, [pc, #428]	@ (801fa04 <tcp_receive+0xf10>)
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	1ad3      	subs	r3, r2, r3
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	dd12      	ble.n	801f886 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801f860:	4b68      	ldr	r3, [pc, #416]	@ (801fa04 <tcp_receive+0xf10>)
 801f862:	681b      	ldr	r3, [r3, #0]
 801f864:	b29a      	uxth	r2, r3
 801f866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f868:	68db      	ldr	r3, [r3, #12]
 801f86a:	685b      	ldr	r3, [r3, #4]
 801f86c:	b29b      	uxth	r3, r3
 801f86e:	1ad3      	subs	r3, r2, r3
 801f870:	b29a      	uxth	r2, r3
 801f872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f874:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801f876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f878:	685a      	ldr	r2, [r3, #4]
 801f87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f87c:	891b      	ldrh	r3, [r3, #8]
 801f87e:	4619      	mov	r1, r3
 801f880:	4610      	mov	r0, r2
 801f882:	f7fb fbaf 	bl	801afe4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801f886:	4b61      	ldr	r3, [pc, #388]	@ (801fa0c <tcp_receive+0xf18>)
 801f888:	881b      	ldrh	r3, [r3, #0]
 801f88a:	461a      	mov	r2, r3
 801f88c:	4b5d      	ldr	r3, [pc, #372]	@ (801fa04 <tcp_receive+0xf10>)
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	441a      	add	r2, r3
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f896:	6879      	ldr	r1, [r7, #4]
 801f898:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f89a:	440b      	add	r3, r1
 801f89c:	1ad3      	subs	r3, r2, r3
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	f340 8088 	ble.w	801f9b4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801f8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	68db      	ldr	r3, [r3, #12]
 801f8aa:	899b      	ldrh	r3, [r3, #12]
 801f8ac:	b29b      	uxth	r3, r3
 801f8ae:	4618      	mov	r0, r3
 801f8b0:	f7fa f920 	bl	8019af4 <lwip_htons>
 801f8b4:	4603      	mov	r3, r0
 801f8b6:	b2db      	uxtb	r3, r3
 801f8b8:	f003 0301 	and.w	r3, r3, #1
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	d021      	beq.n	801f904 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801f8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f8c2:	681b      	ldr	r3, [r3, #0]
 801f8c4:	68db      	ldr	r3, [r3, #12]
 801f8c6:	899b      	ldrh	r3, [r3, #12]
 801f8c8:	b29b      	uxth	r3, r3
 801f8ca:	b21b      	sxth	r3, r3
 801f8cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801f8d0:	b21c      	sxth	r4, r3
 801f8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f8d4:	681b      	ldr	r3, [r3, #0]
 801f8d6:	68db      	ldr	r3, [r3, #12]
 801f8d8:	899b      	ldrh	r3, [r3, #12]
 801f8da:	b29b      	uxth	r3, r3
 801f8dc:	4618      	mov	r0, r3
 801f8de:	f7fa f909 	bl	8019af4 <lwip_htons>
 801f8e2:	4603      	mov	r3, r0
 801f8e4:	b2db      	uxtb	r3, r3
 801f8e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801f8ea:	b29b      	uxth	r3, r3
 801f8ec:	4618      	mov	r0, r3
 801f8ee:	f7fa f901 	bl	8019af4 <lwip_htons>
 801f8f2:	4603      	mov	r3, r0
 801f8f4:	b21b      	sxth	r3, r3
 801f8f6:	4323      	orrs	r3, r4
 801f8f8:	b21a      	sxth	r2, r3
 801f8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f8fc:	681b      	ldr	r3, [r3, #0]
 801f8fe:	68db      	ldr	r3, [r3, #12]
 801f900:	b292      	uxth	r2, r2
 801f902:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f908:	b29a      	uxth	r2, r3
 801f90a:	687b      	ldr	r3, [r7, #4]
 801f90c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f90e:	4413      	add	r3, r2
 801f910:	b299      	uxth	r1, r3
 801f912:	4b3c      	ldr	r3, [pc, #240]	@ (801fa04 <tcp_receive+0xf10>)
 801f914:	681b      	ldr	r3, [r3, #0]
 801f916:	b29a      	uxth	r2, r3
 801f918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	1a8a      	subs	r2, r1, r2
 801f91e:	b292      	uxth	r2, r2
 801f920:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801f922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f924:	681b      	ldr	r3, [r3, #0]
 801f926:	685a      	ldr	r2, [r3, #4]
 801f928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	891b      	ldrh	r3, [r3, #8]
 801f92e:	4619      	mov	r1, r3
 801f930:	4610      	mov	r0, r2
 801f932:	f7fb fb57 	bl	801afe4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801f936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f938:	681b      	ldr	r3, [r3, #0]
 801f93a:	891c      	ldrh	r4, [r3, #8]
 801f93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f93e:	681b      	ldr	r3, [r3, #0]
 801f940:	68db      	ldr	r3, [r3, #12]
 801f942:	899b      	ldrh	r3, [r3, #12]
 801f944:	b29b      	uxth	r3, r3
 801f946:	4618      	mov	r0, r3
 801f948:	f7fa f8d4 	bl	8019af4 <lwip_htons>
 801f94c:	4603      	mov	r3, r0
 801f94e:	b2db      	uxtb	r3, r3
 801f950:	f003 0303 	and.w	r3, r3, #3
 801f954:	2b00      	cmp	r3, #0
 801f956:	d001      	beq.n	801f95c <tcp_receive+0xe68>
 801f958:	2301      	movs	r3, #1
 801f95a:	e000      	b.n	801f95e <tcp_receive+0xe6a>
 801f95c:	2300      	movs	r3, #0
 801f95e:	4423      	add	r3, r4
 801f960:	b29a      	uxth	r2, r3
 801f962:	4b2a      	ldr	r3, [pc, #168]	@ (801fa0c <tcp_receive+0xf18>)
 801f964:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801f966:	4b29      	ldr	r3, [pc, #164]	@ (801fa0c <tcp_receive+0xf18>)
 801f968:	881b      	ldrh	r3, [r3, #0]
 801f96a:	461a      	mov	r2, r3
 801f96c:	4b25      	ldr	r3, [pc, #148]	@ (801fa04 <tcp_receive+0xf10>)
 801f96e:	681b      	ldr	r3, [r3, #0]
 801f970:	441a      	add	r2, r3
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f976:	6879      	ldr	r1, [r7, #4]
 801f978:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f97a:	440b      	add	r3, r1
 801f97c:	429a      	cmp	r2, r3
 801f97e:	d019      	beq.n	801f9b4 <tcp_receive+0xec0>
 801f980:	4b23      	ldr	r3, [pc, #140]	@ (801fa10 <tcp_receive+0xf1c>)
 801f982:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801f986:	4923      	ldr	r1, [pc, #140]	@ (801fa14 <tcp_receive+0xf20>)
 801f988:	4823      	ldr	r0, [pc, #140]	@ (801fa18 <tcp_receive+0xf24>)
 801f98a:	f007 feef 	bl	802776c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801f98e:	e011      	b.n	801f9b4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801f990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f998:	2b00      	cmp	r3, #0
 801f99a:	f47f aea5 	bne.w	801f6e8 <tcp_receive+0xbf4>
 801f99e:	e00a      	b.n	801f9b6 <tcp_receive+0xec2>
                break;
 801f9a0:	bf00      	nop
 801f9a2:	e008      	b.n	801f9b6 <tcp_receive+0xec2>
                break;
 801f9a4:	bf00      	nop
 801f9a6:	e006      	b.n	801f9b6 <tcp_receive+0xec2>
                  break;
 801f9a8:	bf00      	nop
 801f9aa:	e004      	b.n	801f9b6 <tcp_receive+0xec2>
                  break;
 801f9ac:	bf00      	nop
 801f9ae:	e002      	b.n	801f9b6 <tcp_receive+0xec2>
                  break;
 801f9b0:	bf00      	nop
 801f9b2:	e000      	b.n	801f9b6 <tcp_receive+0xec2>
                break;
 801f9b4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801f9b6:	6878      	ldr	r0, [r7, #4]
 801f9b8:	f001 fe88 	bl	80216cc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801f9bc:	e003      	b.n	801f9c6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801f9be:	6878      	ldr	r0, [r7, #4]
 801f9c0:	f001 fe84 	bl	80216cc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f9c4:	e01a      	b.n	801f9fc <tcp_receive+0xf08>
 801f9c6:	e019      	b.n	801f9fc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801f9c8:	4b0e      	ldr	r3, [pc, #56]	@ (801fa04 <tcp_receive+0xf10>)
 801f9ca:	681a      	ldr	r2, [r3, #0]
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f9d0:	1ad3      	subs	r3, r2, r3
 801f9d2:	2b00      	cmp	r3, #0
 801f9d4:	db0a      	blt.n	801f9ec <tcp_receive+0xef8>
 801f9d6:	4b0b      	ldr	r3, [pc, #44]	@ (801fa04 <tcp_receive+0xf10>)
 801f9d8:	681a      	ldr	r2, [r3, #0]
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f9de:	6879      	ldr	r1, [r7, #4]
 801f9e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801f9e2:	440b      	add	r3, r1
 801f9e4:	1ad3      	subs	r3, r2, r3
 801f9e6:	3301      	adds	r3, #1
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	dd07      	ble.n	801f9fc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801f9ec:	687b      	ldr	r3, [r7, #4]
 801f9ee:	8b5b      	ldrh	r3, [r3, #26]
 801f9f0:	f043 0302 	orr.w	r3, r3, #2
 801f9f4:	b29a      	uxth	r2, r3
 801f9f6:	687b      	ldr	r3, [r7, #4]
 801f9f8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801f9fa:	e7ff      	b.n	801f9fc <tcp_receive+0xf08>
 801f9fc:	bf00      	nop
 801f9fe:	3750      	adds	r7, #80	@ 0x50
 801fa00:	46bd      	mov	sp, r7
 801fa02:	bdb0      	pop	{r4, r5, r7, pc}
 801fa04:	20011198 	.word	0x20011198
 801fa08:	20011178 	.word	0x20011178
 801fa0c:	200111a2 	.word	0x200111a2
 801fa10:	0802a89c 	.word	0x0802a89c
 801fa14:	0802ac44 	.word	0x0802ac44
 801fa18:	0802a8e8 	.word	0x0802a8e8

0801fa1c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801fa1c:	b480      	push	{r7}
 801fa1e:	b083      	sub	sp, #12
 801fa20:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801fa22:	4b15      	ldr	r3, [pc, #84]	@ (801fa78 <tcp_get_next_optbyte+0x5c>)
 801fa24:	881b      	ldrh	r3, [r3, #0]
 801fa26:	1c5a      	adds	r2, r3, #1
 801fa28:	b291      	uxth	r1, r2
 801fa2a:	4a13      	ldr	r2, [pc, #76]	@ (801fa78 <tcp_get_next_optbyte+0x5c>)
 801fa2c:	8011      	strh	r1, [r2, #0]
 801fa2e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801fa30:	4b12      	ldr	r3, [pc, #72]	@ (801fa7c <tcp_get_next_optbyte+0x60>)
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d004      	beq.n	801fa42 <tcp_get_next_optbyte+0x26>
 801fa38:	4b11      	ldr	r3, [pc, #68]	@ (801fa80 <tcp_get_next_optbyte+0x64>)
 801fa3a:	881b      	ldrh	r3, [r3, #0]
 801fa3c:	88fa      	ldrh	r2, [r7, #6]
 801fa3e:	429a      	cmp	r2, r3
 801fa40:	d208      	bcs.n	801fa54 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801fa42:	4b10      	ldr	r3, [pc, #64]	@ (801fa84 <tcp_get_next_optbyte+0x68>)
 801fa44:	681b      	ldr	r3, [r3, #0]
 801fa46:	3314      	adds	r3, #20
 801fa48:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801fa4a:	88fb      	ldrh	r3, [r7, #6]
 801fa4c:	683a      	ldr	r2, [r7, #0]
 801fa4e:	4413      	add	r3, r2
 801fa50:	781b      	ldrb	r3, [r3, #0]
 801fa52:	e00b      	b.n	801fa6c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801fa54:	88fb      	ldrh	r3, [r7, #6]
 801fa56:	b2da      	uxtb	r2, r3
 801fa58:	4b09      	ldr	r3, [pc, #36]	@ (801fa80 <tcp_get_next_optbyte+0x64>)
 801fa5a:	881b      	ldrh	r3, [r3, #0]
 801fa5c:	b2db      	uxtb	r3, r3
 801fa5e:	1ad3      	subs	r3, r2, r3
 801fa60:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801fa62:	4b06      	ldr	r3, [pc, #24]	@ (801fa7c <tcp_get_next_optbyte+0x60>)
 801fa64:	681a      	ldr	r2, [r3, #0]
 801fa66:	797b      	ldrb	r3, [r7, #5]
 801fa68:	4413      	add	r3, r2
 801fa6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801fa6c:	4618      	mov	r0, r3
 801fa6e:	370c      	adds	r7, #12
 801fa70:	46bd      	mov	sp, r7
 801fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa76:	4770      	bx	lr
 801fa78:	20011194 	.word	0x20011194
 801fa7c:	20011190 	.word	0x20011190
 801fa80:	2001118e 	.word	0x2001118e
 801fa84:	20011188 	.word	0x20011188

0801fa88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801fa88:	b580      	push	{r7, lr}
 801fa8a:	b084      	sub	sp, #16
 801fa8c:	af00      	add	r7, sp, #0
 801fa8e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	2b00      	cmp	r3, #0
 801fa94:	d106      	bne.n	801faa4 <tcp_parseopt+0x1c>
 801fa96:	4b32      	ldr	r3, [pc, #200]	@ (801fb60 <tcp_parseopt+0xd8>)
 801fa98:	f240 727d 	movw	r2, #1917	@ 0x77d
 801fa9c:	4931      	ldr	r1, [pc, #196]	@ (801fb64 <tcp_parseopt+0xdc>)
 801fa9e:	4832      	ldr	r0, [pc, #200]	@ (801fb68 <tcp_parseopt+0xe0>)
 801faa0:	f007 fe64 	bl	802776c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801faa4:	4b31      	ldr	r3, [pc, #196]	@ (801fb6c <tcp_parseopt+0xe4>)
 801faa6:	881b      	ldrh	r3, [r3, #0]
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	d056      	beq.n	801fb5a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801faac:	4b30      	ldr	r3, [pc, #192]	@ (801fb70 <tcp_parseopt+0xe8>)
 801faae:	2200      	movs	r2, #0
 801fab0:	801a      	strh	r2, [r3, #0]
 801fab2:	e046      	b.n	801fb42 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801fab4:	f7ff ffb2 	bl	801fa1c <tcp_get_next_optbyte>
 801fab8:	4603      	mov	r3, r0
 801faba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801fabc:	7bfb      	ldrb	r3, [r7, #15]
 801fabe:	2b02      	cmp	r3, #2
 801fac0:	d006      	beq.n	801fad0 <tcp_parseopt+0x48>
 801fac2:	2b02      	cmp	r3, #2
 801fac4:	dc2a      	bgt.n	801fb1c <tcp_parseopt+0x94>
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	d042      	beq.n	801fb50 <tcp_parseopt+0xc8>
 801faca:	2b01      	cmp	r3, #1
 801facc:	d038      	beq.n	801fb40 <tcp_parseopt+0xb8>
 801face:	e025      	b.n	801fb1c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801fad0:	f7ff ffa4 	bl	801fa1c <tcp_get_next_optbyte>
 801fad4:	4603      	mov	r3, r0
 801fad6:	2b04      	cmp	r3, #4
 801fad8:	d13c      	bne.n	801fb54 <tcp_parseopt+0xcc>
 801fada:	4b25      	ldr	r3, [pc, #148]	@ (801fb70 <tcp_parseopt+0xe8>)
 801fadc:	881b      	ldrh	r3, [r3, #0]
 801fade:	3301      	adds	r3, #1
 801fae0:	4a22      	ldr	r2, [pc, #136]	@ (801fb6c <tcp_parseopt+0xe4>)
 801fae2:	8812      	ldrh	r2, [r2, #0]
 801fae4:	4293      	cmp	r3, r2
 801fae6:	da35      	bge.n	801fb54 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801fae8:	f7ff ff98 	bl	801fa1c <tcp_get_next_optbyte>
 801faec:	4603      	mov	r3, r0
 801faee:	021b      	lsls	r3, r3, #8
 801faf0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801faf2:	f7ff ff93 	bl	801fa1c <tcp_get_next_optbyte>
 801faf6:	4603      	mov	r3, r0
 801faf8:	461a      	mov	r2, r3
 801fafa:	89bb      	ldrh	r3, [r7, #12]
 801fafc:	4313      	orrs	r3, r2
 801fafe:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801fb00:	89bb      	ldrh	r3, [r7, #12]
 801fb02:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801fb06:	d804      	bhi.n	801fb12 <tcp_parseopt+0x8a>
 801fb08:	89bb      	ldrh	r3, [r7, #12]
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	d001      	beq.n	801fb12 <tcp_parseopt+0x8a>
 801fb0e:	89ba      	ldrh	r2, [r7, #12]
 801fb10:	e001      	b.n	801fb16 <tcp_parseopt+0x8e>
 801fb12:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801fb1a:	e012      	b.n	801fb42 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801fb1c:	f7ff ff7e 	bl	801fa1c <tcp_get_next_optbyte>
 801fb20:	4603      	mov	r3, r0
 801fb22:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801fb24:	7afb      	ldrb	r3, [r7, #11]
 801fb26:	2b01      	cmp	r3, #1
 801fb28:	d916      	bls.n	801fb58 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801fb2a:	7afb      	ldrb	r3, [r7, #11]
 801fb2c:	b29a      	uxth	r2, r3
 801fb2e:	4b10      	ldr	r3, [pc, #64]	@ (801fb70 <tcp_parseopt+0xe8>)
 801fb30:	881b      	ldrh	r3, [r3, #0]
 801fb32:	4413      	add	r3, r2
 801fb34:	b29b      	uxth	r3, r3
 801fb36:	3b02      	subs	r3, #2
 801fb38:	b29a      	uxth	r2, r3
 801fb3a:	4b0d      	ldr	r3, [pc, #52]	@ (801fb70 <tcp_parseopt+0xe8>)
 801fb3c:	801a      	strh	r2, [r3, #0]
 801fb3e:	e000      	b.n	801fb42 <tcp_parseopt+0xba>
          break;
 801fb40:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801fb42:	4b0b      	ldr	r3, [pc, #44]	@ (801fb70 <tcp_parseopt+0xe8>)
 801fb44:	881a      	ldrh	r2, [r3, #0]
 801fb46:	4b09      	ldr	r3, [pc, #36]	@ (801fb6c <tcp_parseopt+0xe4>)
 801fb48:	881b      	ldrh	r3, [r3, #0]
 801fb4a:	429a      	cmp	r2, r3
 801fb4c:	d3b2      	bcc.n	801fab4 <tcp_parseopt+0x2c>
 801fb4e:	e004      	b.n	801fb5a <tcp_parseopt+0xd2>
          return;
 801fb50:	bf00      	nop
 801fb52:	e002      	b.n	801fb5a <tcp_parseopt+0xd2>
            return;
 801fb54:	bf00      	nop
 801fb56:	e000      	b.n	801fb5a <tcp_parseopt+0xd2>
            return;
 801fb58:	bf00      	nop
      }
    }
  }
}
 801fb5a:	3710      	adds	r7, #16
 801fb5c:	46bd      	mov	sp, r7
 801fb5e:	bd80      	pop	{r7, pc}
 801fb60:	0802a89c 	.word	0x0802a89c
 801fb64:	0802ad00 	.word	0x0802ad00
 801fb68:	0802a8e8 	.word	0x0802a8e8
 801fb6c:	2001118c 	.word	0x2001118c
 801fb70:	20011194 	.word	0x20011194

0801fb74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801fb74:	b480      	push	{r7}
 801fb76:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801fb78:	4b05      	ldr	r3, [pc, #20]	@ (801fb90 <tcp_trigger_input_pcb_close+0x1c>)
 801fb7a:	781b      	ldrb	r3, [r3, #0]
 801fb7c:	f043 0310 	orr.w	r3, r3, #16
 801fb80:	b2da      	uxtb	r2, r3
 801fb82:	4b03      	ldr	r3, [pc, #12]	@ (801fb90 <tcp_trigger_input_pcb_close+0x1c>)
 801fb84:	701a      	strb	r2, [r3, #0]
}
 801fb86:	bf00      	nop
 801fb88:	46bd      	mov	sp, r7
 801fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb8e:	4770      	bx	lr
 801fb90:	200111a5 	.word	0x200111a5

0801fb94 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801fb94:	b580      	push	{r7, lr}
 801fb96:	b084      	sub	sp, #16
 801fb98:	af00      	add	r7, sp, #0
 801fb9a:	60f8      	str	r0, [r7, #12]
 801fb9c:	60b9      	str	r1, [r7, #8]
 801fb9e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801fba0:	68fb      	ldr	r3, [r7, #12]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d00a      	beq.n	801fbbc <tcp_route+0x28>
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	7a1b      	ldrb	r3, [r3, #8]
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	d006      	beq.n	801fbbc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801fbae:	68fb      	ldr	r3, [r7, #12]
 801fbb0:	7a1b      	ldrb	r3, [r3, #8]
 801fbb2:	4618      	mov	r0, r3
 801fbb4:	f7fb f80e 	bl	801abd4 <netif_get_by_index>
 801fbb8:	4603      	mov	r3, r0
 801fbba:	e003      	b.n	801fbc4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801fbbc:	6878      	ldr	r0, [r7, #4]
 801fbbe:	f005 fd33 	bl	8025628 <ip4_route>
 801fbc2:	4603      	mov	r3, r0
  }
}
 801fbc4:	4618      	mov	r0, r3
 801fbc6:	3710      	adds	r7, #16
 801fbc8:	46bd      	mov	sp, r7
 801fbca:	bd80      	pop	{r7, pc}

0801fbcc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801fbcc:	b590      	push	{r4, r7, lr}
 801fbce:	b087      	sub	sp, #28
 801fbd0:	af00      	add	r7, sp, #0
 801fbd2:	60f8      	str	r0, [r7, #12]
 801fbd4:	60b9      	str	r1, [r7, #8]
 801fbd6:	603b      	str	r3, [r7, #0]
 801fbd8:	4613      	mov	r3, r2
 801fbda:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801fbdc:	68fb      	ldr	r3, [r7, #12]
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d105      	bne.n	801fbee <tcp_create_segment+0x22>
 801fbe2:	4b43      	ldr	r3, [pc, #268]	@ (801fcf0 <tcp_create_segment+0x124>)
 801fbe4:	22a3      	movs	r2, #163	@ 0xa3
 801fbe6:	4943      	ldr	r1, [pc, #268]	@ (801fcf4 <tcp_create_segment+0x128>)
 801fbe8:	4843      	ldr	r0, [pc, #268]	@ (801fcf8 <tcp_create_segment+0x12c>)
 801fbea:	f007 fdbf 	bl	802776c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801fbee:	68bb      	ldr	r3, [r7, #8]
 801fbf0:	2b00      	cmp	r3, #0
 801fbf2:	d105      	bne.n	801fc00 <tcp_create_segment+0x34>
 801fbf4:	4b3e      	ldr	r3, [pc, #248]	@ (801fcf0 <tcp_create_segment+0x124>)
 801fbf6:	22a4      	movs	r2, #164	@ 0xa4
 801fbf8:	4940      	ldr	r1, [pc, #256]	@ (801fcfc <tcp_create_segment+0x130>)
 801fbfa:	483f      	ldr	r0, [pc, #252]	@ (801fcf8 <tcp_create_segment+0x12c>)
 801fbfc:	f007 fdb6 	bl	802776c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fc00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801fc04:	009b      	lsls	r3, r3, #2
 801fc06:	b2db      	uxtb	r3, r3
 801fc08:	f003 0304 	and.w	r3, r3, #4
 801fc0c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801fc0e:	2003      	movs	r0, #3
 801fc10:	f7fa fc48 	bl	801a4a4 <memp_malloc>
 801fc14:	6138      	str	r0, [r7, #16]
 801fc16:	693b      	ldr	r3, [r7, #16]
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	d104      	bne.n	801fc26 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801fc1c:	68b8      	ldr	r0, [r7, #8]
 801fc1e:	f7fb fb99 	bl	801b354 <pbuf_free>
    return NULL;
 801fc22:	2300      	movs	r3, #0
 801fc24:	e060      	b.n	801fce8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801fc26:	693b      	ldr	r3, [r7, #16]
 801fc28:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801fc2c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801fc2e:	693b      	ldr	r3, [r7, #16]
 801fc30:	2200      	movs	r2, #0
 801fc32:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801fc34:	693b      	ldr	r3, [r7, #16]
 801fc36:	68ba      	ldr	r2, [r7, #8]
 801fc38:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801fc3a:	68bb      	ldr	r3, [r7, #8]
 801fc3c:	891a      	ldrh	r2, [r3, #8]
 801fc3e:	7dfb      	ldrb	r3, [r7, #23]
 801fc40:	b29b      	uxth	r3, r3
 801fc42:	429a      	cmp	r2, r3
 801fc44:	d205      	bcs.n	801fc52 <tcp_create_segment+0x86>
 801fc46:	4b2a      	ldr	r3, [pc, #168]	@ (801fcf0 <tcp_create_segment+0x124>)
 801fc48:	22b0      	movs	r2, #176	@ 0xb0
 801fc4a:	492d      	ldr	r1, [pc, #180]	@ (801fd00 <tcp_create_segment+0x134>)
 801fc4c:	482a      	ldr	r0, [pc, #168]	@ (801fcf8 <tcp_create_segment+0x12c>)
 801fc4e:	f007 fd8d 	bl	802776c <iprintf>
  seg->len = p->tot_len - optlen;
 801fc52:	68bb      	ldr	r3, [r7, #8]
 801fc54:	891a      	ldrh	r2, [r3, #8]
 801fc56:	7dfb      	ldrb	r3, [r7, #23]
 801fc58:	b29b      	uxth	r3, r3
 801fc5a:	1ad3      	subs	r3, r2, r3
 801fc5c:	b29a      	uxth	r2, r3
 801fc5e:	693b      	ldr	r3, [r7, #16]
 801fc60:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801fc62:	2114      	movs	r1, #20
 801fc64:	68b8      	ldr	r0, [r7, #8]
 801fc66:	f7fb faad 	bl	801b1c4 <pbuf_add_header>
 801fc6a:	4603      	mov	r3, r0
 801fc6c:	2b00      	cmp	r3, #0
 801fc6e:	d004      	beq.n	801fc7a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801fc70:	6938      	ldr	r0, [r7, #16]
 801fc72:	f7fd f804 	bl	801cc7e <tcp_seg_free>
    return NULL;
 801fc76:	2300      	movs	r3, #0
 801fc78:	e036      	b.n	801fce8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801fc7a:	693b      	ldr	r3, [r7, #16]
 801fc7c:	685b      	ldr	r3, [r3, #4]
 801fc7e:	685a      	ldr	r2, [r3, #4]
 801fc80:	693b      	ldr	r3, [r7, #16]
 801fc82:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801fc84:	68fb      	ldr	r3, [r7, #12]
 801fc86:	8ada      	ldrh	r2, [r3, #22]
 801fc88:	693b      	ldr	r3, [r7, #16]
 801fc8a:	68dc      	ldr	r4, [r3, #12]
 801fc8c:	4610      	mov	r0, r2
 801fc8e:	f7f9 ff31 	bl	8019af4 <lwip_htons>
 801fc92:	4603      	mov	r3, r0
 801fc94:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801fc96:	68fb      	ldr	r3, [r7, #12]
 801fc98:	8b1a      	ldrh	r2, [r3, #24]
 801fc9a:	693b      	ldr	r3, [r7, #16]
 801fc9c:	68dc      	ldr	r4, [r3, #12]
 801fc9e:	4610      	mov	r0, r2
 801fca0:	f7f9 ff28 	bl	8019af4 <lwip_htons>
 801fca4:	4603      	mov	r3, r0
 801fca6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801fca8:	693b      	ldr	r3, [r7, #16]
 801fcaa:	68dc      	ldr	r4, [r3, #12]
 801fcac:	6838      	ldr	r0, [r7, #0]
 801fcae:	f7f9 ff36 	bl	8019b1e <lwip_htonl>
 801fcb2:	4603      	mov	r3, r0
 801fcb4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801fcb6:	7dfb      	ldrb	r3, [r7, #23]
 801fcb8:	089b      	lsrs	r3, r3, #2
 801fcba:	b2db      	uxtb	r3, r3
 801fcbc:	3305      	adds	r3, #5
 801fcbe:	b29b      	uxth	r3, r3
 801fcc0:	031b      	lsls	r3, r3, #12
 801fcc2:	b29a      	uxth	r2, r3
 801fcc4:	79fb      	ldrb	r3, [r7, #7]
 801fcc6:	b29b      	uxth	r3, r3
 801fcc8:	4313      	orrs	r3, r2
 801fcca:	b29a      	uxth	r2, r3
 801fccc:	693b      	ldr	r3, [r7, #16]
 801fcce:	68dc      	ldr	r4, [r3, #12]
 801fcd0:	4610      	mov	r0, r2
 801fcd2:	f7f9 ff0f 	bl	8019af4 <lwip_htons>
 801fcd6:	4603      	mov	r3, r0
 801fcd8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801fcda:	693b      	ldr	r3, [r7, #16]
 801fcdc:	68db      	ldr	r3, [r3, #12]
 801fcde:	2200      	movs	r2, #0
 801fce0:	749a      	strb	r2, [r3, #18]
 801fce2:	2200      	movs	r2, #0
 801fce4:	74da      	strb	r2, [r3, #19]
  return seg;
 801fce6:	693b      	ldr	r3, [r7, #16]
}
 801fce8:	4618      	mov	r0, r3
 801fcea:	371c      	adds	r7, #28
 801fcec:	46bd      	mov	sp, r7
 801fcee:	bd90      	pop	{r4, r7, pc}
 801fcf0:	0802ad1c 	.word	0x0802ad1c
 801fcf4:	0802ad50 	.word	0x0802ad50
 801fcf8:	0802ad70 	.word	0x0802ad70
 801fcfc:	0802ad98 	.word	0x0802ad98
 801fd00:	0802adbc 	.word	0x0802adbc

0801fd04 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801fd04:	b580      	push	{r7, lr}
 801fd06:	b086      	sub	sp, #24
 801fd08:	af00      	add	r7, sp, #0
 801fd0a:	607b      	str	r3, [r7, #4]
 801fd0c:	4603      	mov	r3, r0
 801fd0e:	73fb      	strb	r3, [r7, #15]
 801fd10:	460b      	mov	r3, r1
 801fd12:	81bb      	strh	r3, [r7, #12]
 801fd14:	4613      	mov	r3, r2
 801fd16:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801fd18:	89bb      	ldrh	r3, [r7, #12]
 801fd1a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801fd1c:	687b      	ldr	r3, [r7, #4]
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	d105      	bne.n	801fd2e <tcp_pbuf_prealloc+0x2a>
 801fd22:	4b30      	ldr	r3, [pc, #192]	@ (801fde4 <tcp_pbuf_prealloc+0xe0>)
 801fd24:	22e8      	movs	r2, #232	@ 0xe8
 801fd26:	4930      	ldr	r1, [pc, #192]	@ (801fde8 <tcp_pbuf_prealloc+0xe4>)
 801fd28:	4830      	ldr	r0, [pc, #192]	@ (801fdec <tcp_pbuf_prealloc+0xe8>)
 801fd2a:	f007 fd1f 	bl	802776c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801fd2e:	6a3b      	ldr	r3, [r7, #32]
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	d105      	bne.n	801fd40 <tcp_pbuf_prealloc+0x3c>
 801fd34:	4b2b      	ldr	r3, [pc, #172]	@ (801fde4 <tcp_pbuf_prealloc+0xe0>)
 801fd36:	22e9      	movs	r2, #233	@ 0xe9
 801fd38:	492d      	ldr	r1, [pc, #180]	@ (801fdf0 <tcp_pbuf_prealloc+0xec>)
 801fd3a:	482c      	ldr	r0, [pc, #176]	@ (801fdec <tcp_pbuf_prealloc+0xe8>)
 801fd3c:	f007 fd16 	bl	802776c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801fd40:	89ba      	ldrh	r2, [r7, #12]
 801fd42:	897b      	ldrh	r3, [r7, #10]
 801fd44:	429a      	cmp	r2, r3
 801fd46:	d221      	bcs.n	801fd8c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801fd48:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801fd4c:	f003 0302 	and.w	r3, r3, #2
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	d111      	bne.n	801fd78 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801fd54:	6a3b      	ldr	r3, [r7, #32]
 801fd56:	8b5b      	ldrh	r3, [r3, #26]
 801fd58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	d115      	bne.n	801fd8c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801fd60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d007      	beq.n	801fd78 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801fd68:	6a3b      	ldr	r3, [r7, #32]
 801fd6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	d103      	bne.n	801fd78 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801fd70:	6a3b      	ldr	r3, [r7, #32]
 801fd72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	d009      	beq.n	801fd8c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801fd78:	89bb      	ldrh	r3, [r7, #12]
 801fd7a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801fd7e:	f023 0203 	bic.w	r2, r3, #3
 801fd82:	897b      	ldrh	r3, [r7, #10]
 801fd84:	4293      	cmp	r3, r2
 801fd86:	bf28      	it	cs
 801fd88:	4613      	movcs	r3, r2
 801fd8a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801fd8c:	8af9      	ldrh	r1, [r7, #22]
 801fd8e:	7bfb      	ldrb	r3, [r7, #15]
 801fd90:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801fd94:	4618      	mov	r0, r3
 801fd96:	f7fa ffc7 	bl	801ad28 <pbuf_alloc>
 801fd9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801fd9c:	693b      	ldr	r3, [r7, #16]
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d101      	bne.n	801fda6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801fda2:	2300      	movs	r3, #0
 801fda4:	e019      	b.n	801fdda <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801fda6:	693b      	ldr	r3, [r7, #16]
 801fda8:	681b      	ldr	r3, [r3, #0]
 801fdaa:	2b00      	cmp	r3, #0
 801fdac:	d006      	beq.n	801fdbc <tcp_pbuf_prealloc+0xb8>
 801fdae:	4b0d      	ldr	r3, [pc, #52]	@ (801fde4 <tcp_pbuf_prealloc+0xe0>)
 801fdb0:	f240 120b 	movw	r2, #267	@ 0x10b
 801fdb4:	490f      	ldr	r1, [pc, #60]	@ (801fdf4 <tcp_pbuf_prealloc+0xf0>)
 801fdb6:	480d      	ldr	r0, [pc, #52]	@ (801fdec <tcp_pbuf_prealloc+0xe8>)
 801fdb8:	f007 fcd8 	bl	802776c <iprintf>
  *oversize = p->len - length;
 801fdbc:	693b      	ldr	r3, [r7, #16]
 801fdbe:	895a      	ldrh	r2, [r3, #10]
 801fdc0:	89bb      	ldrh	r3, [r7, #12]
 801fdc2:	1ad3      	subs	r3, r2, r3
 801fdc4:	b29a      	uxth	r2, r3
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801fdca:	693b      	ldr	r3, [r7, #16]
 801fdcc:	89ba      	ldrh	r2, [r7, #12]
 801fdce:	811a      	strh	r2, [r3, #8]
 801fdd0:	693b      	ldr	r3, [r7, #16]
 801fdd2:	891a      	ldrh	r2, [r3, #8]
 801fdd4:	693b      	ldr	r3, [r7, #16]
 801fdd6:	815a      	strh	r2, [r3, #10]
  return p;
 801fdd8:	693b      	ldr	r3, [r7, #16]
}
 801fdda:	4618      	mov	r0, r3
 801fddc:	3718      	adds	r7, #24
 801fdde:	46bd      	mov	sp, r7
 801fde0:	bd80      	pop	{r7, pc}
 801fde2:	bf00      	nop
 801fde4:	0802ad1c 	.word	0x0802ad1c
 801fde8:	0802add4 	.word	0x0802add4
 801fdec:	0802ad70 	.word	0x0802ad70
 801fdf0:	0802adf8 	.word	0x0802adf8
 801fdf4:	0802ae18 	.word	0x0802ae18

0801fdf8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801fdf8:	b580      	push	{r7, lr}
 801fdfa:	b082      	sub	sp, #8
 801fdfc:	af00      	add	r7, sp, #0
 801fdfe:	6078      	str	r0, [r7, #4]
 801fe00:	460b      	mov	r3, r1
 801fe02:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	d106      	bne.n	801fe18 <tcp_write_checks+0x20>
 801fe0a:	4b33      	ldr	r3, [pc, #204]	@ (801fed8 <tcp_write_checks+0xe0>)
 801fe0c:	f240 1233 	movw	r2, #307	@ 0x133
 801fe10:	4932      	ldr	r1, [pc, #200]	@ (801fedc <tcp_write_checks+0xe4>)
 801fe12:	4833      	ldr	r0, [pc, #204]	@ (801fee0 <tcp_write_checks+0xe8>)
 801fe14:	f007 fcaa 	bl	802776c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	7d1b      	ldrb	r3, [r3, #20]
 801fe1c:	2b04      	cmp	r3, #4
 801fe1e:	d00e      	beq.n	801fe3e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801fe24:	2b07      	cmp	r3, #7
 801fe26:	d00a      	beq.n	801fe3e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801fe2c:	2b02      	cmp	r3, #2
 801fe2e:	d006      	beq.n	801fe3e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801fe34:	2b03      	cmp	r3, #3
 801fe36:	d002      	beq.n	801fe3e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801fe38:	f06f 030a 	mvn.w	r3, #10
 801fe3c:	e048      	b.n	801fed0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801fe3e:	887b      	ldrh	r3, [r7, #2]
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	d101      	bne.n	801fe48 <tcp_write_checks+0x50>
    return ERR_OK;
 801fe44:	2300      	movs	r3, #0
 801fe46:	e043      	b.n	801fed0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801fe4e:	887a      	ldrh	r2, [r7, #2]
 801fe50:	429a      	cmp	r2, r3
 801fe52:	d909      	bls.n	801fe68 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	8b5b      	ldrh	r3, [r3, #26]
 801fe58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fe5c:	b29a      	uxth	r2, r3
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801fe62:	f04f 33ff 	mov.w	r3, #4294967295
 801fe66:	e033      	b.n	801fed0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fe6e:	2b08      	cmp	r3, #8
 801fe70:	d909      	bls.n	801fe86 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fe72:	687b      	ldr	r3, [r7, #4]
 801fe74:	8b5b      	ldrh	r3, [r3, #26]
 801fe76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fe7a:	b29a      	uxth	r2, r3
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801fe80:	f04f 33ff 	mov.w	r3, #4294967295
 801fe84:	e024      	b.n	801fed0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d00f      	beq.n	801feb0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801fe90:	687b      	ldr	r3, [r7, #4]
 801fe92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d11a      	bne.n	801fece <tcp_write_checks+0xd6>
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801fe9c:	2b00      	cmp	r3, #0
 801fe9e:	d116      	bne.n	801fece <tcp_write_checks+0xd6>
 801fea0:	4b0d      	ldr	r3, [pc, #52]	@ (801fed8 <tcp_write_checks+0xe0>)
 801fea2:	f240 1255 	movw	r2, #341	@ 0x155
 801fea6:	490f      	ldr	r1, [pc, #60]	@ (801fee4 <tcp_write_checks+0xec>)
 801fea8:	480d      	ldr	r0, [pc, #52]	@ (801fee0 <tcp_write_checks+0xe8>)
 801feaa:	f007 fc5f 	bl	802776c <iprintf>
 801feae:	e00e      	b.n	801fece <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801feb4:	2b00      	cmp	r3, #0
 801feb6:	d103      	bne.n	801fec0 <tcp_write_checks+0xc8>
 801feb8:	687b      	ldr	r3, [r7, #4]
 801feba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801febc:	2b00      	cmp	r3, #0
 801febe:	d006      	beq.n	801fece <tcp_write_checks+0xd6>
 801fec0:	4b05      	ldr	r3, [pc, #20]	@ (801fed8 <tcp_write_checks+0xe0>)
 801fec2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801fec6:	4908      	ldr	r1, [pc, #32]	@ (801fee8 <tcp_write_checks+0xf0>)
 801fec8:	4805      	ldr	r0, [pc, #20]	@ (801fee0 <tcp_write_checks+0xe8>)
 801feca:	f007 fc4f 	bl	802776c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801fece:	2300      	movs	r3, #0
}
 801fed0:	4618      	mov	r0, r3
 801fed2:	3708      	adds	r7, #8
 801fed4:	46bd      	mov	sp, r7
 801fed6:	bd80      	pop	{r7, pc}
 801fed8:	0802ad1c 	.word	0x0802ad1c
 801fedc:	0802ae2c 	.word	0x0802ae2c
 801fee0:	0802ad70 	.word	0x0802ad70
 801fee4:	0802ae4c 	.word	0x0802ae4c
 801fee8:	0802ae88 	.word	0x0802ae88

0801feec <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801feec:	b590      	push	{r4, r7, lr}
 801feee:	b09b      	sub	sp, #108	@ 0x6c
 801fef0:	af04      	add	r7, sp, #16
 801fef2:	60f8      	str	r0, [r7, #12]
 801fef4:	60b9      	str	r1, [r7, #8]
 801fef6:	4611      	mov	r1, r2
 801fef8:	461a      	mov	r2, r3
 801fefa:	460b      	mov	r3, r1
 801fefc:	80fb      	strh	r3, [r7, #6]
 801fefe:	4613      	mov	r3, r2
 801ff00:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801ff02:	2300      	movs	r3, #0
 801ff04:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ff06:	2300      	movs	r3, #0
 801ff08:	653b      	str	r3, [r7, #80]	@ 0x50
 801ff0a:	2300      	movs	r3, #0
 801ff0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ff0e:	2300      	movs	r3, #0
 801ff10:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ff12:	2300      	movs	r3, #0
 801ff14:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801ff16:	2300      	movs	r3, #0
 801ff18:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801ff1c:	2300      	movs	r3, #0
 801ff1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801ff22:	2300      	movs	r3, #0
 801ff24:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801ff26:	2300      	movs	r3, #0
 801ff28:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801ff2a:	2300      	movs	r3, #0
 801ff2c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff2e:	68fb      	ldr	r3, [r7, #12]
 801ff30:	2b00      	cmp	r3, #0
 801ff32:	d109      	bne.n	801ff48 <tcp_write+0x5c>
 801ff34:	4ba4      	ldr	r3, [pc, #656]	@ (80201c8 <tcp_write+0x2dc>)
 801ff36:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801ff3a:	49a4      	ldr	r1, [pc, #656]	@ (80201cc <tcp_write+0x2e0>)
 801ff3c:	48a4      	ldr	r0, [pc, #656]	@ (80201d0 <tcp_write+0x2e4>)
 801ff3e:	f007 fc15 	bl	802776c <iprintf>
 801ff42:	f06f 030f 	mvn.w	r3, #15
 801ff46:	e32a      	b.n	802059e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801ff48:	68fb      	ldr	r3, [r7, #12]
 801ff4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ff4e:	085b      	lsrs	r3, r3, #1
 801ff50:	b29a      	uxth	r2, r3
 801ff52:	68fb      	ldr	r3, [r7, #12]
 801ff54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ff56:	4293      	cmp	r3, r2
 801ff58:	bf28      	it	cs
 801ff5a:	4613      	movcs	r3, r2
 801ff5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801ff5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d102      	bne.n	801ff6a <tcp_write+0x7e>
 801ff64:	68fb      	ldr	r3, [r7, #12]
 801ff66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ff68:	e000      	b.n	801ff6c <tcp_write+0x80>
 801ff6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ff6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801ff6e:	68bb      	ldr	r3, [r7, #8]
 801ff70:	2b00      	cmp	r3, #0
 801ff72:	d109      	bne.n	801ff88 <tcp_write+0x9c>
 801ff74:	4b94      	ldr	r3, [pc, #592]	@ (80201c8 <tcp_write+0x2dc>)
 801ff76:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801ff7a:	4996      	ldr	r1, [pc, #600]	@ (80201d4 <tcp_write+0x2e8>)
 801ff7c:	4894      	ldr	r0, [pc, #592]	@ (80201d0 <tcp_write+0x2e4>)
 801ff7e:	f007 fbf5 	bl	802776c <iprintf>
 801ff82:	f06f 030f 	mvn.w	r3, #15
 801ff86:	e30a      	b.n	802059e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801ff88:	88fb      	ldrh	r3, [r7, #6]
 801ff8a:	4619      	mov	r1, r3
 801ff8c:	68f8      	ldr	r0, [r7, #12]
 801ff8e:	f7ff ff33 	bl	801fdf8 <tcp_write_checks>
 801ff92:	4603      	mov	r3, r0
 801ff94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801ff98:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ff9c:	2b00      	cmp	r3, #0
 801ff9e:	d002      	beq.n	801ffa6 <tcp_write+0xba>
    return err;
 801ffa0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ffa4:	e2fb      	b.n	802059e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801ffa6:	68fb      	ldr	r3, [r7, #12]
 801ffa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ffac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801ffb6:	68fb      	ldr	r3, [r7, #12]
 801ffb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ffba:	2b00      	cmp	r3, #0
 801ffbc:	f000 80f6 	beq.w	80201ac <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ffc0:	68fb      	ldr	r3, [r7, #12]
 801ffc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ffc4:	653b      	str	r3, [r7, #80]	@ 0x50
 801ffc6:	e002      	b.n	801ffce <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801ffc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ffca:	681b      	ldr	r3, [r3, #0]
 801ffcc:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ffce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ffd0:	681b      	ldr	r3, [r3, #0]
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	d1f8      	bne.n	801ffc8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801ffd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ffd8:	7a9b      	ldrb	r3, [r3, #10]
 801ffda:	009b      	lsls	r3, r3, #2
 801ffdc:	b29b      	uxth	r3, r3
 801ffde:	f003 0304 	and.w	r3, r3, #4
 801ffe2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ffe4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ffe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ffe8:	891b      	ldrh	r3, [r3, #8]
 801ffea:	4619      	mov	r1, r3
 801ffec:	8c3b      	ldrh	r3, [r7, #32]
 801ffee:	440b      	add	r3, r1
 801fff0:	429a      	cmp	r2, r3
 801fff2:	da06      	bge.n	8020002 <tcp_write+0x116>
 801fff4:	4b74      	ldr	r3, [pc, #464]	@ (80201c8 <tcp_write+0x2dc>)
 801fff6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801fffa:	4977      	ldr	r1, [pc, #476]	@ (80201d8 <tcp_write+0x2ec>)
 801fffc:	4874      	ldr	r0, [pc, #464]	@ (80201d0 <tcp_write+0x2e4>)
 801fffe:	f007 fbb5 	bl	802776c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8020002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020004:	891a      	ldrh	r2, [r3, #8]
 8020006:	8c3b      	ldrh	r3, [r7, #32]
 8020008:	4413      	add	r3, r2
 802000a:	b29b      	uxth	r3, r3
 802000c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 802000e:	1ad3      	subs	r3, r2, r3
 8020010:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8020012:	68fb      	ldr	r3, [r7, #12]
 8020014:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8020018:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 802001a:	8a7b      	ldrh	r3, [r7, #18]
 802001c:	2b00      	cmp	r3, #0
 802001e:	d026      	beq.n	802006e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8020020:	8a7b      	ldrh	r3, [r7, #18]
 8020022:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8020024:	429a      	cmp	r2, r3
 8020026:	d206      	bcs.n	8020036 <tcp_write+0x14a>
 8020028:	4b67      	ldr	r3, [pc, #412]	@ (80201c8 <tcp_write+0x2dc>)
 802002a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 802002e:	496b      	ldr	r1, [pc, #428]	@ (80201dc <tcp_write+0x2f0>)
 8020030:	4867      	ldr	r0, [pc, #412]	@ (80201d0 <tcp_write+0x2e4>)
 8020032:	f007 fb9b 	bl	802776c <iprintf>
      seg = last_unsent;
 8020036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020038:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 802003a:	8a7b      	ldrh	r3, [r7, #18]
 802003c:	88fa      	ldrh	r2, [r7, #6]
 802003e:	4293      	cmp	r3, r2
 8020040:	bf28      	it	cs
 8020042:	4613      	movcs	r3, r2
 8020044:	b29b      	uxth	r3, r3
 8020046:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8020048:	4293      	cmp	r3, r2
 802004a:	bf28      	it	cs
 802004c:	4613      	movcs	r3, r2
 802004e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8020050:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8020054:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8020056:	4413      	add	r3, r2
 8020058:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 802005c:	8a7a      	ldrh	r2, [r7, #18]
 802005e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8020060:	1ad3      	subs	r3, r2, r3
 8020062:	b29b      	uxth	r3, r3
 8020064:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8020066:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8020068:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 802006a:	1ad3      	subs	r3, r2, r3
 802006c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 802006e:	8a7b      	ldrh	r3, [r7, #18]
 8020070:	2b00      	cmp	r3, #0
 8020072:	d00b      	beq.n	802008c <tcp_write+0x1a0>
 8020074:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8020078:	88fb      	ldrh	r3, [r7, #6]
 802007a:	429a      	cmp	r2, r3
 802007c:	d006      	beq.n	802008c <tcp_write+0x1a0>
 802007e:	4b52      	ldr	r3, [pc, #328]	@ (80201c8 <tcp_write+0x2dc>)
 8020080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8020084:	4956      	ldr	r1, [pc, #344]	@ (80201e0 <tcp_write+0x2f4>)
 8020086:	4852      	ldr	r0, [pc, #328]	@ (80201d0 <tcp_write+0x2e4>)
 8020088:	f007 fb70 	bl	802776c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 802008c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8020090:	88fb      	ldrh	r3, [r7, #6]
 8020092:	429a      	cmp	r2, r3
 8020094:	f080 8167 	bcs.w	8020366 <tcp_write+0x47a>
 8020098:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 802009a:	2b00      	cmp	r3, #0
 802009c:	f000 8163 	beq.w	8020366 <tcp_write+0x47a>
 80200a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80200a2:	891b      	ldrh	r3, [r3, #8]
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	f000 815e 	beq.w	8020366 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80200aa:	88fa      	ldrh	r2, [r7, #6]
 80200ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80200b0:	1ad2      	subs	r2, r2, r3
 80200b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80200b4:	4293      	cmp	r3, r2
 80200b6:	bfa8      	it	ge
 80200b8:	4613      	movge	r3, r2
 80200ba:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80200bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80200be:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80200c0:	797b      	ldrb	r3, [r7, #5]
 80200c2:	f003 0301 	and.w	r3, r3, #1
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d027      	beq.n	802011a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80200ca:	f107 0012 	add.w	r0, r7, #18
 80200ce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80200d0:	8bf9      	ldrh	r1, [r7, #30]
 80200d2:	2301      	movs	r3, #1
 80200d4:	9302      	str	r3, [sp, #8]
 80200d6:	797b      	ldrb	r3, [r7, #5]
 80200d8:	9301      	str	r3, [sp, #4]
 80200da:	68fb      	ldr	r3, [r7, #12]
 80200dc:	9300      	str	r3, [sp, #0]
 80200de:	4603      	mov	r3, r0
 80200e0:	2000      	movs	r0, #0
 80200e2:	f7ff fe0f 	bl	801fd04 <tcp_pbuf_prealloc>
 80200e6:	6578      	str	r0, [r7, #84]	@ 0x54
 80200e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	f000 8225 	beq.w	802053a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80200f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80200f2:	6858      	ldr	r0, [r3, #4]
 80200f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80200f8:	68ba      	ldr	r2, [r7, #8]
 80200fa:	4413      	add	r3, r2
 80200fc:	8bfa      	ldrh	r2, [r7, #30]
 80200fe:	4619      	mov	r1, r3
 8020100:	f007 fd67 	bl	8027bd2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8020104:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8020106:	f7fb f9b3 	bl	801b470 <pbuf_clen>
 802010a:	4603      	mov	r3, r0
 802010c:	461a      	mov	r2, r3
 802010e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8020112:	4413      	add	r3, r2
 8020114:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8020118:	e041      	b.n	802019e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 802011a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802011c:	685b      	ldr	r3, [r3, #4]
 802011e:	637b      	str	r3, [r7, #52]	@ 0x34
 8020120:	e002      	b.n	8020128 <tcp_write+0x23c>
 8020122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	637b      	str	r3, [r7, #52]	@ 0x34
 8020128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802012a:	681b      	ldr	r3, [r3, #0]
 802012c:	2b00      	cmp	r3, #0
 802012e:	d1f8      	bne.n	8020122 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8020130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020132:	7b1b      	ldrb	r3, [r3, #12]
 8020134:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8020138:	2b00      	cmp	r3, #0
 802013a:	d115      	bne.n	8020168 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 802013c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802013e:	685b      	ldr	r3, [r3, #4]
 8020140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8020142:	8952      	ldrh	r2, [r2, #10]
 8020144:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8020146:	68ba      	ldr	r2, [r7, #8]
 8020148:	429a      	cmp	r2, r3
 802014a:	d10d      	bne.n	8020168 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 802014c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8020150:	2b00      	cmp	r3, #0
 8020152:	d006      	beq.n	8020162 <tcp_write+0x276>
 8020154:	4b1c      	ldr	r3, [pc, #112]	@ (80201c8 <tcp_write+0x2dc>)
 8020156:	f240 2231 	movw	r2, #561	@ 0x231
 802015a:	4922      	ldr	r1, [pc, #136]	@ (80201e4 <tcp_write+0x2f8>)
 802015c:	481c      	ldr	r0, [pc, #112]	@ (80201d0 <tcp_write+0x2e4>)
 802015e:	f007 fb05 	bl	802776c <iprintf>
          extendlen = seglen;
 8020162:	8bfb      	ldrh	r3, [r7, #30]
 8020164:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8020166:	e01a      	b.n	802019e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8020168:	8bfb      	ldrh	r3, [r7, #30]
 802016a:	2201      	movs	r2, #1
 802016c:	4619      	mov	r1, r3
 802016e:	2000      	movs	r0, #0
 8020170:	f7fa fdda 	bl	801ad28 <pbuf_alloc>
 8020174:	6578      	str	r0, [r7, #84]	@ 0x54
 8020176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020178:	2b00      	cmp	r3, #0
 802017a:	f000 81e0 	beq.w	802053e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 802017e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8020182:	68ba      	ldr	r2, [r7, #8]
 8020184:	441a      	add	r2, r3
 8020186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020188:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 802018a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 802018c:	f7fb f970 	bl	801b470 <pbuf_clen>
 8020190:	4603      	mov	r3, r0
 8020192:	461a      	mov	r2, r3
 8020194:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8020198:	4413      	add	r3, r2
 802019a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 802019e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80201a2:	8bfb      	ldrh	r3, [r7, #30]
 80201a4:	4413      	add	r3, r2
 80201a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80201aa:	e0dc      	b.n	8020366 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80201ac:	68fb      	ldr	r3, [r7, #12]
 80201ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	f000 80d7 	beq.w	8020366 <tcp_write+0x47a>
 80201b8:	4b03      	ldr	r3, [pc, #12]	@ (80201c8 <tcp_write+0x2dc>)
 80201ba:	f240 224a 	movw	r2, #586	@ 0x24a
 80201be:	490a      	ldr	r1, [pc, #40]	@ (80201e8 <tcp_write+0x2fc>)
 80201c0:	4803      	ldr	r0, [pc, #12]	@ (80201d0 <tcp_write+0x2e4>)
 80201c2:	f007 fad3 	bl	802776c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80201c6:	e0ce      	b.n	8020366 <tcp_write+0x47a>
 80201c8:	0802ad1c 	.word	0x0802ad1c
 80201cc:	0802aebc 	.word	0x0802aebc
 80201d0:	0802ad70 	.word	0x0802ad70
 80201d4:	0802aed4 	.word	0x0802aed4
 80201d8:	0802af08 	.word	0x0802af08
 80201dc:	0802af20 	.word	0x0802af20
 80201e0:	0802af40 	.word	0x0802af40
 80201e4:	0802af60 	.word	0x0802af60
 80201e8:	0802af8c 	.word	0x0802af8c
    struct pbuf *p;
    u16_t left = len - pos;
 80201ec:	88fa      	ldrh	r2, [r7, #6]
 80201ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80201f2:	1ad3      	subs	r3, r2, r3
 80201f4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80201f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80201fa:	b29b      	uxth	r3, r3
 80201fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80201fe:	1ad3      	subs	r3, r2, r3
 8020200:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8020202:	8b7a      	ldrh	r2, [r7, #26]
 8020204:	8bbb      	ldrh	r3, [r7, #28]
 8020206:	4293      	cmp	r3, r2
 8020208:	bf28      	it	cs
 802020a:	4613      	movcs	r3, r2
 802020c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 802020e:	797b      	ldrb	r3, [r7, #5]
 8020210:	f003 0301 	and.w	r3, r3, #1
 8020214:	2b00      	cmp	r3, #0
 8020216:	d036      	beq.n	8020286 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8020218:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 802021c:	b29a      	uxth	r2, r3
 802021e:	8b3b      	ldrh	r3, [r7, #24]
 8020220:	4413      	add	r3, r2
 8020222:	b299      	uxth	r1, r3
 8020224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020226:	2b00      	cmp	r3, #0
 8020228:	bf0c      	ite	eq
 802022a:	2301      	moveq	r3, #1
 802022c:	2300      	movne	r3, #0
 802022e:	b2db      	uxtb	r3, r3
 8020230:	f107 0012 	add.w	r0, r7, #18
 8020234:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8020236:	9302      	str	r3, [sp, #8]
 8020238:	797b      	ldrb	r3, [r7, #5]
 802023a:	9301      	str	r3, [sp, #4]
 802023c:	68fb      	ldr	r3, [r7, #12]
 802023e:	9300      	str	r3, [sp, #0]
 8020240:	4603      	mov	r3, r0
 8020242:	2036      	movs	r0, #54	@ 0x36
 8020244:	f7ff fd5e 	bl	801fd04 <tcp_pbuf_prealloc>
 8020248:	6338      	str	r0, [r7, #48]	@ 0x30
 802024a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802024c:	2b00      	cmp	r3, #0
 802024e:	f000 8178 	beq.w	8020542 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8020252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020254:	895b      	ldrh	r3, [r3, #10]
 8020256:	8b3a      	ldrh	r2, [r7, #24]
 8020258:	429a      	cmp	r2, r3
 802025a:	d906      	bls.n	802026a <tcp_write+0x37e>
 802025c:	4b8c      	ldr	r3, [pc, #560]	@ (8020490 <tcp_write+0x5a4>)
 802025e:	f240 2266 	movw	r2, #614	@ 0x266
 8020262:	498c      	ldr	r1, [pc, #560]	@ (8020494 <tcp_write+0x5a8>)
 8020264:	488c      	ldr	r0, [pc, #560]	@ (8020498 <tcp_write+0x5ac>)
 8020266:	f007 fa81 	bl	802776c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 802026a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802026c:	685a      	ldr	r2, [r3, #4]
 802026e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020272:	18d0      	adds	r0, r2, r3
 8020274:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8020278:	68ba      	ldr	r2, [r7, #8]
 802027a:	4413      	add	r3, r2
 802027c:	8b3a      	ldrh	r2, [r7, #24]
 802027e:	4619      	mov	r1, r3
 8020280:	f007 fca7 	bl	8027bd2 <memcpy>
 8020284:	e02f      	b.n	80202e6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8020286:	8a7b      	ldrh	r3, [r7, #18]
 8020288:	2b00      	cmp	r3, #0
 802028a:	d006      	beq.n	802029a <tcp_write+0x3ae>
 802028c:	4b80      	ldr	r3, [pc, #512]	@ (8020490 <tcp_write+0x5a4>)
 802028e:	f240 2271 	movw	r2, #625	@ 0x271
 8020292:	4982      	ldr	r1, [pc, #520]	@ (802049c <tcp_write+0x5b0>)
 8020294:	4880      	ldr	r0, [pc, #512]	@ (8020498 <tcp_write+0x5ac>)
 8020296:	f007 fa69 	bl	802776c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 802029a:	8b3b      	ldrh	r3, [r7, #24]
 802029c:	2201      	movs	r2, #1
 802029e:	4619      	mov	r1, r3
 80202a0:	2036      	movs	r0, #54	@ 0x36
 80202a2:	f7fa fd41 	bl	801ad28 <pbuf_alloc>
 80202a6:	6178      	str	r0, [r7, #20]
 80202a8:	697b      	ldr	r3, [r7, #20]
 80202aa:	2b00      	cmp	r3, #0
 80202ac:	f000 814b 	beq.w	8020546 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80202b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80202b4:	68ba      	ldr	r2, [r7, #8]
 80202b6:	441a      	add	r2, r3
 80202b8:	697b      	ldr	r3, [r7, #20]
 80202ba:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80202bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80202c0:	b29b      	uxth	r3, r3
 80202c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80202c6:	4619      	mov	r1, r3
 80202c8:	2036      	movs	r0, #54	@ 0x36
 80202ca:	f7fa fd2d 	bl	801ad28 <pbuf_alloc>
 80202ce:	6338      	str	r0, [r7, #48]	@ 0x30
 80202d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	d103      	bne.n	80202de <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80202d6:	6978      	ldr	r0, [r7, #20]
 80202d8:	f7fb f83c 	bl	801b354 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80202dc:	e136      	b.n	802054c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80202de:	6979      	ldr	r1, [r7, #20]
 80202e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80202e2:	f7fb f905 	bl	801b4f0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80202e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80202e8:	f7fb f8c2 	bl	801b470 <pbuf_clen>
 80202ec:	4603      	mov	r3, r0
 80202ee:	461a      	mov	r2, r3
 80202f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80202f4:	4413      	add	r3, r2
 80202f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80202fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80202fe:	2b09      	cmp	r3, #9
 8020300:	d903      	bls.n	802030a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8020302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8020304:	f7fb f826 	bl	801b354 <pbuf_free>
      goto memerr;
 8020308:	e120      	b.n	802054c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 802030a:	68fb      	ldr	r3, [r7, #12]
 802030c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 802030e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8020312:	441a      	add	r2, r3
 8020314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8020318:	9300      	str	r3, [sp, #0]
 802031a:	4613      	mov	r3, r2
 802031c:	2200      	movs	r2, #0
 802031e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8020320:	68f8      	ldr	r0, [r7, #12]
 8020322:	f7ff fc53 	bl	801fbcc <tcp_create_segment>
 8020326:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8020328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802032a:	2b00      	cmp	r3, #0
 802032c:	f000 810d 	beq.w	802054a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8020330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020332:	2b00      	cmp	r3, #0
 8020334:	d102      	bne.n	802033c <tcp_write+0x450>
      queue = seg;
 8020336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020338:	647b      	str	r3, [r7, #68]	@ 0x44
 802033a:	e00c      	b.n	8020356 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 802033c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802033e:	2b00      	cmp	r3, #0
 8020340:	d106      	bne.n	8020350 <tcp_write+0x464>
 8020342:	4b53      	ldr	r3, [pc, #332]	@ (8020490 <tcp_write+0x5a4>)
 8020344:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8020348:	4955      	ldr	r1, [pc, #340]	@ (80204a0 <tcp_write+0x5b4>)
 802034a:	4853      	ldr	r0, [pc, #332]	@ (8020498 <tcp_write+0x5ac>)
 802034c:	f007 fa0e 	bl	802776c <iprintf>
      prev_seg->next = seg;
 8020350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020352:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8020354:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8020356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020358:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 802035a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 802035e:	8b3b      	ldrh	r3, [r7, #24]
 8020360:	4413      	add	r3, r2
 8020362:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8020366:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 802036a:	88fb      	ldrh	r3, [r7, #6]
 802036c:	429a      	cmp	r2, r3
 802036e:	f4ff af3d 	bcc.w	80201ec <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8020372:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8020374:	2b00      	cmp	r3, #0
 8020376:	d02c      	beq.n	80203d2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8020378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802037a:	685b      	ldr	r3, [r3, #4]
 802037c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802037e:	e01e      	b.n	80203be <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8020380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020382:	891a      	ldrh	r2, [r3, #8]
 8020384:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8020386:	4413      	add	r3, r2
 8020388:	b29a      	uxth	r2, r3
 802038a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802038c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 802038e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020390:	681b      	ldr	r3, [r3, #0]
 8020392:	2b00      	cmp	r3, #0
 8020394:	d110      	bne.n	80203b8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8020396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020398:	685b      	ldr	r3, [r3, #4]
 802039a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802039c:	8952      	ldrh	r2, [r2, #10]
 802039e:	4413      	add	r3, r2
 80203a0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80203a2:	68b9      	ldr	r1, [r7, #8]
 80203a4:	4618      	mov	r0, r3
 80203a6:	f007 fc14 	bl	8027bd2 <memcpy>
        p->len += oversize_used;
 80203aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80203ac:	895a      	ldrh	r2, [r3, #10]
 80203ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80203b0:	4413      	add	r3, r2
 80203b2:	b29a      	uxth	r2, r3
 80203b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80203b6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80203b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80203ba:	681b      	ldr	r3, [r3, #0]
 80203bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80203be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	d1dd      	bne.n	8020380 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80203c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80203c6:	891a      	ldrh	r2, [r3, #8]
 80203c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80203ca:	4413      	add	r3, r2
 80203cc:	b29a      	uxth	r2, r3
 80203ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80203d0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80203d2:	8a7a      	ldrh	r2, [r7, #18]
 80203d4:	68fb      	ldr	r3, [r7, #12]
 80203d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80203da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80203dc:	2b00      	cmp	r3, #0
 80203de:	d018      	beq.n	8020412 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80203e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80203e2:	2b00      	cmp	r3, #0
 80203e4:	d106      	bne.n	80203f4 <tcp_write+0x508>
 80203e6:	4b2a      	ldr	r3, [pc, #168]	@ (8020490 <tcp_write+0x5a4>)
 80203e8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80203ec:	492d      	ldr	r1, [pc, #180]	@ (80204a4 <tcp_write+0x5b8>)
 80203ee:	482a      	ldr	r0, [pc, #168]	@ (8020498 <tcp_write+0x5ac>)
 80203f0:	f007 f9bc 	bl	802776c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80203f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80203f6:	685b      	ldr	r3, [r3, #4]
 80203f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80203fa:	4618      	mov	r0, r3
 80203fc:	f7fb f878 	bl	801b4f0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8020400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020402:	891a      	ldrh	r2, [r3, #8]
 8020404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020406:	891b      	ldrh	r3, [r3, #8]
 8020408:	4413      	add	r3, r2
 802040a:	b29a      	uxth	r2, r3
 802040c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802040e:	811a      	strh	r2, [r3, #8]
 8020410:	e037      	b.n	8020482 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8020412:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8020414:	2b00      	cmp	r3, #0
 8020416:	d034      	beq.n	8020482 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8020418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802041a:	2b00      	cmp	r3, #0
 802041c:	d003      	beq.n	8020426 <tcp_write+0x53a>
 802041e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020420:	685b      	ldr	r3, [r3, #4]
 8020422:	2b00      	cmp	r3, #0
 8020424:	d106      	bne.n	8020434 <tcp_write+0x548>
 8020426:	4b1a      	ldr	r3, [pc, #104]	@ (8020490 <tcp_write+0x5a4>)
 8020428:	f240 22e6 	movw	r2, #742	@ 0x2e6
 802042c:	491e      	ldr	r1, [pc, #120]	@ (80204a8 <tcp_write+0x5bc>)
 802042e:	481a      	ldr	r0, [pc, #104]	@ (8020498 <tcp_write+0x5ac>)
 8020430:	f007 f99c 	bl	802776c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8020434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020436:	685b      	ldr	r3, [r3, #4]
 8020438:	62bb      	str	r3, [r7, #40]	@ 0x28
 802043a:	e009      	b.n	8020450 <tcp_write+0x564>
      p->tot_len += extendlen;
 802043c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802043e:	891a      	ldrh	r2, [r3, #8]
 8020440:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8020442:	4413      	add	r3, r2
 8020444:	b29a      	uxth	r2, r3
 8020446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020448:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 802044a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8020450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020452:	681b      	ldr	r3, [r3, #0]
 8020454:	2b00      	cmp	r3, #0
 8020456:	d1f1      	bne.n	802043c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8020458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802045a:	891a      	ldrh	r2, [r3, #8]
 802045c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802045e:	4413      	add	r3, r2
 8020460:	b29a      	uxth	r2, r3
 8020462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020464:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8020466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020468:	895a      	ldrh	r2, [r3, #10]
 802046a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802046c:	4413      	add	r3, r2
 802046e:	b29a      	uxth	r2, r3
 8020470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020472:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8020474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020476:	891a      	ldrh	r2, [r3, #8]
 8020478:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802047a:	4413      	add	r3, r2
 802047c:	b29a      	uxth	r2, r3
 802047e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020480:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8020482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020484:	2b00      	cmp	r3, #0
 8020486:	d111      	bne.n	80204ac <tcp_write+0x5c0>
    pcb->unsent = queue;
 8020488:	68fb      	ldr	r3, [r7, #12]
 802048a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802048c:	66da      	str	r2, [r3, #108]	@ 0x6c
 802048e:	e010      	b.n	80204b2 <tcp_write+0x5c6>
 8020490:	0802ad1c 	.word	0x0802ad1c
 8020494:	0802afbc 	.word	0x0802afbc
 8020498:	0802ad70 	.word	0x0802ad70
 802049c:	0802affc 	.word	0x0802affc
 80204a0:	0802b00c 	.word	0x0802b00c
 80204a4:	0802b020 	.word	0x0802b020
 80204a8:	0802b058 	.word	0x0802b058
  } else {
    last_unsent->next = queue;
 80204ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80204ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80204b0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80204b2:	68fb      	ldr	r3, [r7, #12]
 80204b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80204b6:	88fb      	ldrh	r3, [r7, #6]
 80204b8:	441a      	add	r2, r3
 80204ba:	68fb      	ldr	r3, [r7, #12]
 80204bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80204be:	68fb      	ldr	r3, [r7, #12]
 80204c0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80204c4:	88fb      	ldrh	r3, [r7, #6]
 80204c6:	1ad3      	subs	r3, r2, r3
 80204c8:	b29a      	uxth	r2, r3
 80204ca:	68fb      	ldr	r3, [r7, #12]
 80204cc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80204d0:	68fb      	ldr	r3, [r7, #12]
 80204d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80204d6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80204da:	68fb      	ldr	r3, [r7, #12]
 80204dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80204e0:	2b00      	cmp	r3, #0
 80204e2:	d00e      	beq.n	8020502 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80204e4:	68fb      	ldr	r3, [r7, #12]
 80204e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d10a      	bne.n	8020502 <tcp_write+0x616>
 80204ec:	68fb      	ldr	r3, [r7, #12]
 80204ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80204f0:	2b00      	cmp	r3, #0
 80204f2:	d106      	bne.n	8020502 <tcp_write+0x616>
 80204f4:	4b2c      	ldr	r3, [pc, #176]	@ (80205a8 <tcp_write+0x6bc>)
 80204f6:	f240 3212 	movw	r2, #786	@ 0x312
 80204fa:	492c      	ldr	r1, [pc, #176]	@ (80205ac <tcp_write+0x6c0>)
 80204fc:	482c      	ldr	r0, [pc, #176]	@ (80205b0 <tcp_write+0x6c4>)
 80204fe:	f007 f935 	bl	802776c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8020502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020504:	2b00      	cmp	r3, #0
 8020506:	d016      	beq.n	8020536 <tcp_write+0x64a>
 8020508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802050a:	68db      	ldr	r3, [r3, #12]
 802050c:	2b00      	cmp	r3, #0
 802050e:	d012      	beq.n	8020536 <tcp_write+0x64a>
 8020510:	797b      	ldrb	r3, [r7, #5]
 8020512:	f003 0302 	and.w	r3, r3, #2
 8020516:	2b00      	cmp	r3, #0
 8020518:	d10d      	bne.n	8020536 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 802051a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802051c:	68db      	ldr	r3, [r3, #12]
 802051e:	899b      	ldrh	r3, [r3, #12]
 8020520:	b29c      	uxth	r4, r3
 8020522:	2008      	movs	r0, #8
 8020524:	f7f9 fae6 	bl	8019af4 <lwip_htons>
 8020528:	4603      	mov	r3, r0
 802052a:	461a      	mov	r2, r3
 802052c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802052e:	68db      	ldr	r3, [r3, #12]
 8020530:	4322      	orrs	r2, r4
 8020532:	b292      	uxth	r2, r2
 8020534:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8020536:	2300      	movs	r3, #0
 8020538:	e031      	b.n	802059e <tcp_write+0x6b2>
          goto memerr;
 802053a:	bf00      	nop
 802053c:	e006      	b.n	802054c <tcp_write+0x660>
            goto memerr;
 802053e:	bf00      	nop
 8020540:	e004      	b.n	802054c <tcp_write+0x660>
        goto memerr;
 8020542:	bf00      	nop
 8020544:	e002      	b.n	802054c <tcp_write+0x660>
        goto memerr;
 8020546:	bf00      	nop
 8020548:	e000      	b.n	802054c <tcp_write+0x660>
      goto memerr;
 802054a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 802054c:	68fb      	ldr	r3, [r7, #12]
 802054e:	8b5b      	ldrh	r3, [r3, #26]
 8020550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020554:	b29a      	uxth	r2, r3
 8020556:	68fb      	ldr	r3, [r7, #12]
 8020558:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 802055a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802055c:	2b00      	cmp	r3, #0
 802055e:	d002      	beq.n	8020566 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8020560:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8020562:	f7fa fef7 	bl	801b354 <pbuf_free>
  }
  if (queue != NULL) {
 8020566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020568:	2b00      	cmp	r3, #0
 802056a:	d002      	beq.n	8020572 <tcp_write+0x686>
    tcp_segs_free(queue);
 802056c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 802056e:	f7fc fb71 	bl	801cc54 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8020572:	68fb      	ldr	r3, [r7, #12]
 8020574:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020578:	2b00      	cmp	r3, #0
 802057a:	d00e      	beq.n	802059a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 802057c:	68fb      	ldr	r3, [r7, #12]
 802057e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020580:	2b00      	cmp	r3, #0
 8020582:	d10a      	bne.n	802059a <tcp_write+0x6ae>
 8020584:	68fb      	ldr	r3, [r7, #12]
 8020586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020588:	2b00      	cmp	r3, #0
 802058a:	d106      	bne.n	802059a <tcp_write+0x6ae>
 802058c:	4b06      	ldr	r3, [pc, #24]	@ (80205a8 <tcp_write+0x6bc>)
 802058e:	f240 3227 	movw	r2, #807	@ 0x327
 8020592:	4906      	ldr	r1, [pc, #24]	@ (80205ac <tcp_write+0x6c0>)
 8020594:	4806      	ldr	r0, [pc, #24]	@ (80205b0 <tcp_write+0x6c4>)
 8020596:	f007 f8e9 	bl	802776c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 802059a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802059e:	4618      	mov	r0, r3
 80205a0:	375c      	adds	r7, #92	@ 0x5c
 80205a2:	46bd      	mov	sp, r7
 80205a4:	bd90      	pop	{r4, r7, pc}
 80205a6:	bf00      	nop
 80205a8:	0802ad1c 	.word	0x0802ad1c
 80205ac:	0802b090 	.word	0x0802b090
 80205b0:	0802ad70 	.word	0x0802ad70

080205b4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80205b4:	b590      	push	{r4, r7, lr}
 80205b6:	b08b      	sub	sp, #44	@ 0x2c
 80205b8:	af02      	add	r7, sp, #8
 80205ba:	6078      	str	r0, [r7, #4]
 80205bc:	460b      	mov	r3, r1
 80205be:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80205c0:	2300      	movs	r3, #0
 80205c2:	61fb      	str	r3, [r7, #28]
 80205c4:	2300      	movs	r3, #0
 80205c6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80205c8:	2300      	movs	r3, #0
 80205ca:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	d106      	bne.n	80205e0 <tcp_split_unsent_seg+0x2c>
 80205d2:	4b95      	ldr	r3, [pc, #596]	@ (8020828 <tcp_split_unsent_seg+0x274>)
 80205d4:	f240 324b 	movw	r2, #843	@ 0x34b
 80205d8:	4994      	ldr	r1, [pc, #592]	@ (802082c <tcp_split_unsent_seg+0x278>)
 80205da:	4895      	ldr	r0, [pc, #596]	@ (8020830 <tcp_split_unsent_seg+0x27c>)
 80205dc:	f007 f8c6 	bl	802776c <iprintf>

  useg = pcb->unsent;
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80205e4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80205e6:	697b      	ldr	r3, [r7, #20]
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	d102      	bne.n	80205f2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80205ec:	f04f 33ff 	mov.w	r3, #4294967295
 80205f0:	e116      	b.n	8020820 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80205f2:	887b      	ldrh	r3, [r7, #2]
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d109      	bne.n	802060c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80205f8:	4b8b      	ldr	r3, [pc, #556]	@ (8020828 <tcp_split_unsent_seg+0x274>)
 80205fa:	f240 3253 	movw	r2, #851	@ 0x353
 80205fe:	498d      	ldr	r1, [pc, #564]	@ (8020834 <tcp_split_unsent_seg+0x280>)
 8020600:	488b      	ldr	r0, [pc, #556]	@ (8020830 <tcp_split_unsent_seg+0x27c>)
 8020602:	f007 f8b3 	bl	802776c <iprintf>
    return ERR_VAL;
 8020606:	f06f 0305 	mvn.w	r3, #5
 802060a:	e109      	b.n	8020820 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 802060c:	697b      	ldr	r3, [r7, #20]
 802060e:	891b      	ldrh	r3, [r3, #8]
 8020610:	887a      	ldrh	r2, [r7, #2]
 8020612:	429a      	cmp	r2, r3
 8020614:	d301      	bcc.n	802061a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8020616:	2300      	movs	r3, #0
 8020618:	e102      	b.n	8020820 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802061e:	887a      	ldrh	r2, [r7, #2]
 8020620:	429a      	cmp	r2, r3
 8020622:	d906      	bls.n	8020632 <tcp_split_unsent_seg+0x7e>
 8020624:	4b80      	ldr	r3, [pc, #512]	@ (8020828 <tcp_split_unsent_seg+0x274>)
 8020626:	f240 325b 	movw	r2, #859	@ 0x35b
 802062a:	4983      	ldr	r1, [pc, #524]	@ (8020838 <tcp_split_unsent_seg+0x284>)
 802062c:	4880      	ldr	r0, [pc, #512]	@ (8020830 <tcp_split_unsent_seg+0x27c>)
 802062e:	f007 f89d 	bl	802776c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8020632:	697b      	ldr	r3, [r7, #20]
 8020634:	891b      	ldrh	r3, [r3, #8]
 8020636:	2b00      	cmp	r3, #0
 8020638:	d106      	bne.n	8020648 <tcp_split_unsent_seg+0x94>
 802063a:	4b7b      	ldr	r3, [pc, #492]	@ (8020828 <tcp_split_unsent_seg+0x274>)
 802063c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8020640:	497e      	ldr	r1, [pc, #504]	@ (802083c <tcp_split_unsent_seg+0x288>)
 8020642:	487b      	ldr	r0, [pc, #492]	@ (8020830 <tcp_split_unsent_seg+0x27c>)
 8020644:	f007 f892 	bl	802776c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8020648:	697b      	ldr	r3, [r7, #20]
 802064a:	7a9b      	ldrb	r3, [r3, #10]
 802064c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 802064e:	7bfb      	ldrb	r3, [r7, #15]
 8020650:	009b      	lsls	r3, r3, #2
 8020652:	b2db      	uxtb	r3, r3
 8020654:	f003 0304 	and.w	r3, r3, #4
 8020658:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 802065a:	697b      	ldr	r3, [r7, #20]
 802065c:	891a      	ldrh	r2, [r3, #8]
 802065e:	887b      	ldrh	r3, [r7, #2]
 8020660:	1ad3      	subs	r3, r2, r3
 8020662:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8020664:	7bbb      	ldrb	r3, [r7, #14]
 8020666:	b29a      	uxth	r2, r3
 8020668:	89bb      	ldrh	r3, [r7, #12]
 802066a:	4413      	add	r3, r2
 802066c:	b29b      	uxth	r3, r3
 802066e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8020672:	4619      	mov	r1, r3
 8020674:	2036      	movs	r0, #54	@ 0x36
 8020676:	f7fa fb57 	bl	801ad28 <pbuf_alloc>
 802067a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 802067c:	693b      	ldr	r3, [r7, #16]
 802067e:	2b00      	cmp	r3, #0
 8020680:	f000 80b7 	beq.w	80207f2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8020684:	697b      	ldr	r3, [r7, #20]
 8020686:	685b      	ldr	r3, [r3, #4]
 8020688:	891a      	ldrh	r2, [r3, #8]
 802068a:	697b      	ldr	r3, [r7, #20]
 802068c:	891b      	ldrh	r3, [r3, #8]
 802068e:	1ad3      	subs	r3, r2, r3
 8020690:	b29a      	uxth	r2, r3
 8020692:	887b      	ldrh	r3, [r7, #2]
 8020694:	4413      	add	r3, r2
 8020696:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8020698:	697b      	ldr	r3, [r7, #20]
 802069a:	6858      	ldr	r0, [r3, #4]
 802069c:	693b      	ldr	r3, [r7, #16]
 802069e:	685a      	ldr	r2, [r3, #4]
 80206a0:	7bbb      	ldrb	r3, [r7, #14]
 80206a2:	18d1      	adds	r1, r2, r3
 80206a4:	897b      	ldrh	r3, [r7, #10]
 80206a6:	89ba      	ldrh	r2, [r7, #12]
 80206a8:	f7fb f85a 	bl	801b760 <pbuf_copy_partial>
 80206ac:	4603      	mov	r3, r0
 80206ae:	461a      	mov	r2, r3
 80206b0:	89bb      	ldrh	r3, [r7, #12]
 80206b2:	4293      	cmp	r3, r2
 80206b4:	f040 809f 	bne.w	80207f6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80206b8:	697b      	ldr	r3, [r7, #20]
 80206ba:	68db      	ldr	r3, [r3, #12]
 80206bc:	899b      	ldrh	r3, [r3, #12]
 80206be:	b29b      	uxth	r3, r3
 80206c0:	4618      	mov	r0, r3
 80206c2:	f7f9 fa17 	bl	8019af4 <lwip_htons>
 80206c6:	4603      	mov	r3, r0
 80206c8:	b2db      	uxtb	r3, r3
 80206ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80206ce:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80206d0:	2300      	movs	r3, #0
 80206d2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80206d4:	7efb      	ldrb	r3, [r7, #27]
 80206d6:	f003 0308 	and.w	r3, r3, #8
 80206da:	2b00      	cmp	r3, #0
 80206dc:	d007      	beq.n	80206ee <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80206de:	7efb      	ldrb	r3, [r7, #27]
 80206e0:	f023 0308 	bic.w	r3, r3, #8
 80206e4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80206e6:	7ebb      	ldrb	r3, [r7, #26]
 80206e8:	f043 0308 	orr.w	r3, r3, #8
 80206ec:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80206ee:	7efb      	ldrb	r3, [r7, #27]
 80206f0:	f003 0301 	and.w	r3, r3, #1
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	d007      	beq.n	8020708 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80206f8:	7efb      	ldrb	r3, [r7, #27]
 80206fa:	f023 0301 	bic.w	r3, r3, #1
 80206fe:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8020700:	7ebb      	ldrb	r3, [r7, #26]
 8020702:	f043 0301 	orr.w	r3, r3, #1
 8020706:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8020708:	697b      	ldr	r3, [r7, #20]
 802070a:	68db      	ldr	r3, [r3, #12]
 802070c:	685b      	ldr	r3, [r3, #4]
 802070e:	4618      	mov	r0, r3
 8020710:	f7f9 fa05 	bl	8019b1e <lwip_htonl>
 8020714:	4602      	mov	r2, r0
 8020716:	887b      	ldrh	r3, [r7, #2]
 8020718:	18d1      	adds	r1, r2, r3
 802071a:	7eba      	ldrb	r2, [r7, #26]
 802071c:	7bfb      	ldrb	r3, [r7, #15]
 802071e:	9300      	str	r3, [sp, #0]
 8020720:	460b      	mov	r3, r1
 8020722:	6939      	ldr	r1, [r7, #16]
 8020724:	6878      	ldr	r0, [r7, #4]
 8020726:	f7ff fa51 	bl	801fbcc <tcp_create_segment>
 802072a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 802072c:	69fb      	ldr	r3, [r7, #28]
 802072e:	2b00      	cmp	r3, #0
 8020730:	d063      	beq.n	80207fa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020732:	697b      	ldr	r3, [r7, #20]
 8020734:	685b      	ldr	r3, [r3, #4]
 8020736:	4618      	mov	r0, r3
 8020738:	f7fa fe9a 	bl	801b470 <pbuf_clen>
 802073c:	4603      	mov	r3, r0
 802073e:	461a      	mov	r2, r3
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020746:	1a9b      	subs	r3, r3, r2
 8020748:	b29a      	uxth	r2, r3
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020750:	697b      	ldr	r3, [r7, #20]
 8020752:	6858      	ldr	r0, [r3, #4]
 8020754:	697b      	ldr	r3, [r7, #20]
 8020756:	685b      	ldr	r3, [r3, #4]
 8020758:	891a      	ldrh	r2, [r3, #8]
 802075a:	89bb      	ldrh	r3, [r7, #12]
 802075c:	1ad3      	subs	r3, r2, r3
 802075e:	b29b      	uxth	r3, r3
 8020760:	4619      	mov	r1, r3
 8020762:	f7fa fc3f 	bl	801afe4 <pbuf_realloc>
  useg->len -= remainder;
 8020766:	697b      	ldr	r3, [r7, #20]
 8020768:	891a      	ldrh	r2, [r3, #8]
 802076a:	89bb      	ldrh	r3, [r7, #12]
 802076c:	1ad3      	subs	r3, r2, r3
 802076e:	b29a      	uxth	r2, r3
 8020770:	697b      	ldr	r3, [r7, #20]
 8020772:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020774:	697b      	ldr	r3, [r7, #20]
 8020776:	68db      	ldr	r3, [r3, #12]
 8020778:	899b      	ldrh	r3, [r3, #12]
 802077a:	b29c      	uxth	r4, r3
 802077c:	7efb      	ldrb	r3, [r7, #27]
 802077e:	b29b      	uxth	r3, r3
 8020780:	4618      	mov	r0, r3
 8020782:	f7f9 f9b7 	bl	8019af4 <lwip_htons>
 8020786:	4603      	mov	r3, r0
 8020788:	461a      	mov	r2, r3
 802078a:	697b      	ldr	r3, [r7, #20]
 802078c:	68db      	ldr	r3, [r3, #12]
 802078e:	4322      	orrs	r2, r4
 8020790:	b292      	uxth	r2, r2
 8020792:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020794:	697b      	ldr	r3, [r7, #20]
 8020796:	685b      	ldr	r3, [r3, #4]
 8020798:	4618      	mov	r0, r3
 802079a:	f7fa fe69 	bl	801b470 <pbuf_clen>
 802079e:	4603      	mov	r3, r0
 80207a0:	461a      	mov	r2, r3
 80207a2:	687b      	ldr	r3, [r7, #4]
 80207a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80207a8:	4413      	add	r3, r2
 80207aa:	b29a      	uxth	r2, r3
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80207b2:	69fb      	ldr	r3, [r7, #28]
 80207b4:	685b      	ldr	r3, [r3, #4]
 80207b6:	4618      	mov	r0, r3
 80207b8:	f7fa fe5a 	bl	801b470 <pbuf_clen>
 80207bc:	4603      	mov	r3, r0
 80207be:	461a      	mov	r2, r3
 80207c0:	687b      	ldr	r3, [r7, #4]
 80207c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80207c6:	4413      	add	r3, r2
 80207c8:	b29a      	uxth	r2, r3
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80207d0:	697b      	ldr	r3, [r7, #20]
 80207d2:	681a      	ldr	r2, [r3, #0]
 80207d4:	69fb      	ldr	r3, [r7, #28]
 80207d6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80207d8:	697b      	ldr	r3, [r7, #20]
 80207da:	69fa      	ldr	r2, [r7, #28]
 80207dc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80207de:	69fb      	ldr	r3, [r7, #28]
 80207e0:	681b      	ldr	r3, [r3, #0]
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d103      	bne.n	80207ee <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80207e6:	687b      	ldr	r3, [r7, #4]
 80207e8:	2200      	movs	r2, #0
 80207ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80207ee:	2300      	movs	r3, #0
 80207f0:	e016      	b.n	8020820 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80207f2:	bf00      	nop
 80207f4:	e002      	b.n	80207fc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80207f6:	bf00      	nop
 80207f8:	e000      	b.n	80207fc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80207fa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80207fc:	69fb      	ldr	r3, [r7, #28]
 80207fe:	2b00      	cmp	r3, #0
 8020800:	d006      	beq.n	8020810 <tcp_split_unsent_seg+0x25c>
 8020802:	4b09      	ldr	r3, [pc, #36]	@ (8020828 <tcp_split_unsent_seg+0x274>)
 8020804:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8020808:	490d      	ldr	r1, [pc, #52]	@ (8020840 <tcp_split_unsent_seg+0x28c>)
 802080a:	4809      	ldr	r0, [pc, #36]	@ (8020830 <tcp_split_unsent_seg+0x27c>)
 802080c:	f006 ffae 	bl	802776c <iprintf>
  if (p != NULL) {
 8020810:	693b      	ldr	r3, [r7, #16]
 8020812:	2b00      	cmp	r3, #0
 8020814:	d002      	beq.n	802081c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8020816:	6938      	ldr	r0, [r7, #16]
 8020818:	f7fa fd9c 	bl	801b354 <pbuf_free>
  }

  return ERR_MEM;
 802081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020820:	4618      	mov	r0, r3
 8020822:	3724      	adds	r7, #36	@ 0x24
 8020824:	46bd      	mov	sp, r7
 8020826:	bd90      	pop	{r4, r7, pc}
 8020828:	0802ad1c 	.word	0x0802ad1c
 802082c:	0802b0b0 	.word	0x0802b0b0
 8020830:	0802ad70 	.word	0x0802ad70
 8020834:	0802b0d4 	.word	0x0802b0d4
 8020838:	0802b0f8 	.word	0x0802b0f8
 802083c:	0802b108 	.word	0x0802b108
 8020840:	0802b118 	.word	0x0802b118

08020844 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8020844:	b590      	push	{r4, r7, lr}
 8020846:	b085      	sub	sp, #20
 8020848:	af00      	add	r7, sp, #0
 802084a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	2b00      	cmp	r3, #0
 8020850:	d106      	bne.n	8020860 <tcp_send_fin+0x1c>
 8020852:	4b21      	ldr	r3, [pc, #132]	@ (80208d8 <tcp_send_fin+0x94>)
 8020854:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8020858:	4920      	ldr	r1, [pc, #128]	@ (80208dc <tcp_send_fin+0x98>)
 802085a:	4821      	ldr	r0, [pc, #132]	@ (80208e0 <tcp_send_fin+0x9c>)
 802085c:	f006 ff86 	bl	802776c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020864:	2b00      	cmp	r3, #0
 8020866:	d02e      	beq.n	80208c6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802086c:	60fb      	str	r3, [r7, #12]
 802086e:	e002      	b.n	8020876 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8020870:	68fb      	ldr	r3, [r7, #12]
 8020872:	681b      	ldr	r3, [r3, #0]
 8020874:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020876:	68fb      	ldr	r3, [r7, #12]
 8020878:	681b      	ldr	r3, [r3, #0]
 802087a:	2b00      	cmp	r3, #0
 802087c:	d1f8      	bne.n	8020870 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 802087e:	68fb      	ldr	r3, [r7, #12]
 8020880:	68db      	ldr	r3, [r3, #12]
 8020882:	899b      	ldrh	r3, [r3, #12]
 8020884:	b29b      	uxth	r3, r3
 8020886:	4618      	mov	r0, r3
 8020888:	f7f9 f934 	bl	8019af4 <lwip_htons>
 802088c:	4603      	mov	r3, r0
 802088e:	b2db      	uxtb	r3, r3
 8020890:	f003 0307 	and.w	r3, r3, #7
 8020894:	2b00      	cmp	r3, #0
 8020896:	d116      	bne.n	80208c6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8020898:	68fb      	ldr	r3, [r7, #12]
 802089a:	68db      	ldr	r3, [r3, #12]
 802089c:	899b      	ldrh	r3, [r3, #12]
 802089e:	b29c      	uxth	r4, r3
 80208a0:	2001      	movs	r0, #1
 80208a2:	f7f9 f927 	bl	8019af4 <lwip_htons>
 80208a6:	4603      	mov	r3, r0
 80208a8:	461a      	mov	r2, r3
 80208aa:	68fb      	ldr	r3, [r7, #12]
 80208ac:	68db      	ldr	r3, [r3, #12]
 80208ae:	4322      	orrs	r2, r4
 80208b0:	b292      	uxth	r2, r2
 80208b2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	8b5b      	ldrh	r3, [r3, #26]
 80208b8:	f043 0320 	orr.w	r3, r3, #32
 80208bc:	b29a      	uxth	r2, r3
 80208be:	687b      	ldr	r3, [r7, #4]
 80208c0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80208c2:	2300      	movs	r3, #0
 80208c4:	e004      	b.n	80208d0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80208c6:	2101      	movs	r1, #1
 80208c8:	6878      	ldr	r0, [r7, #4]
 80208ca:	f000 f80b 	bl	80208e4 <tcp_enqueue_flags>
 80208ce:	4603      	mov	r3, r0
}
 80208d0:	4618      	mov	r0, r3
 80208d2:	3714      	adds	r7, #20
 80208d4:	46bd      	mov	sp, r7
 80208d6:	bd90      	pop	{r4, r7, pc}
 80208d8:	0802ad1c 	.word	0x0802ad1c
 80208dc:	0802b124 	.word	0x0802b124
 80208e0:	0802ad70 	.word	0x0802ad70

080208e4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80208e4:	b580      	push	{r7, lr}
 80208e6:	b08a      	sub	sp, #40	@ 0x28
 80208e8:	af02      	add	r7, sp, #8
 80208ea:	6078      	str	r0, [r7, #4]
 80208ec:	460b      	mov	r3, r1
 80208ee:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80208f0:	2300      	movs	r3, #0
 80208f2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80208f4:	2300      	movs	r3, #0
 80208f6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80208f8:	78fb      	ldrb	r3, [r7, #3]
 80208fa:	f003 0303 	and.w	r3, r3, #3
 80208fe:	2b00      	cmp	r3, #0
 8020900:	d106      	bne.n	8020910 <tcp_enqueue_flags+0x2c>
 8020902:	4b67      	ldr	r3, [pc, #412]	@ (8020aa0 <tcp_enqueue_flags+0x1bc>)
 8020904:	f240 4211 	movw	r2, #1041	@ 0x411
 8020908:	4966      	ldr	r1, [pc, #408]	@ (8020aa4 <tcp_enqueue_flags+0x1c0>)
 802090a:	4867      	ldr	r0, [pc, #412]	@ (8020aa8 <tcp_enqueue_flags+0x1c4>)
 802090c:	f006 ff2e 	bl	802776c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	2b00      	cmp	r3, #0
 8020914:	d106      	bne.n	8020924 <tcp_enqueue_flags+0x40>
 8020916:	4b62      	ldr	r3, [pc, #392]	@ (8020aa0 <tcp_enqueue_flags+0x1bc>)
 8020918:	f240 4213 	movw	r2, #1043	@ 0x413
 802091c:	4963      	ldr	r1, [pc, #396]	@ (8020aac <tcp_enqueue_flags+0x1c8>)
 802091e:	4862      	ldr	r0, [pc, #392]	@ (8020aa8 <tcp_enqueue_flags+0x1c4>)
 8020920:	f006 ff24 	bl	802776c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8020924:	78fb      	ldrb	r3, [r7, #3]
 8020926:	f003 0302 	and.w	r3, r3, #2
 802092a:	2b00      	cmp	r3, #0
 802092c:	d001      	beq.n	8020932 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 802092e:	2301      	movs	r3, #1
 8020930:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8020932:	7ffb      	ldrb	r3, [r7, #31]
 8020934:	009b      	lsls	r3, r3, #2
 8020936:	b2db      	uxtb	r3, r3
 8020938:	f003 0304 	and.w	r3, r3, #4
 802093c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 802093e:	7dfb      	ldrb	r3, [r7, #23]
 8020940:	b29b      	uxth	r3, r3
 8020942:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8020946:	4619      	mov	r1, r3
 8020948:	2036      	movs	r0, #54	@ 0x36
 802094a:	f7fa f9ed 	bl	801ad28 <pbuf_alloc>
 802094e:	6138      	str	r0, [r7, #16]
 8020950:	693b      	ldr	r3, [r7, #16]
 8020952:	2b00      	cmp	r3, #0
 8020954:	d109      	bne.n	802096a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	8b5b      	ldrh	r3, [r3, #26]
 802095a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802095e:	b29a      	uxth	r2, r3
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8020964:	f04f 33ff 	mov.w	r3, #4294967295
 8020968:	e095      	b.n	8020a96 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 802096a:	693b      	ldr	r3, [r7, #16]
 802096c:	895a      	ldrh	r2, [r3, #10]
 802096e:	7dfb      	ldrb	r3, [r7, #23]
 8020970:	b29b      	uxth	r3, r3
 8020972:	429a      	cmp	r2, r3
 8020974:	d206      	bcs.n	8020984 <tcp_enqueue_flags+0xa0>
 8020976:	4b4a      	ldr	r3, [pc, #296]	@ (8020aa0 <tcp_enqueue_flags+0x1bc>)
 8020978:	f240 4239 	movw	r2, #1081	@ 0x439
 802097c:	494c      	ldr	r1, [pc, #304]	@ (8020ab0 <tcp_enqueue_flags+0x1cc>)
 802097e:	484a      	ldr	r0, [pc, #296]	@ (8020aa8 <tcp_enqueue_flags+0x1c4>)
 8020980:	f006 fef4 	bl	802776c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8020984:	687b      	ldr	r3, [r7, #4]
 8020986:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8020988:	78fa      	ldrb	r2, [r7, #3]
 802098a:	7ffb      	ldrb	r3, [r7, #31]
 802098c:	9300      	str	r3, [sp, #0]
 802098e:	460b      	mov	r3, r1
 8020990:	6939      	ldr	r1, [r7, #16]
 8020992:	6878      	ldr	r0, [r7, #4]
 8020994:	f7ff f91a 	bl	801fbcc <tcp_create_segment>
 8020998:	60f8      	str	r0, [r7, #12]
 802099a:	68fb      	ldr	r3, [r7, #12]
 802099c:	2b00      	cmp	r3, #0
 802099e:	d109      	bne.n	80209b4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	8b5b      	ldrh	r3, [r3, #26]
 80209a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80209a8:	b29a      	uxth	r2, r3
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80209ae:	f04f 33ff 	mov.w	r3, #4294967295
 80209b2:	e070      	b.n	8020a96 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80209b4:	68fb      	ldr	r3, [r7, #12]
 80209b6:	68db      	ldr	r3, [r3, #12]
 80209b8:	f003 0303 	and.w	r3, r3, #3
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d006      	beq.n	80209ce <tcp_enqueue_flags+0xea>
 80209c0:	4b37      	ldr	r3, [pc, #220]	@ (8020aa0 <tcp_enqueue_flags+0x1bc>)
 80209c2:	f240 4242 	movw	r2, #1090	@ 0x442
 80209c6:	493b      	ldr	r1, [pc, #236]	@ (8020ab4 <tcp_enqueue_flags+0x1d0>)
 80209c8:	4837      	ldr	r0, [pc, #220]	@ (8020aa8 <tcp_enqueue_flags+0x1c4>)
 80209ca:	f006 fecf 	bl	802776c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80209ce:	68fb      	ldr	r3, [r7, #12]
 80209d0:	891b      	ldrh	r3, [r3, #8]
 80209d2:	2b00      	cmp	r3, #0
 80209d4:	d006      	beq.n	80209e4 <tcp_enqueue_flags+0x100>
 80209d6:	4b32      	ldr	r3, [pc, #200]	@ (8020aa0 <tcp_enqueue_flags+0x1bc>)
 80209d8:	f240 4243 	movw	r2, #1091	@ 0x443
 80209dc:	4936      	ldr	r1, [pc, #216]	@ (8020ab8 <tcp_enqueue_flags+0x1d4>)
 80209de:	4832      	ldr	r0, [pc, #200]	@ (8020aa8 <tcp_enqueue_flags+0x1c4>)
 80209e0:	f006 fec4 	bl	802776c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80209e8:	2b00      	cmp	r3, #0
 80209ea:	d103      	bne.n	80209f4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80209ec:	687b      	ldr	r3, [r7, #4]
 80209ee:	68fa      	ldr	r2, [r7, #12]
 80209f0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80209f2:	e00d      	b.n	8020a10 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80209f4:	687b      	ldr	r3, [r7, #4]
 80209f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80209f8:	61bb      	str	r3, [r7, #24]
 80209fa:	e002      	b.n	8020a02 <tcp_enqueue_flags+0x11e>
 80209fc:	69bb      	ldr	r3, [r7, #24]
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	61bb      	str	r3, [r7, #24]
 8020a02:	69bb      	ldr	r3, [r7, #24]
 8020a04:	681b      	ldr	r3, [r3, #0]
 8020a06:	2b00      	cmp	r3, #0
 8020a08:	d1f8      	bne.n	80209fc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8020a0a:	69bb      	ldr	r3, [r7, #24]
 8020a0c:	68fa      	ldr	r2, [r7, #12]
 8020a0e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	2200      	movs	r2, #0
 8020a14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8020a18:	78fb      	ldrb	r3, [r7, #3]
 8020a1a:	f003 0302 	and.w	r3, r3, #2
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	d104      	bne.n	8020a2c <tcp_enqueue_flags+0x148>
 8020a22:	78fb      	ldrb	r3, [r7, #3]
 8020a24:	f003 0301 	and.w	r3, r3, #1
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	d004      	beq.n	8020a36 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020a30:	1c5a      	adds	r2, r3, #1
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8020a36:	78fb      	ldrb	r3, [r7, #3]
 8020a38:	f003 0301 	and.w	r3, r3, #1
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	d006      	beq.n	8020a4e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	8b5b      	ldrh	r3, [r3, #26]
 8020a44:	f043 0320 	orr.w	r3, r3, #32
 8020a48:	b29a      	uxth	r2, r3
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020a4e:	68fb      	ldr	r3, [r7, #12]
 8020a50:	685b      	ldr	r3, [r3, #4]
 8020a52:	4618      	mov	r0, r3
 8020a54:	f7fa fd0c 	bl	801b470 <pbuf_clen>
 8020a58:	4603      	mov	r3, r0
 8020a5a:	461a      	mov	r2, r3
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020a62:	4413      	add	r3, r2
 8020a64:	b29a      	uxth	r2, r3
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	d00e      	beq.n	8020a94 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8020a76:	687b      	ldr	r3, [r7, #4]
 8020a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020a7a:	2b00      	cmp	r3, #0
 8020a7c:	d10a      	bne.n	8020a94 <tcp_enqueue_flags+0x1b0>
 8020a7e:	687b      	ldr	r3, [r7, #4]
 8020a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	d106      	bne.n	8020a94 <tcp_enqueue_flags+0x1b0>
 8020a86:	4b06      	ldr	r3, [pc, #24]	@ (8020aa0 <tcp_enqueue_flags+0x1bc>)
 8020a88:	f240 4265 	movw	r2, #1125	@ 0x465
 8020a8c:	490b      	ldr	r1, [pc, #44]	@ (8020abc <tcp_enqueue_flags+0x1d8>)
 8020a8e:	4806      	ldr	r0, [pc, #24]	@ (8020aa8 <tcp_enqueue_flags+0x1c4>)
 8020a90:	f006 fe6c 	bl	802776c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8020a94:	2300      	movs	r3, #0
}
 8020a96:	4618      	mov	r0, r3
 8020a98:	3720      	adds	r7, #32
 8020a9a:	46bd      	mov	sp, r7
 8020a9c:	bd80      	pop	{r7, pc}
 8020a9e:	bf00      	nop
 8020aa0:	0802ad1c 	.word	0x0802ad1c
 8020aa4:	0802b140 	.word	0x0802b140
 8020aa8:	0802ad70 	.word	0x0802ad70
 8020aac:	0802b198 	.word	0x0802b198
 8020ab0:	0802b1b8 	.word	0x0802b1b8
 8020ab4:	0802b1f4 	.word	0x0802b1f4
 8020ab8:	0802b20c 	.word	0x0802b20c
 8020abc:	0802b238 	.word	0x0802b238

08020ac0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8020ac0:	b5b0      	push	{r4, r5, r7, lr}
 8020ac2:	b08a      	sub	sp, #40	@ 0x28
 8020ac4:	af00      	add	r7, sp, #0
 8020ac6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	d106      	bne.n	8020adc <tcp_output+0x1c>
 8020ace:	4b8a      	ldr	r3, [pc, #552]	@ (8020cf8 <tcp_output+0x238>)
 8020ad0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8020ad4:	4989      	ldr	r1, [pc, #548]	@ (8020cfc <tcp_output+0x23c>)
 8020ad6:	488a      	ldr	r0, [pc, #552]	@ (8020d00 <tcp_output+0x240>)
 8020ad8:	f006 fe48 	bl	802776c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	7d1b      	ldrb	r3, [r3, #20]
 8020ae0:	2b01      	cmp	r3, #1
 8020ae2:	d106      	bne.n	8020af2 <tcp_output+0x32>
 8020ae4:	4b84      	ldr	r3, [pc, #528]	@ (8020cf8 <tcp_output+0x238>)
 8020ae6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8020aea:	4986      	ldr	r1, [pc, #536]	@ (8020d04 <tcp_output+0x244>)
 8020aec:	4884      	ldr	r0, [pc, #528]	@ (8020d00 <tcp_output+0x240>)
 8020aee:	f006 fe3d 	bl	802776c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8020af2:	4b85      	ldr	r3, [pc, #532]	@ (8020d08 <tcp_output+0x248>)
 8020af4:	681b      	ldr	r3, [r3, #0]
 8020af6:	687a      	ldr	r2, [r7, #4]
 8020af8:	429a      	cmp	r2, r3
 8020afa:	d101      	bne.n	8020b00 <tcp_output+0x40>
    return ERR_OK;
 8020afc:	2300      	movs	r3, #0
 8020afe:	e1ce      	b.n	8020e9e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8020b00:	687b      	ldr	r3, [r7, #4]
 8020b02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8020b0c:	4293      	cmp	r3, r2
 8020b0e:	bf28      	it	cs
 8020b10:	4613      	movcs	r3, r2
 8020b12:	b29b      	uxth	r3, r3
 8020b14:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020b1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8020b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b1e:	2b00      	cmp	r3, #0
 8020b20:	d10b      	bne.n	8020b3a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	8b5b      	ldrh	r3, [r3, #26]
 8020b26:	f003 0302 	and.w	r3, r3, #2
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	f000 81aa 	beq.w	8020e84 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8020b30:	6878      	ldr	r0, [r7, #4]
 8020b32:	f000 fdcb 	bl	80216cc <tcp_send_empty_ack>
 8020b36:	4603      	mov	r3, r0
 8020b38:	e1b1      	b.n	8020e9e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8020b3a:	6879      	ldr	r1, [r7, #4]
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	3304      	adds	r3, #4
 8020b40:	461a      	mov	r2, r3
 8020b42:	6878      	ldr	r0, [r7, #4]
 8020b44:	f7ff f826 	bl	801fb94 <tcp_route>
 8020b48:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8020b4a:	697b      	ldr	r3, [r7, #20]
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	d102      	bne.n	8020b56 <tcp_output+0x96>
    return ERR_RTE;
 8020b50:	f06f 0303 	mvn.w	r3, #3
 8020b54:	e1a3      	b.n	8020e9e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8020b56:	687b      	ldr	r3, [r7, #4]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d003      	beq.n	8020b64 <tcp_output+0xa4>
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	681b      	ldr	r3, [r3, #0]
 8020b60:	2b00      	cmp	r3, #0
 8020b62:	d111      	bne.n	8020b88 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8020b64:	697b      	ldr	r3, [r7, #20]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d002      	beq.n	8020b70 <tcp_output+0xb0>
 8020b6a:	697b      	ldr	r3, [r7, #20]
 8020b6c:	3304      	adds	r3, #4
 8020b6e:	e000      	b.n	8020b72 <tcp_output+0xb2>
 8020b70:	2300      	movs	r3, #0
 8020b72:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8020b74:	693b      	ldr	r3, [r7, #16]
 8020b76:	2b00      	cmp	r3, #0
 8020b78:	d102      	bne.n	8020b80 <tcp_output+0xc0>
      return ERR_RTE;
 8020b7a:	f06f 0303 	mvn.w	r3, #3
 8020b7e:	e18e      	b.n	8020e9e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8020b80:	693b      	ldr	r3, [r7, #16]
 8020b82:	681a      	ldr	r2, [r3, #0]
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8020b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b8a:	68db      	ldr	r3, [r3, #12]
 8020b8c:	685b      	ldr	r3, [r3, #4]
 8020b8e:	4618      	mov	r0, r3
 8020b90:	f7f8 ffc5 	bl	8019b1e <lwip_htonl>
 8020b94:	4602      	mov	r2, r0
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020b9a:	1ad3      	subs	r3, r2, r3
 8020b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020b9e:	8912      	ldrh	r2, [r2, #8]
 8020ba0:	4413      	add	r3, r2
 8020ba2:	69ba      	ldr	r2, [r7, #24]
 8020ba4:	429a      	cmp	r2, r3
 8020ba6:	d227      	bcs.n	8020bf8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020ba8:	687b      	ldr	r3, [r7, #4]
 8020baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8020bae:	461a      	mov	r2, r3
 8020bb0:	69bb      	ldr	r3, [r7, #24]
 8020bb2:	4293      	cmp	r3, r2
 8020bb4:	d114      	bne.n	8020be0 <tcp_output+0x120>
 8020bb6:	687b      	ldr	r3, [r7, #4]
 8020bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	d110      	bne.n	8020be0 <tcp_output+0x120>
 8020bbe:	687b      	ldr	r3, [r7, #4]
 8020bc0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	d10b      	bne.n	8020be0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	2200      	movs	r2, #0
 8020bcc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8020bd0:	687b      	ldr	r3, [r7, #4]
 8020bd2:	2201      	movs	r2, #1
 8020bd4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	2200      	movs	r2, #0
 8020bdc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8020be0:	687b      	ldr	r3, [r7, #4]
 8020be2:	8b5b      	ldrh	r3, [r3, #26]
 8020be4:	f003 0302 	and.w	r3, r3, #2
 8020be8:	2b00      	cmp	r3, #0
 8020bea:	f000 814d 	beq.w	8020e88 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8020bee:	6878      	ldr	r0, [r7, #4]
 8020bf0:	f000 fd6c 	bl	80216cc <tcp_send_empty_ack>
 8020bf4:	4603      	mov	r3, r0
 8020bf6:	e152      	b.n	8020e9e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8020bf8:	687b      	ldr	r3, [r7, #4]
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8020c00:	687b      	ldr	r3, [r7, #4]
 8020c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020c04:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8020c06:	6a3b      	ldr	r3, [r7, #32]
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	f000 811c 	beq.w	8020e46 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8020c0e:	e002      	b.n	8020c16 <tcp_output+0x156>
 8020c10:	6a3b      	ldr	r3, [r7, #32]
 8020c12:	681b      	ldr	r3, [r3, #0]
 8020c14:	623b      	str	r3, [r7, #32]
 8020c16:	6a3b      	ldr	r3, [r7, #32]
 8020c18:	681b      	ldr	r3, [r3, #0]
 8020c1a:	2b00      	cmp	r3, #0
 8020c1c:	d1f8      	bne.n	8020c10 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8020c1e:	e112      	b.n	8020e46 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8020c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c22:	68db      	ldr	r3, [r3, #12]
 8020c24:	899b      	ldrh	r3, [r3, #12]
 8020c26:	b29b      	uxth	r3, r3
 8020c28:	4618      	mov	r0, r3
 8020c2a:	f7f8 ff63 	bl	8019af4 <lwip_htons>
 8020c2e:	4603      	mov	r3, r0
 8020c30:	b2db      	uxtb	r3, r3
 8020c32:	f003 0304 	and.w	r3, r3, #4
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	d006      	beq.n	8020c48 <tcp_output+0x188>
 8020c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8020cf8 <tcp_output+0x238>)
 8020c3c:	f240 5236 	movw	r2, #1334	@ 0x536
 8020c40:	4932      	ldr	r1, [pc, #200]	@ (8020d0c <tcp_output+0x24c>)
 8020c42:	482f      	ldr	r0, [pc, #188]	@ (8020d00 <tcp_output+0x240>)
 8020c44:	f006 fd92 	bl	802776c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020c48:	687b      	ldr	r3, [r7, #4]
 8020c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	d01f      	beq.n	8020c90 <tcp_output+0x1d0>
 8020c50:	687b      	ldr	r3, [r7, #4]
 8020c52:	8b5b      	ldrh	r3, [r3, #26]
 8020c54:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	d119      	bne.n	8020c90 <tcp_output+0x1d0>
 8020c5c:	687b      	ldr	r3, [r7, #4]
 8020c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d00b      	beq.n	8020c7c <tcp_output+0x1bc>
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020c68:	681b      	ldr	r3, [r3, #0]
 8020c6a:	2b00      	cmp	r3, #0
 8020c6c:	d110      	bne.n	8020c90 <tcp_output+0x1d0>
 8020c6e:	687b      	ldr	r3, [r7, #4]
 8020c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020c72:	891a      	ldrh	r2, [r3, #8]
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020c78:	429a      	cmp	r2, r3
 8020c7a:	d209      	bcs.n	8020c90 <tcp_output+0x1d0>
 8020c7c:	687b      	ldr	r3, [r7, #4]
 8020c7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d004      	beq.n	8020c90 <tcp_output+0x1d0>
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8020c8c:	2b08      	cmp	r3, #8
 8020c8e:	d901      	bls.n	8020c94 <tcp_output+0x1d4>
 8020c90:	2301      	movs	r3, #1
 8020c92:	e000      	b.n	8020c96 <tcp_output+0x1d6>
 8020c94:	2300      	movs	r3, #0
 8020c96:	2b00      	cmp	r3, #0
 8020c98:	d106      	bne.n	8020ca8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	8b5b      	ldrh	r3, [r3, #26]
 8020c9e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	f000 80e4 	beq.w	8020e70 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8020ca8:	687b      	ldr	r3, [r7, #4]
 8020caa:	7d1b      	ldrb	r3, [r3, #20]
 8020cac:	2b02      	cmp	r3, #2
 8020cae:	d00d      	beq.n	8020ccc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8020cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020cb2:	68db      	ldr	r3, [r3, #12]
 8020cb4:	899b      	ldrh	r3, [r3, #12]
 8020cb6:	b29c      	uxth	r4, r3
 8020cb8:	2010      	movs	r0, #16
 8020cba:	f7f8 ff1b 	bl	8019af4 <lwip_htons>
 8020cbe:	4603      	mov	r3, r0
 8020cc0:	461a      	mov	r2, r3
 8020cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020cc4:	68db      	ldr	r3, [r3, #12]
 8020cc6:	4322      	orrs	r2, r4
 8020cc8:	b292      	uxth	r2, r2
 8020cca:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8020ccc:	697a      	ldr	r2, [r7, #20]
 8020cce:	6879      	ldr	r1, [r7, #4]
 8020cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8020cd2:	f000 f909 	bl	8020ee8 <tcp_output_segment>
 8020cd6:	4603      	mov	r3, r0
 8020cd8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8020cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d016      	beq.n	8020d10 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020ce2:	687b      	ldr	r3, [r7, #4]
 8020ce4:	8b5b      	ldrh	r3, [r3, #26]
 8020ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020cea:	b29a      	uxth	r2, r3
 8020cec:	687b      	ldr	r3, [r7, #4]
 8020cee:	835a      	strh	r2, [r3, #26]
      return err;
 8020cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020cf4:	e0d3      	b.n	8020e9e <tcp_output+0x3de>
 8020cf6:	bf00      	nop
 8020cf8:	0802ad1c 	.word	0x0802ad1c
 8020cfc:	0802b260 	.word	0x0802b260
 8020d00:	0802ad70 	.word	0x0802ad70
 8020d04:	0802b278 	.word	0x0802b278
 8020d08:	200111ac 	.word	0x200111ac
 8020d0c:	0802b2a0 	.word	0x0802b2a0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8020d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d12:	681a      	ldr	r2, [r3, #0]
 8020d14:	687b      	ldr	r3, [r7, #4]
 8020d16:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	7d1b      	ldrb	r3, [r3, #20]
 8020d1c:	2b02      	cmp	r3, #2
 8020d1e:	d006      	beq.n	8020d2e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	8b5b      	ldrh	r3, [r3, #26]
 8020d24:	f023 0303 	bic.w	r3, r3, #3
 8020d28:	b29a      	uxth	r2, r3
 8020d2a:	687b      	ldr	r3, [r7, #4]
 8020d2c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d30:	68db      	ldr	r3, [r3, #12]
 8020d32:	685b      	ldr	r3, [r3, #4]
 8020d34:	4618      	mov	r0, r3
 8020d36:	f7f8 fef2 	bl	8019b1e <lwip_htonl>
 8020d3a:	4604      	mov	r4, r0
 8020d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d3e:	891b      	ldrh	r3, [r3, #8]
 8020d40:	461d      	mov	r5, r3
 8020d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d44:	68db      	ldr	r3, [r3, #12]
 8020d46:	899b      	ldrh	r3, [r3, #12]
 8020d48:	b29b      	uxth	r3, r3
 8020d4a:	4618      	mov	r0, r3
 8020d4c:	f7f8 fed2 	bl	8019af4 <lwip_htons>
 8020d50:	4603      	mov	r3, r0
 8020d52:	b2db      	uxtb	r3, r3
 8020d54:	f003 0303 	and.w	r3, r3, #3
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	d001      	beq.n	8020d60 <tcp_output+0x2a0>
 8020d5c:	2301      	movs	r3, #1
 8020d5e:	e000      	b.n	8020d62 <tcp_output+0x2a2>
 8020d60:	2300      	movs	r3, #0
 8020d62:	442b      	add	r3, r5
 8020d64:	4423      	add	r3, r4
 8020d66:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8020d6c:	68bb      	ldr	r3, [r7, #8]
 8020d6e:	1ad3      	subs	r3, r2, r3
 8020d70:	2b00      	cmp	r3, #0
 8020d72:	da02      	bge.n	8020d7a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8020d74:	687b      	ldr	r3, [r7, #4]
 8020d76:	68ba      	ldr	r2, [r7, #8]
 8020d78:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8020d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d7c:	891b      	ldrh	r3, [r3, #8]
 8020d7e:	461c      	mov	r4, r3
 8020d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020d82:	68db      	ldr	r3, [r3, #12]
 8020d84:	899b      	ldrh	r3, [r3, #12]
 8020d86:	b29b      	uxth	r3, r3
 8020d88:	4618      	mov	r0, r3
 8020d8a:	f7f8 feb3 	bl	8019af4 <lwip_htons>
 8020d8e:	4603      	mov	r3, r0
 8020d90:	b2db      	uxtb	r3, r3
 8020d92:	f003 0303 	and.w	r3, r3, #3
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	d001      	beq.n	8020d9e <tcp_output+0x2de>
 8020d9a:	2301      	movs	r3, #1
 8020d9c:	e000      	b.n	8020da0 <tcp_output+0x2e0>
 8020d9e:	2300      	movs	r3, #0
 8020da0:	4423      	add	r3, r4
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	d049      	beq.n	8020e3a <tcp_output+0x37a>
      seg->next = NULL;
 8020da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020da8:	2200      	movs	r2, #0
 8020daa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8020dac:	687b      	ldr	r3, [r7, #4]
 8020dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	d105      	bne.n	8020dc0 <tcp_output+0x300>
        pcb->unacked = seg;
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020db8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8020dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020dbc:	623b      	str	r3, [r7, #32]
 8020dbe:	e03f      	b.n	8020e40 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8020dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020dc2:	68db      	ldr	r3, [r3, #12]
 8020dc4:	685b      	ldr	r3, [r3, #4]
 8020dc6:	4618      	mov	r0, r3
 8020dc8:	f7f8 fea9 	bl	8019b1e <lwip_htonl>
 8020dcc:	4604      	mov	r4, r0
 8020dce:	6a3b      	ldr	r3, [r7, #32]
 8020dd0:	68db      	ldr	r3, [r3, #12]
 8020dd2:	685b      	ldr	r3, [r3, #4]
 8020dd4:	4618      	mov	r0, r3
 8020dd6:	f7f8 fea2 	bl	8019b1e <lwip_htonl>
 8020dda:	4603      	mov	r3, r0
 8020ddc:	1ae3      	subs	r3, r4, r3
 8020dde:	2b00      	cmp	r3, #0
 8020de0:	da24      	bge.n	8020e2c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8020de2:	687b      	ldr	r3, [r7, #4]
 8020de4:	3370      	adds	r3, #112	@ 0x70
 8020de6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8020de8:	e002      	b.n	8020df0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8020dea:	69fb      	ldr	r3, [r7, #28]
 8020dec:	681b      	ldr	r3, [r3, #0]
 8020dee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8020df0:	69fb      	ldr	r3, [r7, #28]
 8020df2:	681b      	ldr	r3, [r3, #0]
 8020df4:	2b00      	cmp	r3, #0
 8020df6:	d011      	beq.n	8020e1c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020df8:	69fb      	ldr	r3, [r7, #28]
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	68db      	ldr	r3, [r3, #12]
 8020dfe:	685b      	ldr	r3, [r3, #4]
 8020e00:	4618      	mov	r0, r3
 8020e02:	f7f8 fe8c 	bl	8019b1e <lwip_htonl>
 8020e06:	4604      	mov	r4, r0
 8020e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e0a:	68db      	ldr	r3, [r3, #12]
 8020e0c:	685b      	ldr	r3, [r3, #4]
 8020e0e:	4618      	mov	r0, r3
 8020e10:	f7f8 fe85 	bl	8019b1e <lwip_htonl>
 8020e14:	4603      	mov	r3, r0
 8020e16:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	dbe6      	blt.n	8020dea <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8020e1c:	69fb      	ldr	r3, [r7, #28]
 8020e1e:	681a      	ldr	r2, [r3, #0]
 8020e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e22:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8020e24:	69fb      	ldr	r3, [r7, #28]
 8020e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020e28:	601a      	str	r2, [r3, #0]
 8020e2a:	e009      	b.n	8020e40 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8020e2c:	6a3b      	ldr	r3, [r7, #32]
 8020e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020e30:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8020e32:	6a3b      	ldr	r3, [r7, #32]
 8020e34:	681b      	ldr	r3, [r3, #0]
 8020e36:	623b      	str	r3, [r7, #32]
 8020e38:	e002      	b.n	8020e40 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8020e3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8020e3c:	f7fb ff1f 	bl	801cc7e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020e44:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8020e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e48:	2b00      	cmp	r3, #0
 8020e4a:	d012      	beq.n	8020e72 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8020e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020e4e:	68db      	ldr	r3, [r3, #12]
 8020e50:	685b      	ldr	r3, [r3, #4]
 8020e52:	4618      	mov	r0, r3
 8020e54:	f7f8 fe63 	bl	8019b1e <lwip_htonl>
 8020e58:	4602      	mov	r2, r0
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020e5e:	1ad3      	subs	r3, r2, r3
 8020e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020e62:	8912      	ldrh	r2, [r2, #8]
 8020e64:	4413      	add	r3, r2
  while (seg != NULL &&
 8020e66:	69ba      	ldr	r2, [r7, #24]
 8020e68:	429a      	cmp	r2, r3
 8020e6a:	f4bf aed9 	bcs.w	8020c20 <tcp_output+0x160>
 8020e6e:	e000      	b.n	8020e72 <tcp_output+0x3b2>
      break;
 8020e70:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	d108      	bne.n	8020e8c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8020e7a:	687b      	ldr	r3, [r7, #4]
 8020e7c:	2200      	movs	r2, #0
 8020e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8020e82:	e004      	b.n	8020e8e <tcp_output+0x3ce>
    goto output_done;
 8020e84:	bf00      	nop
 8020e86:	e002      	b.n	8020e8e <tcp_output+0x3ce>
    goto output_done;
 8020e88:	bf00      	nop
 8020e8a:	e000      	b.n	8020e8e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8020e8c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	8b5b      	ldrh	r3, [r3, #26]
 8020e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020e96:	b29a      	uxth	r2, r3
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8020e9c:	2300      	movs	r3, #0
}
 8020e9e:	4618      	mov	r0, r3
 8020ea0:	3728      	adds	r7, #40	@ 0x28
 8020ea2:	46bd      	mov	sp, r7
 8020ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8020ea6:	bf00      	nop

08020ea8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8020ea8:	b580      	push	{r7, lr}
 8020eaa:	b082      	sub	sp, #8
 8020eac:	af00      	add	r7, sp, #0
 8020eae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8020eb0:	687b      	ldr	r3, [r7, #4]
 8020eb2:	2b00      	cmp	r3, #0
 8020eb4:	d106      	bne.n	8020ec4 <tcp_output_segment_busy+0x1c>
 8020eb6:	4b09      	ldr	r3, [pc, #36]	@ (8020edc <tcp_output_segment_busy+0x34>)
 8020eb8:	f240 529a 	movw	r2, #1434	@ 0x59a
 8020ebc:	4908      	ldr	r1, [pc, #32]	@ (8020ee0 <tcp_output_segment_busy+0x38>)
 8020ebe:	4809      	ldr	r0, [pc, #36]	@ (8020ee4 <tcp_output_segment_busy+0x3c>)
 8020ec0:	f006 fc54 	bl	802776c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8020ec4:	687b      	ldr	r3, [r7, #4]
 8020ec6:	685b      	ldr	r3, [r3, #4]
 8020ec8:	7b9b      	ldrb	r3, [r3, #14]
 8020eca:	2b01      	cmp	r3, #1
 8020ecc:	d001      	beq.n	8020ed2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8020ece:	2301      	movs	r3, #1
 8020ed0:	e000      	b.n	8020ed4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8020ed2:	2300      	movs	r3, #0
}
 8020ed4:	4618      	mov	r0, r3
 8020ed6:	3708      	adds	r7, #8
 8020ed8:	46bd      	mov	sp, r7
 8020eda:	bd80      	pop	{r7, pc}
 8020edc:	0802ad1c 	.word	0x0802ad1c
 8020ee0:	0802b2b8 	.word	0x0802b2b8
 8020ee4:	0802ad70 	.word	0x0802ad70

08020ee8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8020ee8:	b5b0      	push	{r4, r5, r7, lr}
 8020eea:	b08c      	sub	sp, #48	@ 0x30
 8020eec:	af04      	add	r7, sp, #16
 8020eee:	60f8      	str	r0, [r7, #12]
 8020ef0:	60b9      	str	r1, [r7, #8]
 8020ef2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8020ef4:	68fb      	ldr	r3, [r7, #12]
 8020ef6:	2b00      	cmp	r3, #0
 8020ef8:	d106      	bne.n	8020f08 <tcp_output_segment+0x20>
 8020efa:	4b64      	ldr	r3, [pc, #400]	@ (802108c <tcp_output_segment+0x1a4>)
 8020efc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8020f00:	4963      	ldr	r1, [pc, #396]	@ (8021090 <tcp_output_segment+0x1a8>)
 8020f02:	4864      	ldr	r0, [pc, #400]	@ (8021094 <tcp_output_segment+0x1ac>)
 8020f04:	f006 fc32 	bl	802776c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8020f08:	68bb      	ldr	r3, [r7, #8]
 8020f0a:	2b00      	cmp	r3, #0
 8020f0c:	d106      	bne.n	8020f1c <tcp_output_segment+0x34>
 8020f0e:	4b5f      	ldr	r3, [pc, #380]	@ (802108c <tcp_output_segment+0x1a4>)
 8020f10:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8020f14:	4960      	ldr	r1, [pc, #384]	@ (8021098 <tcp_output_segment+0x1b0>)
 8020f16:	485f      	ldr	r0, [pc, #380]	@ (8021094 <tcp_output_segment+0x1ac>)
 8020f18:	f006 fc28 	bl	802776c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8020f1c:	687b      	ldr	r3, [r7, #4]
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	d106      	bne.n	8020f30 <tcp_output_segment+0x48>
 8020f22:	4b5a      	ldr	r3, [pc, #360]	@ (802108c <tcp_output_segment+0x1a4>)
 8020f24:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8020f28:	495c      	ldr	r1, [pc, #368]	@ (802109c <tcp_output_segment+0x1b4>)
 8020f2a:	485a      	ldr	r0, [pc, #360]	@ (8021094 <tcp_output_segment+0x1ac>)
 8020f2c:	f006 fc1e 	bl	802776c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8020f30:	68f8      	ldr	r0, [r7, #12]
 8020f32:	f7ff ffb9 	bl	8020ea8 <tcp_output_segment_busy>
 8020f36:	4603      	mov	r3, r0
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d001      	beq.n	8020f40 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8020f3c:	2300      	movs	r3, #0
 8020f3e:	e0a1      	b.n	8021084 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020f40:	68bb      	ldr	r3, [r7, #8]
 8020f42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020f44:	68fb      	ldr	r3, [r7, #12]
 8020f46:	68dc      	ldr	r4, [r3, #12]
 8020f48:	4610      	mov	r0, r2
 8020f4a:	f7f8 fde8 	bl	8019b1e <lwip_htonl>
 8020f4e:	4603      	mov	r3, r0
 8020f50:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8020f52:	68bb      	ldr	r3, [r7, #8]
 8020f54:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8020f56:	68fb      	ldr	r3, [r7, #12]
 8020f58:	68dc      	ldr	r4, [r3, #12]
 8020f5a:	4610      	mov	r0, r2
 8020f5c:	f7f8 fdca 	bl	8019af4 <lwip_htons>
 8020f60:	4603      	mov	r3, r0
 8020f62:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8020f64:	68bb      	ldr	r3, [r7, #8]
 8020f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020f68:	68ba      	ldr	r2, [r7, #8]
 8020f6a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8020f6c:	441a      	add	r2, r3
 8020f6e:	68bb      	ldr	r3, [r7, #8]
 8020f70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8020f72:	68fb      	ldr	r3, [r7, #12]
 8020f74:	68db      	ldr	r3, [r3, #12]
 8020f76:	3314      	adds	r3, #20
 8020f78:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8020f7a:	68fb      	ldr	r3, [r7, #12]
 8020f7c:	7a9b      	ldrb	r3, [r3, #10]
 8020f7e:	f003 0301 	and.w	r3, r3, #1
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d015      	beq.n	8020fb2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8020f86:	68bb      	ldr	r3, [r7, #8]
 8020f88:	3304      	adds	r3, #4
 8020f8a:	461a      	mov	r2, r3
 8020f8c:	6879      	ldr	r1, [r7, #4]
 8020f8e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8020f92:	f7fc fa39 	bl	801d408 <tcp_eff_send_mss_netif>
 8020f96:	4603      	mov	r3, r0
 8020f98:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8020f9a:	8b7b      	ldrh	r3, [r7, #26]
 8020f9c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8020fa0:	4618      	mov	r0, r3
 8020fa2:	f7f8 fdbc 	bl	8019b1e <lwip_htonl>
 8020fa6:	4602      	mov	r2, r0
 8020fa8:	69fb      	ldr	r3, [r7, #28]
 8020faa:	601a      	str	r2, [r3, #0]
    opts += 1;
 8020fac:	69fb      	ldr	r3, [r7, #28]
 8020fae:	3304      	adds	r3, #4
 8020fb0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8020fb2:	68bb      	ldr	r3, [r7, #8]
 8020fb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	da02      	bge.n	8020fc2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8020fbc:	68bb      	ldr	r3, [r7, #8]
 8020fbe:	2200      	movs	r2, #0
 8020fc0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8020fc2:	68bb      	ldr	r3, [r7, #8]
 8020fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	d10c      	bne.n	8020fe4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8020fca:	4b35      	ldr	r3, [pc, #212]	@ (80210a0 <tcp_output_segment+0x1b8>)
 8020fcc:	681a      	ldr	r2, [r3, #0]
 8020fce:	68bb      	ldr	r3, [r7, #8]
 8020fd0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8020fd2:	68fb      	ldr	r3, [r7, #12]
 8020fd4:	68db      	ldr	r3, [r3, #12]
 8020fd6:	685b      	ldr	r3, [r3, #4]
 8020fd8:	4618      	mov	r0, r3
 8020fda:	f7f8 fda0 	bl	8019b1e <lwip_htonl>
 8020fde:	4602      	mov	r2, r0
 8020fe0:	68bb      	ldr	r3, [r7, #8]
 8020fe2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8020fe4:	68fb      	ldr	r3, [r7, #12]
 8020fe6:	68da      	ldr	r2, [r3, #12]
 8020fe8:	68fb      	ldr	r3, [r7, #12]
 8020fea:	685b      	ldr	r3, [r3, #4]
 8020fec:	685b      	ldr	r3, [r3, #4]
 8020fee:	1ad3      	subs	r3, r2, r3
 8020ff0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8020ff2:	68fb      	ldr	r3, [r7, #12]
 8020ff4:	685b      	ldr	r3, [r3, #4]
 8020ff6:	8959      	ldrh	r1, [r3, #10]
 8020ff8:	68fb      	ldr	r3, [r7, #12]
 8020ffa:	685b      	ldr	r3, [r3, #4]
 8020ffc:	8b3a      	ldrh	r2, [r7, #24]
 8020ffe:	1a8a      	subs	r2, r1, r2
 8021000:	b292      	uxth	r2, r2
 8021002:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8021004:	68fb      	ldr	r3, [r7, #12]
 8021006:	685b      	ldr	r3, [r3, #4]
 8021008:	8919      	ldrh	r1, [r3, #8]
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	685b      	ldr	r3, [r3, #4]
 802100e:	8b3a      	ldrh	r2, [r7, #24]
 8021010:	1a8a      	subs	r2, r1, r2
 8021012:	b292      	uxth	r2, r2
 8021014:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8021016:	68fb      	ldr	r3, [r7, #12]
 8021018:	685b      	ldr	r3, [r3, #4]
 802101a:	68fa      	ldr	r2, [r7, #12]
 802101c:	68d2      	ldr	r2, [r2, #12]
 802101e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8021020:	68fb      	ldr	r3, [r7, #12]
 8021022:	68db      	ldr	r3, [r3, #12]
 8021024:	2200      	movs	r2, #0
 8021026:	741a      	strb	r2, [r3, #16]
 8021028:	2200      	movs	r2, #0
 802102a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 802102c:	68fb      	ldr	r3, [r7, #12]
 802102e:	68da      	ldr	r2, [r3, #12]
 8021030:	68fb      	ldr	r3, [r7, #12]
 8021032:	7a9b      	ldrb	r3, [r3, #10]
 8021034:	f003 0301 	and.w	r3, r3, #1
 8021038:	2b00      	cmp	r3, #0
 802103a:	d001      	beq.n	8021040 <tcp_output_segment+0x158>
 802103c:	2318      	movs	r3, #24
 802103e:	e000      	b.n	8021042 <tcp_output_segment+0x15a>
 8021040:	2314      	movs	r3, #20
 8021042:	4413      	add	r3, r2
 8021044:	69fa      	ldr	r2, [r7, #28]
 8021046:	429a      	cmp	r2, r3
 8021048:	d006      	beq.n	8021058 <tcp_output_segment+0x170>
 802104a:	4b10      	ldr	r3, [pc, #64]	@ (802108c <tcp_output_segment+0x1a4>)
 802104c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8021050:	4914      	ldr	r1, [pc, #80]	@ (80210a4 <tcp_output_segment+0x1bc>)
 8021052:	4810      	ldr	r0, [pc, #64]	@ (8021094 <tcp_output_segment+0x1ac>)
 8021054:	f006 fb8a 	bl	802776c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8021058:	68fb      	ldr	r3, [r7, #12]
 802105a:	6858      	ldr	r0, [r3, #4]
 802105c:	68b9      	ldr	r1, [r7, #8]
 802105e:	68bb      	ldr	r3, [r7, #8]
 8021060:	1d1c      	adds	r4, r3, #4
 8021062:	68bb      	ldr	r3, [r7, #8]
 8021064:	7add      	ldrb	r5, [r3, #11]
 8021066:	68bb      	ldr	r3, [r7, #8]
 8021068:	7a9b      	ldrb	r3, [r3, #10]
 802106a:	687a      	ldr	r2, [r7, #4]
 802106c:	9202      	str	r2, [sp, #8]
 802106e:	2206      	movs	r2, #6
 8021070:	9201      	str	r2, [sp, #4]
 8021072:	9300      	str	r3, [sp, #0]
 8021074:	462b      	mov	r3, r5
 8021076:	4622      	mov	r2, r4
 8021078:	f004 fcb2 	bl	80259e0 <ip4_output_if>
 802107c:	4603      	mov	r3, r0
 802107e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8021080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021084:	4618      	mov	r0, r3
 8021086:	3720      	adds	r7, #32
 8021088:	46bd      	mov	sp, r7
 802108a:	bdb0      	pop	{r4, r5, r7, pc}
 802108c:	0802ad1c 	.word	0x0802ad1c
 8021090:	0802b2e0 	.word	0x0802b2e0
 8021094:	0802ad70 	.word	0x0802ad70
 8021098:	0802b300 	.word	0x0802b300
 802109c:	0802b320 	.word	0x0802b320
 80210a0:	20011160 	.word	0x20011160
 80210a4:	0802b344 	.word	0x0802b344

080210a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80210a8:	b5b0      	push	{r4, r5, r7, lr}
 80210aa:	b084      	sub	sp, #16
 80210ac:	af00      	add	r7, sp, #0
 80210ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	d106      	bne.n	80210c4 <tcp_rexmit_rto_prepare+0x1c>
 80210b6:	4b31      	ldr	r3, [pc, #196]	@ (802117c <tcp_rexmit_rto_prepare+0xd4>)
 80210b8:	f240 6263 	movw	r2, #1635	@ 0x663
 80210bc:	4930      	ldr	r1, [pc, #192]	@ (8021180 <tcp_rexmit_rto_prepare+0xd8>)
 80210be:	4831      	ldr	r0, [pc, #196]	@ (8021184 <tcp_rexmit_rto_prepare+0xdc>)
 80210c0:	f006 fb54 	bl	802776c <iprintf>

  if (pcb->unacked == NULL) {
 80210c4:	687b      	ldr	r3, [r7, #4]
 80210c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d102      	bne.n	80210d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80210cc:	f06f 0305 	mvn.w	r3, #5
 80210d0:	e050      	b.n	8021174 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80210d6:	60fb      	str	r3, [r7, #12]
 80210d8:	e00b      	b.n	80210f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80210da:	68f8      	ldr	r0, [r7, #12]
 80210dc:	f7ff fee4 	bl	8020ea8 <tcp_output_segment_busy>
 80210e0:	4603      	mov	r3, r0
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	d002      	beq.n	80210ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80210e6:	f06f 0305 	mvn.w	r3, #5
 80210ea:	e043      	b.n	8021174 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80210ec:	68fb      	ldr	r3, [r7, #12]
 80210ee:	681b      	ldr	r3, [r3, #0]
 80210f0:	60fb      	str	r3, [r7, #12]
 80210f2:	68fb      	ldr	r3, [r7, #12]
 80210f4:	681b      	ldr	r3, [r3, #0]
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	d1ef      	bne.n	80210da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80210fa:	68f8      	ldr	r0, [r7, #12]
 80210fc:	f7ff fed4 	bl	8020ea8 <tcp_output_segment_busy>
 8021100:	4603      	mov	r3, r0
 8021102:	2b00      	cmp	r3, #0
 8021104:	d002      	beq.n	802110c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8021106:	f06f 0305 	mvn.w	r3, #5
 802110a:	e033      	b.n	8021174 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8021110:	68fb      	ldr	r3, [r7, #12]
 8021112:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8021118:	687b      	ldr	r3, [r7, #4]
 802111a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	2200      	movs	r2, #0
 8021120:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	8b5b      	ldrh	r3, [r3, #26]
 8021126:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 802112a:	b29a      	uxth	r2, r3
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8021130:	68fb      	ldr	r3, [r7, #12]
 8021132:	68db      	ldr	r3, [r3, #12]
 8021134:	685b      	ldr	r3, [r3, #4]
 8021136:	4618      	mov	r0, r3
 8021138:	f7f8 fcf1 	bl	8019b1e <lwip_htonl>
 802113c:	4604      	mov	r4, r0
 802113e:	68fb      	ldr	r3, [r7, #12]
 8021140:	891b      	ldrh	r3, [r3, #8]
 8021142:	461d      	mov	r5, r3
 8021144:	68fb      	ldr	r3, [r7, #12]
 8021146:	68db      	ldr	r3, [r3, #12]
 8021148:	899b      	ldrh	r3, [r3, #12]
 802114a:	b29b      	uxth	r3, r3
 802114c:	4618      	mov	r0, r3
 802114e:	f7f8 fcd1 	bl	8019af4 <lwip_htons>
 8021152:	4603      	mov	r3, r0
 8021154:	b2db      	uxtb	r3, r3
 8021156:	f003 0303 	and.w	r3, r3, #3
 802115a:	2b00      	cmp	r3, #0
 802115c:	d001      	beq.n	8021162 <tcp_rexmit_rto_prepare+0xba>
 802115e:	2301      	movs	r3, #1
 8021160:	e000      	b.n	8021164 <tcp_rexmit_rto_prepare+0xbc>
 8021162:	2300      	movs	r3, #0
 8021164:	442b      	add	r3, r5
 8021166:	18e2      	adds	r2, r4, r3
 8021168:	687b      	ldr	r3, [r7, #4]
 802116a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	2200      	movs	r2, #0
 8021170:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8021172:	2300      	movs	r3, #0
}
 8021174:	4618      	mov	r0, r3
 8021176:	3710      	adds	r7, #16
 8021178:	46bd      	mov	sp, r7
 802117a:	bdb0      	pop	{r4, r5, r7, pc}
 802117c:	0802ad1c 	.word	0x0802ad1c
 8021180:	0802b358 	.word	0x0802b358
 8021184:	0802ad70 	.word	0x0802ad70

08021188 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8021188:	b580      	push	{r7, lr}
 802118a:	b082      	sub	sp, #8
 802118c:	af00      	add	r7, sp, #0
 802118e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	2b00      	cmp	r3, #0
 8021194:	d106      	bne.n	80211a4 <tcp_rexmit_rto_commit+0x1c>
 8021196:	4b0d      	ldr	r3, [pc, #52]	@ (80211cc <tcp_rexmit_rto_commit+0x44>)
 8021198:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 802119c:	490c      	ldr	r1, [pc, #48]	@ (80211d0 <tcp_rexmit_rto_commit+0x48>)
 802119e:	480d      	ldr	r0, [pc, #52]	@ (80211d4 <tcp_rexmit_rto_commit+0x4c>)
 80211a0:	f006 fae4 	bl	802776c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80211aa:	2bff      	cmp	r3, #255	@ 0xff
 80211ac:	d007      	beq.n	80211be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80211b4:	3301      	adds	r3, #1
 80211b6:	b2da      	uxtb	r2, r3
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80211be:	6878      	ldr	r0, [r7, #4]
 80211c0:	f7ff fc7e 	bl	8020ac0 <tcp_output>
}
 80211c4:	bf00      	nop
 80211c6:	3708      	adds	r7, #8
 80211c8:	46bd      	mov	sp, r7
 80211ca:	bd80      	pop	{r7, pc}
 80211cc:	0802ad1c 	.word	0x0802ad1c
 80211d0:	0802b37c 	.word	0x0802b37c
 80211d4:	0802ad70 	.word	0x0802ad70

080211d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80211d8:	b580      	push	{r7, lr}
 80211da:	b082      	sub	sp, #8
 80211dc:	af00      	add	r7, sp, #0
 80211de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	2b00      	cmp	r3, #0
 80211e4:	d106      	bne.n	80211f4 <tcp_rexmit_rto+0x1c>
 80211e6:	4b0a      	ldr	r3, [pc, #40]	@ (8021210 <tcp_rexmit_rto+0x38>)
 80211e8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80211ec:	4909      	ldr	r1, [pc, #36]	@ (8021214 <tcp_rexmit_rto+0x3c>)
 80211ee:	480a      	ldr	r0, [pc, #40]	@ (8021218 <tcp_rexmit_rto+0x40>)
 80211f0:	f006 fabc 	bl	802776c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80211f4:	6878      	ldr	r0, [r7, #4]
 80211f6:	f7ff ff57 	bl	80210a8 <tcp_rexmit_rto_prepare>
 80211fa:	4603      	mov	r3, r0
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d102      	bne.n	8021206 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8021200:	6878      	ldr	r0, [r7, #4]
 8021202:	f7ff ffc1 	bl	8021188 <tcp_rexmit_rto_commit>
  }
}
 8021206:	bf00      	nop
 8021208:	3708      	adds	r7, #8
 802120a:	46bd      	mov	sp, r7
 802120c:	bd80      	pop	{r7, pc}
 802120e:	bf00      	nop
 8021210:	0802ad1c 	.word	0x0802ad1c
 8021214:	0802b3a0 	.word	0x0802b3a0
 8021218:	0802ad70 	.word	0x0802ad70

0802121c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 802121c:	b590      	push	{r4, r7, lr}
 802121e:	b085      	sub	sp, #20
 8021220:	af00      	add	r7, sp, #0
 8021222:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	2b00      	cmp	r3, #0
 8021228:	d106      	bne.n	8021238 <tcp_rexmit+0x1c>
 802122a:	4b2f      	ldr	r3, [pc, #188]	@ (80212e8 <tcp_rexmit+0xcc>)
 802122c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8021230:	492e      	ldr	r1, [pc, #184]	@ (80212ec <tcp_rexmit+0xd0>)
 8021232:	482f      	ldr	r0, [pc, #188]	@ (80212f0 <tcp_rexmit+0xd4>)
 8021234:	f006 fa9a 	bl	802776c <iprintf>

  if (pcb->unacked == NULL) {
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802123c:	2b00      	cmp	r3, #0
 802123e:	d102      	bne.n	8021246 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8021240:	f06f 0305 	mvn.w	r3, #5
 8021244:	e04c      	b.n	80212e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802124a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 802124c:	68b8      	ldr	r0, [r7, #8]
 802124e:	f7ff fe2b 	bl	8020ea8 <tcp_output_segment_busy>
 8021252:	4603      	mov	r3, r0
 8021254:	2b00      	cmp	r3, #0
 8021256:	d002      	beq.n	802125e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8021258:	f06f 0305 	mvn.w	r3, #5
 802125c:	e040      	b.n	80212e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 802125e:	68bb      	ldr	r3, [r7, #8]
 8021260:	681a      	ldr	r2, [r3, #0]
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	336c      	adds	r3, #108	@ 0x6c
 802126a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802126c:	e002      	b.n	8021274 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 802126e:	68fb      	ldr	r3, [r7, #12]
 8021270:	681b      	ldr	r3, [r3, #0]
 8021272:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8021274:	68fb      	ldr	r3, [r7, #12]
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	2b00      	cmp	r3, #0
 802127a:	d011      	beq.n	80212a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802127c:	68fb      	ldr	r3, [r7, #12]
 802127e:	681b      	ldr	r3, [r3, #0]
 8021280:	68db      	ldr	r3, [r3, #12]
 8021282:	685b      	ldr	r3, [r3, #4]
 8021284:	4618      	mov	r0, r3
 8021286:	f7f8 fc4a 	bl	8019b1e <lwip_htonl>
 802128a:	4604      	mov	r4, r0
 802128c:	68bb      	ldr	r3, [r7, #8]
 802128e:	68db      	ldr	r3, [r3, #12]
 8021290:	685b      	ldr	r3, [r3, #4]
 8021292:	4618      	mov	r0, r3
 8021294:	f7f8 fc43 	bl	8019b1e <lwip_htonl>
 8021298:	4603      	mov	r3, r0
 802129a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 802129c:	2b00      	cmp	r3, #0
 802129e:	dbe6      	blt.n	802126e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80212a0:	68fb      	ldr	r3, [r7, #12]
 80212a2:	681a      	ldr	r2, [r3, #0]
 80212a4:	68bb      	ldr	r3, [r7, #8]
 80212a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80212a8:	68fb      	ldr	r3, [r7, #12]
 80212aa:	68ba      	ldr	r2, [r7, #8]
 80212ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80212ae:	68bb      	ldr	r3, [r7, #8]
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	d103      	bne.n	80212be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	2200      	movs	r2, #0
 80212ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80212be:	687b      	ldr	r3, [r7, #4]
 80212c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80212c4:	2bff      	cmp	r3, #255	@ 0xff
 80212c6:	d007      	beq.n	80212d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80212ce:	3301      	adds	r3, #1
 80212d0:	b2da      	uxtb	r2, r3
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	2200      	movs	r2, #0
 80212dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80212de:	2300      	movs	r3, #0
}
 80212e0:	4618      	mov	r0, r3
 80212e2:	3714      	adds	r7, #20
 80212e4:	46bd      	mov	sp, r7
 80212e6:	bd90      	pop	{r4, r7, pc}
 80212e8:	0802ad1c 	.word	0x0802ad1c
 80212ec:	0802b3bc 	.word	0x0802b3bc
 80212f0:	0802ad70 	.word	0x0802ad70

080212f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80212f4:	b580      	push	{r7, lr}
 80212f6:	b082      	sub	sp, #8
 80212f8:	af00      	add	r7, sp, #0
 80212fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	2b00      	cmp	r3, #0
 8021300:	d106      	bne.n	8021310 <tcp_rexmit_fast+0x1c>
 8021302:	4b2a      	ldr	r3, [pc, #168]	@ (80213ac <tcp_rexmit_fast+0xb8>)
 8021304:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8021308:	4929      	ldr	r1, [pc, #164]	@ (80213b0 <tcp_rexmit_fast+0xbc>)
 802130a:	482a      	ldr	r0, [pc, #168]	@ (80213b4 <tcp_rexmit_fast+0xc0>)
 802130c:	f006 fa2e 	bl	802776c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8021310:	687b      	ldr	r3, [r7, #4]
 8021312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021314:	2b00      	cmp	r3, #0
 8021316:	d045      	beq.n	80213a4 <tcp_rexmit_fast+0xb0>
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	8b5b      	ldrh	r3, [r3, #26]
 802131c:	f003 0304 	and.w	r3, r3, #4
 8021320:	2b00      	cmp	r3, #0
 8021322:	d13f      	bne.n	80213a4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8021324:	6878      	ldr	r0, [r7, #4]
 8021326:	f7ff ff79 	bl	802121c <tcp_rexmit>
 802132a:	4603      	mov	r3, r0
 802132c:	2b00      	cmp	r3, #0
 802132e:	d139      	bne.n	80213a4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8021330:	687b      	ldr	r3, [r7, #4]
 8021332:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 802133c:	4293      	cmp	r3, r2
 802133e:	bf28      	it	cs
 8021340:	4613      	movcs	r3, r2
 8021342:	b29b      	uxth	r3, r3
 8021344:	2b00      	cmp	r3, #0
 8021346:	da00      	bge.n	802134a <tcp_rexmit_fast+0x56>
 8021348:	3301      	adds	r3, #1
 802134a:	105b      	asrs	r3, r3, #1
 802134c:	b29a      	uxth	r2, r3
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 802135a:	461a      	mov	r2, r3
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8021360:	005b      	lsls	r3, r3, #1
 8021362:	429a      	cmp	r2, r3
 8021364:	d206      	bcs.n	8021374 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802136a:	005b      	lsls	r3, r3, #1
 802136c:	b29a      	uxth	r2, r3
 802136e:	687b      	ldr	r3, [r7, #4]
 8021370:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8021374:	687b      	ldr	r3, [r7, #4]
 8021376:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 802137a:	687b      	ldr	r3, [r7, #4]
 802137c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 802137e:	4619      	mov	r1, r3
 8021380:	0049      	lsls	r1, r1, #1
 8021382:	440b      	add	r3, r1
 8021384:	b29b      	uxth	r3, r3
 8021386:	4413      	add	r3, r2
 8021388:	b29a      	uxth	r2, r3
 802138a:	687b      	ldr	r3, [r7, #4]
 802138c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	8b5b      	ldrh	r3, [r3, #26]
 8021394:	f043 0304 	orr.w	r3, r3, #4
 8021398:	b29a      	uxth	r2, r3
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 802139e:	687b      	ldr	r3, [r7, #4]
 80213a0:	2200      	movs	r2, #0
 80213a2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80213a4:	bf00      	nop
 80213a6:	3708      	adds	r7, #8
 80213a8:	46bd      	mov	sp, r7
 80213aa:	bd80      	pop	{r7, pc}
 80213ac:	0802ad1c 	.word	0x0802ad1c
 80213b0:	0802b3d4 	.word	0x0802b3d4
 80213b4:	0802ad70 	.word	0x0802ad70

080213b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80213b8:	b580      	push	{r7, lr}
 80213ba:	b086      	sub	sp, #24
 80213bc:	af00      	add	r7, sp, #0
 80213be:	60f8      	str	r0, [r7, #12]
 80213c0:	607b      	str	r3, [r7, #4]
 80213c2:	460b      	mov	r3, r1
 80213c4:	817b      	strh	r3, [r7, #10]
 80213c6:	4613      	mov	r3, r2
 80213c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80213ca:	897a      	ldrh	r2, [r7, #10]
 80213cc:	893b      	ldrh	r3, [r7, #8]
 80213ce:	4413      	add	r3, r2
 80213d0:	b29b      	uxth	r3, r3
 80213d2:	3314      	adds	r3, #20
 80213d4:	b29b      	uxth	r3, r3
 80213d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80213da:	4619      	mov	r1, r3
 80213dc:	2022      	movs	r0, #34	@ 0x22
 80213de:	f7f9 fca3 	bl	801ad28 <pbuf_alloc>
 80213e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80213e4:	697b      	ldr	r3, [r7, #20]
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d04d      	beq.n	8021486 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80213ea:	897b      	ldrh	r3, [r7, #10]
 80213ec:	3313      	adds	r3, #19
 80213ee:	697a      	ldr	r2, [r7, #20]
 80213f0:	8952      	ldrh	r2, [r2, #10]
 80213f2:	4293      	cmp	r3, r2
 80213f4:	db06      	blt.n	8021404 <tcp_output_alloc_header_common+0x4c>
 80213f6:	4b26      	ldr	r3, [pc, #152]	@ (8021490 <tcp_output_alloc_header_common+0xd8>)
 80213f8:	f240 7223 	movw	r2, #1827	@ 0x723
 80213fc:	4925      	ldr	r1, [pc, #148]	@ (8021494 <tcp_output_alloc_header_common+0xdc>)
 80213fe:	4826      	ldr	r0, [pc, #152]	@ (8021498 <tcp_output_alloc_header_common+0xe0>)
 8021400:	f006 f9b4 	bl	802776c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8021404:	697b      	ldr	r3, [r7, #20]
 8021406:	685b      	ldr	r3, [r3, #4]
 8021408:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 802140a:	8c3b      	ldrh	r3, [r7, #32]
 802140c:	4618      	mov	r0, r3
 802140e:	f7f8 fb71 	bl	8019af4 <lwip_htons>
 8021412:	4603      	mov	r3, r0
 8021414:	461a      	mov	r2, r3
 8021416:	693b      	ldr	r3, [r7, #16]
 8021418:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 802141a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802141c:	4618      	mov	r0, r3
 802141e:	f7f8 fb69 	bl	8019af4 <lwip_htons>
 8021422:	4603      	mov	r3, r0
 8021424:	461a      	mov	r2, r3
 8021426:	693b      	ldr	r3, [r7, #16]
 8021428:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 802142a:	693b      	ldr	r3, [r7, #16]
 802142c:	687a      	ldr	r2, [r7, #4]
 802142e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8021430:	68f8      	ldr	r0, [r7, #12]
 8021432:	f7f8 fb74 	bl	8019b1e <lwip_htonl>
 8021436:	4602      	mov	r2, r0
 8021438:	693b      	ldr	r3, [r7, #16]
 802143a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 802143c:	897b      	ldrh	r3, [r7, #10]
 802143e:	089b      	lsrs	r3, r3, #2
 8021440:	b29b      	uxth	r3, r3
 8021442:	3305      	adds	r3, #5
 8021444:	b29b      	uxth	r3, r3
 8021446:	031b      	lsls	r3, r3, #12
 8021448:	b29a      	uxth	r2, r3
 802144a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 802144e:	b29b      	uxth	r3, r3
 8021450:	4313      	orrs	r3, r2
 8021452:	b29b      	uxth	r3, r3
 8021454:	4618      	mov	r0, r3
 8021456:	f7f8 fb4d 	bl	8019af4 <lwip_htons>
 802145a:	4603      	mov	r3, r0
 802145c:	461a      	mov	r2, r3
 802145e:	693b      	ldr	r3, [r7, #16]
 8021460:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8021462:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8021464:	4618      	mov	r0, r3
 8021466:	f7f8 fb45 	bl	8019af4 <lwip_htons>
 802146a:	4603      	mov	r3, r0
 802146c:	461a      	mov	r2, r3
 802146e:	693b      	ldr	r3, [r7, #16]
 8021470:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8021472:	693b      	ldr	r3, [r7, #16]
 8021474:	2200      	movs	r2, #0
 8021476:	741a      	strb	r2, [r3, #16]
 8021478:	2200      	movs	r2, #0
 802147a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 802147c:	693b      	ldr	r3, [r7, #16]
 802147e:	2200      	movs	r2, #0
 8021480:	749a      	strb	r2, [r3, #18]
 8021482:	2200      	movs	r2, #0
 8021484:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8021486:	697b      	ldr	r3, [r7, #20]
}
 8021488:	4618      	mov	r0, r3
 802148a:	3718      	adds	r7, #24
 802148c:	46bd      	mov	sp, r7
 802148e:	bd80      	pop	{r7, pc}
 8021490:	0802ad1c 	.word	0x0802ad1c
 8021494:	0802b3f4 	.word	0x0802b3f4
 8021498:	0802ad70 	.word	0x0802ad70

0802149c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 802149c:	b5b0      	push	{r4, r5, r7, lr}
 802149e:	b08a      	sub	sp, #40	@ 0x28
 80214a0:	af04      	add	r7, sp, #16
 80214a2:	60f8      	str	r0, [r7, #12]
 80214a4:	607b      	str	r3, [r7, #4]
 80214a6:	460b      	mov	r3, r1
 80214a8:	817b      	strh	r3, [r7, #10]
 80214aa:	4613      	mov	r3, r2
 80214ac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80214ae:	68fb      	ldr	r3, [r7, #12]
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d106      	bne.n	80214c2 <tcp_output_alloc_header+0x26>
 80214b4:	4b15      	ldr	r3, [pc, #84]	@ (802150c <tcp_output_alloc_header+0x70>)
 80214b6:	f240 7242 	movw	r2, #1858	@ 0x742
 80214ba:	4915      	ldr	r1, [pc, #84]	@ (8021510 <tcp_output_alloc_header+0x74>)
 80214bc:	4815      	ldr	r0, [pc, #84]	@ (8021514 <tcp_output_alloc_header+0x78>)
 80214be:	f006 f955 	bl	802776c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80214c2:	68fb      	ldr	r3, [r7, #12]
 80214c4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80214c6:	68fb      	ldr	r3, [r7, #12]
 80214c8:	8adb      	ldrh	r3, [r3, #22]
 80214ca:	68fa      	ldr	r2, [r7, #12]
 80214cc:	8b12      	ldrh	r2, [r2, #24]
 80214ce:	68f9      	ldr	r1, [r7, #12]
 80214d0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80214d2:	893d      	ldrh	r5, [r7, #8]
 80214d4:	897c      	ldrh	r4, [r7, #10]
 80214d6:	9103      	str	r1, [sp, #12]
 80214d8:	2110      	movs	r1, #16
 80214da:	9102      	str	r1, [sp, #8]
 80214dc:	9201      	str	r2, [sp, #4]
 80214de:	9300      	str	r3, [sp, #0]
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	462a      	mov	r2, r5
 80214e4:	4621      	mov	r1, r4
 80214e6:	f7ff ff67 	bl	80213b8 <tcp_output_alloc_header_common>
 80214ea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80214ec:	697b      	ldr	r3, [r7, #20]
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	d006      	beq.n	8021500 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80214f2:	68fb      	ldr	r3, [r7, #12]
 80214f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80214f6:	68fa      	ldr	r2, [r7, #12]
 80214f8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80214fa:	441a      	add	r2, r3
 80214fc:	68fb      	ldr	r3, [r7, #12]
 80214fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8021500:	697b      	ldr	r3, [r7, #20]
}
 8021502:	4618      	mov	r0, r3
 8021504:	3718      	adds	r7, #24
 8021506:	46bd      	mov	sp, r7
 8021508:	bdb0      	pop	{r4, r5, r7, pc}
 802150a:	bf00      	nop
 802150c:	0802ad1c 	.word	0x0802ad1c
 8021510:	0802b424 	.word	0x0802b424
 8021514:	0802ad70 	.word	0x0802ad70

08021518 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8021518:	b580      	push	{r7, lr}
 802151a:	b088      	sub	sp, #32
 802151c:	af00      	add	r7, sp, #0
 802151e:	60f8      	str	r0, [r7, #12]
 8021520:	60b9      	str	r1, [r7, #8]
 8021522:	4611      	mov	r1, r2
 8021524:	461a      	mov	r2, r3
 8021526:	460b      	mov	r3, r1
 8021528:	71fb      	strb	r3, [r7, #7]
 802152a:	4613      	mov	r3, r2
 802152c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 802152e:	2300      	movs	r3, #0
 8021530:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8021532:	68bb      	ldr	r3, [r7, #8]
 8021534:	2b00      	cmp	r3, #0
 8021536:	d106      	bne.n	8021546 <tcp_output_fill_options+0x2e>
 8021538:	4b12      	ldr	r3, [pc, #72]	@ (8021584 <tcp_output_fill_options+0x6c>)
 802153a:	f240 7256 	movw	r2, #1878	@ 0x756
 802153e:	4912      	ldr	r1, [pc, #72]	@ (8021588 <tcp_output_fill_options+0x70>)
 8021540:	4812      	ldr	r0, [pc, #72]	@ (802158c <tcp_output_fill_options+0x74>)
 8021542:	f006 f913 	bl	802776c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8021546:	68bb      	ldr	r3, [r7, #8]
 8021548:	685b      	ldr	r3, [r3, #4]
 802154a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 802154c:	69bb      	ldr	r3, [r7, #24]
 802154e:	3314      	adds	r3, #20
 8021550:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8021552:	8bfb      	ldrh	r3, [r7, #30]
 8021554:	009b      	lsls	r3, r3, #2
 8021556:	461a      	mov	r2, r3
 8021558:	79fb      	ldrb	r3, [r7, #7]
 802155a:	009b      	lsls	r3, r3, #2
 802155c:	f003 0304 	and.w	r3, r3, #4
 8021560:	4413      	add	r3, r2
 8021562:	3314      	adds	r3, #20
 8021564:	69ba      	ldr	r2, [r7, #24]
 8021566:	4413      	add	r3, r2
 8021568:	697a      	ldr	r2, [r7, #20]
 802156a:	429a      	cmp	r2, r3
 802156c:	d006      	beq.n	802157c <tcp_output_fill_options+0x64>
 802156e:	4b05      	ldr	r3, [pc, #20]	@ (8021584 <tcp_output_fill_options+0x6c>)
 8021570:	f240 7275 	movw	r2, #1909	@ 0x775
 8021574:	4906      	ldr	r1, [pc, #24]	@ (8021590 <tcp_output_fill_options+0x78>)
 8021576:	4805      	ldr	r0, [pc, #20]	@ (802158c <tcp_output_fill_options+0x74>)
 8021578:	f006 f8f8 	bl	802776c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 802157c:	bf00      	nop
 802157e:	3720      	adds	r7, #32
 8021580:	46bd      	mov	sp, r7
 8021582:	bd80      	pop	{r7, pc}
 8021584:	0802ad1c 	.word	0x0802ad1c
 8021588:	0802b44c 	.word	0x0802b44c
 802158c:	0802ad70 	.word	0x0802ad70
 8021590:	0802b344 	.word	0x0802b344

08021594 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8021594:	b580      	push	{r7, lr}
 8021596:	b08a      	sub	sp, #40	@ 0x28
 8021598:	af04      	add	r7, sp, #16
 802159a:	60f8      	str	r0, [r7, #12]
 802159c:	60b9      	str	r1, [r7, #8]
 802159e:	607a      	str	r2, [r7, #4]
 80215a0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80215a2:	68bb      	ldr	r3, [r7, #8]
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d106      	bne.n	80215b6 <tcp_output_control_segment+0x22>
 80215a8:	4b1c      	ldr	r3, [pc, #112]	@ (802161c <tcp_output_control_segment+0x88>)
 80215aa:	f240 7287 	movw	r2, #1927	@ 0x787
 80215ae:	491c      	ldr	r1, [pc, #112]	@ (8021620 <tcp_output_control_segment+0x8c>)
 80215b0:	481c      	ldr	r0, [pc, #112]	@ (8021624 <tcp_output_control_segment+0x90>)
 80215b2:	f006 f8db 	bl	802776c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80215b6:	683a      	ldr	r2, [r7, #0]
 80215b8:	6879      	ldr	r1, [r7, #4]
 80215ba:	68f8      	ldr	r0, [r7, #12]
 80215bc:	f7fe faea 	bl	801fb94 <tcp_route>
 80215c0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80215c2:	693b      	ldr	r3, [r7, #16]
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	d102      	bne.n	80215ce <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80215c8:	23fc      	movs	r3, #252	@ 0xfc
 80215ca:	75fb      	strb	r3, [r7, #23]
 80215cc:	e01c      	b.n	8021608 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80215ce:	68fb      	ldr	r3, [r7, #12]
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d006      	beq.n	80215e2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80215d4:	68fb      	ldr	r3, [r7, #12]
 80215d6:	7adb      	ldrb	r3, [r3, #11]
 80215d8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80215da:	68fb      	ldr	r3, [r7, #12]
 80215dc:	7a9b      	ldrb	r3, [r3, #10]
 80215de:	757b      	strb	r3, [r7, #21]
 80215e0:	e003      	b.n	80215ea <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80215e2:	23ff      	movs	r3, #255	@ 0xff
 80215e4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80215e6:	2300      	movs	r3, #0
 80215e8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80215ea:	7dba      	ldrb	r2, [r7, #22]
 80215ec:	693b      	ldr	r3, [r7, #16]
 80215ee:	9302      	str	r3, [sp, #8]
 80215f0:	2306      	movs	r3, #6
 80215f2:	9301      	str	r3, [sp, #4]
 80215f4:	7d7b      	ldrb	r3, [r7, #21]
 80215f6:	9300      	str	r3, [sp, #0]
 80215f8:	4613      	mov	r3, r2
 80215fa:	683a      	ldr	r2, [r7, #0]
 80215fc:	6879      	ldr	r1, [r7, #4]
 80215fe:	68b8      	ldr	r0, [r7, #8]
 8021600:	f004 f9ee 	bl	80259e0 <ip4_output_if>
 8021604:	4603      	mov	r3, r0
 8021606:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8021608:	68b8      	ldr	r0, [r7, #8]
 802160a:	f7f9 fea3 	bl	801b354 <pbuf_free>
  return err;
 802160e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021612:	4618      	mov	r0, r3
 8021614:	3718      	adds	r7, #24
 8021616:	46bd      	mov	sp, r7
 8021618:	bd80      	pop	{r7, pc}
 802161a:	bf00      	nop
 802161c:	0802ad1c 	.word	0x0802ad1c
 8021620:	0802b474 	.word	0x0802b474
 8021624:	0802ad70 	.word	0x0802ad70

08021628 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8021628:	b590      	push	{r4, r7, lr}
 802162a:	b08b      	sub	sp, #44	@ 0x2c
 802162c:	af04      	add	r7, sp, #16
 802162e:	60f8      	str	r0, [r7, #12]
 8021630:	60b9      	str	r1, [r7, #8]
 8021632:	607a      	str	r2, [r7, #4]
 8021634:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8021636:	683b      	ldr	r3, [r7, #0]
 8021638:	2b00      	cmp	r3, #0
 802163a:	d106      	bne.n	802164a <tcp_rst+0x22>
 802163c:	4b1f      	ldr	r3, [pc, #124]	@ (80216bc <tcp_rst+0x94>)
 802163e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8021642:	491f      	ldr	r1, [pc, #124]	@ (80216c0 <tcp_rst+0x98>)
 8021644:	481f      	ldr	r0, [pc, #124]	@ (80216c4 <tcp_rst+0x9c>)
 8021646:	f006 f891 	bl	802776c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802164a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802164c:	2b00      	cmp	r3, #0
 802164e:	d106      	bne.n	802165e <tcp_rst+0x36>
 8021650:	4b1a      	ldr	r3, [pc, #104]	@ (80216bc <tcp_rst+0x94>)
 8021652:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8021656:	491c      	ldr	r1, [pc, #112]	@ (80216c8 <tcp_rst+0xa0>)
 8021658:	481a      	ldr	r0, [pc, #104]	@ (80216c4 <tcp_rst+0x9c>)
 802165a:	f006 f887 	bl	802776c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802165e:	2300      	movs	r3, #0
 8021660:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8021662:	f246 0308 	movw	r3, #24584	@ 0x6008
 8021666:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8021668:	7dfb      	ldrb	r3, [r7, #23]
 802166a:	b29c      	uxth	r4, r3
 802166c:	68b8      	ldr	r0, [r7, #8]
 802166e:	f7f8 fa56 	bl	8019b1e <lwip_htonl>
 8021672:	4602      	mov	r2, r0
 8021674:	8abb      	ldrh	r3, [r7, #20]
 8021676:	9303      	str	r3, [sp, #12]
 8021678:	2314      	movs	r3, #20
 802167a:	9302      	str	r3, [sp, #8]
 802167c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 802167e:	9301      	str	r3, [sp, #4]
 8021680:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8021682:	9300      	str	r3, [sp, #0]
 8021684:	4613      	mov	r3, r2
 8021686:	2200      	movs	r2, #0
 8021688:	4621      	mov	r1, r4
 802168a:	6878      	ldr	r0, [r7, #4]
 802168c:	f7ff fe94 	bl	80213b8 <tcp_output_alloc_header_common>
 8021690:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8021692:	693b      	ldr	r3, [r7, #16]
 8021694:	2b00      	cmp	r3, #0
 8021696:	d00c      	beq.n	80216b2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8021698:	7dfb      	ldrb	r3, [r7, #23]
 802169a:	2200      	movs	r2, #0
 802169c:	6939      	ldr	r1, [r7, #16]
 802169e:	68f8      	ldr	r0, [r7, #12]
 80216a0:	f7ff ff3a 	bl	8021518 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80216a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80216a6:	683a      	ldr	r2, [r7, #0]
 80216a8:	6939      	ldr	r1, [r7, #16]
 80216aa:	68f8      	ldr	r0, [r7, #12]
 80216ac:	f7ff ff72 	bl	8021594 <tcp_output_control_segment>
 80216b0:	e000      	b.n	80216b4 <tcp_rst+0x8c>
    return;
 80216b2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80216b4:	371c      	adds	r7, #28
 80216b6:	46bd      	mov	sp, r7
 80216b8:	bd90      	pop	{r4, r7, pc}
 80216ba:	bf00      	nop
 80216bc:	0802ad1c 	.word	0x0802ad1c
 80216c0:	0802b4a0 	.word	0x0802b4a0
 80216c4:	0802ad70 	.word	0x0802ad70
 80216c8:	0802b4bc 	.word	0x0802b4bc

080216cc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80216cc:	b590      	push	{r4, r7, lr}
 80216ce:	b087      	sub	sp, #28
 80216d0:	af00      	add	r7, sp, #0
 80216d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80216d4:	2300      	movs	r3, #0
 80216d6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80216d8:	2300      	movs	r3, #0
 80216da:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80216dc:	687b      	ldr	r3, [r7, #4]
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d106      	bne.n	80216f0 <tcp_send_empty_ack+0x24>
 80216e2:	4b28      	ldr	r3, [pc, #160]	@ (8021784 <tcp_send_empty_ack+0xb8>)
 80216e4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80216e8:	4927      	ldr	r1, [pc, #156]	@ (8021788 <tcp_send_empty_ack+0xbc>)
 80216ea:	4828      	ldr	r0, [pc, #160]	@ (802178c <tcp_send_empty_ack+0xc0>)
 80216ec:	f006 f83e 	bl	802776c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80216f0:	7dfb      	ldrb	r3, [r7, #23]
 80216f2:	009b      	lsls	r3, r3, #2
 80216f4:	b2db      	uxtb	r3, r3
 80216f6:	f003 0304 	and.w	r3, r3, #4
 80216fa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80216fc:	7d7b      	ldrb	r3, [r7, #21]
 80216fe:	b29c      	uxth	r4, r3
 8021700:	687b      	ldr	r3, [r7, #4]
 8021702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021704:	4618      	mov	r0, r3
 8021706:	f7f8 fa0a 	bl	8019b1e <lwip_htonl>
 802170a:	4603      	mov	r3, r0
 802170c:	2200      	movs	r2, #0
 802170e:	4621      	mov	r1, r4
 8021710:	6878      	ldr	r0, [r7, #4]
 8021712:	f7ff fec3 	bl	802149c <tcp_output_alloc_header>
 8021716:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021718:	693b      	ldr	r3, [r7, #16]
 802171a:	2b00      	cmp	r3, #0
 802171c:	d109      	bne.n	8021732 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	8b5b      	ldrh	r3, [r3, #26]
 8021722:	f043 0303 	orr.w	r3, r3, #3
 8021726:	b29a      	uxth	r2, r3
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 802172c:	f06f 0301 	mvn.w	r3, #1
 8021730:	e023      	b.n	802177a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8021732:	7dbb      	ldrb	r3, [r7, #22]
 8021734:	7dfa      	ldrb	r2, [r7, #23]
 8021736:	6939      	ldr	r1, [r7, #16]
 8021738:	6878      	ldr	r0, [r7, #4]
 802173a:	f7ff feed 	bl	8021518 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802173e:	687a      	ldr	r2, [r7, #4]
 8021740:	687b      	ldr	r3, [r7, #4]
 8021742:	3304      	adds	r3, #4
 8021744:	6939      	ldr	r1, [r7, #16]
 8021746:	6878      	ldr	r0, [r7, #4]
 8021748:	f7ff ff24 	bl	8021594 <tcp_output_control_segment>
 802174c:	4603      	mov	r3, r0
 802174e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8021750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021754:	2b00      	cmp	r3, #0
 8021756:	d007      	beq.n	8021768 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021758:	687b      	ldr	r3, [r7, #4]
 802175a:	8b5b      	ldrh	r3, [r3, #26]
 802175c:	f043 0303 	orr.w	r3, r3, #3
 8021760:	b29a      	uxth	r2, r3
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	835a      	strh	r2, [r3, #26]
 8021766:	e006      	b.n	8021776 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021768:	687b      	ldr	r3, [r7, #4]
 802176a:	8b5b      	ldrh	r3, [r3, #26]
 802176c:	f023 0303 	bic.w	r3, r3, #3
 8021770:	b29a      	uxth	r2, r3
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8021776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802177a:	4618      	mov	r0, r3
 802177c:	371c      	adds	r7, #28
 802177e:	46bd      	mov	sp, r7
 8021780:	bd90      	pop	{r4, r7, pc}
 8021782:	bf00      	nop
 8021784:	0802ad1c 	.word	0x0802ad1c
 8021788:	0802b4d8 	.word	0x0802b4d8
 802178c:	0802ad70 	.word	0x0802ad70

08021790 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8021790:	b590      	push	{r4, r7, lr}
 8021792:	b087      	sub	sp, #28
 8021794:	af00      	add	r7, sp, #0
 8021796:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021798:	2300      	movs	r3, #0
 802179a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 802179c:	687b      	ldr	r3, [r7, #4]
 802179e:	2b00      	cmp	r3, #0
 80217a0:	d106      	bne.n	80217b0 <tcp_keepalive+0x20>
 80217a2:	4b18      	ldr	r3, [pc, #96]	@ (8021804 <tcp_keepalive+0x74>)
 80217a4:	f640 0224 	movw	r2, #2084	@ 0x824
 80217a8:	4917      	ldr	r1, [pc, #92]	@ (8021808 <tcp_keepalive+0x78>)
 80217aa:	4818      	ldr	r0, [pc, #96]	@ (802180c <tcp_keepalive+0x7c>)
 80217ac:	f005 ffde 	bl	802776c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80217b0:	7dfb      	ldrb	r3, [r7, #23]
 80217b2:	b29c      	uxth	r4, r3
 80217b4:	687b      	ldr	r3, [r7, #4]
 80217b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80217b8:	3b01      	subs	r3, #1
 80217ba:	4618      	mov	r0, r3
 80217bc:	f7f8 f9af 	bl	8019b1e <lwip_htonl>
 80217c0:	4603      	mov	r3, r0
 80217c2:	2200      	movs	r2, #0
 80217c4:	4621      	mov	r1, r4
 80217c6:	6878      	ldr	r0, [r7, #4]
 80217c8:	f7ff fe68 	bl	802149c <tcp_output_alloc_header>
 80217cc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80217ce:	693b      	ldr	r3, [r7, #16]
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	d102      	bne.n	80217da <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80217d4:	f04f 33ff 	mov.w	r3, #4294967295
 80217d8:	e010      	b.n	80217fc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80217da:	7dfb      	ldrb	r3, [r7, #23]
 80217dc:	2200      	movs	r2, #0
 80217de:	6939      	ldr	r1, [r7, #16]
 80217e0:	6878      	ldr	r0, [r7, #4]
 80217e2:	f7ff fe99 	bl	8021518 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80217e6:	687a      	ldr	r2, [r7, #4]
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	3304      	adds	r3, #4
 80217ec:	6939      	ldr	r1, [r7, #16]
 80217ee:	6878      	ldr	r0, [r7, #4]
 80217f0:	f7ff fed0 	bl	8021594 <tcp_output_control_segment>
 80217f4:	4603      	mov	r3, r0
 80217f6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80217f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80217fc:	4618      	mov	r0, r3
 80217fe:	371c      	adds	r7, #28
 8021800:	46bd      	mov	sp, r7
 8021802:	bd90      	pop	{r4, r7, pc}
 8021804:	0802ad1c 	.word	0x0802ad1c
 8021808:	0802b4f8 	.word	0x0802b4f8
 802180c:	0802ad70 	.word	0x0802ad70

08021810 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8021810:	b590      	push	{r4, r7, lr}
 8021812:	b08b      	sub	sp, #44	@ 0x2c
 8021814:	af00      	add	r7, sp, #0
 8021816:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021818:	2300      	movs	r3, #0
 802181a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 802181e:	687b      	ldr	r3, [r7, #4]
 8021820:	2b00      	cmp	r3, #0
 8021822:	d106      	bne.n	8021832 <tcp_zero_window_probe+0x22>
 8021824:	4b4c      	ldr	r3, [pc, #304]	@ (8021958 <tcp_zero_window_probe+0x148>)
 8021826:	f640 024f 	movw	r2, #2127	@ 0x84f
 802182a:	494c      	ldr	r1, [pc, #304]	@ (802195c <tcp_zero_window_probe+0x14c>)
 802182c:	484c      	ldr	r0, [pc, #304]	@ (8021960 <tcp_zero_window_probe+0x150>)
 802182e:	f005 ff9d 	bl	802776c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8021832:	687b      	ldr	r3, [r7, #4]
 8021834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021836:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8021838:	6a3b      	ldr	r3, [r7, #32]
 802183a:	2b00      	cmp	r3, #0
 802183c:	d101      	bne.n	8021842 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 802183e:	2300      	movs	r3, #0
 8021840:	e086      	b.n	8021950 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8021842:	687b      	ldr	r3, [r7, #4]
 8021844:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8021848:	2bff      	cmp	r3, #255	@ 0xff
 802184a:	d007      	beq.n	802185c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 802184c:	687b      	ldr	r3, [r7, #4]
 802184e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8021852:	3301      	adds	r3, #1
 8021854:	b2da      	uxtb	r2, r3
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 802185c:	6a3b      	ldr	r3, [r7, #32]
 802185e:	68db      	ldr	r3, [r3, #12]
 8021860:	899b      	ldrh	r3, [r3, #12]
 8021862:	b29b      	uxth	r3, r3
 8021864:	4618      	mov	r0, r3
 8021866:	f7f8 f945 	bl	8019af4 <lwip_htons>
 802186a:	4603      	mov	r3, r0
 802186c:	b2db      	uxtb	r3, r3
 802186e:	f003 0301 	and.w	r3, r3, #1
 8021872:	2b00      	cmp	r3, #0
 8021874:	d005      	beq.n	8021882 <tcp_zero_window_probe+0x72>
 8021876:	6a3b      	ldr	r3, [r7, #32]
 8021878:	891b      	ldrh	r3, [r3, #8]
 802187a:	2b00      	cmp	r3, #0
 802187c:	d101      	bne.n	8021882 <tcp_zero_window_probe+0x72>
 802187e:	2301      	movs	r3, #1
 8021880:	e000      	b.n	8021884 <tcp_zero_window_probe+0x74>
 8021882:	2300      	movs	r3, #0
 8021884:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8021886:	7ffb      	ldrb	r3, [r7, #31]
 8021888:	2b00      	cmp	r3, #0
 802188a:	bf0c      	ite	eq
 802188c:	2301      	moveq	r3, #1
 802188e:	2300      	movne	r3, #0
 8021890:	b2db      	uxtb	r3, r3
 8021892:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8021894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8021898:	b299      	uxth	r1, r3
 802189a:	6a3b      	ldr	r3, [r7, #32]
 802189c:	68db      	ldr	r3, [r3, #12]
 802189e:	685b      	ldr	r3, [r3, #4]
 80218a0:	8bba      	ldrh	r2, [r7, #28]
 80218a2:	6878      	ldr	r0, [r7, #4]
 80218a4:	f7ff fdfa 	bl	802149c <tcp_output_alloc_header>
 80218a8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80218aa:	69bb      	ldr	r3, [r7, #24]
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d102      	bne.n	80218b6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80218b0:	f04f 33ff 	mov.w	r3, #4294967295
 80218b4:	e04c      	b.n	8021950 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80218b6:	69bb      	ldr	r3, [r7, #24]
 80218b8:	685b      	ldr	r3, [r3, #4]
 80218ba:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80218bc:	7ffb      	ldrb	r3, [r7, #31]
 80218be:	2b00      	cmp	r3, #0
 80218c0:	d011      	beq.n	80218e6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80218c2:	697b      	ldr	r3, [r7, #20]
 80218c4:	899b      	ldrh	r3, [r3, #12]
 80218c6:	b29b      	uxth	r3, r3
 80218c8:	b21b      	sxth	r3, r3
 80218ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80218ce:	b21c      	sxth	r4, r3
 80218d0:	2011      	movs	r0, #17
 80218d2:	f7f8 f90f 	bl	8019af4 <lwip_htons>
 80218d6:	4603      	mov	r3, r0
 80218d8:	b21b      	sxth	r3, r3
 80218da:	4323      	orrs	r3, r4
 80218dc:	b21b      	sxth	r3, r3
 80218de:	b29a      	uxth	r2, r3
 80218e0:	697b      	ldr	r3, [r7, #20]
 80218e2:	819a      	strh	r2, [r3, #12]
 80218e4:	e010      	b.n	8021908 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80218e6:	69bb      	ldr	r3, [r7, #24]
 80218e8:	685b      	ldr	r3, [r3, #4]
 80218ea:	3314      	adds	r3, #20
 80218ec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80218ee:	6a3b      	ldr	r3, [r7, #32]
 80218f0:	6858      	ldr	r0, [r3, #4]
 80218f2:	6a3b      	ldr	r3, [r7, #32]
 80218f4:	685b      	ldr	r3, [r3, #4]
 80218f6:	891a      	ldrh	r2, [r3, #8]
 80218f8:	6a3b      	ldr	r3, [r7, #32]
 80218fa:	891b      	ldrh	r3, [r3, #8]
 80218fc:	1ad3      	subs	r3, r2, r3
 80218fe:	b29b      	uxth	r3, r3
 8021900:	2201      	movs	r2, #1
 8021902:	6939      	ldr	r1, [r7, #16]
 8021904:	f7f9 ff2c 	bl	801b760 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8021908:	6a3b      	ldr	r3, [r7, #32]
 802190a:	68db      	ldr	r3, [r3, #12]
 802190c:	685b      	ldr	r3, [r3, #4]
 802190e:	4618      	mov	r0, r3
 8021910:	f7f8 f905 	bl	8019b1e <lwip_htonl>
 8021914:	4603      	mov	r3, r0
 8021916:	3301      	adds	r3, #1
 8021918:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802191e:	68fb      	ldr	r3, [r7, #12]
 8021920:	1ad3      	subs	r3, r2, r3
 8021922:	2b00      	cmp	r3, #0
 8021924:	da02      	bge.n	802192c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	68fa      	ldr	r2, [r7, #12]
 802192a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802192c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8021930:	2200      	movs	r2, #0
 8021932:	69b9      	ldr	r1, [r7, #24]
 8021934:	6878      	ldr	r0, [r7, #4]
 8021936:	f7ff fdef 	bl	8021518 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 802193a:	687a      	ldr	r2, [r7, #4]
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	3304      	adds	r3, #4
 8021940:	69b9      	ldr	r1, [r7, #24]
 8021942:	6878      	ldr	r0, [r7, #4]
 8021944:	f7ff fe26 	bl	8021594 <tcp_output_control_segment>
 8021948:	4603      	mov	r3, r0
 802194a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 802194c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8021950:	4618      	mov	r0, r3
 8021952:	372c      	adds	r7, #44	@ 0x2c
 8021954:	46bd      	mov	sp, r7
 8021956:	bd90      	pop	{r4, r7, pc}
 8021958:	0802ad1c 	.word	0x0802ad1c
 802195c:	0802b514 	.word	0x0802b514
 8021960:	0802ad70 	.word	0x0802ad70

08021964 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8021964:	b580      	push	{r7, lr}
 8021966:	b082      	sub	sp, #8
 8021968:	af00      	add	r7, sp, #0
 802196a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 802196c:	f7f9 ffe6 	bl	801b93c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8021970:	4b0a      	ldr	r3, [pc, #40]	@ (802199c <tcpip_tcp_timer+0x38>)
 8021972:	681b      	ldr	r3, [r3, #0]
 8021974:	2b00      	cmp	r3, #0
 8021976:	d103      	bne.n	8021980 <tcpip_tcp_timer+0x1c>
 8021978:	4b09      	ldr	r3, [pc, #36]	@ (80219a0 <tcpip_tcp_timer+0x3c>)
 802197a:	681b      	ldr	r3, [r3, #0]
 802197c:	2b00      	cmp	r3, #0
 802197e:	d005      	beq.n	802198c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8021980:	2200      	movs	r2, #0
 8021982:	4908      	ldr	r1, [pc, #32]	@ (80219a4 <tcpip_tcp_timer+0x40>)
 8021984:	20fa      	movs	r0, #250	@ 0xfa
 8021986:	f000 f8f3 	bl	8021b70 <sys_timeout>
 802198a:	e003      	b.n	8021994 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 802198c:	4b06      	ldr	r3, [pc, #24]	@ (80219a8 <tcpip_tcp_timer+0x44>)
 802198e:	2200      	movs	r2, #0
 8021990:	601a      	str	r2, [r3, #0]
  }
}
 8021992:	bf00      	nop
 8021994:	bf00      	nop
 8021996:	3708      	adds	r7, #8
 8021998:	46bd      	mov	sp, r7
 802199a:	bd80      	pop	{r7, pc}
 802199c:	2001116c 	.word	0x2001116c
 80219a0:	20011170 	.word	0x20011170
 80219a4:	08021965 	.word	0x08021965
 80219a8:	200111b8 	.word	0x200111b8

080219ac <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80219ac:	b580      	push	{r7, lr}
 80219ae:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80219b0:	4b0a      	ldr	r3, [pc, #40]	@ (80219dc <tcp_timer_needed+0x30>)
 80219b2:	681b      	ldr	r3, [r3, #0]
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	d10f      	bne.n	80219d8 <tcp_timer_needed+0x2c>
 80219b8:	4b09      	ldr	r3, [pc, #36]	@ (80219e0 <tcp_timer_needed+0x34>)
 80219ba:	681b      	ldr	r3, [r3, #0]
 80219bc:	2b00      	cmp	r3, #0
 80219be:	d103      	bne.n	80219c8 <tcp_timer_needed+0x1c>
 80219c0:	4b08      	ldr	r3, [pc, #32]	@ (80219e4 <tcp_timer_needed+0x38>)
 80219c2:	681b      	ldr	r3, [r3, #0]
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d007      	beq.n	80219d8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80219c8:	4b04      	ldr	r3, [pc, #16]	@ (80219dc <tcp_timer_needed+0x30>)
 80219ca:	2201      	movs	r2, #1
 80219cc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80219ce:	2200      	movs	r2, #0
 80219d0:	4905      	ldr	r1, [pc, #20]	@ (80219e8 <tcp_timer_needed+0x3c>)
 80219d2:	20fa      	movs	r0, #250	@ 0xfa
 80219d4:	f000 f8cc 	bl	8021b70 <sys_timeout>
  }
}
 80219d8:	bf00      	nop
 80219da:	bd80      	pop	{r7, pc}
 80219dc:	200111b8 	.word	0x200111b8
 80219e0:	2001116c 	.word	0x2001116c
 80219e4:	20011170 	.word	0x20011170
 80219e8:	08021965 	.word	0x08021965

080219ec <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80219ec:	b580      	push	{r7, lr}
 80219ee:	b086      	sub	sp, #24
 80219f0:	af00      	add	r7, sp, #0
 80219f2:	60f8      	str	r0, [r7, #12]
 80219f4:	60b9      	str	r1, [r7, #8]
 80219f6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80219f8:	200a      	movs	r0, #10
 80219fa:	f7f8 fd53 	bl	801a4a4 <memp_malloc>
 80219fe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8021a00:	693b      	ldr	r3, [r7, #16]
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d109      	bne.n	8021a1a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8021a06:	693b      	ldr	r3, [r7, #16]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d151      	bne.n	8021ab0 <sys_timeout_abs+0xc4>
 8021a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8021ab8 <sys_timeout_abs+0xcc>)
 8021a0e:	22be      	movs	r2, #190	@ 0xbe
 8021a10:	492a      	ldr	r1, [pc, #168]	@ (8021abc <sys_timeout_abs+0xd0>)
 8021a12:	482b      	ldr	r0, [pc, #172]	@ (8021ac0 <sys_timeout_abs+0xd4>)
 8021a14:	f005 feaa 	bl	802776c <iprintf>
    return;
 8021a18:	e04a      	b.n	8021ab0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8021a1a:	693b      	ldr	r3, [r7, #16]
 8021a1c:	2200      	movs	r2, #0
 8021a1e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8021a20:	693b      	ldr	r3, [r7, #16]
 8021a22:	68ba      	ldr	r2, [r7, #8]
 8021a24:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8021a26:	693b      	ldr	r3, [r7, #16]
 8021a28:	687a      	ldr	r2, [r7, #4]
 8021a2a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8021a2c:	693b      	ldr	r3, [r7, #16]
 8021a2e:	68fa      	ldr	r2, [r7, #12]
 8021a30:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8021a32:	4b24      	ldr	r3, [pc, #144]	@ (8021ac4 <sys_timeout_abs+0xd8>)
 8021a34:	681b      	ldr	r3, [r3, #0]
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d103      	bne.n	8021a42 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8021a3a:	4a22      	ldr	r2, [pc, #136]	@ (8021ac4 <sys_timeout_abs+0xd8>)
 8021a3c:	693b      	ldr	r3, [r7, #16]
 8021a3e:	6013      	str	r3, [r2, #0]
    return;
 8021a40:	e037      	b.n	8021ab2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8021a42:	693b      	ldr	r3, [r7, #16]
 8021a44:	685a      	ldr	r2, [r3, #4]
 8021a46:	4b1f      	ldr	r3, [pc, #124]	@ (8021ac4 <sys_timeout_abs+0xd8>)
 8021a48:	681b      	ldr	r3, [r3, #0]
 8021a4a:	685b      	ldr	r3, [r3, #4]
 8021a4c:	1ad3      	subs	r3, r2, r3
 8021a4e:	0fdb      	lsrs	r3, r3, #31
 8021a50:	f003 0301 	and.w	r3, r3, #1
 8021a54:	b2db      	uxtb	r3, r3
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	d007      	beq.n	8021a6a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8021a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8021ac4 <sys_timeout_abs+0xd8>)
 8021a5c:	681a      	ldr	r2, [r3, #0]
 8021a5e:	693b      	ldr	r3, [r7, #16]
 8021a60:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8021a62:	4a18      	ldr	r2, [pc, #96]	@ (8021ac4 <sys_timeout_abs+0xd8>)
 8021a64:	693b      	ldr	r3, [r7, #16]
 8021a66:	6013      	str	r3, [r2, #0]
 8021a68:	e023      	b.n	8021ab2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8021a6a:	4b16      	ldr	r3, [pc, #88]	@ (8021ac4 <sys_timeout_abs+0xd8>)
 8021a6c:	681b      	ldr	r3, [r3, #0]
 8021a6e:	617b      	str	r3, [r7, #20]
 8021a70:	e01a      	b.n	8021aa8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8021a72:	697b      	ldr	r3, [r7, #20]
 8021a74:	681b      	ldr	r3, [r3, #0]
 8021a76:	2b00      	cmp	r3, #0
 8021a78:	d00b      	beq.n	8021a92 <sys_timeout_abs+0xa6>
 8021a7a:	693b      	ldr	r3, [r7, #16]
 8021a7c:	685a      	ldr	r2, [r3, #4]
 8021a7e:	697b      	ldr	r3, [r7, #20]
 8021a80:	681b      	ldr	r3, [r3, #0]
 8021a82:	685b      	ldr	r3, [r3, #4]
 8021a84:	1ad3      	subs	r3, r2, r3
 8021a86:	0fdb      	lsrs	r3, r3, #31
 8021a88:	f003 0301 	and.w	r3, r3, #1
 8021a8c:	b2db      	uxtb	r3, r3
 8021a8e:	2b00      	cmp	r3, #0
 8021a90:	d007      	beq.n	8021aa2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8021a92:	697b      	ldr	r3, [r7, #20]
 8021a94:	681a      	ldr	r2, [r3, #0]
 8021a96:	693b      	ldr	r3, [r7, #16]
 8021a98:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8021a9a:	697b      	ldr	r3, [r7, #20]
 8021a9c:	693a      	ldr	r2, [r7, #16]
 8021a9e:	601a      	str	r2, [r3, #0]
        break;
 8021aa0:	e007      	b.n	8021ab2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8021aa2:	697b      	ldr	r3, [r7, #20]
 8021aa4:	681b      	ldr	r3, [r3, #0]
 8021aa6:	617b      	str	r3, [r7, #20]
 8021aa8:	697b      	ldr	r3, [r7, #20]
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d1e1      	bne.n	8021a72 <sys_timeout_abs+0x86>
 8021aae:	e000      	b.n	8021ab2 <sys_timeout_abs+0xc6>
    return;
 8021ab0:	bf00      	nop
      }
    }
  }
}
 8021ab2:	3718      	adds	r7, #24
 8021ab4:	46bd      	mov	sp, r7
 8021ab6:	bd80      	pop	{r7, pc}
 8021ab8:	0802b538 	.word	0x0802b538
 8021abc:	0802b56c 	.word	0x0802b56c
 8021ac0:	0802b5ac 	.word	0x0802b5ac
 8021ac4:	200111b0 	.word	0x200111b0

08021ac8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8021ac8:	b580      	push	{r7, lr}
 8021aca:	b086      	sub	sp, #24
 8021acc:	af00      	add	r7, sp, #0
 8021ace:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8021ad4:	697b      	ldr	r3, [r7, #20]
 8021ad6:	685b      	ldr	r3, [r3, #4]
 8021ad8:	4798      	blx	r3

  now = sys_now();
 8021ada:	f7ee faa7 	bl	801002c <sys_now>
 8021ade:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8021ae0:	697b      	ldr	r3, [r7, #20]
 8021ae2:	681a      	ldr	r2, [r3, #0]
 8021ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8021b24 <lwip_cyclic_timer+0x5c>)
 8021ae6:	681b      	ldr	r3, [r3, #0]
 8021ae8:	4413      	add	r3, r2
 8021aea:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8021aec:	68fa      	ldr	r2, [r7, #12]
 8021aee:	693b      	ldr	r3, [r7, #16]
 8021af0:	1ad3      	subs	r3, r2, r3
 8021af2:	0fdb      	lsrs	r3, r3, #31
 8021af4:	f003 0301 	and.w	r3, r3, #1
 8021af8:	b2db      	uxtb	r3, r3
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d009      	beq.n	8021b12 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8021afe:	697b      	ldr	r3, [r7, #20]
 8021b00:	681a      	ldr	r2, [r3, #0]
 8021b02:	693b      	ldr	r3, [r7, #16]
 8021b04:	4413      	add	r3, r2
 8021b06:	687a      	ldr	r2, [r7, #4]
 8021b08:	4907      	ldr	r1, [pc, #28]	@ (8021b28 <lwip_cyclic_timer+0x60>)
 8021b0a:	4618      	mov	r0, r3
 8021b0c:	f7ff ff6e 	bl	80219ec <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8021b10:	e004      	b.n	8021b1c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8021b12:	687a      	ldr	r2, [r7, #4]
 8021b14:	4904      	ldr	r1, [pc, #16]	@ (8021b28 <lwip_cyclic_timer+0x60>)
 8021b16:	68f8      	ldr	r0, [r7, #12]
 8021b18:	f7ff ff68 	bl	80219ec <sys_timeout_abs>
}
 8021b1c:	bf00      	nop
 8021b1e:	3718      	adds	r7, #24
 8021b20:	46bd      	mov	sp, r7
 8021b22:	bd80      	pop	{r7, pc}
 8021b24:	200111b4 	.word	0x200111b4
 8021b28:	08021ac9 	.word	0x08021ac9

08021b2c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8021b2c:	b580      	push	{r7, lr}
 8021b2e:	b082      	sub	sp, #8
 8021b30:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8021b32:	2301      	movs	r3, #1
 8021b34:	607b      	str	r3, [r7, #4]
 8021b36:	e00e      	b.n	8021b56 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8021b38:	4a0b      	ldr	r2, [pc, #44]	@ (8021b68 <sys_timeouts_init+0x3c>)
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	00db      	lsls	r3, r3, #3
 8021b44:	4a08      	ldr	r2, [pc, #32]	@ (8021b68 <sys_timeouts_init+0x3c>)
 8021b46:	4413      	add	r3, r2
 8021b48:	461a      	mov	r2, r3
 8021b4a:	4908      	ldr	r1, [pc, #32]	@ (8021b6c <sys_timeouts_init+0x40>)
 8021b4c:	f000 f810 	bl	8021b70 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	3301      	adds	r3, #1
 8021b54:	607b      	str	r3, [r7, #4]
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	2b04      	cmp	r3, #4
 8021b5a:	d9ed      	bls.n	8021b38 <sys_timeouts_init+0xc>
  }
}
 8021b5c:	bf00      	nop
 8021b5e:	bf00      	nop
 8021b60:	3708      	adds	r7, #8
 8021b62:	46bd      	mov	sp, r7
 8021b64:	bd80      	pop	{r7, pc}
 8021b66:	bf00      	nop
 8021b68:	0802c560 	.word	0x0802c560
 8021b6c:	08021ac9 	.word	0x08021ac9

08021b70 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8021b70:	b580      	push	{r7, lr}
 8021b72:	b086      	sub	sp, #24
 8021b74:	af00      	add	r7, sp, #0
 8021b76:	60f8      	str	r0, [r7, #12]
 8021b78:	60b9      	str	r1, [r7, #8]
 8021b7a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8021b7c:	68fb      	ldr	r3, [r7, #12]
 8021b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8021b82:	d306      	bcc.n	8021b92 <sys_timeout+0x22>
 8021b84:	4b0a      	ldr	r3, [pc, #40]	@ (8021bb0 <sys_timeout+0x40>)
 8021b86:	f240 1229 	movw	r2, #297	@ 0x129
 8021b8a:	490a      	ldr	r1, [pc, #40]	@ (8021bb4 <sys_timeout+0x44>)
 8021b8c:	480a      	ldr	r0, [pc, #40]	@ (8021bb8 <sys_timeout+0x48>)
 8021b8e:	f005 fded 	bl	802776c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8021b92:	f7ee fa4b 	bl	801002c <sys_now>
 8021b96:	4602      	mov	r2, r0
 8021b98:	68fb      	ldr	r3, [r7, #12]
 8021b9a:	4413      	add	r3, r2
 8021b9c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8021b9e:	687a      	ldr	r2, [r7, #4]
 8021ba0:	68b9      	ldr	r1, [r7, #8]
 8021ba2:	6978      	ldr	r0, [r7, #20]
 8021ba4:	f7ff ff22 	bl	80219ec <sys_timeout_abs>
#endif
}
 8021ba8:	bf00      	nop
 8021baa:	3718      	adds	r7, #24
 8021bac:	46bd      	mov	sp, r7
 8021bae:	bd80      	pop	{r7, pc}
 8021bb0:	0802b538 	.word	0x0802b538
 8021bb4:	0802b5d4 	.word	0x0802b5d4
 8021bb8:	0802b5ac 	.word	0x0802b5ac

08021bbc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8021bbc:	b580      	push	{r7, lr}
 8021bbe:	b084      	sub	sp, #16
 8021bc0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8021bc2:	f7ee fa33 	bl	801002c <sys_now>
 8021bc6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8021bc8:	4b17      	ldr	r3, [pc, #92]	@ (8021c28 <sys_check_timeouts+0x6c>)
 8021bca:	681b      	ldr	r3, [r3, #0]
 8021bcc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8021bce:	68bb      	ldr	r3, [r7, #8]
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	d022      	beq.n	8021c1a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8021bd4:	68bb      	ldr	r3, [r7, #8]
 8021bd6:	685b      	ldr	r3, [r3, #4]
 8021bd8:	68fa      	ldr	r2, [r7, #12]
 8021bda:	1ad3      	subs	r3, r2, r3
 8021bdc:	0fdb      	lsrs	r3, r3, #31
 8021bde:	f003 0301 	and.w	r3, r3, #1
 8021be2:	b2db      	uxtb	r3, r3
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	d11a      	bne.n	8021c1e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8021be8:	68bb      	ldr	r3, [r7, #8]
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	4a0e      	ldr	r2, [pc, #56]	@ (8021c28 <sys_check_timeouts+0x6c>)
 8021bee:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8021bf0:	68bb      	ldr	r3, [r7, #8]
 8021bf2:	689b      	ldr	r3, [r3, #8]
 8021bf4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8021bf6:	68bb      	ldr	r3, [r7, #8]
 8021bf8:	68db      	ldr	r3, [r3, #12]
 8021bfa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8021bfc:	68bb      	ldr	r3, [r7, #8]
 8021bfe:	685b      	ldr	r3, [r3, #4]
 8021c00:	4a0a      	ldr	r2, [pc, #40]	@ (8021c2c <sys_check_timeouts+0x70>)
 8021c02:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8021c04:	68b9      	ldr	r1, [r7, #8]
 8021c06:	200a      	movs	r0, #10
 8021c08:	f7f8 fcc2 	bl	801a590 <memp_free>
    if (handler != NULL) {
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	d0da      	beq.n	8021bc8 <sys_check_timeouts+0xc>
      handler(arg);
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	6838      	ldr	r0, [r7, #0]
 8021c16:	4798      	blx	r3
  do {
 8021c18:	e7d6      	b.n	8021bc8 <sys_check_timeouts+0xc>
      return;
 8021c1a:	bf00      	nop
 8021c1c:	e000      	b.n	8021c20 <sys_check_timeouts+0x64>
      return;
 8021c1e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8021c20:	3710      	adds	r7, #16
 8021c22:	46bd      	mov	sp, r7
 8021c24:	bd80      	pop	{r7, pc}
 8021c26:	bf00      	nop
 8021c28:	200111b0 	.word	0x200111b0
 8021c2c:	200111b4 	.word	0x200111b4

08021c30 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8021c30:	b580      	push	{r7, lr}
 8021c32:	b082      	sub	sp, #8
 8021c34:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8021c36:	4b16      	ldr	r3, [pc, #88]	@ (8021c90 <sys_timeouts_sleeptime+0x60>)
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d102      	bne.n	8021c44 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8021c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8021c42:	e020      	b.n	8021c86 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8021c44:	f7ee f9f2 	bl	801002c <sys_now>
 8021c48:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8021c4a:	4b11      	ldr	r3, [pc, #68]	@ (8021c90 <sys_timeouts_sleeptime+0x60>)
 8021c4c:	681b      	ldr	r3, [r3, #0]
 8021c4e:	685a      	ldr	r2, [r3, #4]
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	1ad3      	subs	r3, r2, r3
 8021c54:	0fdb      	lsrs	r3, r3, #31
 8021c56:	f003 0301 	and.w	r3, r3, #1
 8021c5a:	b2db      	uxtb	r3, r3
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d001      	beq.n	8021c64 <sys_timeouts_sleeptime+0x34>
    return 0;
 8021c60:	2300      	movs	r3, #0
 8021c62:	e010      	b.n	8021c86 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8021c64:	4b0a      	ldr	r3, [pc, #40]	@ (8021c90 <sys_timeouts_sleeptime+0x60>)
 8021c66:	681b      	ldr	r3, [r3, #0]
 8021c68:	685a      	ldr	r2, [r3, #4]
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	1ad3      	subs	r3, r2, r3
 8021c6e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8021c70:	683b      	ldr	r3, [r7, #0]
 8021c72:	2b00      	cmp	r3, #0
 8021c74:	da06      	bge.n	8021c84 <sys_timeouts_sleeptime+0x54>
 8021c76:	4b07      	ldr	r3, [pc, #28]	@ (8021c94 <sys_timeouts_sleeptime+0x64>)
 8021c78:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8021c7c:	4906      	ldr	r1, [pc, #24]	@ (8021c98 <sys_timeouts_sleeptime+0x68>)
 8021c7e:	4807      	ldr	r0, [pc, #28]	@ (8021c9c <sys_timeouts_sleeptime+0x6c>)
 8021c80:	f005 fd74 	bl	802776c <iprintf>
    return ret;
 8021c84:	683b      	ldr	r3, [r7, #0]
  }
}
 8021c86:	4618      	mov	r0, r3
 8021c88:	3708      	adds	r7, #8
 8021c8a:	46bd      	mov	sp, r7
 8021c8c:	bd80      	pop	{r7, pc}
 8021c8e:	bf00      	nop
 8021c90:	200111b0 	.word	0x200111b0
 8021c94:	0802b538 	.word	0x0802b538
 8021c98:	0802b60c 	.word	0x0802b60c
 8021c9c:	0802b5ac 	.word	0x0802b5ac

08021ca0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8021ca0:	b580      	push	{r7, lr}
 8021ca2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8021ca4:	f005 fc62 	bl	802756c <rand>
 8021ca8:	4603      	mov	r3, r0
 8021caa:	b29b      	uxth	r3, r3
 8021cac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8021cb0:	b29b      	uxth	r3, r3
 8021cb2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8021cb6:	b29a      	uxth	r2, r3
 8021cb8:	4b01      	ldr	r3, [pc, #4]	@ (8021cc0 <udp_init+0x20>)
 8021cba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8021cbc:	bf00      	nop
 8021cbe:	bd80      	pop	{r7, pc}
 8021cc0:	2000004c 	.word	0x2000004c

08021cc4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8021cc4:	b480      	push	{r7}
 8021cc6:	b083      	sub	sp, #12
 8021cc8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8021cca:	2300      	movs	r3, #0
 8021ccc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8021cce:	4b17      	ldr	r3, [pc, #92]	@ (8021d2c <udp_new_port+0x68>)
 8021cd0:	881b      	ldrh	r3, [r3, #0]
 8021cd2:	1c5a      	adds	r2, r3, #1
 8021cd4:	b291      	uxth	r1, r2
 8021cd6:	4a15      	ldr	r2, [pc, #84]	@ (8021d2c <udp_new_port+0x68>)
 8021cd8:	8011      	strh	r1, [r2, #0]
 8021cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021cde:	4293      	cmp	r3, r2
 8021ce0:	d103      	bne.n	8021cea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8021ce2:	4b12      	ldr	r3, [pc, #72]	@ (8021d2c <udp_new_port+0x68>)
 8021ce4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8021ce8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021cea:	4b11      	ldr	r3, [pc, #68]	@ (8021d30 <udp_new_port+0x6c>)
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	603b      	str	r3, [r7, #0]
 8021cf0:	e011      	b.n	8021d16 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8021cf2:	683b      	ldr	r3, [r7, #0]
 8021cf4:	8a5a      	ldrh	r2, [r3, #18]
 8021cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8021d2c <udp_new_port+0x68>)
 8021cf8:	881b      	ldrh	r3, [r3, #0]
 8021cfa:	429a      	cmp	r2, r3
 8021cfc:	d108      	bne.n	8021d10 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8021cfe:	88fb      	ldrh	r3, [r7, #6]
 8021d00:	3301      	adds	r3, #1
 8021d02:	80fb      	strh	r3, [r7, #6]
 8021d04:	88fb      	ldrh	r3, [r7, #6]
 8021d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8021d0a:	d3e0      	bcc.n	8021cce <udp_new_port+0xa>
        return 0;
 8021d0c:	2300      	movs	r3, #0
 8021d0e:	e007      	b.n	8021d20 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021d10:	683b      	ldr	r3, [r7, #0]
 8021d12:	68db      	ldr	r3, [r3, #12]
 8021d14:	603b      	str	r3, [r7, #0]
 8021d16:	683b      	ldr	r3, [r7, #0]
 8021d18:	2b00      	cmp	r3, #0
 8021d1a:	d1ea      	bne.n	8021cf2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8021d1c:	4b03      	ldr	r3, [pc, #12]	@ (8021d2c <udp_new_port+0x68>)
 8021d1e:	881b      	ldrh	r3, [r3, #0]
}
 8021d20:	4618      	mov	r0, r3
 8021d22:	370c      	adds	r7, #12
 8021d24:	46bd      	mov	sp, r7
 8021d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d2a:	4770      	bx	lr
 8021d2c:	2000004c 	.word	0x2000004c
 8021d30:	200111bc 	.word	0x200111bc

08021d34 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8021d34:	b580      	push	{r7, lr}
 8021d36:	b084      	sub	sp, #16
 8021d38:	af00      	add	r7, sp, #0
 8021d3a:	60f8      	str	r0, [r7, #12]
 8021d3c:	60b9      	str	r1, [r7, #8]
 8021d3e:	4613      	mov	r3, r2
 8021d40:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8021d42:	68fb      	ldr	r3, [r7, #12]
 8021d44:	2b00      	cmp	r3, #0
 8021d46:	d105      	bne.n	8021d54 <udp_input_local_match+0x20>
 8021d48:	4b27      	ldr	r3, [pc, #156]	@ (8021de8 <udp_input_local_match+0xb4>)
 8021d4a:	2287      	movs	r2, #135	@ 0x87
 8021d4c:	4927      	ldr	r1, [pc, #156]	@ (8021dec <udp_input_local_match+0xb8>)
 8021d4e:	4828      	ldr	r0, [pc, #160]	@ (8021df0 <udp_input_local_match+0xbc>)
 8021d50:	f005 fd0c 	bl	802776c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8021d54:	68bb      	ldr	r3, [r7, #8]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d105      	bne.n	8021d66 <udp_input_local_match+0x32>
 8021d5a:	4b23      	ldr	r3, [pc, #140]	@ (8021de8 <udp_input_local_match+0xb4>)
 8021d5c:	2288      	movs	r2, #136	@ 0x88
 8021d5e:	4925      	ldr	r1, [pc, #148]	@ (8021df4 <udp_input_local_match+0xc0>)
 8021d60:	4823      	ldr	r0, [pc, #140]	@ (8021df0 <udp_input_local_match+0xbc>)
 8021d62:	f005 fd03 	bl	802776c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021d66:	68fb      	ldr	r3, [r7, #12]
 8021d68:	7a1b      	ldrb	r3, [r3, #8]
 8021d6a:	2b00      	cmp	r3, #0
 8021d6c:	d00b      	beq.n	8021d86 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8021d6e:	68fb      	ldr	r3, [r7, #12]
 8021d70:	7a1a      	ldrb	r2, [r3, #8]
 8021d72:	4b21      	ldr	r3, [pc, #132]	@ (8021df8 <udp_input_local_match+0xc4>)
 8021d74:	685b      	ldr	r3, [r3, #4]
 8021d76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8021d7a:	3301      	adds	r3, #1
 8021d7c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8021d7e:	429a      	cmp	r2, r3
 8021d80:	d001      	beq.n	8021d86 <udp_input_local_match+0x52>
    return 0;
 8021d82:	2300      	movs	r3, #0
 8021d84:	e02b      	b.n	8021dde <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8021d86:	79fb      	ldrb	r3, [r7, #7]
 8021d88:	2b00      	cmp	r3, #0
 8021d8a:	d018      	beq.n	8021dbe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021d8c:	68fb      	ldr	r3, [r7, #12]
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	d013      	beq.n	8021dba <udp_input_local_match+0x86>
 8021d92:	68fb      	ldr	r3, [r7, #12]
 8021d94:	681b      	ldr	r3, [r3, #0]
 8021d96:	2b00      	cmp	r3, #0
 8021d98:	d00f      	beq.n	8021dba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8021d9a:	4b17      	ldr	r3, [pc, #92]	@ (8021df8 <udp_input_local_match+0xc4>)
 8021d9c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8021d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021da2:	d00a      	beq.n	8021dba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8021da4:	68fb      	ldr	r3, [r7, #12]
 8021da6:	681a      	ldr	r2, [r3, #0]
 8021da8:	4b13      	ldr	r3, [pc, #76]	@ (8021df8 <udp_input_local_match+0xc4>)
 8021daa:	695b      	ldr	r3, [r3, #20]
 8021dac:	405a      	eors	r2, r3
 8021dae:	68bb      	ldr	r3, [r7, #8]
 8021db0:	3308      	adds	r3, #8
 8021db2:	681b      	ldr	r3, [r3, #0]
 8021db4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d110      	bne.n	8021ddc <udp_input_local_match+0xa8>
          return 1;
 8021dba:	2301      	movs	r3, #1
 8021dbc:	e00f      	b.n	8021dde <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8021dbe:	68fb      	ldr	r3, [r7, #12]
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d009      	beq.n	8021dd8 <udp_input_local_match+0xa4>
 8021dc4:	68fb      	ldr	r3, [r7, #12]
 8021dc6:	681b      	ldr	r3, [r3, #0]
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d005      	beq.n	8021dd8 <udp_input_local_match+0xa4>
 8021dcc:	68fb      	ldr	r3, [r7, #12]
 8021dce:	681a      	ldr	r2, [r3, #0]
 8021dd0:	4b09      	ldr	r3, [pc, #36]	@ (8021df8 <udp_input_local_match+0xc4>)
 8021dd2:	695b      	ldr	r3, [r3, #20]
 8021dd4:	429a      	cmp	r2, r3
 8021dd6:	d101      	bne.n	8021ddc <udp_input_local_match+0xa8>
        return 1;
 8021dd8:	2301      	movs	r3, #1
 8021dda:	e000      	b.n	8021dde <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8021ddc:	2300      	movs	r3, #0
}
 8021dde:	4618      	mov	r0, r3
 8021de0:	3710      	adds	r7, #16
 8021de2:	46bd      	mov	sp, r7
 8021de4:	bd80      	pop	{r7, pc}
 8021de6:	bf00      	nop
 8021de8:	0802b620 	.word	0x0802b620
 8021dec:	0802b650 	.word	0x0802b650
 8021df0:	0802b674 	.word	0x0802b674
 8021df4:	0802b69c 	.word	0x0802b69c
 8021df8:	2000d9ec 	.word	0x2000d9ec

08021dfc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8021dfc:	b590      	push	{r4, r7, lr}
 8021dfe:	b08d      	sub	sp, #52	@ 0x34
 8021e00:	af02      	add	r7, sp, #8
 8021e02:	6078      	str	r0, [r7, #4]
 8021e04:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8021e06:	2300      	movs	r3, #0
 8021e08:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	2b00      	cmp	r3, #0
 8021e0e:	d105      	bne.n	8021e1c <udp_input+0x20>
 8021e10:	4b7c      	ldr	r3, [pc, #496]	@ (8022004 <udp_input+0x208>)
 8021e12:	22cf      	movs	r2, #207	@ 0xcf
 8021e14:	497c      	ldr	r1, [pc, #496]	@ (8022008 <udp_input+0x20c>)
 8021e16:	487d      	ldr	r0, [pc, #500]	@ (802200c <udp_input+0x210>)
 8021e18:	f005 fca8 	bl	802776c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8021e1c:	683b      	ldr	r3, [r7, #0]
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	d105      	bne.n	8021e2e <udp_input+0x32>
 8021e22:	4b78      	ldr	r3, [pc, #480]	@ (8022004 <udp_input+0x208>)
 8021e24:	22d0      	movs	r2, #208	@ 0xd0
 8021e26:	497a      	ldr	r1, [pc, #488]	@ (8022010 <udp_input+0x214>)
 8021e28:	4878      	ldr	r0, [pc, #480]	@ (802200c <udp_input+0x210>)
 8021e2a:	f005 fc9f 	bl	802776c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8021e2e:	687b      	ldr	r3, [r7, #4]
 8021e30:	895b      	ldrh	r3, [r3, #10]
 8021e32:	2b07      	cmp	r3, #7
 8021e34:	d803      	bhi.n	8021e3e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8021e36:	6878      	ldr	r0, [r7, #4]
 8021e38:	f7f9 fa8c 	bl	801b354 <pbuf_free>
    goto end;
 8021e3c:	e0de      	b.n	8021ffc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8021e3e:	687b      	ldr	r3, [r7, #4]
 8021e40:	685b      	ldr	r3, [r3, #4]
 8021e42:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8021e44:	4b73      	ldr	r3, [pc, #460]	@ (8022014 <udp_input+0x218>)
 8021e46:	695b      	ldr	r3, [r3, #20]
 8021e48:	4a72      	ldr	r2, [pc, #456]	@ (8022014 <udp_input+0x218>)
 8021e4a:	6812      	ldr	r2, [r2, #0]
 8021e4c:	4611      	mov	r1, r2
 8021e4e:	4618      	mov	r0, r3
 8021e50:	f003 fe9e 	bl	8025b90 <ip4_addr_isbroadcast_u32>
 8021e54:	4603      	mov	r3, r0
 8021e56:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8021e58:	697b      	ldr	r3, [r7, #20]
 8021e5a:	881b      	ldrh	r3, [r3, #0]
 8021e5c:	b29b      	uxth	r3, r3
 8021e5e:	4618      	mov	r0, r3
 8021e60:	f7f7 fe48 	bl	8019af4 <lwip_htons>
 8021e64:	4603      	mov	r3, r0
 8021e66:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8021e68:	697b      	ldr	r3, [r7, #20]
 8021e6a:	885b      	ldrh	r3, [r3, #2]
 8021e6c:	b29b      	uxth	r3, r3
 8021e6e:	4618      	mov	r0, r3
 8021e70:	f7f7 fe40 	bl	8019af4 <lwip_htons>
 8021e74:	4603      	mov	r3, r0
 8021e76:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8021e78:	2300      	movs	r3, #0
 8021e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8021e7c:	2300      	movs	r3, #0
 8021e7e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8021e80:	2300      	movs	r3, #0
 8021e82:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021e84:	4b64      	ldr	r3, [pc, #400]	@ (8022018 <udp_input+0x21c>)
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8021e8a:	e054      	b.n	8021f36 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8021e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e8e:	8a5b      	ldrh	r3, [r3, #18]
 8021e90:	89fa      	ldrh	r2, [r7, #14]
 8021e92:	429a      	cmp	r2, r3
 8021e94:	d14a      	bne.n	8021f2c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8021e96:	7cfb      	ldrb	r3, [r7, #19]
 8021e98:	461a      	mov	r2, r3
 8021e9a:	6839      	ldr	r1, [r7, #0]
 8021e9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8021e9e:	f7ff ff49 	bl	8021d34 <udp_input_local_match>
 8021ea2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d041      	beq.n	8021f2c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8021ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021eaa:	7c1b      	ldrb	r3, [r3, #16]
 8021eac:	f003 0304 	and.w	r3, r3, #4
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d11d      	bne.n	8021ef0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8021eb4:	69fb      	ldr	r3, [r7, #28]
 8021eb6:	2b00      	cmp	r3, #0
 8021eb8:	d102      	bne.n	8021ec0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8021eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ebc:	61fb      	str	r3, [r7, #28]
 8021ebe:	e017      	b.n	8021ef0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8021ec0:	7cfb      	ldrb	r3, [r7, #19]
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d014      	beq.n	8021ef0 <udp_input+0xf4>
 8021ec6:	4b53      	ldr	r3, [pc, #332]	@ (8022014 <udp_input+0x218>)
 8021ec8:	695b      	ldr	r3, [r3, #20]
 8021eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021ece:	d10f      	bne.n	8021ef0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8021ed0:	69fb      	ldr	r3, [r7, #28]
 8021ed2:	681a      	ldr	r2, [r3, #0]
 8021ed4:	683b      	ldr	r3, [r7, #0]
 8021ed6:	3304      	adds	r3, #4
 8021ed8:	681b      	ldr	r3, [r3, #0]
 8021eda:	429a      	cmp	r2, r3
 8021edc:	d008      	beq.n	8021ef0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8021ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ee0:	681a      	ldr	r2, [r3, #0]
 8021ee2:	683b      	ldr	r3, [r7, #0]
 8021ee4:	3304      	adds	r3, #4
 8021ee6:	681b      	ldr	r3, [r3, #0]
 8021ee8:	429a      	cmp	r2, r3
 8021eea:	d101      	bne.n	8021ef0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8021eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021eee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8021ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ef2:	8a9b      	ldrh	r3, [r3, #20]
 8021ef4:	8a3a      	ldrh	r2, [r7, #16]
 8021ef6:	429a      	cmp	r2, r3
 8021ef8:	d118      	bne.n	8021f2c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8021efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021efc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8021efe:	2b00      	cmp	r3, #0
 8021f00:	d005      	beq.n	8021f0e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8021f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f04:	685a      	ldr	r2, [r3, #4]
 8021f06:	4b43      	ldr	r3, [pc, #268]	@ (8022014 <udp_input+0x218>)
 8021f08:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8021f0a:	429a      	cmp	r2, r3
 8021f0c:	d10e      	bne.n	8021f2c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8021f0e:	6a3b      	ldr	r3, [r7, #32]
 8021f10:	2b00      	cmp	r3, #0
 8021f12:	d014      	beq.n	8021f3e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8021f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f16:	68da      	ldr	r2, [r3, #12]
 8021f18:	6a3b      	ldr	r3, [r7, #32]
 8021f1a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8021f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8022018 <udp_input+0x21c>)
 8021f1e:	681a      	ldr	r2, [r3, #0]
 8021f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f22:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8021f24:	4a3c      	ldr	r2, [pc, #240]	@ (8022018 <udp_input+0x21c>)
 8021f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f28:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8021f2a:	e008      	b.n	8021f3e <udp_input+0x142>
      }
    }

    prev = pcb;
 8021f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f2e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f32:	68db      	ldr	r3, [r3, #12]
 8021f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8021f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	d1a7      	bne.n	8021e8c <udp_input+0x90>
 8021f3c:	e000      	b.n	8021f40 <udp_input+0x144>
        break;
 8021f3e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8021f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	d101      	bne.n	8021f4a <udp_input+0x14e>
    pcb = uncon_pcb;
 8021f46:	69fb      	ldr	r3, [r7, #28]
 8021f48:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8021f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d002      	beq.n	8021f56 <udp_input+0x15a>
    for_us = 1;
 8021f50:	2301      	movs	r3, #1
 8021f52:	76fb      	strb	r3, [r7, #27]
 8021f54:	e00a      	b.n	8021f6c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8021f56:	683b      	ldr	r3, [r7, #0]
 8021f58:	3304      	adds	r3, #4
 8021f5a:	681a      	ldr	r2, [r3, #0]
 8021f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8022014 <udp_input+0x218>)
 8021f5e:	695b      	ldr	r3, [r3, #20]
 8021f60:	429a      	cmp	r2, r3
 8021f62:	bf0c      	ite	eq
 8021f64:	2301      	moveq	r3, #1
 8021f66:	2300      	movne	r3, #0
 8021f68:	b2db      	uxtb	r3, r3
 8021f6a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8021f6c:	7efb      	ldrb	r3, [r7, #27]
 8021f6e:	2b00      	cmp	r3, #0
 8021f70:	d041      	beq.n	8021ff6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8021f72:	2108      	movs	r1, #8
 8021f74:	6878      	ldr	r0, [r7, #4]
 8021f76:	f7f9 f935 	bl	801b1e4 <pbuf_remove_header>
 8021f7a:	4603      	mov	r3, r0
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	d00a      	beq.n	8021f96 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8021f80:	4b20      	ldr	r3, [pc, #128]	@ (8022004 <udp_input+0x208>)
 8021f82:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8021f86:	4925      	ldr	r1, [pc, #148]	@ (802201c <udp_input+0x220>)
 8021f88:	4820      	ldr	r0, [pc, #128]	@ (802200c <udp_input+0x210>)
 8021f8a:	f005 fbef 	bl	802776c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8021f8e:	6878      	ldr	r0, [r7, #4]
 8021f90:	f7f9 f9e0 	bl	801b354 <pbuf_free>
      goto end;
 8021f94:	e032      	b.n	8021ffc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8021f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f98:	2b00      	cmp	r3, #0
 8021f9a:	d012      	beq.n	8021fc2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8021f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f9e:	699b      	ldr	r3, [r3, #24]
 8021fa0:	2b00      	cmp	r3, #0
 8021fa2:	d00a      	beq.n	8021fba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8021fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021fa6:	699c      	ldr	r4, [r3, #24]
 8021fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021faa:	69d8      	ldr	r0, [r3, #28]
 8021fac:	8a3b      	ldrh	r3, [r7, #16]
 8021fae:	9300      	str	r3, [sp, #0]
 8021fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8022020 <udp_input+0x224>)
 8021fb2:	687a      	ldr	r2, [r7, #4]
 8021fb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8021fb6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8021fb8:	e021      	b.n	8021ffe <udp_input+0x202>
        pbuf_free(p);
 8021fba:	6878      	ldr	r0, [r7, #4]
 8021fbc:	f7f9 f9ca 	bl	801b354 <pbuf_free>
        goto end;
 8021fc0:	e01c      	b.n	8021ffc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8021fc2:	7cfb      	ldrb	r3, [r7, #19]
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d112      	bne.n	8021fee <udp_input+0x1f2>
 8021fc8:	4b12      	ldr	r3, [pc, #72]	@ (8022014 <udp_input+0x218>)
 8021fca:	695b      	ldr	r3, [r3, #20]
 8021fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021fd0:	2be0      	cmp	r3, #224	@ 0xe0
 8021fd2:	d00c      	beq.n	8021fee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8021fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8022014 <udp_input+0x218>)
 8021fd6:	899b      	ldrh	r3, [r3, #12]
 8021fd8:	3308      	adds	r3, #8
 8021fda:	b29b      	uxth	r3, r3
 8021fdc:	b21b      	sxth	r3, r3
 8021fde:	4619      	mov	r1, r3
 8021fe0:	6878      	ldr	r0, [r7, #4]
 8021fe2:	f7f9 f972 	bl	801b2ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8021fe6:	2103      	movs	r1, #3
 8021fe8:	6878      	ldr	r0, [r7, #4]
 8021fea:	f003 fa93 	bl	8025514 <icmp_dest_unreach>
      pbuf_free(p);
 8021fee:	6878      	ldr	r0, [r7, #4]
 8021ff0:	f7f9 f9b0 	bl	801b354 <pbuf_free>
  return;
 8021ff4:	e003      	b.n	8021ffe <udp_input+0x202>
    pbuf_free(p);
 8021ff6:	6878      	ldr	r0, [r7, #4]
 8021ff8:	f7f9 f9ac 	bl	801b354 <pbuf_free>
  return;
 8021ffc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8021ffe:	372c      	adds	r7, #44	@ 0x2c
 8022000:	46bd      	mov	sp, r7
 8022002:	bd90      	pop	{r4, r7, pc}
 8022004:	0802b620 	.word	0x0802b620
 8022008:	0802b6c4 	.word	0x0802b6c4
 802200c:	0802b674 	.word	0x0802b674
 8022010:	0802b6dc 	.word	0x0802b6dc
 8022014:	2000d9ec 	.word	0x2000d9ec
 8022018:	200111bc 	.word	0x200111bc
 802201c:	0802b6f8 	.word	0x0802b6f8
 8022020:	2000d9fc 	.word	0x2000d9fc

08022024 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8022024:	b580      	push	{r7, lr}
 8022026:	b082      	sub	sp, #8
 8022028:	af00      	add	r7, sp, #0
 802202a:	6078      	str	r0, [r7, #4]
 802202c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 802202e:	687b      	ldr	r3, [r7, #4]
 8022030:	2b00      	cmp	r3, #0
 8022032:	d109      	bne.n	8022048 <udp_send+0x24>
 8022034:	4b11      	ldr	r3, [pc, #68]	@ (802207c <udp_send+0x58>)
 8022036:	f240 12d5 	movw	r2, #469	@ 0x1d5
 802203a:	4911      	ldr	r1, [pc, #68]	@ (8022080 <udp_send+0x5c>)
 802203c:	4811      	ldr	r0, [pc, #68]	@ (8022084 <udp_send+0x60>)
 802203e:	f005 fb95 	bl	802776c <iprintf>
 8022042:	f06f 030f 	mvn.w	r3, #15
 8022046:	e015      	b.n	8022074 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8022048:	683b      	ldr	r3, [r7, #0]
 802204a:	2b00      	cmp	r3, #0
 802204c:	d109      	bne.n	8022062 <udp_send+0x3e>
 802204e:	4b0b      	ldr	r3, [pc, #44]	@ (802207c <udp_send+0x58>)
 8022050:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8022054:	490c      	ldr	r1, [pc, #48]	@ (8022088 <udp_send+0x64>)
 8022056:	480b      	ldr	r0, [pc, #44]	@ (8022084 <udp_send+0x60>)
 8022058:	f005 fb88 	bl	802776c <iprintf>
 802205c:	f06f 030f 	mvn.w	r3, #15
 8022060:	e008      	b.n	8022074 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	1d1a      	adds	r2, r3, #4
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	8a9b      	ldrh	r3, [r3, #20]
 802206a:	6839      	ldr	r1, [r7, #0]
 802206c:	6878      	ldr	r0, [r7, #4]
 802206e:	f000 f80d 	bl	802208c <udp_sendto>
 8022072:	4603      	mov	r3, r0
}
 8022074:	4618      	mov	r0, r3
 8022076:	3708      	adds	r7, #8
 8022078:	46bd      	mov	sp, r7
 802207a:	bd80      	pop	{r7, pc}
 802207c:	0802b620 	.word	0x0802b620
 8022080:	0802b714 	.word	0x0802b714
 8022084:	0802b674 	.word	0x0802b674
 8022088:	0802b72c 	.word	0x0802b72c

0802208c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 802208c:	b580      	push	{r7, lr}
 802208e:	b088      	sub	sp, #32
 8022090:	af02      	add	r7, sp, #8
 8022092:	60f8      	str	r0, [r7, #12]
 8022094:	60b9      	str	r1, [r7, #8]
 8022096:	607a      	str	r2, [r7, #4]
 8022098:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802209a:	68fb      	ldr	r3, [r7, #12]
 802209c:	2b00      	cmp	r3, #0
 802209e:	d109      	bne.n	80220b4 <udp_sendto+0x28>
 80220a0:	4b23      	ldr	r3, [pc, #140]	@ (8022130 <udp_sendto+0xa4>)
 80220a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80220a6:	4923      	ldr	r1, [pc, #140]	@ (8022134 <udp_sendto+0xa8>)
 80220a8:	4823      	ldr	r0, [pc, #140]	@ (8022138 <udp_sendto+0xac>)
 80220aa:	f005 fb5f 	bl	802776c <iprintf>
 80220ae:	f06f 030f 	mvn.w	r3, #15
 80220b2:	e038      	b.n	8022126 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80220b4:	68bb      	ldr	r3, [r7, #8]
 80220b6:	2b00      	cmp	r3, #0
 80220b8:	d109      	bne.n	80220ce <udp_sendto+0x42>
 80220ba:	4b1d      	ldr	r3, [pc, #116]	@ (8022130 <udp_sendto+0xa4>)
 80220bc:	f240 2219 	movw	r2, #537	@ 0x219
 80220c0:	491e      	ldr	r1, [pc, #120]	@ (802213c <udp_sendto+0xb0>)
 80220c2:	481d      	ldr	r0, [pc, #116]	@ (8022138 <udp_sendto+0xac>)
 80220c4:	f005 fb52 	bl	802776c <iprintf>
 80220c8:	f06f 030f 	mvn.w	r3, #15
 80220cc:	e02b      	b.n	8022126 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80220ce:	687b      	ldr	r3, [r7, #4]
 80220d0:	2b00      	cmp	r3, #0
 80220d2:	d109      	bne.n	80220e8 <udp_sendto+0x5c>
 80220d4:	4b16      	ldr	r3, [pc, #88]	@ (8022130 <udp_sendto+0xa4>)
 80220d6:	f240 221a 	movw	r2, #538	@ 0x21a
 80220da:	4919      	ldr	r1, [pc, #100]	@ (8022140 <udp_sendto+0xb4>)
 80220dc:	4816      	ldr	r0, [pc, #88]	@ (8022138 <udp_sendto+0xac>)
 80220de:	f005 fb45 	bl	802776c <iprintf>
 80220e2:	f06f 030f 	mvn.w	r3, #15
 80220e6:	e01e      	b.n	8022126 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80220e8:	68fb      	ldr	r3, [r7, #12]
 80220ea:	7a1b      	ldrb	r3, [r3, #8]
 80220ec:	2b00      	cmp	r3, #0
 80220ee:	d006      	beq.n	80220fe <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80220f0:	68fb      	ldr	r3, [r7, #12]
 80220f2:	7a1b      	ldrb	r3, [r3, #8]
 80220f4:	4618      	mov	r0, r3
 80220f6:	f7f8 fd6d 	bl	801abd4 <netif_get_by_index>
 80220fa:	6178      	str	r0, [r7, #20]
 80220fc:	e003      	b.n	8022106 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80220fe:	6878      	ldr	r0, [r7, #4]
 8022100:	f003 fa92 	bl	8025628 <ip4_route>
 8022104:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8022106:	697b      	ldr	r3, [r7, #20]
 8022108:	2b00      	cmp	r3, #0
 802210a:	d102      	bne.n	8022112 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 802210c:	f06f 0303 	mvn.w	r3, #3
 8022110:	e009      	b.n	8022126 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8022112:	887a      	ldrh	r2, [r7, #2]
 8022114:	697b      	ldr	r3, [r7, #20]
 8022116:	9300      	str	r3, [sp, #0]
 8022118:	4613      	mov	r3, r2
 802211a:	687a      	ldr	r2, [r7, #4]
 802211c:	68b9      	ldr	r1, [r7, #8]
 802211e:	68f8      	ldr	r0, [r7, #12]
 8022120:	f000 f810 	bl	8022144 <udp_sendto_if>
 8022124:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8022126:	4618      	mov	r0, r3
 8022128:	3718      	adds	r7, #24
 802212a:	46bd      	mov	sp, r7
 802212c:	bd80      	pop	{r7, pc}
 802212e:	bf00      	nop
 8022130:	0802b620 	.word	0x0802b620
 8022134:	0802b744 	.word	0x0802b744
 8022138:	0802b674 	.word	0x0802b674
 802213c:	0802b75c 	.word	0x0802b75c
 8022140:	0802b778 	.word	0x0802b778

08022144 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8022144:	b580      	push	{r7, lr}
 8022146:	b088      	sub	sp, #32
 8022148:	af02      	add	r7, sp, #8
 802214a:	60f8      	str	r0, [r7, #12]
 802214c:	60b9      	str	r1, [r7, #8]
 802214e:	607a      	str	r2, [r7, #4]
 8022150:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8022152:	68fb      	ldr	r3, [r7, #12]
 8022154:	2b00      	cmp	r3, #0
 8022156:	d109      	bne.n	802216c <udp_sendto_if+0x28>
 8022158:	4b2e      	ldr	r3, [pc, #184]	@ (8022214 <udp_sendto_if+0xd0>)
 802215a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802215e:	492e      	ldr	r1, [pc, #184]	@ (8022218 <udp_sendto_if+0xd4>)
 8022160:	482e      	ldr	r0, [pc, #184]	@ (802221c <udp_sendto_if+0xd8>)
 8022162:	f005 fb03 	bl	802776c <iprintf>
 8022166:	f06f 030f 	mvn.w	r3, #15
 802216a:	e04f      	b.n	802220c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 802216c:	68bb      	ldr	r3, [r7, #8]
 802216e:	2b00      	cmp	r3, #0
 8022170:	d109      	bne.n	8022186 <udp_sendto_if+0x42>
 8022172:	4b28      	ldr	r3, [pc, #160]	@ (8022214 <udp_sendto_if+0xd0>)
 8022174:	f240 2281 	movw	r2, #641	@ 0x281
 8022178:	4929      	ldr	r1, [pc, #164]	@ (8022220 <udp_sendto_if+0xdc>)
 802217a:	4828      	ldr	r0, [pc, #160]	@ (802221c <udp_sendto_if+0xd8>)
 802217c:	f005 faf6 	bl	802776c <iprintf>
 8022180:	f06f 030f 	mvn.w	r3, #15
 8022184:	e042      	b.n	802220c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	2b00      	cmp	r3, #0
 802218a:	d109      	bne.n	80221a0 <udp_sendto_if+0x5c>
 802218c:	4b21      	ldr	r3, [pc, #132]	@ (8022214 <udp_sendto_if+0xd0>)
 802218e:	f240 2282 	movw	r2, #642	@ 0x282
 8022192:	4924      	ldr	r1, [pc, #144]	@ (8022224 <udp_sendto_if+0xe0>)
 8022194:	4821      	ldr	r0, [pc, #132]	@ (802221c <udp_sendto_if+0xd8>)
 8022196:	f005 fae9 	bl	802776c <iprintf>
 802219a:	f06f 030f 	mvn.w	r3, #15
 802219e:	e035      	b.n	802220c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80221a0:	6a3b      	ldr	r3, [r7, #32]
 80221a2:	2b00      	cmp	r3, #0
 80221a4:	d109      	bne.n	80221ba <udp_sendto_if+0x76>
 80221a6:	4b1b      	ldr	r3, [pc, #108]	@ (8022214 <udp_sendto_if+0xd0>)
 80221a8:	f240 2283 	movw	r2, #643	@ 0x283
 80221ac:	491e      	ldr	r1, [pc, #120]	@ (8022228 <udp_sendto_if+0xe4>)
 80221ae:	481b      	ldr	r0, [pc, #108]	@ (802221c <udp_sendto_if+0xd8>)
 80221b0:	f005 fadc 	bl	802776c <iprintf>
 80221b4:	f06f 030f 	mvn.w	r3, #15
 80221b8:	e028      	b.n	802220c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80221ba:	68fb      	ldr	r3, [r7, #12]
 80221bc:	2b00      	cmp	r3, #0
 80221be:	d009      	beq.n	80221d4 <udp_sendto_if+0x90>
 80221c0:	68fb      	ldr	r3, [r7, #12]
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	2b00      	cmp	r3, #0
 80221c6:	d005      	beq.n	80221d4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80221c8:	68fb      	ldr	r3, [r7, #12]
 80221ca:	681b      	ldr	r3, [r3, #0]
 80221cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80221d0:	2be0      	cmp	r3, #224	@ 0xe0
 80221d2:	d103      	bne.n	80221dc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80221d4:	6a3b      	ldr	r3, [r7, #32]
 80221d6:	3304      	adds	r3, #4
 80221d8:	617b      	str	r3, [r7, #20]
 80221da:	e00b      	b.n	80221f4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80221dc:	68fb      	ldr	r3, [r7, #12]
 80221de:	681a      	ldr	r2, [r3, #0]
 80221e0:	6a3b      	ldr	r3, [r7, #32]
 80221e2:	3304      	adds	r3, #4
 80221e4:	681b      	ldr	r3, [r3, #0]
 80221e6:	429a      	cmp	r2, r3
 80221e8:	d002      	beq.n	80221f0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80221ea:	f06f 0303 	mvn.w	r3, #3
 80221ee:	e00d      	b.n	802220c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80221f0:	68fb      	ldr	r3, [r7, #12]
 80221f2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80221f4:	887a      	ldrh	r2, [r7, #2]
 80221f6:	697b      	ldr	r3, [r7, #20]
 80221f8:	9301      	str	r3, [sp, #4]
 80221fa:	6a3b      	ldr	r3, [r7, #32]
 80221fc:	9300      	str	r3, [sp, #0]
 80221fe:	4613      	mov	r3, r2
 8022200:	687a      	ldr	r2, [r7, #4]
 8022202:	68b9      	ldr	r1, [r7, #8]
 8022204:	68f8      	ldr	r0, [r7, #12]
 8022206:	f000 f811 	bl	802222c <udp_sendto_if_src>
 802220a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 802220c:	4618      	mov	r0, r3
 802220e:	3718      	adds	r7, #24
 8022210:	46bd      	mov	sp, r7
 8022212:	bd80      	pop	{r7, pc}
 8022214:	0802b620 	.word	0x0802b620
 8022218:	0802b794 	.word	0x0802b794
 802221c:	0802b674 	.word	0x0802b674
 8022220:	0802b7b0 	.word	0x0802b7b0
 8022224:	0802b7cc 	.word	0x0802b7cc
 8022228:	0802b7ec 	.word	0x0802b7ec

0802222c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 802222c:	b580      	push	{r7, lr}
 802222e:	b08c      	sub	sp, #48	@ 0x30
 8022230:	af04      	add	r7, sp, #16
 8022232:	60f8      	str	r0, [r7, #12]
 8022234:	60b9      	str	r1, [r7, #8]
 8022236:	607a      	str	r2, [r7, #4]
 8022238:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802223a:	68fb      	ldr	r3, [r7, #12]
 802223c:	2b00      	cmp	r3, #0
 802223e:	d109      	bne.n	8022254 <udp_sendto_if_src+0x28>
 8022240:	4b65      	ldr	r3, [pc, #404]	@ (80223d8 <udp_sendto_if_src+0x1ac>)
 8022242:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8022246:	4965      	ldr	r1, [pc, #404]	@ (80223dc <udp_sendto_if_src+0x1b0>)
 8022248:	4865      	ldr	r0, [pc, #404]	@ (80223e0 <udp_sendto_if_src+0x1b4>)
 802224a:	f005 fa8f 	bl	802776c <iprintf>
 802224e:	f06f 030f 	mvn.w	r3, #15
 8022252:	e0bc      	b.n	80223ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8022254:	68bb      	ldr	r3, [r7, #8]
 8022256:	2b00      	cmp	r3, #0
 8022258:	d109      	bne.n	802226e <udp_sendto_if_src+0x42>
 802225a:	4b5f      	ldr	r3, [pc, #380]	@ (80223d8 <udp_sendto_if_src+0x1ac>)
 802225c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8022260:	4960      	ldr	r1, [pc, #384]	@ (80223e4 <udp_sendto_if_src+0x1b8>)
 8022262:	485f      	ldr	r0, [pc, #380]	@ (80223e0 <udp_sendto_if_src+0x1b4>)
 8022264:	f005 fa82 	bl	802776c <iprintf>
 8022268:	f06f 030f 	mvn.w	r3, #15
 802226c:	e0af      	b.n	80223ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	2b00      	cmp	r3, #0
 8022272:	d109      	bne.n	8022288 <udp_sendto_if_src+0x5c>
 8022274:	4b58      	ldr	r3, [pc, #352]	@ (80223d8 <udp_sendto_if_src+0x1ac>)
 8022276:	f240 22d3 	movw	r2, #723	@ 0x2d3
 802227a:	495b      	ldr	r1, [pc, #364]	@ (80223e8 <udp_sendto_if_src+0x1bc>)
 802227c:	4858      	ldr	r0, [pc, #352]	@ (80223e0 <udp_sendto_if_src+0x1b4>)
 802227e:	f005 fa75 	bl	802776c <iprintf>
 8022282:	f06f 030f 	mvn.w	r3, #15
 8022286:	e0a2      	b.n	80223ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8022288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802228a:	2b00      	cmp	r3, #0
 802228c:	d109      	bne.n	80222a2 <udp_sendto_if_src+0x76>
 802228e:	4b52      	ldr	r3, [pc, #328]	@ (80223d8 <udp_sendto_if_src+0x1ac>)
 8022290:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8022294:	4955      	ldr	r1, [pc, #340]	@ (80223ec <udp_sendto_if_src+0x1c0>)
 8022296:	4852      	ldr	r0, [pc, #328]	@ (80223e0 <udp_sendto_if_src+0x1b4>)
 8022298:	f005 fa68 	bl	802776c <iprintf>
 802229c:	f06f 030f 	mvn.w	r3, #15
 80222a0:	e095      	b.n	80223ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80222a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	d109      	bne.n	80222bc <udp_sendto_if_src+0x90>
 80222a8:	4b4b      	ldr	r3, [pc, #300]	@ (80223d8 <udp_sendto_if_src+0x1ac>)
 80222aa:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80222ae:	4950      	ldr	r1, [pc, #320]	@ (80223f0 <udp_sendto_if_src+0x1c4>)
 80222b0:	484b      	ldr	r0, [pc, #300]	@ (80223e0 <udp_sendto_if_src+0x1b4>)
 80222b2:	f005 fa5b 	bl	802776c <iprintf>
 80222b6:	f06f 030f 	mvn.w	r3, #15
 80222ba:	e088      	b.n	80223ce <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80222bc:	68fb      	ldr	r3, [r7, #12]
 80222be:	8a5b      	ldrh	r3, [r3, #18]
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	d10f      	bne.n	80222e4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80222c4:	68f9      	ldr	r1, [r7, #12]
 80222c6:	68fb      	ldr	r3, [r7, #12]
 80222c8:	8a5b      	ldrh	r3, [r3, #18]
 80222ca:	461a      	mov	r2, r3
 80222cc:	68f8      	ldr	r0, [r7, #12]
 80222ce:	f000 f893 	bl	80223f8 <udp_bind>
 80222d2:	4603      	mov	r3, r0
 80222d4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80222d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d002      	beq.n	80222e4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80222de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80222e2:	e074      	b.n	80223ce <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80222e4:	68bb      	ldr	r3, [r7, #8]
 80222e6:	891b      	ldrh	r3, [r3, #8]
 80222e8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80222ec:	4293      	cmp	r3, r2
 80222ee:	d902      	bls.n	80222f6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80222f0:	f04f 33ff 	mov.w	r3, #4294967295
 80222f4:	e06b      	b.n	80223ce <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80222f6:	2108      	movs	r1, #8
 80222f8:	68b8      	ldr	r0, [r7, #8]
 80222fa:	f7f8 ff63 	bl	801b1c4 <pbuf_add_header>
 80222fe:	4603      	mov	r3, r0
 8022300:	2b00      	cmp	r3, #0
 8022302:	d015      	beq.n	8022330 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8022304:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8022308:	2108      	movs	r1, #8
 802230a:	2022      	movs	r0, #34	@ 0x22
 802230c:	f7f8 fd0c 	bl	801ad28 <pbuf_alloc>
 8022310:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8022312:	69fb      	ldr	r3, [r7, #28]
 8022314:	2b00      	cmp	r3, #0
 8022316:	d102      	bne.n	802231e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8022318:	f04f 33ff 	mov.w	r3, #4294967295
 802231c:	e057      	b.n	80223ce <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 802231e:	68bb      	ldr	r3, [r7, #8]
 8022320:	891b      	ldrh	r3, [r3, #8]
 8022322:	2b00      	cmp	r3, #0
 8022324:	d006      	beq.n	8022334 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8022326:	68b9      	ldr	r1, [r7, #8]
 8022328:	69f8      	ldr	r0, [r7, #28]
 802232a:	f7f9 f937 	bl	801b59c <pbuf_chain>
 802232e:	e001      	b.n	8022334 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8022330:	68bb      	ldr	r3, [r7, #8]
 8022332:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8022334:	69fb      	ldr	r3, [r7, #28]
 8022336:	895b      	ldrh	r3, [r3, #10]
 8022338:	2b07      	cmp	r3, #7
 802233a:	d806      	bhi.n	802234a <udp_sendto_if_src+0x11e>
 802233c:	4b26      	ldr	r3, [pc, #152]	@ (80223d8 <udp_sendto_if_src+0x1ac>)
 802233e:	f240 320d 	movw	r2, #781	@ 0x30d
 8022342:	492c      	ldr	r1, [pc, #176]	@ (80223f4 <udp_sendto_if_src+0x1c8>)
 8022344:	4826      	ldr	r0, [pc, #152]	@ (80223e0 <udp_sendto_if_src+0x1b4>)
 8022346:	f005 fa11 	bl	802776c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 802234a:	69fb      	ldr	r3, [r7, #28]
 802234c:	685b      	ldr	r3, [r3, #4]
 802234e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8022350:	68fb      	ldr	r3, [r7, #12]
 8022352:	8a5b      	ldrh	r3, [r3, #18]
 8022354:	4618      	mov	r0, r3
 8022356:	f7f7 fbcd 	bl	8019af4 <lwip_htons>
 802235a:	4603      	mov	r3, r0
 802235c:	461a      	mov	r2, r3
 802235e:	697b      	ldr	r3, [r7, #20]
 8022360:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8022362:	887b      	ldrh	r3, [r7, #2]
 8022364:	4618      	mov	r0, r3
 8022366:	f7f7 fbc5 	bl	8019af4 <lwip_htons>
 802236a:	4603      	mov	r3, r0
 802236c:	461a      	mov	r2, r3
 802236e:	697b      	ldr	r3, [r7, #20]
 8022370:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8022372:	697b      	ldr	r3, [r7, #20]
 8022374:	2200      	movs	r2, #0
 8022376:	719a      	strb	r2, [r3, #6]
 8022378:	2200      	movs	r2, #0
 802237a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 802237c:	69fb      	ldr	r3, [r7, #28]
 802237e:	891b      	ldrh	r3, [r3, #8]
 8022380:	4618      	mov	r0, r3
 8022382:	f7f7 fbb7 	bl	8019af4 <lwip_htons>
 8022386:	4603      	mov	r3, r0
 8022388:	461a      	mov	r2, r3
 802238a:	697b      	ldr	r3, [r7, #20]
 802238c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 802238e:	2311      	movs	r3, #17
 8022390:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8022392:	68fb      	ldr	r3, [r7, #12]
 8022394:	7adb      	ldrb	r3, [r3, #11]
 8022396:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8022398:	68fb      	ldr	r3, [r7, #12]
 802239a:	7a9b      	ldrb	r3, [r3, #10]
 802239c:	7cb9      	ldrb	r1, [r7, #18]
 802239e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80223a0:	9202      	str	r2, [sp, #8]
 80223a2:	7cfa      	ldrb	r2, [r7, #19]
 80223a4:	9201      	str	r2, [sp, #4]
 80223a6:	9300      	str	r3, [sp, #0]
 80223a8:	460b      	mov	r3, r1
 80223aa:	687a      	ldr	r2, [r7, #4]
 80223ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80223ae:	69f8      	ldr	r0, [r7, #28]
 80223b0:	f003 fb40 	bl	8025a34 <ip4_output_if_src>
 80223b4:	4603      	mov	r3, r0
 80223b6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80223b8:	69fa      	ldr	r2, [r7, #28]
 80223ba:	68bb      	ldr	r3, [r7, #8]
 80223bc:	429a      	cmp	r2, r3
 80223be:	d004      	beq.n	80223ca <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80223c0:	69f8      	ldr	r0, [r7, #28]
 80223c2:	f7f8 ffc7 	bl	801b354 <pbuf_free>
    q = NULL;
 80223c6:	2300      	movs	r3, #0
 80223c8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80223ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80223ce:	4618      	mov	r0, r3
 80223d0:	3720      	adds	r7, #32
 80223d2:	46bd      	mov	sp, r7
 80223d4:	bd80      	pop	{r7, pc}
 80223d6:	bf00      	nop
 80223d8:	0802b620 	.word	0x0802b620
 80223dc:	0802b80c 	.word	0x0802b80c
 80223e0:	0802b674 	.word	0x0802b674
 80223e4:	0802b82c 	.word	0x0802b82c
 80223e8:	0802b84c 	.word	0x0802b84c
 80223ec:	0802b870 	.word	0x0802b870
 80223f0:	0802b894 	.word	0x0802b894
 80223f4:	0802b8b8 	.word	0x0802b8b8

080223f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80223f8:	b580      	push	{r7, lr}
 80223fa:	b086      	sub	sp, #24
 80223fc:	af00      	add	r7, sp, #0
 80223fe:	60f8      	str	r0, [r7, #12]
 8022400:	60b9      	str	r1, [r7, #8]
 8022402:	4613      	mov	r3, r2
 8022404:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8022406:	68bb      	ldr	r3, [r7, #8]
 8022408:	2b00      	cmp	r3, #0
 802240a:	d101      	bne.n	8022410 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 802240c:	4b39      	ldr	r3, [pc, #228]	@ (80224f4 <udp_bind+0xfc>)
 802240e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8022410:	68fb      	ldr	r3, [r7, #12]
 8022412:	2b00      	cmp	r3, #0
 8022414:	d109      	bne.n	802242a <udp_bind+0x32>
 8022416:	4b38      	ldr	r3, [pc, #224]	@ (80224f8 <udp_bind+0x100>)
 8022418:	f240 32b7 	movw	r2, #951	@ 0x3b7
 802241c:	4937      	ldr	r1, [pc, #220]	@ (80224fc <udp_bind+0x104>)
 802241e:	4838      	ldr	r0, [pc, #224]	@ (8022500 <udp_bind+0x108>)
 8022420:	f005 f9a4 	bl	802776c <iprintf>
 8022424:	f06f 030f 	mvn.w	r3, #15
 8022428:	e060      	b.n	80224ec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802242a:	2300      	movs	r3, #0
 802242c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802242e:	4b35      	ldr	r3, [pc, #212]	@ (8022504 <udp_bind+0x10c>)
 8022430:	681b      	ldr	r3, [r3, #0]
 8022432:	617b      	str	r3, [r7, #20]
 8022434:	e009      	b.n	802244a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8022436:	68fa      	ldr	r2, [r7, #12]
 8022438:	697b      	ldr	r3, [r7, #20]
 802243a:	429a      	cmp	r2, r3
 802243c:	d102      	bne.n	8022444 <udp_bind+0x4c>
      rebind = 1;
 802243e:	2301      	movs	r3, #1
 8022440:	74fb      	strb	r3, [r7, #19]
      break;
 8022442:	e005      	b.n	8022450 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022444:	697b      	ldr	r3, [r7, #20]
 8022446:	68db      	ldr	r3, [r3, #12]
 8022448:	617b      	str	r3, [r7, #20]
 802244a:	697b      	ldr	r3, [r7, #20]
 802244c:	2b00      	cmp	r3, #0
 802244e:	d1f2      	bne.n	8022436 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8022450:	88fb      	ldrh	r3, [r7, #6]
 8022452:	2b00      	cmp	r3, #0
 8022454:	d109      	bne.n	802246a <udp_bind+0x72>
    port = udp_new_port();
 8022456:	f7ff fc35 	bl	8021cc4 <udp_new_port>
 802245a:	4603      	mov	r3, r0
 802245c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802245e:	88fb      	ldrh	r3, [r7, #6]
 8022460:	2b00      	cmp	r3, #0
 8022462:	d12c      	bne.n	80224be <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8022464:	f06f 0307 	mvn.w	r3, #7
 8022468:	e040      	b.n	80224ec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802246a:	4b26      	ldr	r3, [pc, #152]	@ (8022504 <udp_bind+0x10c>)
 802246c:	681b      	ldr	r3, [r3, #0]
 802246e:	617b      	str	r3, [r7, #20]
 8022470:	e022      	b.n	80224b8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8022472:	68fa      	ldr	r2, [r7, #12]
 8022474:	697b      	ldr	r3, [r7, #20]
 8022476:	429a      	cmp	r2, r3
 8022478:	d01b      	beq.n	80224b2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 802247a:	697b      	ldr	r3, [r7, #20]
 802247c:	8a5b      	ldrh	r3, [r3, #18]
 802247e:	88fa      	ldrh	r2, [r7, #6]
 8022480:	429a      	cmp	r2, r3
 8022482:	d116      	bne.n	80224b2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022484:	697b      	ldr	r3, [r7, #20]
 8022486:	681a      	ldr	r2, [r3, #0]
 8022488:	68bb      	ldr	r3, [r7, #8]
 802248a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 802248c:	429a      	cmp	r2, r3
 802248e:	d00d      	beq.n	80224ac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022490:	68bb      	ldr	r3, [r7, #8]
 8022492:	2b00      	cmp	r3, #0
 8022494:	d00a      	beq.n	80224ac <udp_bind+0xb4>
 8022496:	68bb      	ldr	r3, [r7, #8]
 8022498:	681b      	ldr	r3, [r3, #0]
 802249a:	2b00      	cmp	r3, #0
 802249c:	d006      	beq.n	80224ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 802249e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80224a0:	2b00      	cmp	r3, #0
 80224a2:	d003      	beq.n	80224ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80224a4:	697b      	ldr	r3, [r7, #20]
 80224a6:	681b      	ldr	r3, [r3, #0]
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	d102      	bne.n	80224b2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80224ac:	f06f 0307 	mvn.w	r3, #7
 80224b0:	e01c      	b.n	80224ec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80224b2:	697b      	ldr	r3, [r7, #20]
 80224b4:	68db      	ldr	r3, [r3, #12]
 80224b6:	617b      	str	r3, [r7, #20]
 80224b8:	697b      	ldr	r3, [r7, #20]
 80224ba:	2b00      	cmp	r3, #0
 80224bc:	d1d9      	bne.n	8022472 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80224be:	68bb      	ldr	r3, [r7, #8]
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	d002      	beq.n	80224ca <udp_bind+0xd2>
 80224c4:	68bb      	ldr	r3, [r7, #8]
 80224c6:	681b      	ldr	r3, [r3, #0]
 80224c8:	e000      	b.n	80224cc <udp_bind+0xd4>
 80224ca:	2300      	movs	r3, #0
 80224cc:	68fa      	ldr	r2, [r7, #12]
 80224ce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80224d0:	68fb      	ldr	r3, [r7, #12]
 80224d2:	88fa      	ldrh	r2, [r7, #6]
 80224d4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80224d6:	7cfb      	ldrb	r3, [r7, #19]
 80224d8:	2b00      	cmp	r3, #0
 80224da:	d106      	bne.n	80224ea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80224dc:	4b09      	ldr	r3, [pc, #36]	@ (8022504 <udp_bind+0x10c>)
 80224de:	681a      	ldr	r2, [r3, #0]
 80224e0:	68fb      	ldr	r3, [r7, #12]
 80224e2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80224e4:	4a07      	ldr	r2, [pc, #28]	@ (8022504 <udp_bind+0x10c>)
 80224e6:	68fb      	ldr	r3, [r7, #12]
 80224e8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80224ea:	2300      	movs	r3, #0
}
 80224ec:	4618      	mov	r0, r3
 80224ee:	3718      	adds	r7, #24
 80224f0:	46bd      	mov	sp, r7
 80224f2:	bd80      	pop	{r7, pc}
 80224f4:	0802c588 	.word	0x0802c588
 80224f8:	0802b620 	.word	0x0802b620
 80224fc:	0802b8e8 	.word	0x0802b8e8
 8022500:	0802b674 	.word	0x0802b674
 8022504:	200111bc 	.word	0x200111bc

08022508 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8022508:	b580      	push	{r7, lr}
 802250a:	b086      	sub	sp, #24
 802250c:	af00      	add	r7, sp, #0
 802250e:	60f8      	str	r0, [r7, #12]
 8022510:	60b9      	str	r1, [r7, #8]
 8022512:	4613      	mov	r3, r2
 8022514:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8022516:	68fb      	ldr	r3, [r7, #12]
 8022518:	2b00      	cmp	r3, #0
 802251a:	d109      	bne.n	8022530 <udp_connect+0x28>
 802251c:	4b2c      	ldr	r3, [pc, #176]	@ (80225d0 <udp_connect+0xc8>)
 802251e:	f240 4235 	movw	r2, #1077	@ 0x435
 8022522:	492c      	ldr	r1, [pc, #176]	@ (80225d4 <udp_connect+0xcc>)
 8022524:	482c      	ldr	r0, [pc, #176]	@ (80225d8 <udp_connect+0xd0>)
 8022526:	f005 f921 	bl	802776c <iprintf>
 802252a:	f06f 030f 	mvn.w	r3, #15
 802252e:	e04b      	b.n	80225c8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8022530:	68bb      	ldr	r3, [r7, #8]
 8022532:	2b00      	cmp	r3, #0
 8022534:	d109      	bne.n	802254a <udp_connect+0x42>
 8022536:	4b26      	ldr	r3, [pc, #152]	@ (80225d0 <udp_connect+0xc8>)
 8022538:	f240 4236 	movw	r2, #1078	@ 0x436
 802253c:	4927      	ldr	r1, [pc, #156]	@ (80225dc <udp_connect+0xd4>)
 802253e:	4826      	ldr	r0, [pc, #152]	@ (80225d8 <udp_connect+0xd0>)
 8022540:	f005 f914 	bl	802776c <iprintf>
 8022544:	f06f 030f 	mvn.w	r3, #15
 8022548:	e03e      	b.n	80225c8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 802254a:	68fb      	ldr	r3, [r7, #12]
 802254c:	8a5b      	ldrh	r3, [r3, #18]
 802254e:	2b00      	cmp	r3, #0
 8022550:	d10f      	bne.n	8022572 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8022552:	68f9      	ldr	r1, [r7, #12]
 8022554:	68fb      	ldr	r3, [r7, #12]
 8022556:	8a5b      	ldrh	r3, [r3, #18]
 8022558:	461a      	mov	r2, r3
 802255a:	68f8      	ldr	r0, [r7, #12]
 802255c:	f7ff ff4c 	bl	80223f8 <udp_bind>
 8022560:	4603      	mov	r3, r0
 8022562:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8022564:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8022568:	2b00      	cmp	r3, #0
 802256a:	d002      	beq.n	8022572 <udp_connect+0x6a>
      return err;
 802256c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8022570:	e02a      	b.n	80225c8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8022572:	68bb      	ldr	r3, [r7, #8]
 8022574:	2b00      	cmp	r3, #0
 8022576:	d002      	beq.n	802257e <udp_connect+0x76>
 8022578:	68bb      	ldr	r3, [r7, #8]
 802257a:	681b      	ldr	r3, [r3, #0]
 802257c:	e000      	b.n	8022580 <udp_connect+0x78>
 802257e:	2300      	movs	r3, #0
 8022580:	68fa      	ldr	r2, [r7, #12]
 8022582:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8022584:	68fb      	ldr	r3, [r7, #12]
 8022586:	88fa      	ldrh	r2, [r7, #6]
 8022588:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802258a:	68fb      	ldr	r3, [r7, #12]
 802258c:	7c1b      	ldrb	r3, [r3, #16]
 802258e:	f043 0304 	orr.w	r3, r3, #4
 8022592:	b2da      	uxtb	r2, r3
 8022594:	68fb      	ldr	r3, [r7, #12]
 8022596:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022598:	4b11      	ldr	r3, [pc, #68]	@ (80225e0 <udp_connect+0xd8>)
 802259a:	681b      	ldr	r3, [r3, #0]
 802259c:	617b      	str	r3, [r7, #20]
 802259e:	e008      	b.n	80225b2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80225a0:	68fa      	ldr	r2, [r7, #12]
 80225a2:	697b      	ldr	r3, [r7, #20]
 80225a4:	429a      	cmp	r2, r3
 80225a6:	d101      	bne.n	80225ac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80225a8:	2300      	movs	r3, #0
 80225aa:	e00d      	b.n	80225c8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80225ac:	697b      	ldr	r3, [r7, #20]
 80225ae:	68db      	ldr	r3, [r3, #12]
 80225b0:	617b      	str	r3, [r7, #20]
 80225b2:	697b      	ldr	r3, [r7, #20]
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d1f3      	bne.n	80225a0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80225b8:	4b09      	ldr	r3, [pc, #36]	@ (80225e0 <udp_connect+0xd8>)
 80225ba:	681a      	ldr	r2, [r3, #0]
 80225bc:	68fb      	ldr	r3, [r7, #12]
 80225be:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80225c0:	4a07      	ldr	r2, [pc, #28]	@ (80225e0 <udp_connect+0xd8>)
 80225c2:	68fb      	ldr	r3, [r7, #12]
 80225c4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80225c6:	2300      	movs	r3, #0
}
 80225c8:	4618      	mov	r0, r3
 80225ca:	3718      	adds	r7, #24
 80225cc:	46bd      	mov	sp, r7
 80225ce:	bd80      	pop	{r7, pc}
 80225d0:	0802b620 	.word	0x0802b620
 80225d4:	0802b900 	.word	0x0802b900
 80225d8:	0802b674 	.word	0x0802b674
 80225dc:	0802b91c 	.word	0x0802b91c
 80225e0:	200111bc 	.word	0x200111bc

080225e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80225e4:	b580      	push	{r7, lr}
 80225e6:	b084      	sub	sp, #16
 80225e8:	af00      	add	r7, sp, #0
 80225ea:	60f8      	str	r0, [r7, #12]
 80225ec:	60b9      	str	r1, [r7, #8]
 80225ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80225f0:	68fb      	ldr	r3, [r7, #12]
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	d107      	bne.n	8022606 <udp_recv+0x22>
 80225f6:	4b08      	ldr	r3, [pc, #32]	@ (8022618 <udp_recv+0x34>)
 80225f8:	f240 428a 	movw	r2, #1162	@ 0x48a
 80225fc:	4907      	ldr	r1, [pc, #28]	@ (802261c <udp_recv+0x38>)
 80225fe:	4808      	ldr	r0, [pc, #32]	@ (8022620 <udp_recv+0x3c>)
 8022600:	f005 f8b4 	bl	802776c <iprintf>
 8022604:	e005      	b.n	8022612 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8022606:	68fb      	ldr	r3, [r7, #12]
 8022608:	68ba      	ldr	r2, [r7, #8]
 802260a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 802260c:	68fb      	ldr	r3, [r7, #12]
 802260e:	687a      	ldr	r2, [r7, #4]
 8022610:	61da      	str	r2, [r3, #28]
}
 8022612:	3710      	adds	r7, #16
 8022614:	46bd      	mov	sp, r7
 8022616:	bd80      	pop	{r7, pc}
 8022618:	0802b620 	.word	0x0802b620
 802261c:	0802b954 	.word	0x0802b954
 8022620:	0802b674 	.word	0x0802b674

08022624 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8022624:	b580      	push	{r7, lr}
 8022626:	b084      	sub	sp, #16
 8022628:	af00      	add	r7, sp, #0
 802262a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 802262c:	687b      	ldr	r3, [r7, #4]
 802262e:	2b00      	cmp	r3, #0
 8022630:	d107      	bne.n	8022642 <udp_remove+0x1e>
 8022632:	4b19      	ldr	r3, [pc, #100]	@ (8022698 <udp_remove+0x74>)
 8022634:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8022638:	4918      	ldr	r1, [pc, #96]	@ (802269c <udp_remove+0x78>)
 802263a:	4819      	ldr	r0, [pc, #100]	@ (80226a0 <udp_remove+0x7c>)
 802263c:	f005 f896 	bl	802776c <iprintf>
 8022640:	e026      	b.n	8022690 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8022642:	4b18      	ldr	r3, [pc, #96]	@ (80226a4 <udp_remove+0x80>)
 8022644:	681b      	ldr	r3, [r3, #0]
 8022646:	687a      	ldr	r2, [r7, #4]
 8022648:	429a      	cmp	r2, r3
 802264a:	d105      	bne.n	8022658 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 802264c:	4b15      	ldr	r3, [pc, #84]	@ (80226a4 <udp_remove+0x80>)
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	68db      	ldr	r3, [r3, #12]
 8022652:	4a14      	ldr	r2, [pc, #80]	@ (80226a4 <udp_remove+0x80>)
 8022654:	6013      	str	r3, [r2, #0]
 8022656:	e017      	b.n	8022688 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8022658:	4b12      	ldr	r3, [pc, #72]	@ (80226a4 <udp_remove+0x80>)
 802265a:	681b      	ldr	r3, [r3, #0]
 802265c:	60fb      	str	r3, [r7, #12]
 802265e:	e010      	b.n	8022682 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8022660:	68fb      	ldr	r3, [r7, #12]
 8022662:	68db      	ldr	r3, [r3, #12]
 8022664:	2b00      	cmp	r3, #0
 8022666:	d009      	beq.n	802267c <udp_remove+0x58>
 8022668:	68fb      	ldr	r3, [r7, #12]
 802266a:	68db      	ldr	r3, [r3, #12]
 802266c:	687a      	ldr	r2, [r7, #4]
 802266e:	429a      	cmp	r2, r3
 8022670:	d104      	bne.n	802267c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8022672:	687b      	ldr	r3, [r7, #4]
 8022674:	68da      	ldr	r2, [r3, #12]
 8022676:	68fb      	ldr	r3, [r7, #12]
 8022678:	60da      	str	r2, [r3, #12]
        break;
 802267a:	e005      	b.n	8022688 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 802267c:	68fb      	ldr	r3, [r7, #12]
 802267e:	68db      	ldr	r3, [r3, #12]
 8022680:	60fb      	str	r3, [r7, #12]
 8022682:	68fb      	ldr	r3, [r7, #12]
 8022684:	2b00      	cmp	r3, #0
 8022686:	d1eb      	bne.n	8022660 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8022688:	6879      	ldr	r1, [r7, #4]
 802268a:	2000      	movs	r0, #0
 802268c:	f7f7 ff80 	bl	801a590 <memp_free>
}
 8022690:	3710      	adds	r7, #16
 8022692:	46bd      	mov	sp, r7
 8022694:	bd80      	pop	{r7, pc}
 8022696:	bf00      	nop
 8022698:	0802b620 	.word	0x0802b620
 802269c:	0802b96c 	.word	0x0802b96c
 80226a0:	0802b674 	.word	0x0802b674
 80226a4:	200111bc 	.word	0x200111bc

080226a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80226a8:	b580      	push	{r7, lr}
 80226aa:	b082      	sub	sp, #8
 80226ac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80226ae:	2000      	movs	r0, #0
 80226b0:	f7f7 fef8 	bl	801a4a4 <memp_malloc>
 80226b4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	2b00      	cmp	r3, #0
 80226ba:	d007      	beq.n	80226cc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80226bc:	2220      	movs	r2, #32
 80226be:	2100      	movs	r1, #0
 80226c0:	6878      	ldr	r0, [r7, #4]
 80226c2:	f005 f9ab 	bl	8027a1c <memset>
    pcb->ttl = UDP_TTL;
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	22ff      	movs	r2, #255	@ 0xff
 80226ca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80226cc:	687b      	ldr	r3, [r7, #4]
}
 80226ce:	4618      	mov	r0, r3
 80226d0:	3708      	adds	r7, #8
 80226d2:	46bd      	mov	sp, r7
 80226d4:	bd80      	pop	{r7, pc}

080226d6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80226d6:	b580      	push	{r7, lr}
 80226d8:	b084      	sub	sp, #16
 80226da:	af00      	add	r7, sp, #0
 80226dc:	4603      	mov	r3, r0
 80226de:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80226e0:	f7ff ffe2 	bl	80226a8 <udp_new>
 80226e4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80226e6:	68fb      	ldr	r3, [r7, #12]
}
 80226e8:	4618      	mov	r0, r3
 80226ea:	3710      	adds	r7, #16
 80226ec:	46bd      	mov	sp, r7
 80226ee:	bd80      	pop	{r7, pc}

080226f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80226f0:	b480      	push	{r7}
 80226f2:	b085      	sub	sp, #20
 80226f4:	af00      	add	r7, sp, #0
 80226f6:	6078      	str	r0, [r7, #4]
 80226f8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	d01e      	beq.n	802273e <udp_netif_ip_addr_changed+0x4e>
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	681b      	ldr	r3, [r3, #0]
 8022704:	2b00      	cmp	r3, #0
 8022706:	d01a      	beq.n	802273e <udp_netif_ip_addr_changed+0x4e>
 8022708:	683b      	ldr	r3, [r7, #0]
 802270a:	2b00      	cmp	r3, #0
 802270c:	d017      	beq.n	802273e <udp_netif_ip_addr_changed+0x4e>
 802270e:	683b      	ldr	r3, [r7, #0]
 8022710:	681b      	ldr	r3, [r3, #0]
 8022712:	2b00      	cmp	r3, #0
 8022714:	d013      	beq.n	802273e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022716:	4b0d      	ldr	r3, [pc, #52]	@ (802274c <udp_netif_ip_addr_changed+0x5c>)
 8022718:	681b      	ldr	r3, [r3, #0]
 802271a:	60fb      	str	r3, [r7, #12]
 802271c:	e00c      	b.n	8022738 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802271e:	68fb      	ldr	r3, [r7, #12]
 8022720:	681a      	ldr	r2, [r3, #0]
 8022722:	687b      	ldr	r3, [r7, #4]
 8022724:	681b      	ldr	r3, [r3, #0]
 8022726:	429a      	cmp	r2, r3
 8022728:	d103      	bne.n	8022732 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802272a:	683b      	ldr	r3, [r7, #0]
 802272c:	681a      	ldr	r2, [r3, #0]
 802272e:	68fb      	ldr	r3, [r7, #12]
 8022730:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022732:	68fb      	ldr	r3, [r7, #12]
 8022734:	68db      	ldr	r3, [r3, #12]
 8022736:	60fb      	str	r3, [r7, #12]
 8022738:	68fb      	ldr	r3, [r7, #12]
 802273a:	2b00      	cmp	r3, #0
 802273c:	d1ef      	bne.n	802271e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802273e:	bf00      	nop
 8022740:	3714      	adds	r7, #20
 8022742:	46bd      	mov	sp, r7
 8022744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022748:	4770      	bx	lr
 802274a:	bf00      	nop
 802274c:	200111bc 	.word	0x200111bc

08022750 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8022750:	b580      	push	{r7, lr}
 8022752:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8022754:	4b20      	ldr	r3, [pc, #128]	@ (80227d8 <dhcp_inc_pcb_refcount+0x88>)
 8022756:	781b      	ldrb	r3, [r3, #0]
 8022758:	2b00      	cmp	r3, #0
 802275a:	d133      	bne.n	80227c4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 802275c:	4b1f      	ldr	r3, [pc, #124]	@ (80227dc <dhcp_inc_pcb_refcount+0x8c>)
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	2b00      	cmp	r3, #0
 8022762:	d005      	beq.n	8022770 <dhcp_inc_pcb_refcount+0x20>
 8022764:	4b1e      	ldr	r3, [pc, #120]	@ (80227e0 <dhcp_inc_pcb_refcount+0x90>)
 8022766:	22e5      	movs	r2, #229	@ 0xe5
 8022768:	491e      	ldr	r1, [pc, #120]	@ (80227e4 <dhcp_inc_pcb_refcount+0x94>)
 802276a:	481f      	ldr	r0, [pc, #124]	@ (80227e8 <dhcp_inc_pcb_refcount+0x98>)
 802276c:	f004 fffe 	bl	802776c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8022770:	f7ff ff9a 	bl	80226a8 <udp_new>
 8022774:	4603      	mov	r3, r0
 8022776:	4a19      	ldr	r2, [pc, #100]	@ (80227dc <dhcp_inc_pcb_refcount+0x8c>)
 8022778:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 802277a:	4b18      	ldr	r3, [pc, #96]	@ (80227dc <dhcp_inc_pcb_refcount+0x8c>)
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	2b00      	cmp	r3, #0
 8022780:	d102      	bne.n	8022788 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8022782:	f04f 33ff 	mov.w	r3, #4294967295
 8022786:	e024      	b.n	80227d2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8022788:	4b14      	ldr	r3, [pc, #80]	@ (80227dc <dhcp_inc_pcb_refcount+0x8c>)
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	7a5a      	ldrb	r2, [r3, #9]
 802278e:	4b13      	ldr	r3, [pc, #76]	@ (80227dc <dhcp_inc_pcb_refcount+0x8c>)
 8022790:	681b      	ldr	r3, [r3, #0]
 8022792:	f042 0220 	orr.w	r2, r2, #32
 8022796:	b2d2      	uxtb	r2, r2
 8022798:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 802279a:	4b10      	ldr	r3, [pc, #64]	@ (80227dc <dhcp_inc_pcb_refcount+0x8c>)
 802279c:	681b      	ldr	r3, [r3, #0]
 802279e:	2244      	movs	r2, #68	@ 0x44
 80227a0:	4912      	ldr	r1, [pc, #72]	@ (80227ec <dhcp_inc_pcb_refcount+0x9c>)
 80227a2:	4618      	mov	r0, r3
 80227a4:	f7ff fe28 	bl	80223f8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80227a8:	4b0c      	ldr	r3, [pc, #48]	@ (80227dc <dhcp_inc_pcb_refcount+0x8c>)
 80227aa:	681b      	ldr	r3, [r3, #0]
 80227ac:	2243      	movs	r2, #67	@ 0x43
 80227ae:	490f      	ldr	r1, [pc, #60]	@ (80227ec <dhcp_inc_pcb_refcount+0x9c>)
 80227b0:	4618      	mov	r0, r3
 80227b2:	f7ff fea9 	bl	8022508 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80227b6:	4b09      	ldr	r3, [pc, #36]	@ (80227dc <dhcp_inc_pcb_refcount+0x8c>)
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	2200      	movs	r2, #0
 80227bc:	490c      	ldr	r1, [pc, #48]	@ (80227f0 <dhcp_inc_pcb_refcount+0xa0>)
 80227be:	4618      	mov	r0, r3
 80227c0:	f7ff ff10 	bl	80225e4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80227c4:	4b04      	ldr	r3, [pc, #16]	@ (80227d8 <dhcp_inc_pcb_refcount+0x88>)
 80227c6:	781b      	ldrb	r3, [r3, #0]
 80227c8:	3301      	adds	r3, #1
 80227ca:	b2da      	uxtb	r2, r3
 80227cc:	4b02      	ldr	r3, [pc, #8]	@ (80227d8 <dhcp_inc_pcb_refcount+0x88>)
 80227ce:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80227d0:	2300      	movs	r3, #0
}
 80227d2:	4618      	mov	r0, r3
 80227d4:	bd80      	pop	{r7, pc}
 80227d6:	bf00      	nop
 80227d8:	200111ec 	.word	0x200111ec
 80227dc:	200111e8 	.word	0x200111e8
 80227e0:	0802b984 	.word	0x0802b984
 80227e4:	0802b9bc 	.word	0x0802b9bc
 80227e8:	0802b9e4 	.word	0x0802b9e4
 80227ec:	0802c588 	.word	0x0802c588
 80227f0:	0802407d 	.word	0x0802407d

080227f4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80227f4:	b580      	push	{r7, lr}
 80227f6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80227f8:	4b0e      	ldr	r3, [pc, #56]	@ (8022834 <dhcp_dec_pcb_refcount+0x40>)
 80227fa:	781b      	ldrb	r3, [r3, #0]
 80227fc:	2b00      	cmp	r3, #0
 80227fe:	d105      	bne.n	802280c <dhcp_dec_pcb_refcount+0x18>
 8022800:	4b0d      	ldr	r3, [pc, #52]	@ (8022838 <dhcp_dec_pcb_refcount+0x44>)
 8022802:	22ff      	movs	r2, #255	@ 0xff
 8022804:	490d      	ldr	r1, [pc, #52]	@ (802283c <dhcp_dec_pcb_refcount+0x48>)
 8022806:	480e      	ldr	r0, [pc, #56]	@ (8022840 <dhcp_dec_pcb_refcount+0x4c>)
 8022808:	f004 ffb0 	bl	802776c <iprintf>
  dhcp_pcb_refcount--;
 802280c:	4b09      	ldr	r3, [pc, #36]	@ (8022834 <dhcp_dec_pcb_refcount+0x40>)
 802280e:	781b      	ldrb	r3, [r3, #0]
 8022810:	3b01      	subs	r3, #1
 8022812:	b2da      	uxtb	r2, r3
 8022814:	4b07      	ldr	r3, [pc, #28]	@ (8022834 <dhcp_dec_pcb_refcount+0x40>)
 8022816:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8022818:	4b06      	ldr	r3, [pc, #24]	@ (8022834 <dhcp_dec_pcb_refcount+0x40>)
 802281a:	781b      	ldrb	r3, [r3, #0]
 802281c:	2b00      	cmp	r3, #0
 802281e:	d107      	bne.n	8022830 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8022820:	4b08      	ldr	r3, [pc, #32]	@ (8022844 <dhcp_dec_pcb_refcount+0x50>)
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	4618      	mov	r0, r3
 8022826:	f7ff fefd 	bl	8022624 <udp_remove>
    dhcp_pcb = NULL;
 802282a:	4b06      	ldr	r3, [pc, #24]	@ (8022844 <dhcp_dec_pcb_refcount+0x50>)
 802282c:	2200      	movs	r2, #0
 802282e:	601a      	str	r2, [r3, #0]
  }
}
 8022830:	bf00      	nop
 8022832:	bd80      	pop	{r7, pc}
 8022834:	200111ec 	.word	0x200111ec
 8022838:	0802b984 	.word	0x0802b984
 802283c:	0802ba0c 	.word	0x0802ba0c
 8022840:	0802b9e4 	.word	0x0802b9e4
 8022844:	200111e8 	.word	0x200111e8

08022848 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8022848:	b580      	push	{r7, lr}
 802284a:	b084      	sub	sp, #16
 802284c:	af00      	add	r7, sp, #0
 802284e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022854:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8022856:	210c      	movs	r1, #12
 8022858:	68f8      	ldr	r0, [r7, #12]
 802285a:	f001 f851 	bl	8023900 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 802285e:	4b06      	ldr	r3, [pc, #24]	@ (8022878 <dhcp_handle_nak+0x30>)
 8022860:	4a05      	ldr	r2, [pc, #20]	@ (8022878 <dhcp_handle_nak+0x30>)
 8022862:	4905      	ldr	r1, [pc, #20]	@ (8022878 <dhcp_handle_nak+0x30>)
 8022864:	6878      	ldr	r0, [r7, #4]
 8022866:	f7f8 f835 	bl	801a8d4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 802286a:	6878      	ldr	r0, [r7, #4]
 802286c:	f000 fc4a 	bl	8023104 <dhcp_discover>
}
 8022870:	bf00      	nop
 8022872:	3710      	adds	r7, #16
 8022874:	46bd      	mov	sp, r7
 8022876:	bd80      	pop	{r7, pc}
 8022878:	0802c588 	.word	0x0802c588

0802287c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 802287c:	b580      	push	{r7, lr}
 802287e:	b084      	sub	sp, #16
 8022880:	af00      	add	r7, sp, #0
 8022882:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022884:	687b      	ldr	r3, [r7, #4]
 8022886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022888:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 802288a:	2108      	movs	r1, #8
 802288c:	68f8      	ldr	r0, [r7, #12]
 802288e:	f001 f837 	bl	8023900 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8022892:	68fb      	ldr	r3, [r7, #12]
 8022894:	331c      	adds	r3, #28
 8022896:	2200      	movs	r2, #0
 8022898:	4619      	mov	r1, r3
 802289a:	6878      	ldr	r0, [r7, #4]
 802289c:	f002 fb38 	bl	8024f10 <etharp_query>
 80228a0:	4603      	mov	r3, r0
 80228a2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80228a4:	68fb      	ldr	r3, [r7, #12]
 80228a6:	799b      	ldrb	r3, [r3, #6]
 80228a8:	2bff      	cmp	r3, #255	@ 0xff
 80228aa:	d005      	beq.n	80228b8 <dhcp_check+0x3c>
    dhcp->tries++;
 80228ac:	68fb      	ldr	r3, [r7, #12]
 80228ae:	799b      	ldrb	r3, [r3, #6]
 80228b0:	3301      	adds	r3, #1
 80228b2:	b2da      	uxtb	r2, r3
 80228b4:	68fb      	ldr	r3, [r7, #12]
 80228b6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80228b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80228bc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80228be:	893b      	ldrh	r3, [r7, #8]
 80228c0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80228c4:	4a06      	ldr	r2, [pc, #24]	@ (80228e0 <dhcp_check+0x64>)
 80228c6:	fb82 1203 	smull	r1, r2, r2, r3
 80228ca:	1152      	asrs	r2, r2, #5
 80228cc:	17db      	asrs	r3, r3, #31
 80228ce:	1ad3      	subs	r3, r2, r3
 80228d0:	b29a      	uxth	r2, r3
 80228d2:	68fb      	ldr	r3, [r7, #12]
 80228d4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80228d6:	bf00      	nop
 80228d8:	3710      	adds	r7, #16
 80228da:	46bd      	mov	sp, r7
 80228dc:	bd80      	pop	{r7, pc}
 80228de:	bf00      	nop
 80228e0:	10624dd3 	.word	0x10624dd3

080228e4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80228e4:	b580      	push	{r7, lr}
 80228e6:	b084      	sub	sp, #16
 80228e8:	af00      	add	r7, sp, #0
 80228ea:	6078      	str	r0, [r7, #4]
 80228ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80228f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80228f4:	4b0c      	ldr	r3, [pc, #48]	@ (8022928 <dhcp_handle_offer+0x44>)
 80228f6:	789b      	ldrb	r3, [r3, #2]
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d011      	beq.n	8022920 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80228fc:	68fb      	ldr	r3, [r7, #12]
 80228fe:	2200      	movs	r2, #0
 8022900:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8022902:	4b0a      	ldr	r3, [pc, #40]	@ (802292c <dhcp_handle_offer+0x48>)
 8022904:	689b      	ldr	r3, [r3, #8]
 8022906:	4618      	mov	r0, r3
 8022908:	f7f7 f909 	bl	8019b1e <lwip_htonl>
 802290c:	4602      	mov	r2, r0
 802290e:	68fb      	ldr	r3, [r7, #12]
 8022910:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8022912:	683b      	ldr	r3, [r7, #0]
 8022914:	691a      	ldr	r2, [r3, #16]
 8022916:	68fb      	ldr	r3, [r7, #12]
 8022918:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 802291a:	6878      	ldr	r0, [r7, #4]
 802291c:	f000 f808 	bl	8022930 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8022920:	bf00      	nop
 8022922:	3710      	adds	r7, #16
 8022924:	46bd      	mov	sp, r7
 8022926:	bd80      	pop	{r7, pc}
 8022928:	200111e0 	.word	0x200111e0
 802292c:	200111c0 	.word	0x200111c0

08022930 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8022930:	b5b0      	push	{r4, r5, r7, lr}
 8022932:	b08a      	sub	sp, #40	@ 0x28
 8022934:	af02      	add	r7, sp, #8
 8022936:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	2b00      	cmp	r3, #0
 802293c:	d109      	bne.n	8022952 <dhcp_select+0x22>
 802293e:	4b71      	ldr	r3, [pc, #452]	@ (8022b04 <dhcp_select+0x1d4>)
 8022940:	f240 1277 	movw	r2, #375	@ 0x177
 8022944:	4970      	ldr	r1, [pc, #448]	@ (8022b08 <dhcp_select+0x1d8>)
 8022946:	4871      	ldr	r0, [pc, #452]	@ (8022b0c <dhcp_select+0x1dc>)
 8022948:	f004 ff10 	bl	802776c <iprintf>
 802294c:	f06f 030f 	mvn.w	r3, #15
 8022950:	e0d3      	b.n	8022afa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8022952:	687b      	ldr	r3, [r7, #4]
 8022954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022956:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8022958:	69bb      	ldr	r3, [r7, #24]
 802295a:	2b00      	cmp	r3, #0
 802295c:	d109      	bne.n	8022972 <dhcp_select+0x42>
 802295e:	4b69      	ldr	r3, [pc, #420]	@ (8022b04 <dhcp_select+0x1d4>)
 8022960:	f240 1279 	movw	r2, #377	@ 0x179
 8022964:	496a      	ldr	r1, [pc, #424]	@ (8022b10 <dhcp_select+0x1e0>)
 8022966:	4869      	ldr	r0, [pc, #420]	@ (8022b0c <dhcp_select+0x1dc>)
 8022968:	f004 ff00 	bl	802776c <iprintf>
 802296c:	f06f 0305 	mvn.w	r3, #5
 8022970:	e0c3      	b.n	8022afa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8022972:	2101      	movs	r1, #1
 8022974:	69b8      	ldr	r0, [r7, #24]
 8022976:	f000 ffc3 	bl	8023900 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802297a:	f107 030c 	add.w	r3, r7, #12
 802297e:	2203      	movs	r2, #3
 8022980:	69b9      	ldr	r1, [r7, #24]
 8022982:	6878      	ldr	r0, [r7, #4]
 8022984:	f001 fc48 	bl	8024218 <dhcp_create_msg>
 8022988:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 802298a:	697b      	ldr	r3, [r7, #20]
 802298c:	2b00      	cmp	r3, #0
 802298e:	f000 8085 	beq.w	8022a9c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8022992:	697b      	ldr	r3, [r7, #20]
 8022994:	685b      	ldr	r3, [r3, #4]
 8022996:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8022998:	89b8      	ldrh	r0, [r7, #12]
 802299a:	693b      	ldr	r3, [r7, #16]
 802299c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80229a0:	2302      	movs	r3, #2
 80229a2:	2239      	movs	r2, #57	@ 0x39
 80229a4:	f000 ffc6 	bl	8023934 <dhcp_option>
 80229a8:	4603      	mov	r3, r0
 80229aa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80229ac:	89b8      	ldrh	r0, [r7, #12]
 80229ae:	693b      	ldr	r3, [r7, #16]
 80229b0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80229b8:	461a      	mov	r2, r3
 80229ba:	f001 f815 	bl	80239e8 <dhcp_option_short>
 80229be:	4603      	mov	r3, r0
 80229c0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80229c2:	89b8      	ldrh	r0, [r7, #12]
 80229c4:	693b      	ldr	r3, [r7, #16]
 80229c6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80229ca:	2304      	movs	r3, #4
 80229cc:	2232      	movs	r2, #50	@ 0x32
 80229ce:	f000 ffb1 	bl	8023934 <dhcp_option>
 80229d2:	4603      	mov	r3, r0
 80229d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80229d6:	89bc      	ldrh	r4, [r7, #12]
 80229d8:	693b      	ldr	r3, [r7, #16]
 80229da:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80229de:	69bb      	ldr	r3, [r7, #24]
 80229e0:	69db      	ldr	r3, [r3, #28]
 80229e2:	4618      	mov	r0, r3
 80229e4:	f7f7 f89b 	bl	8019b1e <lwip_htonl>
 80229e8:	4603      	mov	r3, r0
 80229ea:	461a      	mov	r2, r3
 80229ec:	4629      	mov	r1, r5
 80229ee:	4620      	mov	r0, r4
 80229f0:	f001 f82c 	bl	8023a4c <dhcp_option_long>
 80229f4:	4603      	mov	r3, r0
 80229f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80229f8:	89b8      	ldrh	r0, [r7, #12]
 80229fa:	693b      	ldr	r3, [r7, #16]
 80229fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8022a00:	2304      	movs	r3, #4
 8022a02:	2236      	movs	r2, #54	@ 0x36
 8022a04:	f000 ff96 	bl	8023934 <dhcp_option>
 8022a08:	4603      	mov	r3, r0
 8022a0a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8022a0c:	89bc      	ldrh	r4, [r7, #12]
 8022a0e:	693b      	ldr	r3, [r7, #16]
 8022a10:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8022a14:	69bb      	ldr	r3, [r7, #24]
 8022a16:	699b      	ldr	r3, [r3, #24]
 8022a18:	4618      	mov	r0, r3
 8022a1a:	f7f7 f880 	bl	8019b1e <lwip_htonl>
 8022a1e:	4603      	mov	r3, r0
 8022a20:	461a      	mov	r2, r3
 8022a22:	4629      	mov	r1, r5
 8022a24:	4620      	mov	r0, r4
 8022a26:	f001 f811 	bl	8023a4c <dhcp_option_long>
 8022a2a:	4603      	mov	r3, r0
 8022a2c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8022a2e:	89b8      	ldrh	r0, [r7, #12]
 8022a30:	693b      	ldr	r3, [r7, #16]
 8022a32:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8022a36:	2303      	movs	r3, #3
 8022a38:	2237      	movs	r2, #55	@ 0x37
 8022a3a:	f000 ff7b 	bl	8023934 <dhcp_option>
 8022a3e:	4603      	mov	r3, r0
 8022a40:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022a42:	2300      	movs	r3, #0
 8022a44:	77bb      	strb	r3, [r7, #30]
 8022a46:	e00e      	b.n	8022a66 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8022a48:	89b8      	ldrh	r0, [r7, #12]
 8022a4a:	693b      	ldr	r3, [r7, #16]
 8022a4c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8022a50:	7fbb      	ldrb	r3, [r7, #30]
 8022a52:	4a30      	ldr	r2, [pc, #192]	@ (8022b14 <dhcp_select+0x1e4>)
 8022a54:	5cd3      	ldrb	r3, [r2, r3]
 8022a56:	461a      	mov	r2, r3
 8022a58:	f000 ffa0 	bl	802399c <dhcp_option_byte>
 8022a5c:	4603      	mov	r3, r0
 8022a5e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8022a60:	7fbb      	ldrb	r3, [r7, #30]
 8022a62:	3301      	adds	r3, #1
 8022a64:	77bb      	strb	r3, [r7, #30]
 8022a66:	7fbb      	ldrb	r3, [r7, #30]
 8022a68:	2b02      	cmp	r3, #2
 8022a6a:	d9ed      	bls.n	8022a48 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8022a6c:	89b8      	ldrh	r0, [r7, #12]
 8022a6e:	693b      	ldr	r3, [r7, #16]
 8022a70:	33f0      	adds	r3, #240	@ 0xf0
 8022a72:	697a      	ldr	r2, [r7, #20]
 8022a74:	4619      	mov	r1, r3
 8022a76:	f001 fca5 	bl	80243c4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8022a7a:	4b27      	ldr	r3, [pc, #156]	@ (8022b18 <dhcp_select+0x1e8>)
 8022a7c:	6818      	ldr	r0, [r3, #0]
 8022a7e:	4b27      	ldr	r3, [pc, #156]	@ (8022b1c <dhcp_select+0x1ec>)
 8022a80:	9301      	str	r3, [sp, #4]
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	9300      	str	r3, [sp, #0]
 8022a86:	2343      	movs	r3, #67	@ 0x43
 8022a88:	4a25      	ldr	r2, [pc, #148]	@ (8022b20 <dhcp_select+0x1f0>)
 8022a8a:	6979      	ldr	r1, [r7, #20]
 8022a8c:	f7ff fbce 	bl	802222c <udp_sendto_if_src>
 8022a90:	4603      	mov	r3, r0
 8022a92:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8022a94:	6978      	ldr	r0, [r7, #20]
 8022a96:	f7f8 fc5d 	bl	801b354 <pbuf_free>
 8022a9a:	e001      	b.n	8022aa0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8022a9c:	23ff      	movs	r3, #255	@ 0xff
 8022a9e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8022aa0:	69bb      	ldr	r3, [r7, #24]
 8022aa2:	799b      	ldrb	r3, [r3, #6]
 8022aa4:	2bff      	cmp	r3, #255	@ 0xff
 8022aa6:	d005      	beq.n	8022ab4 <dhcp_select+0x184>
    dhcp->tries++;
 8022aa8:	69bb      	ldr	r3, [r7, #24]
 8022aaa:	799b      	ldrb	r3, [r3, #6]
 8022aac:	3301      	adds	r3, #1
 8022aae:	b2da      	uxtb	r2, r3
 8022ab0:	69bb      	ldr	r3, [r7, #24]
 8022ab2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8022ab4:	69bb      	ldr	r3, [r7, #24]
 8022ab6:	799b      	ldrb	r3, [r3, #6]
 8022ab8:	2b05      	cmp	r3, #5
 8022aba:	d80d      	bhi.n	8022ad8 <dhcp_select+0x1a8>
 8022abc:	69bb      	ldr	r3, [r7, #24]
 8022abe:	799b      	ldrb	r3, [r3, #6]
 8022ac0:	461a      	mov	r2, r3
 8022ac2:	2301      	movs	r3, #1
 8022ac4:	4093      	lsls	r3, r2
 8022ac6:	b29b      	uxth	r3, r3
 8022ac8:	461a      	mov	r2, r3
 8022aca:	0152      	lsls	r2, r2, #5
 8022acc:	1ad2      	subs	r2, r2, r3
 8022ace:	0092      	lsls	r2, r2, #2
 8022ad0:	4413      	add	r3, r2
 8022ad2:	00db      	lsls	r3, r3, #3
 8022ad4:	b29b      	uxth	r3, r3
 8022ad6:	e001      	b.n	8022adc <dhcp_select+0x1ac>
 8022ad8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8022adc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8022ade:	89fb      	ldrh	r3, [r7, #14]
 8022ae0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8022ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8022b24 <dhcp_select+0x1f4>)
 8022ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8022aea:	1152      	asrs	r2, r2, #5
 8022aec:	17db      	asrs	r3, r3, #31
 8022aee:	1ad3      	subs	r3, r2, r3
 8022af0:	b29a      	uxth	r2, r3
 8022af2:	69bb      	ldr	r3, [r7, #24]
 8022af4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8022af6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8022afa:	4618      	mov	r0, r3
 8022afc:	3720      	adds	r7, #32
 8022afe:	46bd      	mov	sp, r7
 8022b00:	bdb0      	pop	{r4, r5, r7, pc}
 8022b02:	bf00      	nop
 8022b04:	0802b984 	.word	0x0802b984
 8022b08:	0802ba30 	.word	0x0802ba30
 8022b0c:	0802b9e4 	.word	0x0802b9e4
 8022b10:	0802ba4c 	.word	0x0802ba4c
 8022b14:	20000050 	.word	0x20000050
 8022b18:	200111e8 	.word	0x200111e8
 8022b1c:	0802c588 	.word	0x0802c588
 8022b20:	0802c58c 	.word	0x0802c58c
 8022b24:	10624dd3 	.word	0x10624dd3

08022b28 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8022b28:	b580      	push	{r7, lr}
 8022b2a:	b082      	sub	sp, #8
 8022b2c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8022b2e:	4b27      	ldr	r3, [pc, #156]	@ (8022bcc <dhcp_coarse_tmr+0xa4>)
 8022b30:	681b      	ldr	r3, [r3, #0]
 8022b32:	607b      	str	r3, [r7, #4]
 8022b34:	e042      	b.n	8022bbc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8022b36:	687b      	ldr	r3, [r7, #4]
 8022b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022b3a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8022b3c:	683b      	ldr	r3, [r7, #0]
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	d039      	beq.n	8022bb6 <dhcp_coarse_tmr+0x8e>
 8022b42:	683b      	ldr	r3, [r7, #0]
 8022b44:	795b      	ldrb	r3, [r3, #5]
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	d035      	beq.n	8022bb6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8022b4a:	683b      	ldr	r3, [r7, #0]
 8022b4c:	8a9b      	ldrh	r3, [r3, #20]
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	d012      	beq.n	8022b78 <dhcp_coarse_tmr+0x50>
 8022b52:	683b      	ldr	r3, [r7, #0]
 8022b54:	8a5b      	ldrh	r3, [r3, #18]
 8022b56:	3301      	adds	r3, #1
 8022b58:	b29a      	uxth	r2, r3
 8022b5a:	683b      	ldr	r3, [r7, #0]
 8022b5c:	825a      	strh	r2, [r3, #18]
 8022b5e:	683b      	ldr	r3, [r7, #0]
 8022b60:	8a5a      	ldrh	r2, [r3, #18]
 8022b62:	683b      	ldr	r3, [r7, #0]
 8022b64:	8a9b      	ldrh	r3, [r3, #20]
 8022b66:	429a      	cmp	r2, r3
 8022b68:	d106      	bne.n	8022b78 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8022b6a:	6878      	ldr	r0, [r7, #4]
 8022b6c:	f000 fe2e 	bl	80237cc <dhcp_release_and_stop>
        dhcp_start(netif);
 8022b70:	6878      	ldr	r0, [r7, #4]
 8022b72:	f000 f96b 	bl	8022e4c <dhcp_start>
 8022b76:	e01e      	b.n	8022bb6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8022b78:	683b      	ldr	r3, [r7, #0]
 8022b7a:	8a1b      	ldrh	r3, [r3, #16]
 8022b7c:	2b00      	cmp	r3, #0
 8022b7e:	d00b      	beq.n	8022b98 <dhcp_coarse_tmr+0x70>
 8022b80:	683b      	ldr	r3, [r7, #0]
 8022b82:	8a1b      	ldrh	r3, [r3, #16]
 8022b84:	1e5a      	subs	r2, r3, #1
 8022b86:	b291      	uxth	r1, r2
 8022b88:	683a      	ldr	r2, [r7, #0]
 8022b8a:	8211      	strh	r1, [r2, #16]
 8022b8c:	2b01      	cmp	r3, #1
 8022b8e:	d103      	bne.n	8022b98 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8022b90:	6878      	ldr	r0, [r7, #4]
 8022b92:	f000 f8c7 	bl	8022d24 <dhcp_t2_timeout>
 8022b96:	e00e      	b.n	8022bb6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8022b98:	683b      	ldr	r3, [r7, #0]
 8022b9a:	89db      	ldrh	r3, [r3, #14]
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	d00a      	beq.n	8022bb6 <dhcp_coarse_tmr+0x8e>
 8022ba0:	683b      	ldr	r3, [r7, #0]
 8022ba2:	89db      	ldrh	r3, [r3, #14]
 8022ba4:	1e5a      	subs	r2, r3, #1
 8022ba6:	b291      	uxth	r1, r2
 8022ba8:	683a      	ldr	r2, [r7, #0]
 8022baa:	81d1      	strh	r1, [r2, #14]
 8022bac:	2b01      	cmp	r3, #1
 8022bae:	d102      	bne.n	8022bb6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8022bb0:	6878      	ldr	r0, [r7, #4]
 8022bb2:	f000 f888 	bl	8022cc6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	681b      	ldr	r3, [r3, #0]
 8022bba:	607b      	str	r3, [r7, #4]
 8022bbc:	687b      	ldr	r3, [r7, #4]
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	d1b9      	bne.n	8022b36 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8022bc2:	bf00      	nop
 8022bc4:	bf00      	nop
 8022bc6:	3708      	adds	r7, #8
 8022bc8:	46bd      	mov	sp, r7
 8022bca:	bd80      	pop	{r7, pc}
 8022bcc:	20011154 	.word	0x20011154

08022bd0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8022bd0:	b580      	push	{r7, lr}
 8022bd2:	b082      	sub	sp, #8
 8022bd4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8022bd6:	4b16      	ldr	r3, [pc, #88]	@ (8022c30 <dhcp_fine_tmr+0x60>)
 8022bd8:	681b      	ldr	r3, [r3, #0]
 8022bda:	607b      	str	r3, [r7, #4]
 8022bdc:	e020      	b.n	8022c20 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8022bde:	687b      	ldr	r3, [r7, #4]
 8022be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022be2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8022be4:	683b      	ldr	r3, [r7, #0]
 8022be6:	2b00      	cmp	r3, #0
 8022be8:	d017      	beq.n	8022c1a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8022bea:	683b      	ldr	r3, [r7, #0]
 8022bec:	891b      	ldrh	r3, [r3, #8]
 8022bee:	2b01      	cmp	r3, #1
 8022bf0:	d906      	bls.n	8022c00 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8022bf2:	683b      	ldr	r3, [r7, #0]
 8022bf4:	891b      	ldrh	r3, [r3, #8]
 8022bf6:	3b01      	subs	r3, #1
 8022bf8:	b29a      	uxth	r2, r3
 8022bfa:	683b      	ldr	r3, [r7, #0]
 8022bfc:	811a      	strh	r2, [r3, #8]
 8022bfe:	e00c      	b.n	8022c1a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8022c00:	683b      	ldr	r3, [r7, #0]
 8022c02:	891b      	ldrh	r3, [r3, #8]
 8022c04:	2b01      	cmp	r3, #1
 8022c06:	d108      	bne.n	8022c1a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8022c08:	683b      	ldr	r3, [r7, #0]
 8022c0a:	891b      	ldrh	r3, [r3, #8]
 8022c0c:	3b01      	subs	r3, #1
 8022c0e:	b29a      	uxth	r2, r3
 8022c10:	683b      	ldr	r3, [r7, #0]
 8022c12:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8022c14:	6878      	ldr	r0, [r7, #4]
 8022c16:	f000 f80d 	bl	8022c34 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	681b      	ldr	r3, [r3, #0]
 8022c1e:	607b      	str	r3, [r7, #4]
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	2b00      	cmp	r3, #0
 8022c24:	d1db      	bne.n	8022bde <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8022c26:	bf00      	nop
 8022c28:	bf00      	nop
 8022c2a:	3708      	adds	r7, #8
 8022c2c:	46bd      	mov	sp, r7
 8022c2e:	bd80      	pop	{r7, pc}
 8022c30:	20011154 	.word	0x20011154

08022c34 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8022c34:	b580      	push	{r7, lr}
 8022c36:	b084      	sub	sp, #16
 8022c38:	af00      	add	r7, sp, #0
 8022c3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022c40:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8022c42:	68fb      	ldr	r3, [r7, #12]
 8022c44:	795b      	ldrb	r3, [r3, #5]
 8022c46:	2b0c      	cmp	r3, #12
 8022c48:	d003      	beq.n	8022c52 <dhcp_timeout+0x1e>
 8022c4a:	68fb      	ldr	r3, [r7, #12]
 8022c4c:	795b      	ldrb	r3, [r3, #5]
 8022c4e:	2b06      	cmp	r3, #6
 8022c50:	d103      	bne.n	8022c5a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8022c52:	6878      	ldr	r0, [r7, #4]
 8022c54:	f000 fa56 	bl	8023104 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8022c58:	e031      	b.n	8022cbe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	795b      	ldrb	r3, [r3, #5]
 8022c5e:	2b01      	cmp	r3, #1
 8022c60:	d10e      	bne.n	8022c80 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8022c62:	68fb      	ldr	r3, [r7, #12]
 8022c64:	799b      	ldrb	r3, [r3, #6]
 8022c66:	2b05      	cmp	r3, #5
 8022c68:	d803      	bhi.n	8022c72 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8022c6a:	6878      	ldr	r0, [r7, #4]
 8022c6c:	f7ff fe60 	bl	8022930 <dhcp_select>
}
 8022c70:	e025      	b.n	8022cbe <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8022c72:	6878      	ldr	r0, [r7, #4]
 8022c74:	f000 fdaa 	bl	80237cc <dhcp_release_and_stop>
      dhcp_start(netif);
 8022c78:	6878      	ldr	r0, [r7, #4]
 8022c7a:	f000 f8e7 	bl	8022e4c <dhcp_start>
}
 8022c7e:	e01e      	b.n	8022cbe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8022c80:	68fb      	ldr	r3, [r7, #12]
 8022c82:	795b      	ldrb	r3, [r3, #5]
 8022c84:	2b08      	cmp	r3, #8
 8022c86:	d10b      	bne.n	8022ca0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8022c88:	68fb      	ldr	r3, [r7, #12]
 8022c8a:	799b      	ldrb	r3, [r3, #6]
 8022c8c:	2b01      	cmp	r3, #1
 8022c8e:	d803      	bhi.n	8022c98 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8022c90:	6878      	ldr	r0, [r7, #4]
 8022c92:	f7ff fdf3 	bl	802287c <dhcp_check>
}
 8022c96:	e012      	b.n	8022cbe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8022c98:	6878      	ldr	r0, [r7, #4]
 8022c9a:	f000 fad5 	bl	8023248 <dhcp_bind>
}
 8022c9e:	e00e      	b.n	8022cbe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8022ca0:	68fb      	ldr	r3, [r7, #12]
 8022ca2:	795b      	ldrb	r3, [r3, #5]
 8022ca4:	2b03      	cmp	r3, #3
 8022ca6:	d10a      	bne.n	8022cbe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8022ca8:	68fb      	ldr	r3, [r7, #12]
 8022caa:	799b      	ldrb	r3, [r3, #6]
 8022cac:	2b01      	cmp	r3, #1
 8022cae:	d803      	bhi.n	8022cb8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8022cb0:	6878      	ldr	r0, [r7, #4]
 8022cb2:	f000 fcd7 	bl	8023664 <dhcp_reboot>
}
 8022cb6:	e002      	b.n	8022cbe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8022cb8:	6878      	ldr	r0, [r7, #4]
 8022cba:	f000 fa23 	bl	8023104 <dhcp_discover>
}
 8022cbe:	bf00      	nop
 8022cc0:	3710      	adds	r7, #16
 8022cc2:	46bd      	mov	sp, r7
 8022cc4:	bd80      	pop	{r7, pc}

08022cc6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8022cc6:	b580      	push	{r7, lr}
 8022cc8:	b084      	sub	sp, #16
 8022cca:	af00      	add	r7, sp, #0
 8022ccc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022cd2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022cd4:	68fb      	ldr	r3, [r7, #12]
 8022cd6:	795b      	ldrb	r3, [r3, #5]
 8022cd8:	2b01      	cmp	r3, #1
 8022cda:	d007      	beq.n	8022cec <dhcp_t1_timeout+0x26>
 8022cdc:	68fb      	ldr	r3, [r7, #12]
 8022cde:	795b      	ldrb	r3, [r3, #5]
 8022ce0:	2b0a      	cmp	r3, #10
 8022ce2:	d003      	beq.n	8022cec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8022ce4:	68fb      	ldr	r3, [r7, #12]
 8022ce6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022ce8:	2b05      	cmp	r3, #5
 8022cea:	d117      	bne.n	8022d1c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8022cec:	6878      	ldr	r0, [r7, #4]
 8022cee:	f000 fb85 	bl	80233fc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8022cf2:	68fb      	ldr	r3, [r7, #12]
 8022cf4:	899b      	ldrh	r3, [r3, #12]
 8022cf6:	461a      	mov	r2, r3
 8022cf8:	68fb      	ldr	r3, [r7, #12]
 8022cfa:	8a5b      	ldrh	r3, [r3, #18]
 8022cfc:	1ad3      	subs	r3, r2, r3
 8022cfe:	2b01      	cmp	r3, #1
 8022d00:	dd0c      	ble.n	8022d1c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8022d02:	68fb      	ldr	r3, [r7, #12]
 8022d04:	899b      	ldrh	r3, [r3, #12]
 8022d06:	461a      	mov	r2, r3
 8022d08:	68fb      	ldr	r3, [r7, #12]
 8022d0a:	8a5b      	ldrh	r3, [r3, #18]
 8022d0c:	1ad3      	subs	r3, r2, r3
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	da00      	bge.n	8022d14 <dhcp_t1_timeout+0x4e>
 8022d12:	3301      	adds	r3, #1
 8022d14:	105b      	asrs	r3, r3, #1
 8022d16:	b29a      	uxth	r2, r3
 8022d18:	68fb      	ldr	r3, [r7, #12]
 8022d1a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8022d1c:	bf00      	nop
 8022d1e:	3710      	adds	r7, #16
 8022d20:	46bd      	mov	sp, r7
 8022d22:	bd80      	pop	{r7, pc}

08022d24 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8022d24:	b580      	push	{r7, lr}
 8022d26:	b084      	sub	sp, #16
 8022d28:	af00      	add	r7, sp, #0
 8022d2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022d30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022d32:	68fb      	ldr	r3, [r7, #12]
 8022d34:	795b      	ldrb	r3, [r3, #5]
 8022d36:	2b01      	cmp	r3, #1
 8022d38:	d00b      	beq.n	8022d52 <dhcp_t2_timeout+0x2e>
 8022d3a:	68fb      	ldr	r3, [r7, #12]
 8022d3c:	795b      	ldrb	r3, [r3, #5]
 8022d3e:	2b0a      	cmp	r3, #10
 8022d40:	d007      	beq.n	8022d52 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8022d42:	68fb      	ldr	r3, [r7, #12]
 8022d44:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8022d46:	2b05      	cmp	r3, #5
 8022d48:	d003      	beq.n	8022d52 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8022d4a:	68fb      	ldr	r3, [r7, #12]
 8022d4c:	795b      	ldrb	r3, [r3, #5]
 8022d4e:	2b04      	cmp	r3, #4
 8022d50:	d117      	bne.n	8022d82 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8022d52:	6878      	ldr	r0, [r7, #4]
 8022d54:	f000 fbec 	bl	8023530 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8022d58:	68fb      	ldr	r3, [r7, #12]
 8022d5a:	8a9b      	ldrh	r3, [r3, #20]
 8022d5c:	461a      	mov	r2, r3
 8022d5e:	68fb      	ldr	r3, [r7, #12]
 8022d60:	8a5b      	ldrh	r3, [r3, #18]
 8022d62:	1ad3      	subs	r3, r2, r3
 8022d64:	2b01      	cmp	r3, #1
 8022d66:	dd0c      	ble.n	8022d82 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8022d68:	68fb      	ldr	r3, [r7, #12]
 8022d6a:	8a9b      	ldrh	r3, [r3, #20]
 8022d6c:	461a      	mov	r2, r3
 8022d6e:	68fb      	ldr	r3, [r7, #12]
 8022d70:	8a5b      	ldrh	r3, [r3, #18]
 8022d72:	1ad3      	subs	r3, r2, r3
 8022d74:	2b00      	cmp	r3, #0
 8022d76:	da00      	bge.n	8022d7a <dhcp_t2_timeout+0x56>
 8022d78:	3301      	adds	r3, #1
 8022d7a:	105b      	asrs	r3, r3, #1
 8022d7c:	b29a      	uxth	r2, r3
 8022d7e:	68fb      	ldr	r3, [r7, #12]
 8022d80:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8022d82:	bf00      	nop
 8022d84:	3710      	adds	r7, #16
 8022d86:	46bd      	mov	sp, r7
 8022d88:	bd80      	pop	{r7, pc}
	...

08022d8c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8022d8c:	b580      	push	{r7, lr}
 8022d8e:	b084      	sub	sp, #16
 8022d90:	af00      	add	r7, sp, #0
 8022d92:	6078      	str	r0, [r7, #4]
 8022d94:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022d96:	687b      	ldr	r3, [r7, #4]
 8022d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022d9a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8022d9c:	68fb      	ldr	r3, [r7, #12]
 8022d9e:	2200      	movs	r2, #0
 8022da0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8022da2:	68fb      	ldr	r3, [r7, #12]
 8022da4:	2200      	movs	r2, #0
 8022da6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8022da8:	4b26      	ldr	r3, [pc, #152]	@ (8022e44 <dhcp_handle_ack+0xb8>)
 8022daa:	78db      	ldrb	r3, [r3, #3]
 8022dac:	2b00      	cmp	r3, #0
 8022dae:	d003      	beq.n	8022db8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8022db0:	4b25      	ldr	r3, [pc, #148]	@ (8022e48 <dhcp_handle_ack+0xbc>)
 8022db2:	68da      	ldr	r2, [r3, #12]
 8022db4:	68fb      	ldr	r3, [r7, #12]
 8022db6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8022db8:	4b22      	ldr	r3, [pc, #136]	@ (8022e44 <dhcp_handle_ack+0xb8>)
 8022dba:	791b      	ldrb	r3, [r3, #4]
 8022dbc:	2b00      	cmp	r3, #0
 8022dbe:	d004      	beq.n	8022dca <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8022dc0:	4b21      	ldr	r3, [pc, #132]	@ (8022e48 <dhcp_handle_ack+0xbc>)
 8022dc2:	691a      	ldr	r2, [r3, #16]
 8022dc4:	68fb      	ldr	r3, [r7, #12]
 8022dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8022dc8:	e004      	b.n	8022dd4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8022dca:	68fb      	ldr	r3, [r7, #12]
 8022dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022dce:	085a      	lsrs	r2, r3, #1
 8022dd0:	68fb      	ldr	r3, [r7, #12]
 8022dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8022dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8022e44 <dhcp_handle_ack+0xb8>)
 8022dd6:	795b      	ldrb	r3, [r3, #5]
 8022dd8:	2b00      	cmp	r3, #0
 8022dda:	d004      	beq.n	8022de6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8022ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8022e48 <dhcp_handle_ack+0xbc>)
 8022dde:	695a      	ldr	r2, [r3, #20]
 8022de0:	68fb      	ldr	r3, [r7, #12]
 8022de2:	631a      	str	r2, [r3, #48]	@ 0x30
 8022de4:	e007      	b.n	8022df6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8022de6:	68fb      	ldr	r3, [r7, #12]
 8022de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8022dea:	4613      	mov	r3, r2
 8022dec:	00db      	lsls	r3, r3, #3
 8022dee:	1a9b      	subs	r3, r3, r2
 8022df0:	08da      	lsrs	r2, r3, #3
 8022df2:	68fb      	ldr	r3, [r7, #12]
 8022df4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8022df6:	683b      	ldr	r3, [r7, #0]
 8022df8:	691a      	ldr	r2, [r3, #16]
 8022dfa:	68fb      	ldr	r3, [r7, #12]
 8022dfc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8022dfe:	4b11      	ldr	r3, [pc, #68]	@ (8022e44 <dhcp_handle_ack+0xb8>)
 8022e00:	799b      	ldrb	r3, [r3, #6]
 8022e02:	2b00      	cmp	r3, #0
 8022e04:	d00b      	beq.n	8022e1e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8022e06:	4b10      	ldr	r3, [pc, #64]	@ (8022e48 <dhcp_handle_ack+0xbc>)
 8022e08:	699b      	ldr	r3, [r3, #24]
 8022e0a:	4618      	mov	r0, r3
 8022e0c:	f7f6 fe87 	bl	8019b1e <lwip_htonl>
 8022e10:	4602      	mov	r2, r0
 8022e12:	68fb      	ldr	r3, [r7, #12]
 8022e14:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8022e16:	68fb      	ldr	r3, [r7, #12]
 8022e18:	2201      	movs	r2, #1
 8022e1a:	71da      	strb	r2, [r3, #7]
 8022e1c:	e002      	b.n	8022e24 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8022e1e:	68fb      	ldr	r3, [r7, #12]
 8022e20:	2200      	movs	r2, #0
 8022e22:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8022e24:	4b07      	ldr	r3, [pc, #28]	@ (8022e44 <dhcp_handle_ack+0xb8>)
 8022e26:	79db      	ldrb	r3, [r3, #7]
 8022e28:	2b00      	cmp	r3, #0
 8022e2a:	d007      	beq.n	8022e3c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8022e2c:	4b06      	ldr	r3, [pc, #24]	@ (8022e48 <dhcp_handle_ack+0xbc>)
 8022e2e:	69db      	ldr	r3, [r3, #28]
 8022e30:	4618      	mov	r0, r3
 8022e32:	f7f6 fe74 	bl	8019b1e <lwip_htonl>
 8022e36:	4602      	mov	r2, r0
 8022e38:	68fb      	ldr	r3, [r7, #12]
 8022e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8022e3c:	bf00      	nop
 8022e3e:	3710      	adds	r7, #16
 8022e40:	46bd      	mov	sp, r7
 8022e42:	bd80      	pop	{r7, pc}
 8022e44:	200111e0 	.word	0x200111e0
 8022e48:	200111c0 	.word	0x200111c0

08022e4c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8022e4c:	b580      	push	{r7, lr}
 8022e4e:	b084      	sub	sp, #16
 8022e50:	af00      	add	r7, sp, #0
 8022e52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8022e54:	687b      	ldr	r3, [r7, #4]
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	d109      	bne.n	8022e6e <dhcp_start+0x22>
 8022e5a:	4b37      	ldr	r3, [pc, #220]	@ (8022f38 <dhcp_start+0xec>)
 8022e5c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8022e60:	4936      	ldr	r1, [pc, #216]	@ (8022f3c <dhcp_start+0xf0>)
 8022e62:	4837      	ldr	r0, [pc, #220]	@ (8022f40 <dhcp_start+0xf4>)
 8022e64:	f004 fc82 	bl	802776c <iprintf>
 8022e68:	f06f 030f 	mvn.w	r3, #15
 8022e6c:	e060      	b.n	8022f30 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8022e6e:	687b      	ldr	r3, [r7, #4]
 8022e70:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8022e74:	f003 0301 	and.w	r3, r3, #1
 8022e78:	2b00      	cmp	r3, #0
 8022e7a:	d109      	bne.n	8022e90 <dhcp_start+0x44>
 8022e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8022f38 <dhcp_start+0xec>)
 8022e7e:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8022e82:	4930      	ldr	r1, [pc, #192]	@ (8022f44 <dhcp_start+0xf8>)
 8022e84:	482e      	ldr	r0, [pc, #184]	@ (8022f40 <dhcp_start+0xf4>)
 8022e86:	f004 fc71 	bl	802776c <iprintf>
 8022e8a:	f06f 030f 	mvn.w	r3, #15
 8022e8e:	e04f      	b.n	8022f30 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8022e90:	687b      	ldr	r3, [r7, #4]
 8022e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022e94:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8022e96:	687b      	ldr	r3, [r7, #4]
 8022e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8022e9a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8022e9e:	d202      	bcs.n	8022ea6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8022ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8022ea4:	e044      	b.n	8022f30 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8022ea6:	68fb      	ldr	r3, [r7, #12]
 8022ea8:	2b00      	cmp	r3, #0
 8022eaa:	d10d      	bne.n	8022ec8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8022eac:	2034      	movs	r0, #52	@ 0x34
 8022eae:	f7f7 f955 	bl	801a15c <mem_malloc>
 8022eb2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8022eb4:	68fb      	ldr	r3, [r7, #12]
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d102      	bne.n	8022ec0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8022eba:	f04f 33ff 	mov.w	r3, #4294967295
 8022ebe:	e037      	b.n	8022f30 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8022ec0:	687b      	ldr	r3, [r7, #4]
 8022ec2:	68fa      	ldr	r2, [r7, #12]
 8022ec4:	625a      	str	r2, [r3, #36]	@ 0x24
 8022ec6:	e005      	b.n	8022ed4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8022ec8:	68fb      	ldr	r3, [r7, #12]
 8022eca:	791b      	ldrb	r3, [r3, #4]
 8022ecc:	2b00      	cmp	r3, #0
 8022ece:	d001      	beq.n	8022ed4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8022ed0:	f7ff fc90 	bl	80227f4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8022ed4:	2234      	movs	r2, #52	@ 0x34
 8022ed6:	2100      	movs	r1, #0
 8022ed8:	68f8      	ldr	r0, [r7, #12]
 8022eda:	f004 fd9f 	bl	8027a1c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8022ede:	f7ff fc37 	bl	8022750 <dhcp_inc_pcb_refcount>
 8022ee2:	4603      	mov	r3, r0
 8022ee4:	2b00      	cmp	r3, #0
 8022ee6:	d002      	beq.n	8022eee <dhcp_start+0xa2>
    return ERR_MEM;
 8022ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8022eec:	e020      	b.n	8022f30 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8022eee:	68fb      	ldr	r3, [r7, #12]
 8022ef0:	2201      	movs	r2, #1
 8022ef2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8022ef4:	687b      	ldr	r3, [r7, #4]
 8022ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8022efa:	f003 0304 	and.w	r3, r3, #4
 8022efe:	2b00      	cmp	r3, #0
 8022f00:	d105      	bne.n	8022f0e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8022f02:	2102      	movs	r1, #2
 8022f04:	68f8      	ldr	r0, [r7, #12]
 8022f06:	f000 fcfb 	bl	8023900 <dhcp_set_state>
    return ERR_OK;
 8022f0a:	2300      	movs	r3, #0
 8022f0c:	e010      	b.n	8022f30 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8022f0e:	6878      	ldr	r0, [r7, #4]
 8022f10:	f000 f8f8 	bl	8023104 <dhcp_discover>
 8022f14:	4603      	mov	r3, r0
 8022f16:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8022f18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022f1c:	2b00      	cmp	r3, #0
 8022f1e:	d005      	beq.n	8022f2c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8022f20:	6878      	ldr	r0, [r7, #4]
 8022f22:	f000 fc53 	bl	80237cc <dhcp_release_and_stop>
    return ERR_MEM;
 8022f26:	f04f 33ff 	mov.w	r3, #4294967295
 8022f2a:	e001      	b.n	8022f30 <dhcp_start+0xe4>
  }
  return result;
 8022f2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8022f30:	4618      	mov	r0, r3
 8022f32:	3710      	adds	r7, #16
 8022f34:	46bd      	mov	sp, r7
 8022f36:	bd80      	pop	{r7, pc}
 8022f38:	0802b984 	.word	0x0802b984
 8022f3c:	0802ba68 	.word	0x0802ba68
 8022f40:	0802b9e4 	.word	0x0802b9e4
 8022f44:	0802baac 	.word	0x0802baac

08022f48 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8022f48:	b580      	push	{r7, lr}
 8022f4a:	b084      	sub	sp, #16
 8022f4c:	af00      	add	r7, sp, #0
 8022f4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022f54:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8022f56:	68fb      	ldr	r3, [r7, #12]
 8022f58:	2b00      	cmp	r3, #0
 8022f5a:	d025      	beq.n	8022fa8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8022f5c:	68fb      	ldr	r3, [r7, #12]
 8022f5e:	795b      	ldrb	r3, [r3, #5]
 8022f60:	2b0a      	cmp	r3, #10
 8022f62:	d008      	beq.n	8022f76 <dhcp_network_changed+0x2e>
 8022f64:	2b0a      	cmp	r3, #10
 8022f66:	dc0d      	bgt.n	8022f84 <dhcp_network_changed+0x3c>
 8022f68:	2b00      	cmp	r3, #0
 8022f6a:	d01f      	beq.n	8022fac <dhcp_network_changed+0x64>
 8022f6c:	2b00      	cmp	r3, #0
 8022f6e:	db09      	blt.n	8022f84 <dhcp_network_changed+0x3c>
 8022f70:	3b03      	subs	r3, #3
 8022f72:	2b02      	cmp	r3, #2
 8022f74:	d806      	bhi.n	8022f84 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8022f76:	68fb      	ldr	r3, [r7, #12]
 8022f78:	2200      	movs	r2, #0
 8022f7a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8022f7c:	6878      	ldr	r0, [r7, #4]
 8022f7e:	f000 fb71 	bl	8023664 <dhcp_reboot>
      break;
 8022f82:	e014      	b.n	8022fae <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8022f84:	68fb      	ldr	r3, [r7, #12]
 8022f86:	795b      	ldrb	r3, [r3, #5]
 8022f88:	2b0c      	cmp	r3, #12
 8022f8a:	d906      	bls.n	8022f9a <dhcp_network_changed+0x52>
 8022f8c:	4b09      	ldr	r3, [pc, #36]	@ (8022fb4 <dhcp_network_changed+0x6c>)
 8022f8e:	f240 326d 	movw	r2, #877	@ 0x36d
 8022f92:	4909      	ldr	r1, [pc, #36]	@ (8022fb8 <dhcp_network_changed+0x70>)
 8022f94:	4809      	ldr	r0, [pc, #36]	@ (8022fbc <dhcp_network_changed+0x74>)
 8022f96:	f004 fbe9 	bl	802776c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	2200      	movs	r2, #0
 8022f9e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8022fa0:	6878      	ldr	r0, [r7, #4]
 8022fa2:	f000 f8af 	bl	8023104 <dhcp_discover>
      break;
 8022fa6:	e002      	b.n	8022fae <dhcp_network_changed+0x66>
    return;
 8022fa8:	bf00      	nop
 8022faa:	e000      	b.n	8022fae <dhcp_network_changed+0x66>
      break;
 8022fac:	bf00      	nop
  }
}
 8022fae:	3710      	adds	r7, #16
 8022fb0:	46bd      	mov	sp, r7
 8022fb2:	bd80      	pop	{r7, pc}
 8022fb4:	0802b984 	.word	0x0802b984
 8022fb8:	0802bad0 	.word	0x0802bad0
 8022fbc:	0802b9e4 	.word	0x0802b9e4

08022fc0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8022fc0:	b580      	push	{r7, lr}
 8022fc2:	b084      	sub	sp, #16
 8022fc4:	af00      	add	r7, sp, #0
 8022fc6:	6078      	str	r0, [r7, #4]
 8022fc8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	2b00      	cmp	r3, #0
 8022fce:	d107      	bne.n	8022fe0 <dhcp_arp_reply+0x20>
 8022fd0:	4b0e      	ldr	r3, [pc, #56]	@ (802300c <dhcp_arp_reply+0x4c>)
 8022fd2:	f240 328b 	movw	r2, #907	@ 0x38b
 8022fd6:	490e      	ldr	r1, [pc, #56]	@ (8023010 <dhcp_arp_reply+0x50>)
 8022fd8:	480e      	ldr	r0, [pc, #56]	@ (8023014 <dhcp_arp_reply+0x54>)
 8022fda:	f004 fbc7 	bl	802776c <iprintf>
 8022fde:	e012      	b.n	8023006 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022fe4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8022fe6:	68fb      	ldr	r3, [r7, #12]
 8022fe8:	2b00      	cmp	r3, #0
 8022fea:	d00c      	beq.n	8023006 <dhcp_arp_reply+0x46>
 8022fec:	68fb      	ldr	r3, [r7, #12]
 8022fee:	795b      	ldrb	r3, [r3, #5]
 8022ff0:	2b08      	cmp	r3, #8
 8022ff2:	d108      	bne.n	8023006 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8022ff4:	683b      	ldr	r3, [r7, #0]
 8022ff6:	681a      	ldr	r2, [r3, #0]
 8022ff8:	68fb      	ldr	r3, [r7, #12]
 8022ffa:	69db      	ldr	r3, [r3, #28]
 8022ffc:	429a      	cmp	r2, r3
 8022ffe:	d102      	bne.n	8023006 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8023000:	6878      	ldr	r0, [r7, #4]
 8023002:	f000 f809 	bl	8023018 <dhcp_decline>
    }
  }
}
 8023006:	3710      	adds	r7, #16
 8023008:	46bd      	mov	sp, r7
 802300a:	bd80      	pop	{r7, pc}
 802300c:	0802b984 	.word	0x0802b984
 8023010:	0802ba68 	.word	0x0802ba68
 8023014:	0802b9e4 	.word	0x0802b9e4

08023018 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8023018:	b5b0      	push	{r4, r5, r7, lr}
 802301a:	b08a      	sub	sp, #40	@ 0x28
 802301c:	af02      	add	r7, sp, #8
 802301e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8023020:	687b      	ldr	r3, [r7, #4]
 8023022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023024:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8023026:	210c      	movs	r1, #12
 8023028:	69b8      	ldr	r0, [r7, #24]
 802302a:	f000 fc69 	bl	8023900 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 802302e:	f107 030c 	add.w	r3, r7, #12
 8023032:	2204      	movs	r2, #4
 8023034:	69b9      	ldr	r1, [r7, #24]
 8023036:	6878      	ldr	r0, [r7, #4]
 8023038:	f001 f8ee 	bl	8024218 <dhcp_create_msg>
 802303c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 802303e:	697b      	ldr	r3, [r7, #20]
 8023040:	2b00      	cmp	r3, #0
 8023042:	d035      	beq.n	80230b0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8023044:	697b      	ldr	r3, [r7, #20]
 8023046:	685b      	ldr	r3, [r3, #4]
 8023048:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802304a:	89b8      	ldrh	r0, [r7, #12]
 802304c:	693b      	ldr	r3, [r7, #16]
 802304e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8023052:	2304      	movs	r3, #4
 8023054:	2232      	movs	r2, #50	@ 0x32
 8023056:	f000 fc6d 	bl	8023934 <dhcp_option>
 802305a:	4603      	mov	r3, r0
 802305c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802305e:	89bc      	ldrh	r4, [r7, #12]
 8023060:	693b      	ldr	r3, [r7, #16]
 8023062:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8023066:	69bb      	ldr	r3, [r7, #24]
 8023068:	69db      	ldr	r3, [r3, #28]
 802306a:	4618      	mov	r0, r3
 802306c:	f7f6 fd57 	bl	8019b1e <lwip_htonl>
 8023070:	4603      	mov	r3, r0
 8023072:	461a      	mov	r2, r3
 8023074:	4629      	mov	r1, r5
 8023076:	4620      	mov	r0, r4
 8023078:	f000 fce8 	bl	8023a4c <dhcp_option_long>
 802307c:	4603      	mov	r3, r0
 802307e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8023080:	89b8      	ldrh	r0, [r7, #12]
 8023082:	693b      	ldr	r3, [r7, #16]
 8023084:	33f0      	adds	r3, #240	@ 0xf0
 8023086:	697a      	ldr	r2, [r7, #20]
 8023088:	4619      	mov	r1, r3
 802308a:	f001 f99b 	bl	80243c4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802308e:	4b19      	ldr	r3, [pc, #100]	@ (80230f4 <dhcp_decline+0xdc>)
 8023090:	6818      	ldr	r0, [r3, #0]
 8023092:	4b19      	ldr	r3, [pc, #100]	@ (80230f8 <dhcp_decline+0xe0>)
 8023094:	9301      	str	r3, [sp, #4]
 8023096:	687b      	ldr	r3, [r7, #4]
 8023098:	9300      	str	r3, [sp, #0]
 802309a:	2343      	movs	r3, #67	@ 0x43
 802309c:	4a17      	ldr	r2, [pc, #92]	@ (80230fc <dhcp_decline+0xe4>)
 802309e:	6979      	ldr	r1, [r7, #20]
 80230a0:	f7ff f8c4 	bl	802222c <udp_sendto_if_src>
 80230a4:	4603      	mov	r3, r0
 80230a6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80230a8:	6978      	ldr	r0, [r7, #20]
 80230aa:	f7f8 f953 	bl	801b354 <pbuf_free>
 80230ae:	e001      	b.n	80230b4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80230b0:	23ff      	movs	r3, #255	@ 0xff
 80230b2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80230b4:	69bb      	ldr	r3, [r7, #24]
 80230b6:	799b      	ldrb	r3, [r3, #6]
 80230b8:	2bff      	cmp	r3, #255	@ 0xff
 80230ba:	d005      	beq.n	80230c8 <dhcp_decline+0xb0>
    dhcp->tries++;
 80230bc:	69bb      	ldr	r3, [r7, #24]
 80230be:	799b      	ldrb	r3, [r3, #6]
 80230c0:	3301      	adds	r3, #1
 80230c2:	b2da      	uxtb	r2, r3
 80230c4:	69bb      	ldr	r3, [r7, #24]
 80230c6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80230c8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80230cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80230ce:	89fb      	ldrh	r3, [r7, #14]
 80230d0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80230d4:	4a0a      	ldr	r2, [pc, #40]	@ (8023100 <dhcp_decline+0xe8>)
 80230d6:	fb82 1203 	smull	r1, r2, r2, r3
 80230da:	1152      	asrs	r2, r2, #5
 80230dc:	17db      	asrs	r3, r3, #31
 80230de:	1ad3      	subs	r3, r2, r3
 80230e0:	b29a      	uxth	r2, r3
 80230e2:	69bb      	ldr	r3, [r7, #24]
 80230e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80230e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80230ea:	4618      	mov	r0, r3
 80230ec:	3720      	adds	r7, #32
 80230ee:	46bd      	mov	sp, r7
 80230f0:	bdb0      	pop	{r4, r5, r7, pc}
 80230f2:	bf00      	nop
 80230f4:	200111e8 	.word	0x200111e8
 80230f8:	0802c588 	.word	0x0802c588
 80230fc:	0802c58c 	.word	0x0802c58c
 8023100:	10624dd3 	.word	0x10624dd3

08023104 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8023104:	b580      	push	{r7, lr}
 8023106:	b08a      	sub	sp, #40	@ 0x28
 8023108:	af02      	add	r7, sp, #8
 802310a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023110:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8023112:	2300      	movs	r3, #0
 8023114:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8023116:	69bb      	ldr	r3, [r7, #24]
 8023118:	2200      	movs	r2, #0
 802311a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 802311c:	2106      	movs	r1, #6
 802311e:	69b8      	ldr	r0, [r7, #24]
 8023120:	f000 fbee 	bl	8023900 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8023124:	f107 0308 	add.w	r3, r7, #8
 8023128:	2201      	movs	r2, #1
 802312a:	69b9      	ldr	r1, [r7, #24]
 802312c:	6878      	ldr	r0, [r7, #4]
 802312e:	f001 f873 	bl	8024218 <dhcp_create_msg>
 8023132:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8023134:	693b      	ldr	r3, [r7, #16]
 8023136:	2b00      	cmp	r3, #0
 8023138:	d04b      	beq.n	80231d2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 802313a:	693b      	ldr	r3, [r7, #16]
 802313c:	685b      	ldr	r3, [r3, #4]
 802313e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8023140:	8938      	ldrh	r0, [r7, #8]
 8023142:	68fb      	ldr	r3, [r7, #12]
 8023144:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8023148:	2302      	movs	r3, #2
 802314a:	2239      	movs	r2, #57	@ 0x39
 802314c:	f000 fbf2 	bl	8023934 <dhcp_option>
 8023150:	4603      	mov	r3, r0
 8023152:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8023154:	8938      	ldrh	r0, [r7, #8]
 8023156:	68fb      	ldr	r3, [r7, #12]
 8023158:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023160:	461a      	mov	r2, r3
 8023162:	f000 fc41 	bl	80239e8 <dhcp_option_short>
 8023166:	4603      	mov	r3, r0
 8023168:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802316a:	8938      	ldrh	r0, [r7, #8]
 802316c:	68fb      	ldr	r3, [r7, #12]
 802316e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8023172:	2303      	movs	r3, #3
 8023174:	2237      	movs	r2, #55	@ 0x37
 8023176:	f000 fbdd 	bl	8023934 <dhcp_option>
 802317a:	4603      	mov	r3, r0
 802317c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802317e:	2300      	movs	r3, #0
 8023180:	77fb      	strb	r3, [r7, #31]
 8023182:	e00e      	b.n	80231a2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8023184:	8938      	ldrh	r0, [r7, #8]
 8023186:	68fb      	ldr	r3, [r7, #12]
 8023188:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802318c:	7ffb      	ldrb	r3, [r7, #31]
 802318e:	4a29      	ldr	r2, [pc, #164]	@ (8023234 <dhcp_discover+0x130>)
 8023190:	5cd3      	ldrb	r3, [r2, r3]
 8023192:	461a      	mov	r2, r3
 8023194:	f000 fc02 	bl	802399c <dhcp_option_byte>
 8023198:	4603      	mov	r3, r0
 802319a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802319c:	7ffb      	ldrb	r3, [r7, #31]
 802319e:	3301      	adds	r3, #1
 80231a0:	77fb      	strb	r3, [r7, #31]
 80231a2:	7ffb      	ldrb	r3, [r7, #31]
 80231a4:	2b02      	cmp	r3, #2
 80231a6:	d9ed      	bls.n	8023184 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80231a8:	8938      	ldrh	r0, [r7, #8]
 80231aa:	68fb      	ldr	r3, [r7, #12]
 80231ac:	33f0      	adds	r3, #240	@ 0xf0
 80231ae:	693a      	ldr	r2, [r7, #16]
 80231b0:	4619      	mov	r1, r3
 80231b2:	f001 f907 	bl	80243c4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80231b6:	4b20      	ldr	r3, [pc, #128]	@ (8023238 <dhcp_discover+0x134>)
 80231b8:	6818      	ldr	r0, [r3, #0]
 80231ba:	4b20      	ldr	r3, [pc, #128]	@ (802323c <dhcp_discover+0x138>)
 80231bc:	9301      	str	r3, [sp, #4]
 80231be:	687b      	ldr	r3, [r7, #4]
 80231c0:	9300      	str	r3, [sp, #0]
 80231c2:	2343      	movs	r3, #67	@ 0x43
 80231c4:	4a1e      	ldr	r2, [pc, #120]	@ (8023240 <dhcp_discover+0x13c>)
 80231c6:	6939      	ldr	r1, [r7, #16]
 80231c8:	f7ff f830 	bl	802222c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80231cc:	6938      	ldr	r0, [r7, #16]
 80231ce:	f7f8 f8c1 	bl	801b354 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80231d2:	69bb      	ldr	r3, [r7, #24]
 80231d4:	799b      	ldrb	r3, [r3, #6]
 80231d6:	2bff      	cmp	r3, #255	@ 0xff
 80231d8:	d005      	beq.n	80231e6 <dhcp_discover+0xe2>
    dhcp->tries++;
 80231da:	69bb      	ldr	r3, [r7, #24]
 80231dc:	799b      	ldrb	r3, [r3, #6]
 80231de:	3301      	adds	r3, #1
 80231e0:	b2da      	uxtb	r2, r3
 80231e2:	69bb      	ldr	r3, [r7, #24]
 80231e4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80231e6:	69bb      	ldr	r3, [r7, #24]
 80231e8:	799b      	ldrb	r3, [r3, #6]
 80231ea:	2b05      	cmp	r3, #5
 80231ec:	d80d      	bhi.n	802320a <dhcp_discover+0x106>
 80231ee:	69bb      	ldr	r3, [r7, #24]
 80231f0:	799b      	ldrb	r3, [r3, #6]
 80231f2:	461a      	mov	r2, r3
 80231f4:	2301      	movs	r3, #1
 80231f6:	4093      	lsls	r3, r2
 80231f8:	b29b      	uxth	r3, r3
 80231fa:	461a      	mov	r2, r3
 80231fc:	0152      	lsls	r2, r2, #5
 80231fe:	1ad2      	subs	r2, r2, r3
 8023200:	0092      	lsls	r2, r2, #2
 8023202:	4413      	add	r3, r2
 8023204:	00db      	lsls	r3, r3, #3
 8023206:	b29b      	uxth	r3, r3
 8023208:	e001      	b.n	802320e <dhcp_discover+0x10a>
 802320a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 802320e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8023210:	897b      	ldrh	r3, [r7, #10]
 8023212:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8023216:	4a0b      	ldr	r2, [pc, #44]	@ (8023244 <dhcp_discover+0x140>)
 8023218:	fb82 1203 	smull	r1, r2, r2, r3
 802321c:	1152      	asrs	r2, r2, #5
 802321e:	17db      	asrs	r3, r3, #31
 8023220:	1ad3      	subs	r3, r2, r3
 8023222:	b29a      	uxth	r2, r3
 8023224:	69bb      	ldr	r3, [r7, #24]
 8023226:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8023228:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802322c:	4618      	mov	r0, r3
 802322e:	3720      	adds	r7, #32
 8023230:	46bd      	mov	sp, r7
 8023232:	bd80      	pop	{r7, pc}
 8023234:	20000050 	.word	0x20000050
 8023238:	200111e8 	.word	0x200111e8
 802323c:	0802c588 	.word	0x0802c588
 8023240:	0802c58c 	.word	0x0802c58c
 8023244:	10624dd3 	.word	0x10624dd3

08023248 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8023248:	b580      	push	{r7, lr}
 802324a:	b088      	sub	sp, #32
 802324c:	af00      	add	r7, sp, #0
 802324e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	2b00      	cmp	r3, #0
 8023254:	d107      	bne.n	8023266 <dhcp_bind+0x1e>
 8023256:	4b64      	ldr	r3, [pc, #400]	@ (80233e8 <dhcp_bind+0x1a0>)
 8023258:	f240 4215 	movw	r2, #1045	@ 0x415
 802325c:	4963      	ldr	r1, [pc, #396]	@ (80233ec <dhcp_bind+0x1a4>)
 802325e:	4864      	ldr	r0, [pc, #400]	@ (80233f0 <dhcp_bind+0x1a8>)
 8023260:	f004 fa84 	bl	802776c <iprintf>
 8023264:	e0bc      	b.n	80233e0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8023266:	687b      	ldr	r3, [r7, #4]
 8023268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802326a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 802326c:	69bb      	ldr	r3, [r7, #24]
 802326e:	2b00      	cmp	r3, #0
 8023270:	d107      	bne.n	8023282 <dhcp_bind+0x3a>
 8023272:	4b5d      	ldr	r3, [pc, #372]	@ (80233e8 <dhcp_bind+0x1a0>)
 8023274:	f240 4217 	movw	r2, #1047	@ 0x417
 8023278:	495e      	ldr	r1, [pc, #376]	@ (80233f4 <dhcp_bind+0x1ac>)
 802327a:	485d      	ldr	r0, [pc, #372]	@ (80233f0 <dhcp_bind+0x1a8>)
 802327c:	f004 fa76 	bl	802776c <iprintf>
 8023280:	e0ae      	b.n	80233e0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8023282:	69bb      	ldr	r3, [r7, #24]
 8023284:	2200      	movs	r2, #0
 8023286:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8023288:	69bb      	ldr	r3, [r7, #24]
 802328a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023290:	d019      	beq.n	80232c6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8023292:	69bb      	ldr	r3, [r7, #24]
 8023294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023296:	331e      	adds	r3, #30
 8023298:	4a57      	ldr	r2, [pc, #348]	@ (80233f8 <dhcp_bind+0x1b0>)
 802329a:	fba2 2303 	umull	r2, r3, r2, r3
 802329e:	095b      	lsrs	r3, r3, #5
 80232a0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80232a2:	69fb      	ldr	r3, [r7, #28]
 80232a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80232a8:	d302      	bcc.n	80232b0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80232aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80232ae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80232b0:	69fb      	ldr	r3, [r7, #28]
 80232b2:	b29a      	uxth	r2, r3
 80232b4:	69bb      	ldr	r3, [r7, #24]
 80232b6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80232b8:	69bb      	ldr	r3, [r7, #24]
 80232ba:	8a9b      	ldrh	r3, [r3, #20]
 80232bc:	2b00      	cmp	r3, #0
 80232be:	d102      	bne.n	80232c6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80232c0:	69bb      	ldr	r3, [r7, #24]
 80232c2:	2201      	movs	r2, #1
 80232c4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80232c6:	69bb      	ldr	r3, [r7, #24]
 80232c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80232ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80232ce:	d01d      	beq.n	802330c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80232d0:	69bb      	ldr	r3, [r7, #24]
 80232d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80232d4:	331e      	adds	r3, #30
 80232d6:	4a48      	ldr	r2, [pc, #288]	@ (80233f8 <dhcp_bind+0x1b0>)
 80232d8:	fba2 2303 	umull	r2, r3, r2, r3
 80232dc:	095b      	lsrs	r3, r3, #5
 80232de:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80232e0:	69fb      	ldr	r3, [r7, #28]
 80232e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80232e6:	d302      	bcc.n	80232ee <dhcp_bind+0xa6>
      timeout = 0xffff;
 80232e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80232ec:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80232ee:	69fb      	ldr	r3, [r7, #28]
 80232f0:	b29a      	uxth	r2, r3
 80232f2:	69bb      	ldr	r3, [r7, #24]
 80232f4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80232f6:	69bb      	ldr	r3, [r7, #24]
 80232f8:	895b      	ldrh	r3, [r3, #10]
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	d102      	bne.n	8023304 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80232fe:	69bb      	ldr	r3, [r7, #24]
 8023300:	2201      	movs	r2, #1
 8023302:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8023304:	69bb      	ldr	r3, [r7, #24]
 8023306:	895a      	ldrh	r2, [r3, #10]
 8023308:	69bb      	ldr	r3, [r7, #24]
 802330a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802330c:	69bb      	ldr	r3, [r7, #24]
 802330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023314:	d01d      	beq.n	8023352 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8023316:	69bb      	ldr	r3, [r7, #24]
 8023318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802331a:	331e      	adds	r3, #30
 802331c:	4a36      	ldr	r2, [pc, #216]	@ (80233f8 <dhcp_bind+0x1b0>)
 802331e:	fba2 2303 	umull	r2, r3, r2, r3
 8023322:	095b      	lsrs	r3, r3, #5
 8023324:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8023326:	69fb      	ldr	r3, [r7, #28]
 8023328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802332c:	d302      	bcc.n	8023334 <dhcp_bind+0xec>
      timeout = 0xffff;
 802332e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023332:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8023334:	69fb      	ldr	r3, [r7, #28]
 8023336:	b29a      	uxth	r2, r3
 8023338:	69bb      	ldr	r3, [r7, #24]
 802333a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 802333c:	69bb      	ldr	r3, [r7, #24]
 802333e:	899b      	ldrh	r3, [r3, #12]
 8023340:	2b00      	cmp	r3, #0
 8023342:	d102      	bne.n	802334a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8023344:	69bb      	ldr	r3, [r7, #24]
 8023346:	2201      	movs	r2, #1
 8023348:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 802334a:	69bb      	ldr	r3, [r7, #24]
 802334c:	899a      	ldrh	r2, [r3, #12]
 802334e:	69bb      	ldr	r3, [r7, #24]
 8023350:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8023352:	69bb      	ldr	r3, [r7, #24]
 8023354:	895a      	ldrh	r2, [r3, #10]
 8023356:	69bb      	ldr	r3, [r7, #24]
 8023358:	899b      	ldrh	r3, [r3, #12]
 802335a:	429a      	cmp	r2, r3
 802335c:	d306      	bcc.n	802336c <dhcp_bind+0x124>
 802335e:	69bb      	ldr	r3, [r7, #24]
 8023360:	899b      	ldrh	r3, [r3, #12]
 8023362:	2b00      	cmp	r3, #0
 8023364:	d002      	beq.n	802336c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8023366:	69bb      	ldr	r3, [r7, #24]
 8023368:	2200      	movs	r2, #0
 802336a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 802336c:	69bb      	ldr	r3, [r7, #24]
 802336e:	79db      	ldrb	r3, [r3, #7]
 8023370:	2b00      	cmp	r3, #0
 8023372:	d003      	beq.n	802337c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8023374:	69bb      	ldr	r3, [r7, #24]
 8023376:	6a1b      	ldr	r3, [r3, #32]
 8023378:	613b      	str	r3, [r7, #16]
 802337a:	e014      	b.n	80233a6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 802337c:	69bb      	ldr	r3, [r7, #24]
 802337e:	331c      	adds	r3, #28
 8023380:	781b      	ldrb	r3, [r3, #0]
 8023382:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8023384:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8023388:	2b00      	cmp	r3, #0
 802338a:	db02      	blt.n	8023392 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 802338c:	23ff      	movs	r3, #255	@ 0xff
 802338e:	613b      	str	r3, [r7, #16]
 8023390:	e009      	b.n	80233a6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8023392:	7dfb      	ldrb	r3, [r7, #23]
 8023394:	2bbf      	cmp	r3, #191	@ 0xbf
 8023396:	d903      	bls.n	80233a0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8023398:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 802339c:	613b      	str	r3, [r7, #16]
 802339e:	e002      	b.n	80233a6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80233a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80233a4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80233a6:	69bb      	ldr	r3, [r7, #24]
 80233a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80233aa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80233ac:	68fb      	ldr	r3, [r7, #12]
 80233ae:	2b00      	cmp	r3, #0
 80233b0:	d108      	bne.n	80233c4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80233b2:	69bb      	ldr	r3, [r7, #24]
 80233b4:	69da      	ldr	r2, [r3, #28]
 80233b6:	693b      	ldr	r3, [r7, #16]
 80233b8:	4013      	ands	r3, r2
 80233ba:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80233bc:	68fb      	ldr	r3, [r7, #12]
 80233be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80233c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80233c4:	210a      	movs	r1, #10
 80233c6:	69b8      	ldr	r0, [r7, #24]
 80233c8:	f000 fa9a 	bl	8023900 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80233cc:	69bb      	ldr	r3, [r7, #24]
 80233ce:	f103 011c 	add.w	r1, r3, #28
 80233d2:	f107 030c 	add.w	r3, r7, #12
 80233d6:	f107 0210 	add.w	r2, r7, #16
 80233da:	6878      	ldr	r0, [r7, #4]
 80233dc:	f7f7 fa7a 	bl	801a8d4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80233e0:	3720      	adds	r7, #32
 80233e2:	46bd      	mov	sp, r7
 80233e4:	bd80      	pop	{r7, pc}
 80233e6:	bf00      	nop
 80233e8:	0802b984 	.word	0x0802b984
 80233ec:	0802bae4 	.word	0x0802bae4
 80233f0:	0802b9e4 	.word	0x0802b9e4
 80233f4:	0802bb00 	.word	0x0802bb00
 80233f8:	88888889 	.word	0x88888889

080233fc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80233fc:	b580      	push	{r7, lr}
 80233fe:	b08a      	sub	sp, #40	@ 0x28
 8023400:	af02      	add	r7, sp, #8
 8023402:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023408:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 802340a:	2105      	movs	r1, #5
 802340c:	69b8      	ldr	r0, [r7, #24]
 802340e:	f000 fa77 	bl	8023900 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8023412:	f107 030c 	add.w	r3, r7, #12
 8023416:	2203      	movs	r2, #3
 8023418:	69b9      	ldr	r1, [r7, #24]
 802341a:	6878      	ldr	r0, [r7, #4]
 802341c:	f000 fefc 	bl	8024218 <dhcp_create_msg>
 8023420:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8023422:	697b      	ldr	r3, [r7, #20]
 8023424:	2b00      	cmp	r3, #0
 8023426:	d04e      	beq.n	80234c6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8023428:	697b      	ldr	r3, [r7, #20]
 802342a:	685b      	ldr	r3, [r3, #4]
 802342c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802342e:	89b8      	ldrh	r0, [r7, #12]
 8023430:	693b      	ldr	r3, [r7, #16]
 8023432:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8023436:	2302      	movs	r3, #2
 8023438:	2239      	movs	r2, #57	@ 0x39
 802343a:	f000 fa7b 	bl	8023934 <dhcp_option>
 802343e:	4603      	mov	r3, r0
 8023440:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8023442:	89b8      	ldrh	r0, [r7, #12]
 8023444:	693b      	ldr	r3, [r7, #16]
 8023446:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802344e:	461a      	mov	r2, r3
 8023450:	f000 faca 	bl	80239e8 <dhcp_option_short>
 8023454:	4603      	mov	r3, r0
 8023456:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8023458:	89b8      	ldrh	r0, [r7, #12]
 802345a:	693b      	ldr	r3, [r7, #16]
 802345c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8023460:	2303      	movs	r3, #3
 8023462:	2237      	movs	r2, #55	@ 0x37
 8023464:	f000 fa66 	bl	8023934 <dhcp_option>
 8023468:	4603      	mov	r3, r0
 802346a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802346c:	2300      	movs	r3, #0
 802346e:	77bb      	strb	r3, [r7, #30]
 8023470:	e00e      	b.n	8023490 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8023472:	89b8      	ldrh	r0, [r7, #12]
 8023474:	693b      	ldr	r3, [r7, #16]
 8023476:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802347a:	7fbb      	ldrb	r3, [r7, #30]
 802347c:	4a29      	ldr	r2, [pc, #164]	@ (8023524 <dhcp_renew+0x128>)
 802347e:	5cd3      	ldrb	r3, [r2, r3]
 8023480:	461a      	mov	r2, r3
 8023482:	f000 fa8b 	bl	802399c <dhcp_option_byte>
 8023486:	4603      	mov	r3, r0
 8023488:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802348a:	7fbb      	ldrb	r3, [r7, #30]
 802348c:	3301      	adds	r3, #1
 802348e:	77bb      	strb	r3, [r7, #30]
 8023490:	7fbb      	ldrb	r3, [r7, #30]
 8023492:	2b02      	cmp	r3, #2
 8023494:	d9ed      	bls.n	8023472 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8023496:	89b8      	ldrh	r0, [r7, #12]
 8023498:	693b      	ldr	r3, [r7, #16]
 802349a:	33f0      	adds	r3, #240	@ 0xf0
 802349c:	697a      	ldr	r2, [r7, #20]
 802349e:	4619      	mov	r1, r3
 80234a0:	f000 ff90 	bl	80243c4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80234a4:	4b20      	ldr	r3, [pc, #128]	@ (8023528 <dhcp_renew+0x12c>)
 80234a6:	6818      	ldr	r0, [r3, #0]
 80234a8:	69bb      	ldr	r3, [r7, #24]
 80234aa:	f103 0218 	add.w	r2, r3, #24
 80234ae:	687b      	ldr	r3, [r7, #4]
 80234b0:	9300      	str	r3, [sp, #0]
 80234b2:	2343      	movs	r3, #67	@ 0x43
 80234b4:	6979      	ldr	r1, [r7, #20]
 80234b6:	f7fe fe45 	bl	8022144 <udp_sendto_if>
 80234ba:	4603      	mov	r3, r0
 80234bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80234be:	6978      	ldr	r0, [r7, #20]
 80234c0:	f7f7 ff48 	bl	801b354 <pbuf_free>
 80234c4:	e001      	b.n	80234ca <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80234c6:	23ff      	movs	r3, #255	@ 0xff
 80234c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80234ca:	69bb      	ldr	r3, [r7, #24]
 80234cc:	799b      	ldrb	r3, [r3, #6]
 80234ce:	2bff      	cmp	r3, #255	@ 0xff
 80234d0:	d005      	beq.n	80234de <dhcp_renew+0xe2>
    dhcp->tries++;
 80234d2:	69bb      	ldr	r3, [r7, #24]
 80234d4:	799b      	ldrb	r3, [r3, #6]
 80234d6:	3301      	adds	r3, #1
 80234d8:	b2da      	uxtb	r2, r3
 80234da:	69bb      	ldr	r3, [r7, #24]
 80234dc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80234de:	69bb      	ldr	r3, [r7, #24]
 80234e0:	799b      	ldrb	r3, [r3, #6]
 80234e2:	2b09      	cmp	r3, #9
 80234e4:	d809      	bhi.n	80234fa <dhcp_renew+0xfe>
 80234e6:	69bb      	ldr	r3, [r7, #24]
 80234e8:	799b      	ldrb	r3, [r3, #6]
 80234ea:	461a      	mov	r2, r3
 80234ec:	0152      	lsls	r2, r2, #5
 80234ee:	1ad2      	subs	r2, r2, r3
 80234f0:	0092      	lsls	r2, r2, #2
 80234f2:	4413      	add	r3, r2
 80234f4:	011b      	lsls	r3, r3, #4
 80234f6:	b29b      	uxth	r3, r3
 80234f8:	e001      	b.n	80234fe <dhcp_renew+0x102>
 80234fa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80234fe:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8023500:	89fb      	ldrh	r3, [r7, #14]
 8023502:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8023506:	4a09      	ldr	r2, [pc, #36]	@ (802352c <dhcp_renew+0x130>)
 8023508:	fb82 1203 	smull	r1, r2, r2, r3
 802350c:	1152      	asrs	r2, r2, #5
 802350e:	17db      	asrs	r3, r3, #31
 8023510:	1ad3      	subs	r3, r2, r3
 8023512:	b29a      	uxth	r2, r3
 8023514:	69bb      	ldr	r3, [r7, #24]
 8023516:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8023518:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 802351c:	4618      	mov	r0, r3
 802351e:	3720      	adds	r7, #32
 8023520:	46bd      	mov	sp, r7
 8023522:	bd80      	pop	{r7, pc}
 8023524:	20000050 	.word	0x20000050
 8023528:	200111e8 	.word	0x200111e8
 802352c:	10624dd3 	.word	0x10624dd3

08023530 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8023530:	b580      	push	{r7, lr}
 8023532:	b08a      	sub	sp, #40	@ 0x28
 8023534:	af02      	add	r7, sp, #8
 8023536:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802353c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 802353e:	2104      	movs	r1, #4
 8023540:	69b8      	ldr	r0, [r7, #24]
 8023542:	f000 f9dd 	bl	8023900 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8023546:	f107 030c 	add.w	r3, r7, #12
 802354a:	2203      	movs	r2, #3
 802354c:	69b9      	ldr	r1, [r7, #24]
 802354e:	6878      	ldr	r0, [r7, #4]
 8023550:	f000 fe62 	bl	8024218 <dhcp_create_msg>
 8023554:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8023556:	697b      	ldr	r3, [r7, #20]
 8023558:	2b00      	cmp	r3, #0
 802355a:	d04c      	beq.n	80235f6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 802355c:	697b      	ldr	r3, [r7, #20]
 802355e:	685b      	ldr	r3, [r3, #4]
 8023560:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8023562:	89b8      	ldrh	r0, [r7, #12]
 8023564:	693b      	ldr	r3, [r7, #16]
 8023566:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802356a:	2302      	movs	r3, #2
 802356c:	2239      	movs	r2, #57	@ 0x39
 802356e:	f000 f9e1 	bl	8023934 <dhcp_option>
 8023572:	4603      	mov	r3, r0
 8023574:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8023576:	89b8      	ldrh	r0, [r7, #12]
 8023578:	693b      	ldr	r3, [r7, #16]
 802357a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8023582:	461a      	mov	r2, r3
 8023584:	f000 fa30 	bl	80239e8 <dhcp_option_short>
 8023588:	4603      	mov	r3, r0
 802358a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802358c:	89b8      	ldrh	r0, [r7, #12]
 802358e:	693b      	ldr	r3, [r7, #16]
 8023590:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8023594:	2303      	movs	r3, #3
 8023596:	2237      	movs	r2, #55	@ 0x37
 8023598:	f000 f9cc 	bl	8023934 <dhcp_option>
 802359c:	4603      	mov	r3, r0
 802359e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80235a0:	2300      	movs	r3, #0
 80235a2:	77bb      	strb	r3, [r7, #30]
 80235a4:	e00e      	b.n	80235c4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80235a6:	89b8      	ldrh	r0, [r7, #12]
 80235a8:	693b      	ldr	r3, [r7, #16]
 80235aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80235ae:	7fbb      	ldrb	r3, [r7, #30]
 80235b0:	4a28      	ldr	r2, [pc, #160]	@ (8023654 <dhcp_rebind+0x124>)
 80235b2:	5cd3      	ldrb	r3, [r2, r3]
 80235b4:	461a      	mov	r2, r3
 80235b6:	f000 f9f1 	bl	802399c <dhcp_option_byte>
 80235ba:	4603      	mov	r3, r0
 80235bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80235be:	7fbb      	ldrb	r3, [r7, #30]
 80235c0:	3301      	adds	r3, #1
 80235c2:	77bb      	strb	r3, [r7, #30]
 80235c4:	7fbb      	ldrb	r3, [r7, #30]
 80235c6:	2b02      	cmp	r3, #2
 80235c8:	d9ed      	bls.n	80235a6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80235ca:	89b8      	ldrh	r0, [r7, #12]
 80235cc:	693b      	ldr	r3, [r7, #16]
 80235ce:	33f0      	adds	r3, #240	@ 0xf0
 80235d0:	697a      	ldr	r2, [r7, #20]
 80235d2:	4619      	mov	r1, r3
 80235d4:	f000 fef6 	bl	80243c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80235d8:	4b1f      	ldr	r3, [pc, #124]	@ (8023658 <dhcp_rebind+0x128>)
 80235da:	6818      	ldr	r0, [r3, #0]
 80235dc:	687b      	ldr	r3, [r7, #4]
 80235de:	9300      	str	r3, [sp, #0]
 80235e0:	2343      	movs	r3, #67	@ 0x43
 80235e2:	4a1e      	ldr	r2, [pc, #120]	@ (802365c <dhcp_rebind+0x12c>)
 80235e4:	6979      	ldr	r1, [r7, #20]
 80235e6:	f7fe fdad 	bl	8022144 <udp_sendto_if>
 80235ea:	4603      	mov	r3, r0
 80235ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80235ee:	6978      	ldr	r0, [r7, #20]
 80235f0:	f7f7 feb0 	bl	801b354 <pbuf_free>
 80235f4:	e001      	b.n	80235fa <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80235f6:	23ff      	movs	r3, #255	@ 0xff
 80235f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80235fa:	69bb      	ldr	r3, [r7, #24]
 80235fc:	799b      	ldrb	r3, [r3, #6]
 80235fe:	2bff      	cmp	r3, #255	@ 0xff
 8023600:	d005      	beq.n	802360e <dhcp_rebind+0xde>
    dhcp->tries++;
 8023602:	69bb      	ldr	r3, [r7, #24]
 8023604:	799b      	ldrb	r3, [r3, #6]
 8023606:	3301      	adds	r3, #1
 8023608:	b2da      	uxtb	r2, r3
 802360a:	69bb      	ldr	r3, [r7, #24]
 802360c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802360e:	69bb      	ldr	r3, [r7, #24]
 8023610:	799b      	ldrb	r3, [r3, #6]
 8023612:	2b09      	cmp	r3, #9
 8023614:	d809      	bhi.n	802362a <dhcp_rebind+0xfa>
 8023616:	69bb      	ldr	r3, [r7, #24]
 8023618:	799b      	ldrb	r3, [r3, #6]
 802361a:	461a      	mov	r2, r3
 802361c:	0152      	lsls	r2, r2, #5
 802361e:	1ad2      	subs	r2, r2, r3
 8023620:	0092      	lsls	r2, r2, #2
 8023622:	4413      	add	r3, r2
 8023624:	00db      	lsls	r3, r3, #3
 8023626:	b29b      	uxth	r3, r3
 8023628:	e001      	b.n	802362e <dhcp_rebind+0xfe>
 802362a:	f242 7310 	movw	r3, #10000	@ 0x2710
 802362e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8023630:	89fb      	ldrh	r3, [r7, #14]
 8023632:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8023636:	4a0a      	ldr	r2, [pc, #40]	@ (8023660 <dhcp_rebind+0x130>)
 8023638:	fb82 1203 	smull	r1, r2, r2, r3
 802363c:	1152      	asrs	r2, r2, #5
 802363e:	17db      	asrs	r3, r3, #31
 8023640:	1ad3      	subs	r3, r2, r3
 8023642:	b29a      	uxth	r2, r3
 8023644:	69bb      	ldr	r3, [r7, #24]
 8023646:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8023648:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 802364c:	4618      	mov	r0, r3
 802364e:	3720      	adds	r7, #32
 8023650:	46bd      	mov	sp, r7
 8023652:	bd80      	pop	{r7, pc}
 8023654:	20000050 	.word	0x20000050
 8023658:	200111e8 	.word	0x200111e8
 802365c:	0802c58c 	.word	0x0802c58c
 8023660:	10624dd3 	.word	0x10624dd3

08023664 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8023664:	b5b0      	push	{r4, r5, r7, lr}
 8023666:	b08a      	sub	sp, #40	@ 0x28
 8023668:	af02      	add	r7, sp, #8
 802366a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802366c:	687b      	ldr	r3, [r7, #4]
 802366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023670:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8023672:	2103      	movs	r1, #3
 8023674:	69b8      	ldr	r0, [r7, #24]
 8023676:	f000 f943 	bl	8023900 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802367a:	f107 030c 	add.w	r3, r7, #12
 802367e:	2203      	movs	r2, #3
 8023680:	69b9      	ldr	r1, [r7, #24]
 8023682:	6878      	ldr	r0, [r7, #4]
 8023684:	f000 fdc8 	bl	8024218 <dhcp_create_msg>
 8023688:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 802368a:	697b      	ldr	r3, [r7, #20]
 802368c:	2b00      	cmp	r3, #0
 802368e:	d066      	beq.n	802375e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8023690:	697b      	ldr	r3, [r7, #20]
 8023692:	685b      	ldr	r3, [r3, #4]
 8023694:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8023696:	89b8      	ldrh	r0, [r7, #12]
 8023698:	693b      	ldr	r3, [r7, #16]
 802369a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802369e:	2302      	movs	r3, #2
 80236a0:	2239      	movs	r2, #57	@ 0x39
 80236a2:	f000 f947 	bl	8023934 <dhcp_option>
 80236a6:	4603      	mov	r3, r0
 80236a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80236aa:	89b8      	ldrh	r0, [r7, #12]
 80236ac:	693b      	ldr	r3, [r7, #16]
 80236ae:	33f0      	adds	r3, #240	@ 0xf0
 80236b0:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80236b4:	4619      	mov	r1, r3
 80236b6:	f000 f997 	bl	80239e8 <dhcp_option_short>
 80236ba:	4603      	mov	r3, r0
 80236bc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80236be:	89b8      	ldrh	r0, [r7, #12]
 80236c0:	693b      	ldr	r3, [r7, #16]
 80236c2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80236c6:	2304      	movs	r3, #4
 80236c8:	2232      	movs	r2, #50	@ 0x32
 80236ca:	f000 f933 	bl	8023934 <dhcp_option>
 80236ce:	4603      	mov	r3, r0
 80236d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80236d2:	89bc      	ldrh	r4, [r7, #12]
 80236d4:	693b      	ldr	r3, [r7, #16]
 80236d6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80236da:	69bb      	ldr	r3, [r7, #24]
 80236dc:	69db      	ldr	r3, [r3, #28]
 80236de:	4618      	mov	r0, r3
 80236e0:	f7f6 fa1d 	bl	8019b1e <lwip_htonl>
 80236e4:	4603      	mov	r3, r0
 80236e6:	461a      	mov	r2, r3
 80236e8:	4629      	mov	r1, r5
 80236ea:	4620      	mov	r0, r4
 80236ec:	f000 f9ae 	bl	8023a4c <dhcp_option_long>
 80236f0:	4603      	mov	r3, r0
 80236f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80236f4:	89b8      	ldrh	r0, [r7, #12]
 80236f6:	693b      	ldr	r3, [r7, #16]
 80236f8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80236fc:	2303      	movs	r3, #3
 80236fe:	2237      	movs	r2, #55	@ 0x37
 8023700:	f000 f918 	bl	8023934 <dhcp_option>
 8023704:	4603      	mov	r3, r0
 8023706:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8023708:	2300      	movs	r3, #0
 802370a:	77bb      	strb	r3, [r7, #30]
 802370c:	e00e      	b.n	802372c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802370e:	89b8      	ldrh	r0, [r7, #12]
 8023710:	693b      	ldr	r3, [r7, #16]
 8023712:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8023716:	7fbb      	ldrb	r3, [r7, #30]
 8023718:	4a28      	ldr	r2, [pc, #160]	@ (80237bc <dhcp_reboot+0x158>)
 802371a:	5cd3      	ldrb	r3, [r2, r3]
 802371c:	461a      	mov	r2, r3
 802371e:	f000 f93d 	bl	802399c <dhcp_option_byte>
 8023722:	4603      	mov	r3, r0
 8023724:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8023726:	7fbb      	ldrb	r3, [r7, #30]
 8023728:	3301      	adds	r3, #1
 802372a:	77bb      	strb	r3, [r7, #30]
 802372c:	7fbb      	ldrb	r3, [r7, #30]
 802372e:	2b02      	cmp	r3, #2
 8023730:	d9ed      	bls.n	802370e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8023732:	89b8      	ldrh	r0, [r7, #12]
 8023734:	693b      	ldr	r3, [r7, #16]
 8023736:	33f0      	adds	r3, #240	@ 0xf0
 8023738:	697a      	ldr	r2, [r7, #20]
 802373a:	4619      	mov	r1, r3
 802373c:	f000 fe42 	bl	80243c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8023740:	4b1f      	ldr	r3, [pc, #124]	@ (80237c0 <dhcp_reboot+0x15c>)
 8023742:	6818      	ldr	r0, [r3, #0]
 8023744:	687b      	ldr	r3, [r7, #4]
 8023746:	9300      	str	r3, [sp, #0]
 8023748:	2343      	movs	r3, #67	@ 0x43
 802374a:	4a1e      	ldr	r2, [pc, #120]	@ (80237c4 <dhcp_reboot+0x160>)
 802374c:	6979      	ldr	r1, [r7, #20]
 802374e:	f7fe fcf9 	bl	8022144 <udp_sendto_if>
 8023752:	4603      	mov	r3, r0
 8023754:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8023756:	6978      	ldr	r0, [r7, #20]
 8023758:	f7f7 fdfc 	bl	801b354 <pbuf_free>
 802375c:	e001      	b.n	8023762 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 802375e:	23ff      	movs	r3, #255	@ 0xff
 8023760:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8023762:	69bb      	ldr	r3, [r7, #24]
 8023764:	799b      	ldrb	r3, [r3, #6]
 8023766:	2bff      	cmp	r3, #255	@ 0xff
 8023768:	d005      	beq.n	8023776 <dhcp_reboot+0x112>
    dhcp->tries++;
 802376a:	69bb      	ldr	r3, [r7, #24]
 802376c:	799b      	ldrb	r3, [r3, #6]
 802376e:	3301      	adds	r3, #1
 8023770:	b2da      	uxtb	r2, r3
 8023772:	69bb      	ldr	r3, [r7, #24]
 8023774:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8023776:	69bb      	ldr	r3, [r7, #24]
 8023778:	799b      	ldrb	r3, [r3, #6]
 802377a:	2b09      	cmp	r3, #9
 802377c:	d809      	bhi.n	8023792 <dhcp_reboot+0x12e>
 802377e:	69bb      	ldr	r3, [r7, #24]
 8023780:	799b      	ldrb	r3, [r3, #6]
 8023782:	461a      	mov	r2, r3
 8023784:	0152      	lsls	r2, r2, #5
 8023786:	1ad2      	subs	r2, r2, r3
 8023788:	0092      	lsls	r2, r2, #2
 802378a:	4413      	add	r3, r2
 802378c:	00db      	lsls	r3, r3, #3
 802378e:	b29b      	uxth	r3, r3
 8023790:	e001      	b.n	8023796 <dhcp_reboot+0x132>
 8023792:	f242 7310 	movw	r3, #10000	@ 0x2710
 8023796:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8023798:	89fb      	ldrh	r3, [r7, #14]
 802379a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 802379e:	4a0a      	ldr	r2, [pc, #40]	@ (80237c8 <dhcp_reboot+0x164>)
 80237a0:	fb82 1203 	smull	r1, r2, r2, r3
 80237a4:	1152      	asrs	r2, r2, #5
 80237a6:	17db      	asrs	r3, r3, #31
 80237a8:	1ad3      	subs	r3, r2, r3
 80237aa:	b29a      	uxth	r2, r3
 80237ac:	69bb      	ldr	r3, [r7, #24]
 80237ae:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80237b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80237b4:	4618      	mov	r0, r3
 80237b6:	3720      	adds	r7, #32
 80237b8:	46bd      	mov	sp, r7
 80237ba:	bdb0      	pop	{r4, r5, r7, pc}
 80237bc:	20000050 	.word	0x20000050
 80237c0:	200111e8 	.word	0x200111e8
 80237c4:	0802c58c 	.word	0x0802c58c
 80237c8:	10624dd3 	.word	0x10624dd3

080237cc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80237cc:	b5b0      	push	{r4, r5, r7, lr}
 80237ce:	b08a      	sub	sp, #40	@ 0x28
 80237d0:	af02      	add	r7, sp, #8
 80237d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80237d4:	687b      	ldr	r3, [r7, #4]
 80237d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80237d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80237da:	69fb      	ldr	r3, [r7, #28]
 80237dc:	2b00      	cmp	r3, #0
 80237de:	f000 8084 	beq.w	80238ea <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80237e2:	69fb      	ldr	r3, [r7, #28]
 80237e4:	795b      	ldrb	r3, [r3, #5]
 80237e6:	2b00      	cmp	r3, #0
 80237e8:	f000 8081 	beq.w	80238ee <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80237ec:	69fb      	ldr	r3, [r7, #28]
 80237ee:	699b      	ldr	r3, [r3, #24]
 80237f0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80237f2:	69fb      	ldr	r3, [r7, #28]
 80237f4:	2200      	movs	r2, #0
 80237f6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80237f8:	69fb      	ldr	r3, [r7, #28]
 80237fa:	2200      	movs	r2, #0
 80237fc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80237fe:	69fb      	ldr	r3, [r7, #28]
 8023800:	2200      	movs	r2, #0
 8023802:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8023804:	69fb      	ldr	r3, [r7, #28]
 8023806:	2200      	movs	r2, #0
 8023808:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802380a:	69fb      	ldr	r3, [r7, #28]
 802380c:	2200      	movs	r2, #0
 802380e:	631a      	str	r2, [r3, #48]	@ 0x30
 8023810:	69fb      	ldr	r3, [r7, #28]
 8023812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8023814:	69fb      	ldr	r3, [r7, #28]
 8023816:	62da      	str	r2, [r3, #44]	@ 0x2c
 8023818:	69fb      	ldr	r3, [r7, #28]
 802381a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802381c:	69fb      	ldr	r3, [r7, #28]
 802381e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8023820:	69fb      	ldr	r3, [r7, #28]
 8023822:	2200      	movs	r2, #0
 8023824:	829a      	strh	r2, [r3, #20]
 8023826:	69fb      	ldr	r3, [r7, #28]
 8023828:	8a9a      	ldrh	r2, [r3, #20]
 802382a:	69fb      	ldr	r3, [r7, #28]
 802382c:	825a      	strh	r2, [r3, #18]
 802382e:	69fb      	ldr	r3, [r7, #28]
 8023830:	8a5a      	ldrh	r2, [r3, #18]
 8023832:	69fb      	ldr	r3, [r7, #28]
 8023834:	821a      	strh	r2, [r3, #16]
 8023836:	69fb      	ldr	r3, [r7, #28]
 8023838:	8a1a      	ldrh	r2, [r3, #16]
 802383a:	69fb      	ldr	r3, [r7, #28]
 802383c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 802383e:	6878      	ldr	r0, [r7, #4]
 8023840:	f000 fdee 	bl	8024420 <dhcp_supplied_address>
 8023844:	4603      	mov	r3, r0
 8023846:	2b00      	cmp	r3, #0
 8023848:	d03b      	beq.n	80238c2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 802384a:	f107 030e 	add.w	r3, r7, #14
 802384e:	2207      	movs	r2, #7
 8023850:	69f9      	ldr	r1, [r7, #28]
 8023852:	6878      	ldr	r0, [r7, #4]
 8023854:	f000 fce0 	bl	8024218 <dhcp_create_msg>
 8023858:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 802385a:	69bb      	ldr	r3, [r7, #24]
 802385c:	2b00      	cmp	r3, #0
 802385e:	d030      	beq.n	80238c2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8023860:	69bb      	ldr	r3, [r7, #24]
 8023862:	685b      	ldr	r3, [r3, #4]
 8023864:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8023866:	89f8      	ldrh	r0, [r7, #14]
 8023868:	697b      	ldr	r3, [r7, #20]
 802386a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 802386e:	2304      	movs	r3, #4
 8023870:	2236      	movs	r2, #54	@ 0x36
 8023872:	f000 f85f 	bl	8023934 <dhcp_option>
 8023876:	4603      	mov	r3, r0
 8023878:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 802387a:	89fc      	ldrh	r4, [r7, #14]
 802387c:	697b      	ldr	r3, [r7, #20]
 802387e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8023882:	693b      	ldr	r3, [r7, #16]
 8023884:	4618      	mov	r0, r3
 8023886:	f7f6 f94a 	bl	8019b1e <lwip_htonl>
 802388a:	4603      	mov	r3, r0
 802388c:	461a      	mov	r2, r3
 802388e:	4629      	mov	r1, r5
 8023890:	4620      	mov	r0, r4
 8023892:	f000 f8db 	bl	8023a4c <dhcp_option_long>
 8023896:	4603      	mov	r3, r0
 8023898:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 802389a:	89f8      	ldrh	r0, [r7, #14]
 802389c:	697b      	ldr	r3, [r7, #20]
 802389e:	33f0      	adds	r3, #240	@ 0xf0
 80238a0:	69ba      	ldr	r2, [r7, #24]
 80238a2:	4619      	mov	r1, r3
 80238a4:	f000 fd8e 	bl	80243c4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80238a8:	4b13      	ldr	r3, [pc, #76]	@ (80238f8 <dhcp_release_and_stop+0x12c>)
 80238aa:	6818      	ldr	r0, [r3, #0]
 80238ac:	f107 0210 	add.w	r2, r7, #16
 80238b0:	687b      	ldr	r3, [r7, #4]
 80238b2:	9300      	str	r3, [sp, #0]
 80238b4:	2343      	movs	r3, #67	@ 0x43
 80238b6:	69b9      	ldr	r1, [r7, #24]
 80238b8:	f7fe fc44 	bl	8022144 <udp_sendto_if>
      pbuf_free(p_out);
 80238bc:	69b8      	ldr	r0, [r7, #24]
 80238be:	f7f7 fd49 	bl	801b354 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80238c2:	4b0e      	ldr	r3, [pc, #56]	@ (80238fc <dhcp_release_and_stop+0x130>)
 80238c4:	4a0d      	ldr	r2, [pc, #52]	@ (80238fc <dhcp_release_and_stop+0x130>)
 80238c6:	490d      	ldr	r1, [pc, #52]	@ (80238fc <dhcp_release_and_stop+0x130>)
 80238c8:	6878      	ldr	r0, [r7, #4]
 80238ca:	f7f7 f803 	bl	801a8d4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80238ce:	2100      	movs	r1, #0
 80238d0:	69f8      	ldr	r0, [r7, #28]
 80238d2:	f000 f815 	bl	8023900 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80238d6:	69fb      	ldr	r3, [r7, #28]
 80238d8:	791b      	ldrb	r3, [r3, #4]
 80238da:	2b00      	cmp	r3, #0
 80238dc:	d008      	beq.n	80238f0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80238de:	f7fe ff89 	bl	80227f4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80238e2:	69fb      	ldr	r3, [r7, #28]
 80238e4:	2200      	movs	r2, #0
 80238e6:	711a      	strb	r2, [r3, #4]
 80238e8:	e002      	b.n	80238f0 <dhcp_release_and_stop+0x124>
    return;
 80238ea:	bf00      	nop
 80238ec:	e000      	b.n	80238f0 <dhcp_release_and_stop+0x124>
    return;
 80238ee:	bf00      	nop
  }
}
 80238f0:	3720      	adds	r7, #32
 80238f2:	46bd      	mov	sp, r7
 80238f4:	bdb0      	pop	{r4, r5, r7, pc}
 80238f6:	bf00      	nop
 80238f8:	200111e8 	.word	0x200111e8
 80238fc:	0802c588 	.word	0x0802c588

08023900 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8023900:	b480      	push	{r7}
 8023902:	b083      	sub	sp, #12
 8023904:	af00      	add	r7, sp, #0
 8023906:	6078      	str	r0, [r7, #4]
 8023908:	460b      	mov	r3, r1
 802390a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 802390c:	687b      	ldr	r3, [r7, #4]
 802390e:	795b      	ldrb	r3, [r3, #5]
 8023910:	78fa      	ldrb	r2, [r7, #3]
 8023912:	429a      	cmp	r2, r3
 8023914:	d008      	beq.n	8023928 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	78fa      	ldrb	r2, [r7, #3]
 802391a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 802391c:	687b      	ldr	r3, [r7, #4]
 802391e:	2200      	movs	r2, #0
 8023920:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	2200      	movs	r2, #0
 8023926:	811a      	strh	r2, [r3, #8]
  }
}
 8023928:	bf00      	nop
 802392a:	370c      	adds	r7, #12
 802392c:	46bd      	mov	sp, r7
 802392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023932:	4770      	bx	lr

08023934 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8023934:	b580      	push	{r7, lr}
 8023936:	b082      	sub	sp, #8
 8023938:	af00      	add	r7, sp, #0
 802393a:	6039      	str	r1, [r7, #0]
 802393c:	4611      	mov	r1, r2
 802393e:	461a      	mov	r2, r3
 8023940:	4603      	mov	r3, r0
 8023942:	80fb      	strh	r3, [r7, #6]
 8023944:	460b      	mov	r3, r1
 8023946:	717b      	strb	r3, [r7, #5]
 8023948:	4613      	mov	r3, r2
 802394a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802394c:	88fa      	ldrh	r2, [r7, #6]
 802394e:	793b      	ldrb	r3, [r7, #4]
 8023950:	4413      	add	r3, r2
 8023952:	3302      	adds	r3, #2
 8023954:	2b44      	cmp	r3, #68	@ 0x44
 8023956:	d906      	bls.n	8023966 <dhcp_option+0x32>
 8023958:	4b0d      	ldr	r3, [pc, #52]	@ (8023990 <dhcp_option+0x5c>)
 802395a:	f240 529a 	movw	r2, #1434	@ 0x59a
 802395e:	490d      	ldr	r1, [pc, #52]	@ (8023994 <dhcp_option+0x60>)
 8023960:	480d      	ldr	r0, [pc, #52]	@ (8023998 <dhcp_option+0x64>)
 8023962:	f003 ff03 	bl	802776c <iprintf>
  options[options_out_len++] = option_type;
 8023966:	88fb      	ldrh	r3, [r7, #6]
 8023968:	1c5a      	adds	r2, r3, #1
 802396a:	80fa      	strh	r2, [r7, #6]
 802396c:	461a      	mov	r2, r3
 802396e:	683b      	ldr	r3, [r7, #0]
 8023970:	4413      	add	r3, r2
 8023972:	797a      	ldrb	r2, [r7, #5]
 8023974:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8023976:	88fb      	ldrh	r3, [r7, #6]
 8023978:	1c5a      	adds	r2, r3, #1
 802397a:	80fa      	strh	r2, [r7, #6]
 802397c:	461a      	mov	r2, r3
 802397e:	683b      	ldr	r3, [r7, #0]
 8023980:	4413      	add	r3, r2
 8023982:	793a      	ldrb	r2, [r7, #4]
 8023984:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8023986:	88fb      	ldrh	r3, [r7, #6]
}
 8023988:	4618      	mov	r0, r3
 802398a:	3708      	adds	r7, #8
 802398c:	46bd      	mov	sp, r7
 802398e:	bd80      	pop	{r7, pc}
 8023990:	0802b984 	.word	0x0802b984
 8023994:	0802bb18 	.word	0x0802bb18
 8023998:	0802b9e4 	.word	0x0802b9e4

0802399c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 802399c:	b580      	push	{r7, lr}
 802399e:	b082      	sub	sp, #8
 80239a0:	af00      	add	r7, sp, #0
 80239a2:	4603      	mov	r3, r0
 80239a4:	6039      	str	r1, [r7, #0]
 80239a6:	80fb      	strh	r3, [r7, #6]
 80239a8:	4613      	mov	r3, r2
 80239aa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80239ac:	88fb      	ldrh	r3, [r7, #6]
 80239ae:	2b43      	cmp	r3, #67	@ 0x43
 80239b0:	d906      	bls.n	80239c0 <dhcp_option_byte+0x24>
 80239b2:	4b0a      	ldr	r3, [pc, #40]	@ (80239dc <dhcp_option_byte+0x40>)
 80239b4:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 80239b8:	4909      	ldr	r1, [pc, #36]	@ (80239e0 <dhcp_option_byte+0x44>)
 80239ba:	480a      	ldr	r0, [pc, #40]	@ (80239e4 <dhcp_option_byte+0x48>)
 80239bc:	f003 fed6 	bl	802776c <iprintf>
  options[options_out_len++] = value;
 80239c0:	88fb      	ldrh	r3, [r7, #6]
 80239c2:	1c5a      	adds	r2, r3, #1
 80239c4:	80fa      	strh	r2, [r7, #6]
 80239c6:	461a      	mov	r2, r3
 80239c8:	683b      	ldr	r3, [r7, #0]
 80239ca:	4413      	add	r3, r2
 80239cc:	797a      	ldrb	r2, [r7, #5]
 80239ce:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80239d0:	88fb      	ldrh	r3, [r7, #6]
}
 80239d2:	4618      	mov	r0, r3
 80239d4:	3708      	adds	r7, #8
 80239d6:	46bd      	mov	sp, r7
 80239d8:	bd80      	pop	{r7, pc}
 80239da:	bf00      	nop
 80239dc:	0802b984 	.word	0x0802b984
 80239e0:	0802bb5c 	.word	0x0802bb5c
 80239e4:	0802b9e4 	.word	0x0802b9e4

080239e8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80239e8:	b580      	push	{r7, lr}
 80239ea:	b082      	sub	sp, #8
 80239ec:	af00      	add	r7, sp, #0
 80239ee:	4603      	mov	r3, r0
 80239f0:	6039      	str	r1, [r7, #0]
 80239f2:	80fb      	strh	r3, [r7, #6]
 80239f4:	4613      	mov	r3, r2
 80239f6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80239f8:	88fb      	ldrh	r3, [r7, #6]
 80239fa:	3302      	adds	r3, #2
 80239fc:	2b44      	cmp	r3, #68	@ 0x44
 80239fe:	d906      	bls.n	8023a0e <dhcp_option_short+0x26>
 8023a00:	4b0f      	ldr	r3, [pc, #60]	@ (8023a40 <dhcp_option_short+0x58>)
 8023a02:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8023a06:	490f      	ldr	r1, [pc, #60]	@ (8023a44 <dhcp_option_short+0x5c>)
 8023a08:	480f      	ldr	r0, [pc, #60]	@ (8023a48 <dhcp_option_short+0x60>)
 8023a0a:	f003 feaf 	bl	802776c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8023a0e:	88bb      	ldrh	r3, [r7, #4]
 8023a10:	0a1b      	lsrs	r3, r3, #8
 8023a12:	b29a      	uxth	r2, r3
 8023a14:	88fb      	ldrh	r3, [r7, #6]
 8023a16:	1c59      	adds	r1, r3, #1
 8023a18:	80f9      	strh	r1, [r7, #6]
 8023a1a:	4619      	mov	r1, r3
 8023a1c:	683b      	ldr	r3, [r7, #0]
 8023a1e:	440b      	add	r3, r1
 8023a20:	b2d2      	uxtb	r2, r2
 8023a22:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8023a24:	88fb      	ldrh	r3, [r7, #6]
 8023a26:	1c5a      	adds	r2, r3, #1
 8023a28:	80fa      	strh	r2, [r7, #6]
 8023a2a:	461a      	mov	r2, r3
 8023a2c:	683b      	ldr	r3, [r7, #0]
 8023a2e:	4413      	add	r3, r2
 8023a30:	88ba      	ldrh	r2, [r7, #4]
 8023a32:	b2d2      	uxtb	r2, r2
 8023a34:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8023a36:	88fb      	ldrh	r3, [r7, #6]
}
 8023a38:	4618      	mov	r0, r3
 8023a3a:	3708      	adds	r7, #8
 8023a3c:	46bd      	mov	sp, r7
 8023a3e:	bd80      	pop	{r7, pc}
 8023a40:	0802b984 	.word	0x0802b984
 8023a44:	0802bb94 	.word	0x0802bb94
 8023a48:	0802b9e4 	.word	0x0802b9e4

08023a4c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8023a4c:	b580      	push	{r7, lr}
 8023a4e:	b084      	sub	sp, #16
 8023a50:	af00      	add	r7, sp, #0
 8023a52:	4603      	mov	r3, r0
 8023a54:	60b9      	str	r1, [r7, #8]
 8023a56:	607a      	str	r2, [r7, #4]
 8023a58:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8023a5a:	89fb      	ldrh	r3, [r7, #14]
 8023a5c:	3304      	adds	r3, #4
 8023a5e:	2b44      	cmp	r3, #68	@ 0x44
 8023a60:	d906      	bls.n	8023a70 <dhcp_option_long+0x24>
 8023a62:	4b19      	ldr	r3, [pc, #100]	@ (8023ac8 <dhcp_option_long+0x7c>)
 8023a64:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8023a68:	4918      	ldr	r1, [pc, #96]	@ (8023acc <dhcp_option_long+0x80>)
 8023a6a:	4819      	ldr	r0, [pc, #100]	@ (8023ad0 <dhcp_option_long+0x84>)
 8023a6c:	f003 fe7e 	bl	802776c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8023a70:	687b      	ldr	r3, [r7, #4]
 8023a72:	0e1a      	lsrs	r2, r3, #24
 8023a74:	89fb      	ldrh	r3, [r7, #14]
 8023a76:	1c59      	adds	r1, r3, #1
 8023a78:	81f9      	strh	r1, [r7, #14]
 8023a7a:	4619      	mov	r1, r3
 8023a7c:	68bb      	ldr	r3, [r7, #8]
 8023a7e:	440b      	add	r3, r1
 8023a80:	b2d2      	uxtb	r2, r2
 8023a82:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8023a84:	687b      	ldr	r3, [r7, #4]
 8023a86:	0c1a      	lsrs	r2, r3, #16
 8023a88:	89fb      	ldrh	r3, [r7, #14]
 8023a8a:	1c59      	adds	r1, r3, #1
 8023a8c:	81f9      	strh	r1, [r7, #14]
 8023a8e:	4619      	mov	r1, r3
 8023a90:	68bb      	ldr	r3, [r7, #8]
 8023a92:	440b      	add	r3, r1
 8023a94:	b2d2      	uxtb	r2, r2
 8023a96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8023a98:	687b      	ldr	r3, [r7, #4]
 8023a9a:	0a1a      	lsrs	r2, r3, #8
 8023a9c:	89fb      	ldrh	r3, [r7, #14]
 8023a9e:	1c59      	adds	r1, r3, #1
 8023aa0:	81f9      	strh	r1, [r7, #14]
 8023aa2:	4619      	mov	r1, r3
 8023aa4:	68bb      	ldr	r3, [r7, #8]
 8023aa6:	440b      	add	r3, r1
 8023aa8:	b2d2      	uxtb	r2, r2
 8023aaa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8023aac:	89fb      	ldrh	r3, [r7, #14]
 8023aae:	1c5a      	adds	r2, r3, #1
 8023ab0:	81fa      	strh	r2, [r7, #14]
 8023ab2:	461a      	mov	r2, r3
 8023ab4:	68bb      	ldr	r3, [r7, #8]
 8023ab6:	4413      	add	r3, r2
 8023ab8:	687a      	ldr	r2, [r7, #4]
 8023aba:	b2d2      	uxtb	r2, r2
 8023abc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8023abe:	89fb      	ldrh	r3, [r7, #14]
}
 8023ac0:	4618      	mov	r0, r3
 8023ac2:	3710      	adds	r7, #16
 8023ac4:	46bd      	mov	sp, r7
 8023ac6:	bd80      	pop	{r7, pc}
 8023ac8:	0802b984 	.word	0x0802b984
 8023acc:	0802bbd0 	.word	0x0802bbd0
 8023ad0:	0802b9e4 	.word	0x0802b9e4

08023ad4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8023ad4:	b580      	push	{r7, lr}
 8023ad6:	b090      	sub	sp, #64	@ 0x40
 8023ad8:	af00      	add	r7, sp, #0
 8023ada:	6078      	str	r0, [r7, #4]
 8023adc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8023ade:	2300      	movs	r3, #0
 8023ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8023ae2:	2300      	movs	r3, #0
 8023ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8023ae6:	2208      	movs	r2, #8
 8023ae8:	2100      	movs	r1, #0
 8023aea:	48b5      	ldr	r0, [pc, #724]	@ (8023dc0 <dhcp_parse_reply+0x2ec>)
 8023aec:	f003 ff96 	bl	8027a1c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	895b      	ldrh	r3, [r3, #10]
 8023af4:	2b2b      	cmp	r3, #43	@ 0x2b
 8023af6:	d802      	bhi.n	8023afe <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8023af8:	f06f 0301 	mvn.w	r3, #1
 8023afc:	e2a7      	b.n	802404e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8023afe:	687b      	ldr	r3, [r7, #4]
 8023b00:	685b      	ldr	r3, [r3, #4]
 8023b02:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8023b04:	23f0      	movs	r3, #240	@ 0xf0
 8023b06:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8023b08:	687b      	ldr	r3, [r7, #4]
 8023b0a:	891b      	ldrh	r3, [r3, #8]
 8023b0c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8023b12:	e00c      	b.n	8023b2e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8023b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b16:	895b      	ldrh	r3, [r3, #10]
 8023b18:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8023b1a:	1ad3      	subs	r3, r2, r3
 8023b1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8023b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b20:	895b      	ldrh	r3, [r3, #10]
 8023b22:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8023b24:	1ad3      	subs	r3, r2, r3
 8023b26:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8023b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b2a:	681b      	ldr	r3, [r3, #0]
 8023b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8023b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	d004      	beq.n	8023b3e <dhcp_parse_reply+0x6a>
 8023b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b36:	895b      	ldrh	r3, [r3, #10]
 8023b38:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8023b3a:	429a      	cmp	r2, r3
 8023b3c:	d2ea      	bcs.n	8023b14 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8023b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b40:	2b00      	cmp	r3, #0
 8023b42:	d102      	bne.n	8023b4a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8023b44:	f06f 0301 	mvn.w	r3, #1
 8023b48:	e281      	b.n	802404e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8023b4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8023b4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8023b4e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8023b50:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8023b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b54:	685b      	ldr	r3, [r3, #4]
 8023b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8023b58:	e239      	b.n	8023fce <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8023b5a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023b5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023b5e:	4413      	add	r3, r2
 8023b60:	781b      	ldrb	r3, [r3, #0]
 8023b62:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8023b64:	2300      	movs	r3, #0
 8023b66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8023b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8023b6e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8023b70:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023b72:	3302      	adds	r3, #2
 8023b74:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8023b76:	8bfa      	ldrh	r2, [r7, #30]
 8023b78:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023b7a:	429a      	cmp	r2, r3
 8023b7c:	d202      	bcs.n	8023b84 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8023b7e:	f06f 0301 	mvn.w	r3, #1
 8023b82:	e264      	b.n	802404e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8023b84:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023b86:	3301      	adds	r3, #1
 8023b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023b8a:	8952      	ldrh	r2, [r2, #10]
 8023b8c:	4293      	cmp	r3, r2
 8023b8e:	da07      	bge.n	8023ba0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8023b90:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023b92:	3301      	adds	r3, #1
 8023b94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023b96:	4413      	add	r3, r2
 8023b98:	781b      	ldrb	r3, [r3, #0]
 8023b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8023b9e:	e00b      	b.n	8023bb8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8023ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023ba2:	681b      	ldr	r3, [r3, #0]
 8023ba4:	2b00      	cmp	r3, #0
 8023ba6:	d004      	beq.n	8023bb2 <dhcp_parse_reply+0xde>
 8023ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023baa:	681b      	ldr	r3, [r3, #0]
 8023bac:	685b      	ldr	r3, [r3, #4]
 8023bae:	781b      	ldrb	r3, [r3, #0]
 8023bb0:	e000      	b.n	8023bb4 <dhcp_parse_reply+0xe0>
 8023bb2:	2300      	movs	r3, #0
 8023bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8023bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023bbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8023bc0:	7dfb      	ldrb	r3, [r7, #23]
 8023bc2:	2b3b      	cmp	r3, #59	@ 0x3b
 8023bc4:	f200 812c 	bhi.w	8023e20 <dhcp_parse_reply+0x34c>
 8023bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8023bd0 <dhcp_parse_reply+0xfc>)
 8023bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023bce:	bf00      	nop
 8023bd0:	08023cc1 	.word	0x08023cc1
 8023bd4:	08023cd1 	.word	0x08023cd1
 8023bd8:	08023e21 	.word	0x08023e21
 8023bdc:	08023cf3 	.word	0x08023cf3
 8023be0:	08023e21 	.word	0x08023e21
 8023be4:	08023e21 	.word	0x08023e21
 8023be8:	08023e21 	.word	0x08023e21
 8023bec:	08023e21 	.word	0x08023e21
 8023bf0:	08023e21 	.word	0x08023e21
 8023bf4:	08023e21 	.word	0x08023e21
 8023bf8:	08023e21 	.word	0x08023e21
 8023bfc:	08023e21 	.word	0x08023e21
 8023c00:	08023e21 	.word	0x08023e21
 8023c04:	08023e21 	.word	0x08023e21
 8023c08:	08023e21 	.word	0x08023e21
 8023c0c:	08023e21 	.word	0x08023e21
 8023c10:	08023e21 	.word	0x08023e21
 8023c14:	08023e21 	.word	0x08023e21
 8023c18:	08023e21 	.word	0x08023e21
 8023c1c:	08023e21 	.word	0x08023e21
 8023c20:	08023e21 	.word	0x08023e21
 8023c24:	08023e21 	.word	0x08023e21
 8023c28:	08023e21 	.word	0x08023e21
 8023c2c:	08023e21 	.word	0x08023e21
 8023c30:	08023e21 	.word	0x08023e21
 8023c34:	08023e21 	.word	0x08023e21
 8023c38:	08023e21 	.word	0x08023e21
 8023c3c:	08023e21 	.word	0x08023e21
 8023c40:	08023e21 	.word	0x08023e21
 8023c44:	08023e21 	.word	0x08023e21
 8023c48:	08023e21 	.word	0x08023e21
 8023c4c:	08023e21 	.word	0x08023e21
 8023c50:	08023e21 	.word	0x08023e21
 8023c54:	08023e21 	.word	0x08023e21
 8023c58:	08023e21 	.word	0x08023e21
 8023c5c:	08023e21 	.word	0x08023e21
 8023c60:	08023e21 	.word	0x08023e21
 8023c64:	08023e21 	.word	0x08023e21
 8023c68:	08023e21 	.word	0x08023e21
 8023c6c:	08023e21 	.word	0x08023e21
 8023c70:	08023e21 	.word	0x08023e21
 8023c74:	08023e21 	.word	0x08023e21
 8023c78:	08023e21 	.word	0x08023e21
 8023c7c:	08023e21 	.word	0x08023e21
 8023c80:	08023e21 	.word	0x08023e21
 8023c84:	08023e21 	.word	0x08023e21
 8023c88:	08023e21 	.word	0x08023e21
 8023c8c:	08023e21 	.word	0x08023e21
 8023c90:	08023e21 	.word	0x08023e21
 8023c94:	08023e21 	.word	0x08023e21
 8023c98:	08023e21 	.word	0x08023e21
 8023c9c:	08023d1f 	.word	0x08023d1f
 8023ca0:	08023d41 	.word	0x08023d41
 8023ca4:	08023d7d 	.word	0x08023d7d
 8023ca8:	08023d9f 	.word	0x08023d9f
 8023cac:	08023e21 	.word	0x08023e21
 8023cb0:	08023e21 	.word	0x08023e21
 8023cb4:	08023e21 	.word	0x08023e21
 8023cb8:	08023ddd 	.word	0x08023ddd
 8023cbc:	08023dff 	.word	0x08023dff
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8023cc0:	2300      	movs	r3, #0
 8023cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8023cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023cca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8023cce:	e0ab      	b.n	8023e28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8023cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023cd4:	2b04      	cmp	r3, #4
 8023cd6:	d009      	beq.n	8023cec <dhcp_parse_reply+0x218>
 8023cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8023dc4 <dhcp_parse_reply+0x2f0>)
 8023cda:	f240 622e 	movw	r2, #1582	@ 0x62e
 8023cde:	493a      	ldr	r1, [pc, #232]	@ (8023dc8 <dhcp_parse_reply+0x2f4>)
 8023ce0:	483a      	ldr	r0, [pc, #232]	@ (8023dcc <dhcp_parse_reply+0x2f8>)
 8023ce2:	f003 fd43 	bl	802776c <iprintf>
 8023ce6:	f06f 0305 	mvn.w	r3, #5
 8023cea:	e1b0      	b.n	802404e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8023cec:	2306      	movs	r3, #6
 8023cee:	623b      	str	r3, [r7, #32]
        break;
 8023cf0:	e09a      	b.n	8023e28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8023cf2:	2304      	movs	r3, #4
 8023cf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8023cf8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8023cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8023d00:	429a      	cmp	r2, r3
 8023d02:	d209      	bcs.n	8023d18 <dhcp_parse_reply+0x244>
 8023d04:	4b2f      	ldr	r3, [pc, #188]	@ (8023dc4 <dhcp_parse_reply+0x2f0>)
 8023d06:	f240 6233 	movw	r2, #1587	@ 0x633
 8023d0a:	4931      	ldr	r1, [pc, #196]	@ (8023dd0 <dhcp_parse_reply+0x2fc>)
 8023d0c:	482f      	ldr	r0, [pc, #188]	@ (8023dcc <dhcp_parse_reply+0x2f8>)
 8023d0e:	f003 fd2d 	bl	802776c <iprintf>
 8023d12:	f06f 0305 	mvn.w	r3, #5
 8023d16:	e19a      	b.n	802404e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8023d18:	2307      	movs	r3, #7
 8023d1a:	623b      	str	r3, [r7, #32]
        break;
 8023d1c:	e084      	b.n	8023e28 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8023d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023d22:	2b04      	cmp	r3, #4
 8023d24:	d009      	beq.n	8023d3a <dhcp_parse_reply+0x266>
 8023d26:	4b27      	ldr	r3, [pc, #156]	@ (8023dc4 <dhcp_parse_reply+0x2f0>)
 8023d28:	f240 6241 	movw	r2, #1601	@ 0x641
 8023d2c:	4926      	ldr	r1, [pc, #152]	@ (8023dc8 <dhcp_parse_reply+0x2f4>)
 8023d2e:	4827      	ldr	r0, [pc, #156]	@ (8023dcc <dhcp_parse_reply+0x2f8>)
 8023d30:	f003 fd1c 	bl	802776c <iprintf>
 8023d34:	f06f 0305 	mvn.w	r3, #5
 8023d38:	e189      	b.n	802404e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8023d3a:	2303      	movs	r3, #3
 8023d3c:	623b      	str	r3, [r7, #32]
        break;
 8023d3e:	e073      	b.n	8023e28 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8023d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023d44:	2b01      	cmp	r3, #1
 8023d46:	d009      	beq.n	8023d5c <dhcp_parse_reply+0x288>
 8023d48:	4b1e      	ldr	r3, [pc, #120]	@ (8023dc4 <dhcp_parse_reply+0x2f0>)
 8023d4a:	f240 624f 	movw	r2, #1615	@ 0x64f
 8023d4e:	4921      	ldr	r1, [pc, #132]	@ (8023dd4 <dhcp_parse_reply+0x300>)
 8023d50:	481e      	ldr	r0, [pc, #120]	@ (8023dcc <dhcp_parse_reply+0x2f8>)
 8023d52:	f003 fd0b 	bl	802776c <iprintf>
 8023d56:	f06f 0305 	mvn.w	r3, #5
 8023d5a:	e178      	b.n	802404e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8023d5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8023d5e:	2bf0      	cmp	r3, #240	@ 0xf0
 8023d60:	d009      	beq.n	8023d76 <dhcp_parse_reply+0x2a2>
 8023d62:	4b18      	ldr	r3, [pc, #96]	@ (8023dc4 <dhcp_parse_reply+0x2f0>)
 8023d64:	f240 6251 	movw	r2, #1617	@ 0x651
 8023d68:	491b      	ldr	r1, [pc, #108]	@ (8023dd8 <dhcp_parse_reply+0x304>)
 8023d6a:	4818      	ldr	r0, [pc, #96]	@ (8023dcc <dhcp_parse_reply+0x2f8>)
 8023d6c:	f003 fcfe 	bl	802776c <iprintf>
 8023d70:	f06f 0305 	mvn.w	r3, #5
 8023d74:	e16b      	b.n	802404e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8023d76:	2300      	movs	r3, #0
 8023d78:	623b      	str	r3, [r7, #32]
        break;
 8023d7a:	e055      	b.n	8023e28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8023d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023d80:	2b01      	cmp	r3, #1
 8023d82:	d009      	beq.n	8023d98 <dhcp_parse_reply+0x2c4>
 8023d84:	4b0f      	ldr	r3, [pc, #60]	@ (8023dc4 <dhcp_parse_reply+0x2f0>)
 8023d86:	f240 6255 	movw	r2, #1621	@ 0x655
 8023d8a:	4912      	ldr	r1, [pc, #72]	@ (8023dd4 <dhcp_parse_reply+0x300>)
 8023d8c:	480f      	ldr	r0, [pc, #60]	@ (8023dcc <dhcp_parse_reply+0x2f8>)
 8023d8e:	f003 fced 	bl	802776c <iprintf>
 8023d92:	f06f 0305 	mvn.w	r3, #5
 8023d96:	e15a      	b.n	802404e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8023d98:	2301      	movs	r3, #1
 8023d9a:	623b      	str	r3, [r7, #32]
        break;
 8023d9c:	e044      	b.n	8023e28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8023d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023da2:	2b04      	cmp	r3, #4
 8023da4:	d009      	beq.n	8023dba <dhcp_parse_reply+0x2e6>
 8023da6:	4b07      	ldr	r3, [pc, #28]	@ (8023dc4 <dhcp_parse_reply+0x2f0>)
 8023da8:	f240 6259 	movw	r2, #1625	@ 0x659
 8023dac:	4906      	ldr	r1, [pc, #24]	@ (8023dc8 <dhcp_parse_reply+0x2f4>)
 8023dae:	4807      	ldr	r0, [pc, #28]	@ (8023dcc <dhcp_parse_reply+0x2f8>)
 8023db0:	f003 fcdc 	bl	802776c <iprintf>
 8023db4:	f06f 0305 	mvn.w	r3, #5
 8023db8:	e149      	b.n	802404e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8023dba:	2302      	movs	r3, #2
 8023dbc:	623b      	str	r3, [r7, #32]
        break;
 8023dbe:	e033      	b.n	8023e28 <dhcp_parse_reply+0x354>
 8023dc0:	200111e0 	.word	0x200111e0
 8023dc4:	0802b984 	.word	0x0802b984
 8023dc8:	0802bc0c 	.word	0x0802bc0c
 8023dcc:	0802b9e4 	.word	0x0802b9e4
 8023dd0:	0802bc18 	.word	0x0802bc18
 8023dd4:	0802bc2c 	.word	0x0802bc2c
 8023dd8:	0802bc38 	.word	0x0802bc38
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8023ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023de0:	2b04      	cmp	r3, #4
 8023de2:	d009      	beq.n	8023df8 <dhcp_parse_reply+0x324>
 8023de4:	4b9c      	ldr	r3, [pc, #624]	@ (8024058 <dhcp_parse_reply+0x584>)
 8023de6:	f240 625d 	movw	r2, #1629	@ 0x65d
 8023dea:	499c      	ldr	r1, [pc, #624]	@ (802405c <dhcp_parse_reply+0x588>)
 8023dec:	489c      	ldr	r0, [pc, #624]	@ (8024060 <dhcp_parse_reply+0x58c>)
 8023dee:	f003 fcbd 	bl	802776c <iprintf>
 8023df2:	f06f 0305 	mvn.w	r3, #5
 8023df6:	e12a      	b.n	802404e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8023df8:	2304      	movs	r3, #4
 8023dfa:	623b      	str	r3, [r7, #32]
        break;
 8023dfc:	e014      	b.n	8023e28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8023dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023e02:	2b04      	cmp	r3, #4
 8023e04:	d009      	beq.n	8023e1a <dhcp_parse_reply+0x346>
 8023e06:	4b94      	ldr	r3, [pc, #592]	@ (8024058 <dhcp_parse_reply+0x584>)
 8023e08:	f240 6261 	movw	r2, #1633	@ 0x661
 8023e0c:	4993      	ldr	r1, [pc, #588]	@ (802405c <dhcp_parse_reply+0x588>)
 8023e0e:	4894      	ldr	r0, [pc, #592]	@ (8024060 <dhcp_parse_reply+0x58c>)
 8023e10:	f003 fcac 	bl	802776c <iprintf>
 8023e14:	f06f 0305 	mvn.w	r3, #5
 8023e18:	e119      	b.n	802404e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8023e1a:	2305      	movs	r3, #5
 8023e1c:	623b      	str	r3, [r7, #32]
        break;
 8023e1e:	e003      	b.n	8023e28 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8023e20:	2300      	movs	r3, #0
 8023e22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8023e26:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8023e28:	7dfb      	ldrb	r3, [r7, #23]
 8023e2a:	2b00      	cmp	r3, #0
 8023e2c:	d103      	bne.n	8023e36 <dhcp_parse_reply+0x362>
      offset++;
 8023e2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023e30:	3301      	adds	r3, #1
 8023e32:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8023e34:	e0a1      	b.n	8023f7a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8023e36:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8023e38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023e3c:	4413      	add	r3, r2
 8023e3e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8023e42:	4293      	cmp	r3, r2
 8023e44:	dd02      	ble.n	8023e4c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8023e46:	f06f 0301 	mvn.w	r3, #1
 8023e4a:	e100      	b.n	802404e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8023e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8023e50:	b29a      	uxth	r2, r3
 8023e52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023e54:	4413      	add	r3, r2
 8023e56:	b29b      	uxth	r3, r3
 8023e58:	3302      	adds	r3, #2
 8023e5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8023e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	f000 808a 	beq.w	8023f7a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8023e66:	2300      	movs	r3, #0
 8023e68:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8023e6a:	6a3b      	ldr	r3, [r7, #32]
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	db02      	blt.n	8023e76 <dhcp_parse_reply+0x3a2>
 8023e70:	6a3b      	ldr	r3, [r7, #32]
 8023e72:	2b07      	cmp	r3, #7
 8023e74:	dd06      	ble.n	8023e84 <dhcp_parse_reply+0x3b0>
 8023e76:	4b78      	ldr	r3, [pc, #480]	@ (8024058 <dhcp_parse_reply+0x584>)
 8023e78:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8023e7c:	4979      	ldr	r1, [pc, #484]	@ (8024064 <dhcp_parse_reply+0x590>)
 8023e7e:	4878      	ldr	r0, [pc, #480]	@ (8024060 <dhcp_parse_reply+0x58c>)
 8023e80:	f003 fc74 	bl	802776c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8023e84:	4a78      	ldr	r2, [pc, #480]	@ (8024068 <dhcp_parse_reply+0x594>)
 8023e86:	6a3b      	ldr	r3, [r7, #32]
 8023e88:	4413      	add	r3, r2
 8023e8a:	781b      	ldrb	r3, [r3, #0]
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	d174      	bne.n	8023f7a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8023e90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8023e94:	2b04      	cmp	r3, #4
 8023e96:	bf28      	it	cs
 8023e98:	2304      	movcs	r3, #4
 8023e9a:	b2db      	uxtb	r3, r3
 8023e9c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8023e9e:	8bfb      	ldrh	r3, [r7, #30]
 8023ea0:	8aba      	ldrh	r2, [r7, #20]
 8023ea2:	f107 0108 	add.w	r1, r7, #8
 8023ea6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8023ea8:	f7f7 fc5a 	bl	801b760 <pbuf_copy_partial>
 8023eac:	4603      	mov	r3, r0
 8023eae:	461a      	mov	r2, r3
 8023eb0:	8abb      	ldrh	r3, [r7, #20]
 8023eb2:	4293      	cmp	r3, r2
 8023eb4:	d002      	beq.n	8023ebc <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8023eb6:	f06f 0301 	mvn.w	r3, #1
 8023eba:	e0c8      	b.n	802404e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8023ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8023ec0:	2b04      	cmp	r3, #4
 8023ec2:	d933      	bls.n	8023f2c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8023ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8023ec8:	f003 0303 	and.w	r3, r3, #3
 8023ecc:	b2db      	uxtb	r3, r3
 8023ece:	2b00      	cmp	r3, #0
 8023ed0:	d009      	beq.n	8023ee6 <dhcp_parse_reply+0x412>
 8023ed2:	4b61      	ldr	r3, [pc, #388]	@ (8024058 <dhcp_parse_reply+0x584>)
 8023ed4:	f240 6281 	movw	r2, #1665	@ 0x681
 8023ed8:	4964      	ldr	r1, [pc, #400]	@ (802406c <dhcp_parse_reply+0x598>)
 8023eda:	4861      	ldr	r0, [pc, #388]	@ (8024060 <dhcp_parse_reply+0x58c>)
 8023edc:	f003 fc46 	bl	802776c <iprintf>
 8023ee0:	f06f 0305 	mvn.w	r3, #5
 8023ee4:	e0b3      	b.n	802404e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8023ee6:	4a60      	ldr	r2, [pc, #384]	@ (8024068 <dhcp_parse_reply+0x594>)
 8023ee8:	6a3b      	ldr	r3, [r7, #32]
 8023eea:	4413      	add	r3, r2
 8023eec:	2201      	movs	r2, #1
 8023eee:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8023ef0:	68bb      	ldr	r3, [r7, #8]
 8023ef2:	4618      	mov	r0, r3
 8023ef4:	f7f5 fe13 	bl	8019b1e <lwip_htonl>
 8023ef8:	4602      	mov	r2, r0
 8023efa:	495d      	ldr	r1, [pc, #372]	@ (8024070 <dhcp_parse_reply+0x59c>)
 8023efc:	6a3b      	ldr	r3, [r7, #32]
 8023efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8023f02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8023f06:	3b04      	subs	r3, #4
 8023f08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8023f0c:	8bfb      	ldrh	r3, [r7, #30]
 8023f0e:	3304      	adds	r3, #4
 8023f10:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8023f12:	8a7a      	ldrh	r2, [r7, #18]
 8023f14:	8bfb      	ldrh	r3, [r7, #30]
 8023f16:	429a      	cmp	r2, r3
 8023f18:	d202      	bcs.n	8023f20 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8023f1a:	f06f 0301 	mvn.w	r3, #1
 8023f1e:	e096      	b.n	802404e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8023f20:	8a7b      	ldrh	r3, [r7, #18]
 8023f22:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8023f24:	6a3b      	ldr	r3, [r7, #32]
 8023f26:	3301      	adds	r3, #1
 8023f28:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8023f2a:	e79e      	b.n	8023e6a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8023f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8023f30:	2b04      	cmp	r3, #4
 8023f32:	d106      	bne.n	8023f42 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8023f34:	68bb      	ldr	r3, [r7, #8]
 8023f36:	4618      	mov	r0, r3
 8023f38:	f7f5 fdf1 	bl	8019b1e <lwip_htonl>
 8023f3c:	4603      	mov	r3, r0
 8023f3e:	60bb      	str	r3, [r7, #8]
 8023f40:	e011      	b.n	8023f66 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8023f42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8023f46:	2b01      	cmp	r3, #1
 8023f48:	d009      	beq.n	8023f5e <dhcp_parse_reply+0x48a>
 8023f4a:	4b43      	ldr	r3, [pc, #268]	@ (8024058 <dhcp_parse_reply+0x584>)
 8023f4c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8023f50:	4948      	ldr	r1, [pc, #288]	@ (8024074 <dhcp_parse_reply+0x5a0>)
 8023f52:	4843      	ldr	r0, [pc, #268]	@ (8024060 <dhcp_parse_reply+0x58c>)
 8023f54:	f003 fc0a 	bl	802776c <iprintf>
 8023f58:	f06f 0305 	mvn.w	r3, #5
 8023f5c:	e077      	b.n	802404e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8023f5e:	f107 0308 	add.w	r3, r7, #8
 8023f62:	781b      	ldrb	r3, [r3, #0]
 8023f64:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8023f66:	4a40      	ldr	r2, [pc, #256]	@ (8024068 <dhcp_parse_reply+0x594>)
 8023f68:	6a3b      	ldr	r3, [r7, #32]
 8023f6a:	4413      	add	r3, r2
 8023f6c:	2201      	movs	r2, #1
 8023f6e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8023f70:	68ba      	ldr	r2, [r7, #8]
 8023f72:	493f      	ldr	r1, [pc, #252]	@ (8024070 <dhcp_parse_reply+0x59c>)
 8023f74:	6a3b      	ldr	r3, [r7, #32]
 8023f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8023f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023f7c:	895b      	ldrh	r3, [r3, #10]
 8023f7e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8023f80:	429a      	cmp	r2, r3
 8023f82:	d324      	bcc.n	8023fce <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8023f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023f86:	895b      	ldrh	r3, [r3, #10]
 8023f88:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8023f8a:	1ad3      	subs	r3, r2, r3
 8023f8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8023f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023f90:	895b      	ldrh	r3, [r3, #10]
 8023f92:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8023f94:	1ad3      	subs	r3, r2, r3
 8023f96:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8023f98:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8023f9a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8023f9c:	429a      	cmp	r2, r3
 8023f9e:	d213      	bcs.n	8023fc8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8023fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fa2:	681b      	ldr	r3, [r3, #0]
 8023fa4:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8023fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fa8:	2b00      	cmp	r3, #0
 8023faa:	d109      	bne.n	8023fc0 <dhcp_parse_reply+0x4ec>
 8023fac:	4b2a      	ldr	r3, [pc, #168]	@ (8024058 <dhcp_parse_reply+0x584>)
 8023fae:	f240 629d 	movw	r2, #1693	@ 0x69d
 8023fb2:	4931      	ldr	r1, [pc, #196]	@ (8024078 <dhcp_parse_reply+0x5a4>)
 8023fb4:	482a      	ldr	r0, [pc, #168]	@ (8024060 <dhcp_parse_reply+0x58c>)
 8023fb6:	f003 fbd9 	bl	802776c <iprintf>
 8023fba:	f06f 0305 	mvn.w	r3, #5
 8023fbe:	e046      	b.n	802404e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8023fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fc2:	685b      	ldr	r3, [r3, #4]
 8023fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8023fc6:	e002      	b.n	8023fce <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8023fc8:	f06f 0301 	mvn.w	r3, #1
 8023fcc:	e03f      	b.n	802404e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8023fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fd0:	2b00      	cmp	r3, #0
 8023fd2:	d00a      	beq.n	8023fea <dhcp_parse_reply+0x516>
 8023fd4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8023fd6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8023fd8:	429a      	cmp	r2, r3
 8023fda:	d206      	bcs.n	8023fea <dhcp_parse_reply+0x516>
 8023fdc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8023fde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023fe0:	4413      	add	r3, r2
 8023fe2:	781b      	ldrb	r3, [r3, #0]
 8023fe4:	2bff      	cmp	r3, #255	@ 0xff
 8023fe6:	f47f adb8 	bne.w	8023b5a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8023fea:	4b1f      	ldr	r3, [pc, #124]	@ (8024068 <dhcp_parse_reply+0x594>)
 8023fec:	781b      	ldrb	r3, [r3, #0]
 8023fee:	2b00      	cmp	r3, #0
 8023ff0:	d018      	beq.n	8024024 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8023ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8024070 <dhcp_parse_reply+0x59c>)
 8023ff4:	681b      	ldr	r3, [r3, #0]
 8023ff6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8023ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8024068 <dhcp_parse_reply+0x594>)
 8023ffa:	2200      	movs	r2, #0
 8023ffc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8023ffe:	68fb      	ldr	r3, [r7, #12]
 8024000:	2b01      	cmp	r3, #1
 8024002:	d102      	bne.n	802400a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8024004:	2301      	movs	r3, #1
 8024006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024008:	e00c      	b.n	8024024 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 802400a:	68fb      	ldr	r3, [r7, #12]
 802400c:	2b02      	cmp	r3, #2
 802400e:	d102      	bne.n	8024016 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8024010:	2301      	movs	r3, #1
 8024012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8024014:	e006      	b.n	8024024 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8024016:	68fb      	ldr	r3, [r7, #12]
 8024018:	2b03      	cmp	r3, #3
 802401a:	d103      	bne.n	8024024 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 802401c:	2301      	movs	r3, #1
 802401e:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8024020:	2301      	movs	r3, #1
 8024022:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8024024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024026:	2b00      	cmp	r3, #0
 8024028:	d006      	beq.n	8024038 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 802402a:	2300      	movs	r3, #0
 802402c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 802402e:	236c      	movs	r3, #108	@ 0x6c
 8024030:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8024032:	23ec      	movs	r3, #236	@ 0xec
 8024034:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8024036:	e56a      	b.n	8023b0e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8024038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802403a:	2b00      	cmp	r3, #0
 802403c:	d006      	beq.n	802404c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 802403e:	2300      	movs	r3, #0
 8024040:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8024042:	232c      	movs	r3, #44	@ 0x2c
 8024044:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8024046:	236c      	movs	r3, #108	@ 0x6c
 8024048:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 802404a:	e560      	b.n	8023b0e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 802404c:	2300      	movs	r3, #0
}
 802404e:	4618      	mov	r0, r3
 8024050:	3740      	adds	r7, #64	@ 0x40
 8024052:	46bd      	mov	sp, r7
 8024054:	bd80      	pop	{r7, pc}
 8024056:	bf00      	nop
 8024058:	0802b984 	.word	0x0802b984
 802405c:	0802bc0c 	.word	0x0802bc0c
 8024060:	0802b9e4 	.word	0x0802b9e4
 8024064:	0802bc50 	.word	0x0802bc50
 8024068:	200111e0 	.word	0x200111e0
 802406c:	0802bc64 	.word	0x0802bc64
 8024070:	200111c0 	.word	0x200111c0
 8024074:	0802bc7c 	.word	0x0802bc7c
 8024078:	0802bc90 	.word	0x0802bc90

0802407c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 802407c:	b580      	push	{r7, lr}
 802407e:	b08a      	sub	sp, #40	@ 0x28
 8024080:	af00      	add	r7, sp, #0
 8024082:	60f8      	str	r0, [r7, #12]
 8024084:	60b9      	str	r1, [r7, #8]
 8024086:	607a      	str	r2, [r7, #4]
 8024088:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 802408a:	4b60      	ldr	r3, [pc, #384]	@ (802420c <dhcp_recv+0x190>)
 802408c:	685b      	ldr	r3, [r3, #4]
 802408e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8024090:	6a3b      	ldr	r3, [r7, #32]
 8024092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024094:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8024096:	687b      	ldr	r3, [r7, #4]
 8024098:	685b      	ldr	r3, [r3, #4]
 802409a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 802409c:	69fb      	ldr	r3, [r7, #28]
 802409e:	2b00      	cmp	r3, #0
 80240a0:	f000 809d 	beq.w	80241de <dhcp_recv+0x162>
 80240a4:	69fb      	ldr	r3, [r7, #28]
 80240a6:	791b      	ldrb	r3, [r3, #4]
 80240a8:	2b00      	cmp	r3, #0
 80240aa:	f000 8098 	beq.w	80241de <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80240ae:	687b      	ldr	r3, [r7, #4]
 80240b0:	895b      	ldrh	r3, [r3, #10]
 80240b2:	2b2b      	cmp	r3, #43	@ 0x2b
 80240b4:	f240 8095 	bls.w	80241e2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80240b8:	69bb      	ldr	r3, [r7, #24]
 80240ba:	781b      	ldrb	r3, [r3, #0]
 80240bc:	2b02      	cmp	r3, #2
 80240be:	f040 8092 	bne.w	80241e6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80240c2:	2300      	movs	r3, #0
 80240c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80240c8:	e012      	b.n	80240f0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80240ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80240ce:	6a3a      	ldr	r2, [r7, #32]
 80240d0:	4413      	add	r3, r2
 80240d2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80240d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80240da:	69b9      	ldr	r1, [r7, #24]
 80240dc:	440b      	add	r3, r1
 80240de:	7f1b      	ldrb	r3, [r3, #28]
 80240e0:	429a      	cmp	r2, r3
 80240e2:	f040 8082 	bne.w	80241ea <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80240e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80240ea:	3301      	adds	r3, #1
 80240ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80240f0:	6a3b      	ldr	r3, [r7, #32]
 80240f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80240f6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80240fa:	429a      	cmp	r2, r3
 80240fc:	d203      	bcs.n	8024106 <dhcp_recv+0x8a>
 80240fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8024102:	2b05      	cmp	r3, #5
 8024104:	d9e1      	bls.n	80240ca <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8024106:	69bb      	ldr	r3, [r7, #24]
 8024108:	685b      	ldr	r3, [r3, #4]
 802410a:	4618      	mov	r0, r3
 802410c:	f7f5 fd07 	bl	8019b1e <lwip_htonl>
 8024110:	4602      	mov	r2, r0
 8024112:	69fb      	ldr	r3, [r7, #28]
 8024114:	681b      	ldr	r3, [r3, #0]
 8024116:	429a      	cmp	r2, r3
 8024118:	d169      	bne.n	80241ee <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 802411a:	69f9      	ldr	r1, [r7, #28]
 802411c:	6878      	ldr	r0, [r7, #4]
 802411e:	f7ff fcd9 	bl	8023ad4 <dhcp_parse_reply>
 8024122:	4603      	mov	r3, r0
 8024124:	2b00      	cmp	r3, #0
 8024126:	d164      	bne.n	80241f2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8024128:	4b39      	ldr	r3, [pc, #228]	@ (8024210 <dhcp_recv+0x194>)
 802412a:	785b      	ldrb	r3, [r3, #1]
 802412c:	2b00      	cmp	r3, #0
 802412e:	d062      	beq.n	80241f6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8024130:	687b      	ldr	r3, [r7, #4]
 8024132:	685b      	ldr	r3, [r3, #4]
 8024134:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8024136:	4b37      	ldr	r3, [pc, #220]	@ (8024214 <dhcp_recv+0x198>)
 8024138:	685b      	ldr	r3, [r3, #4]
 802413a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 802413c:	7cfb      	ldrb	r3, [r7, #19]
 802413e:	2b05      	cmp	r3, #5
 8024140:	d12a      	bne.n	8024198 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8024142:	69fb      	ldr	r3, [r7, #28]
 8024144:	795b      	ldrb	r3, [r3, #5]
 8024146:	2b01      	cmp	r3, #1
 8024148:	d112      	bne.n	8024170 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 802414a:	6979      	ldr	r1, [r7, #20]
 802414c:	6a38      	ldr	r0, [r7, #32]
 802414e:	f7fe fe1d 	bl	8022d8c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8024152:	6a3b      	ldr	r3, [r7, #32]
 8024154:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8024158:	f003 0308 	and.w	r3, r3, #8
 802415c:	2b00      	cmp	r3, #0
 802415e:	d003      	beq.n	8024168 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8024160:	6a38      	ldr	r0, [r7, #32]
 8024162:	f7fe fb8b 	bl	802287c <dhcp_check>
 8024166:	e049      	b.n	80241fc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8024168:	6a38      	ldr	r0, [r7, #32]
 802416a:	f7ff f86d 	bl	8023248 <dhcp_bind>
 802416e:	e045      	b.n	80241fc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8024170:	69fb      	ldr	r3, [r7, #28]
 8024172:	795b      	ldrb	r3, [r3, #5]
 8024174:	2b03      	cmp	r3, #3
 8024176:	d007      	beq.n	8024188 <dhcp_recv+0x10c>
 8024178:	69fb      	ldr	r3, [r7, #28]
 802417a:	795b      	ldrb	r3, [r3, #5]
 802417c:	2b04      	cmp	r3, #4
 802417e:	d003      	beq.n	8024188 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8024180:	69fb      	ldr	r3, [r7, #28]
 8024182:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8024184:	2b05      	cmp	r3, #5
 8024186:	d139      	bne.n	80241fc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8024188:	6979      	ldr	r1, [r7, #20]
 802418a:	6a38      	ldr	r0, [r7, #32]
 802418c:	f7fe fdfe 	bl	8022d8c <dhcp_handle_ack>
      dhcp_bind(netif);
 8024190:	6a38      	ldr	r0, [r7, #32]
 8024192:	f7ff f859 	bl	8023248 <dhcp_bind>
 8024196:	e031      	b.n	80241fc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8024198:	7cfb      	ldrb	r3, [r7, #19]
 802419a:	2b06      	cmp	r3, #6
 802419c:	d113      	bne.n	80241c6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802419e:	69fb      	ldr	r3, [r7, #28]
 80241a0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80241a2:	2b03      	cmp	r3, #3
 80241a4:	d00b      	beq.n	80241be <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80241a6:	69fb      	ldr	r3, [r7, #28]
 80241a8:	795b      	ldrb	r3, [r3, #5]
 80241aa:	2b01      	cmp	r3, #1
 80241ac:	d007      	beq.n	80241be <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80241ae:	69fb      	ldr	r3, [r7, #28]
 80241b0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80241b2:	2b04      	cmp	r3, #4
 80241b4:	d003      	beq.n	80241be <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80241b6:	69fb      	ldr	r3, [r7, #28]
 80241b8:	795b      	ldrb	r3, [r3, #5]
 80241ba:	2b05      	cmp	r3, #5
 80241bc:	d103      	bne.n	80241c6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80241be:	6a38      	ldr	r0, [r7, #32]
 80241c0:	f7fe fb42 	bl	8022848 <dhcp_handle_nak>
 80241c4:	e01a      	b.n	80241fc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80241c6:	7cfb      	ldrb	r3, [r7, #19]
 80241c8:	2b02      	cmp	r3, #2
 80241ca:	d116      	bne.n	80241fa <dhcp_recv+0x17e>
 80241cc:	69fb      	ldr	r3, [r7, #28]
 80241ce:	795b      	ldrb	r3, [r3, #5]
 80241d0:	2b06      	cmp	r3, #6
 80241d2:	d112      	bne.n	80241fa <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80241d4:	6979      	ldr	r1, [r7, #20]
 80241d6:	6a38      	ldr	r0, [r7, #32]
 80241d8:	f7fe fb84 	bl	80228e4 <dhcp_handle_offer>
 80241dc:	e00e      	b.n	80241fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80241de:	bf00      	nop
 80241e0:	e00c      	b.n	80241fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80241e2:	bf00      	nop
 80241e4:	e00a      	b.n	80241fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80241e6:	bf00      	nop
 80241e8:	e008      	b.n	80241fc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80241ea:	bf00      	nop
 80241ec:	e006      	b.n	80241fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80241ee:	bf00      	nop
 80241f0:	e004      	b.n	80241fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80241f2:	bf00      	nop
 80241f4:	e002      	b.n	80241fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80241f6:	bf00      	nop
 80241f8:	e000      	b.n	80241fc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80241fa:	bf00      	nop
  pbuf_free(p);
 80241fc:	6878      	ldr	r0, [r7, #4]
 80241fe:	f7f7 f8a9 	bl	801b354 <pbuf_free>
}
 8024202:	bf00      	nop
 8024204:	3728      	adds	r7, #40	@ 0x28
 8024206:	46bd      	mov	sp, r7
 8024208:	bd80      	pop	{r7, pc}
 802420a:	bf00      	nop
 802420c:	2000d9ec 	.word	0x2000d9ec
 8024210:	200111e0 	.word	0x200111e0
 8024214:	200111c0 	.word	0x200111c0

08024218 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8024218:	b580      	push	{r7, lr}
 802421a:	b088      	sub	sp, #32
 802421c:	af00      	add	r7, sp, #0
 802421e:	60f8      	str	r0, [r7, #12]
 8024220:	60b9      	str	r1, [r7, #8]
 8024222:	603b      	str	r3, [r7, #0]
 8024224:	4613      	mov	r3, r2
 8024226:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8024228:	68fb      	ldr	r3, [r7, #12]
 802422a:	2b00      	cmp	r3, #0
 802422c:	d108      	bne.n	8024240 <dhcp_create_msg+0x28>
 802422e:	4b5f      	ldr	r3, [pc, #380]	@ (80243ac <dhcp_create_msg+0x194>)
 8024230:	f240 7269 	movw	r2, #1897	@ 0x769
 8024234:	495e      	ldr	r1, [pc, #376]	@ (80243b0 <dhcp_create_msg+0x198>)
 8024236:	485f      	ldr	r0, [pc, #380]	@ (80243b4 <dhcp_create_msg+0x19c>)
 8024238:	f003 fa98 	bl	802776c <iprintf>
 802423c:	2300      	movs	r3, #0
 802423e:	e0b1      	b.n	80243a4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8024240:	68bb      	ldr	r3, [r7, #8]
 8024242:	2b00      	cmp	r3, #0
 8024244:	d108      	bne.n	8024258 <dhcp_create_msg+0x40>
 8024246:	4b59      	ldr	r3, [pc, #356]	@ (80243ac <dhcp_create_msg+0x194>)
 8024248:	f240 726a 	movw	r2, #1898	@ 0x76a
 802424c:	495a      	ldr	r1, [pc, #360]	@ (80243b8 <dhcp_create_msg+0x1a0>)
 802424e:	4859      	ldr	r0, [pc, #356]	@ (80243b4 <dhcp_create_msg+0x19c>)
 8024250:	f003 fa8c 	bl	802776c <iprintf>
 8024254:	2300      	movs	r3, #0
 8024256:	e0a5      	b.n	80243a4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8024258:	f44f 7220 	mov.w	r2, #640	@ 0x280
 802425c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8024260:	2036      	movs	r0, #54	@ 0x36
 8024262:	f7f6 fd61 	bl	801ad28 <pbuf_alloc>
 8024266:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8024268:	69bb      	ldr	r3, [r7, #24]
 802426a:	2b00      	cmp	r3, #0
 802426c:	d101      	bne.n	8024272 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 802426e:	2300      	movs	r3, #0
 8024270:	e098      	b.n	80243a4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8024272:	69bb      	ldr	r3, [r7, #24]
 8024274:	895b      	ldrh	r3, [r3, #10]
 8024276:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 802427a:	d206      	bcs.n	802428a <dhcp_create_msg+0x72>
 802427c:	4b4b      	ldr	r3, [pc, #300]	@ (80243ac <dhcp_create_msg+0x194>)
 802427e:	f240 7271 	movw	r2, #1905	@ 0x771
 8024282:	494e      	ldr	r1, [pc, #312]	@ (80243bc <dhcp_create_msg+0x1a4>)
 8024284:	484b      	ldr	r0, [pc, #300]	@ (80243b4 <dhcp_create_msg+0x19c>)
 8024286:	f003 fa71 	bl	802776c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 802428a:	79fb      	ldrb	r3, [r7, #7]
 802428c:	2b03      	cmp	r3, #3
 802428e:	d103      	bne.n	8024298 <dhcp_create_msg+0x80>
 8024290:	68bb      	ldr	r3, [r7, #8]
 8024292:	795b      	ldrb	r3, [r3, #5]
 8024294:	2b03      	cmp	r3, #3
 8024296:	d10d      	bne.n	80242b4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8024298:	68bb      	ldr	r3, [r7, #8]
 802429a:	799b      	ldrb	r3, [r3, #6]
 802429c:	2b00      	cmp	r3, #0
 802429e:	d105      	bne.n	80242ac <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80242a0:	f003 f964 	bl	802756c <rand>
 80242a4:	4603      	mov	r3, r0
 80242a6:	461a      	mov	r2, r3
 80242a8:	4b45      	ldr	r3, [pc, #276]	@ (80243c0 <dhcp_create_msg+0x1a8>)
 80242aa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80242ac:	4b44      	ldr	r3, [pc, #272]	@ (80243c0 <dhcp_create_msg+0x1a8>)
 80242ae:	681a      	ldr	r2, [r3, #0]
 80242b0:	68bb      	ldr	r3, [r7, #8]
 80242b2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80242b4:	69bb      	ldr	r3, [r7, #24]
 80242b6:	685b      	ldr	r3, [r3, #4]
 80242b8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80242ba:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80242be:	2100      	movs	r1, #0
 80242c0:	6978      	ldr	r0, [r7, #20]
 80242c2:	f003 fbab 	bl	8027a1c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80242c6:	697b      	ldr	r3, [r7, #20]
 80242c8:	2201      	movs	r2, #1
 80242ca:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80242cc:	697b      	ldr	r3, [r7, #20]
 80242ce:	2201      	movs	r2, #1
 80242d0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80242d2:	68fb      	ldr	r3, [r7, #12]
 80242d4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80242d8:	697b      	ldr	r3, [r7, #20]
 80242da:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80242dc:	68bb      	ldr	r3, [r7, #8]
 80242de:	681b      	ldr	r3, [r3, #0]
 80242e0:	4618      	mov	r0, r3
 80242e2:	f7f5 fc1c 	bl	8019b1e <lwip_htonl>
 80242e6:	4602      	mov	r2, r0
 80242e8:	697b      	ldr	r3, [r7, #20]
 80242ea:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80242ec:	79fb      	ldrb	r3, [r7, #7]
 80242ee:	2b08      	cmp	r3, #8
 80242f0:	d010      	beq.n	8024314 <dhcp_create_msg+0xfc>
 80242f2:	79fb      	ldrb	r3, [r7, #7]
 80242f4:	2b04      	cmp	r3, #4
 80242f6:	d00d      	beq.n	8024314 <dhcp_create_msg+0xfc>
 80242f8:	79fb      	ldrb	r3, [r7, #7]
 80242fa:	2b07      	cmp	r3, #7
 80242fc:	d00a      	beq.n	8024314 <dhcp_create_msg+0xfc>
 80242fe:	79fb      	ldrb	r3, [r7, #7]
 8024300:	2b03      	cmp	r3, #3
 8024302:	d10c      	bne.n	802431e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8024304:	68bb      	ldr	r3, [r7, #8]
 8024306:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8024308:	2b05      	cmp	r3, #5
 802430a:	d003      	beq.n	8024314 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 802430c:	68bb      	ldr	r3, [r7, #8]
 802430e:	795b      	ldrb	r3, [r3, #5]
 8024310:	2b04      	cmp	r3, #4
 8024312:	d104      	bne.n	802431e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8024314:	68fb      	ldr	r3, [r7, #12]
 8024316:	3304      	adds	r3, #4
 8024318:	681a      	ldr	r2, [r3, #0]
 802431a:	697b      	ldr	r3, [r7, #20]
 802431c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802431e:	2300      	movs	r3, #0
 8024320:	83fb      	strh	r3, [r7, #30]
 8024322:	e00c      	b.n	802433e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8024324:	8bfa      	ldrh	r2, [r7, #30]
 8024326:	8bfb      	ldrh	r3, [r7, #30]
 8024328:	68f9      	ldr	r1, [r7, #12]
 802432a:	440a      	add	r2, r1
 802432c:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8024330:	697a      	ldr	r2, [r7, #20]
 8024332:	4413      	add	r3, r2
 8024334:	460a      	mov	r2, r1
 8024336:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8024338:	8bfb      	ldrh	r3, [r7, #30]
 802433a:	3301      	adds	r3, #1
 802433c:	83fb      	strh	r3, [r7, #30]
 802433e:	8bfb      	ldrh	r3, [r7, #30]
 8024340:	2b05      	cmp	r3, #5
 8024342:	d9ef      	bls.n	8024324 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8024344:	697b      	ldr	r3, [r7, #20]
 8024346:	2200      	movs	r2, #0
 8024348:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 802434c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8024350:	2200      	movs	r2, #0
 8024352:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8024356:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 802435a:	2200      	movs	r2, #0
 802435c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8024360:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8024364:	2200      	movs	r2, #0
 8024366:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 802436a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 802436e:	697b      	ldr	r3, [r7, #20]
 8024370:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024374:	2301      	movs	r3, #1
 8024376:	2235      	movs	r2, #53	@ 0x35
 8024378:	2000      	movs	r0, #0
 802437a:	f7ff fadb 	bl	8023934 <dhcp_option>
 802437e:	4603      	mov	r3, r0
 8024380:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8024382:	697b      	ldr	r3, [r7, #20]
 8024384:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8024388:	79fa      	ldrb	r2, [r7, #7]
 802438a:	8a7b      	ldrh	r3, [r7, #18]
 802438c:	4618      	mov	r0, r3
 802438e:	f7ff fb05 	bl	802399c <dhcp_option_byte>
 8024392:	4603      	mov	r3, r0
 8024394:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8024396:	683b      	ldr	r3, [r7, #0]
 8024398:	2b00      	cmp	r3, #0
 802439a:	d002      	beq.n	80243a2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 802439c:	683b      	ldr	r3, [r7, #0]
 802439e:	8a7a      	ldrh	r2, [r7, #18]
 80243a0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80243a2:	69bb      	ldr	r3, [r7, #24]
}
 80243a4:	4618      	mov	r0, r3
 80243a6:	3720      	adds	r7, #32
 80243a8:	46bd      	mov	sp, r7
 80243aa:	bd80      	pop	{r7, pc}
 80243ac:	0802b984 	.word	0x0802b984
 80243b0:	0802bca4 	.word	0x0802bca4
 80243b4:	0802b9e4 	.word	0x0802b9e4
 80243b8:	0802bcc4 	.word	0x0802bcc4
 80243bc:	0802bce4 	.word	0x0802bce4
 80243c0:	200111f0 	.word	0x200111f0

080243c4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80243c4:	b580      	push	{r7, lr}
 80243c6:	b084      	sub	sp, #16
 80243c8:	af00      	add	r7, sp, #0
 80243ca:	4603      	mov	r3, r0
 80243cc:	60b9      	str	r1, [r7, #8]
 80243ce:	607a      	str	r2, [r7, #4]
 80243d0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80243d2:	89fb      	ldrh	r3, [r7, #14]
 80243d4:	1c5a      	adds	r2, r3, #1
 80243d6:	81fa      	strh	r2, [r7, #14]
 80243d8:	461a      	mov	r2, r3
 80243da:	68bb      	ldr	r3, [r7, #8]
 80243dc:	4413      	add	r3, r2
 80243de:	22ff      	movs	r2, #255	@ 0xff
 80243e0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80243e2:	e007      	b.n	80243f4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80243e4:	89fb      	ldrh	r3, [r7, #14]
 80243e6:	1c5a      	adds	r2, r3, #1
 80243e8:	81fa      	strh	r2, [r7, #14]
 80243ea:	461a      	mov	r2, r3
 80243ec:	68bb      	ldr	r3, [r7, #8]
 80243ee:	4413      	add	r3, r2
 80243f0:	2200      	movs	r2, #0
 80243f2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80243f4:	89fb      	ldrh	r3, [r7, #14]
 80243f6:	2b43      	cmp	r3, #67	@ 0x43
 80243f8:	d904      	bls.n	8024404 <dhcp_option_trailer+0x40>
 80243fa:	89fb      	ldrh	r3, [r7, #14]
 80243fc:	f003 0303 	and.w	r3, r3, #3
 8024400:	2b00      	cmp	r3, #0
 8024402:	d002      	beq.n	802440a <dhcp_option_trailer+0x46>
 8024404:	89fb      	ldrh	r3, [r7, #14]
 8024406:	2b43      	cmp	r3, #67	@ 0x43
 8024408:	d9ec      	bls.n	80243e4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802440a:	89fb      	ldrh	r3, [r7, #14]
 802440c:	33f0      	adds	r3, #240	@ 0xf0
 802440e:	b29b      	uxth	r3, r3
 8024410:	4619      	mov	r1, r3
 8024412:	6878      	ldr	r0, [r7, #4]
 8024414:	f7f6 fde6 	bl	801afe4 <pbuf_realloc>
}
 8024418:	bf00      	nop
 802441a:	3710      	adds	r7, #16
 802441c:	46bd      	mov	sp, r7
 802441e:	bd80      	pop	{r7, pc}

08024420 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8024420:	b480      	push	{r7}
 8024422:	b085      	sub	sp, #20
 8024424:	af00      	add	r7, sp, #0
 8024426:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	2b00      	cmp	r3, #0
 802442c:	d017      	beq.n	802445e <dhcp_supplied_address+0x3e>
 802442e:	687b      	ldr	r3, [r7, #4]
 8024430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024432:	2b00      	cmp	r3, #0
 8024434:	d013      	beq.n	802445e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8024436:	687b      	ldr	r3, [r7, #4]
 8024438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802443a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802443c:	68fb      	ldr	r3, [r7, #12]
 802443e:	795b      	ldrb	r3, [r3, #5]
 8024440:	2b0a      	cmp	r3, #10
 8024442:	d007      	beq.n	8024454 <dhcp_supplied_address+0x34>
 8024444:	68fb      	ldr	r3, [r7, #12]
 8024446:	795b      	ldrb	r3, [r3, #5]
 8024448:	2b05      	cmp	r3, #5
 802444a:	d003      	beq.n	8024454 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 802444c:	68fb      	ldr	r3, [r7, #12]
 802444e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8024450:	2b04      	cmp	r3, #4
 8024452:	d101      	bne.n	8024458 <dhcp_supplied_address+0x38>
 8024454:	2301      	movs	r3, #1
 8024456:	e000      	b.n	802445a <dhcp_supplied_address+0x3a>
 8024458:	2300      	movs	r3, #0
 802445a:	b2db      	uxtb	r3, r3
 802445c:	e000      	b.n	8024460 <dhcp_supplied_address+0x40>
  }
  return 0;
 802445e:	2300      	movs	r3, #0
}
 8024460:	4618      	mov	r0, r3
 8024462:	3714      	adds	r7, #20
 8024464:	46bd      	mov	sp, r7
 8024466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802446a:	4770      	bx	lr

0802446c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 802446c:	b580      	push	{r7, lr}
 802446e:	b082      	sub	sp, #8
 8024470:	af00      	add	r7, sp, #0
 8024472:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8024474:	4915      	ldr	r1, [pc, #84]	@ (80244cc <etharp_free_entry+0x60>)
 8024476:	687a      	ldr	r2, [r7, #4]
 8024478:	4613      	mov	r3, r2
 802447a:	005b      	lsls	r3, r3, #1
 802447c:	4413      	add	r3, r2
 802447e:	00db      	lsls	r3, r3, #3
 8024480:	440b      	add	r3, r1
 8024482:	681b      	ldr	r3, [r3, #0]
 8024484:	2b00      	cmp	r3, #0
 8024486:	d013      	beq.n	80244b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8024488:	4910      	ldr	r1, [pc, #64]	@ (80244cc <etharp_free_entry+0x60>)
 802448a:	687a      	ldr	r2, [r7, #4]
 802448c:	4613      	mov	r3, r2
 802448e:	005b      	lsls	r3, r3, #1
 8024490:	4413      	add	r3, r2
 8024492:	00db      	lsls	r3, r3, #3
 8024494:	440b      	add	r3, r1
 8024496:	681b      	ldr	r3, [r3, #0]
 8024498:	4618      	mov	r0, r3
 802449a:	f7f6 ff5b 	bl	801b354 <pbuf_free>
    arp_table[i].q = NULL;
 802449e:	490b      	ldr	r1, [pc, #44]	@ (80244cc <etharp_free_entry+0x60>)
 80244a0:	687a      	ldr	r2, [r7, #4]
 80244a2:	4613      	mov	r3, r2
 80244a4:	005b      	lsls	r3, r3, #1
 80244a6:	4413      	add	r3, r2
 80244a8:	00db      	lsls	r3, r3, #3
 80244aa:	440b      	add	r3, r1
 80244ac:	2200      	movs	r2, #0
 80244ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80244b0:	4906      	ldr	r1, [pc, #24]	@ (80244cc <etharp_free_entry+0x60>)
 80244b2:	687a      	ldr	r2, [r7, #4]
 80244b4:	4613      	mov	r3, r2
 80244b6:	005b      	lsls	r3, r3, #1
 80244b8:	4413      	add	r3, r2
 80244ba:	00db      	lsls	r3, r3, #3
 80244bc:	440b      	add	r3, r1
 80244be:	3314      	adds	r3, #20
 80244c0:	2200      	movs	r2, #0
 80244c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80244c4:	bf00      	nop
 80244c6:	3708      	adds	r7, #8
 80244c8:	46bd      	mov	sp, r7
 80244ca:	bd80      	pop	{r7, pc}
 80244cc:	200111f4 	.word	0x200111f4

080244d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80244d0:	b580      	push	{r7, lr}
 80244d2:	b082      	sub	sp, #8
 80244d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80244d6:	2300      	movs	r3, #0
 80244d8:	607b      	str	r3, [r7, #4]
 80244da:	e096      	b.n	802460a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80244dc:	494f      	ldr	r1, [pc, #316]	@ (802461c <etharp_tmr+0x14c>)
 80244de:	687a      	ldr	r2, [r7, #4]
 80244e0:	4613      	mov	r3, r2
 80244e2:	005b      	lsls	r3, r3, #1
 80244e4:	4413      	add	r3, r2
 80244e6:	00db      	lsls	r3, r3, #3
 80244e8:	440b      	add	r3, r1
 80244ea:	3314      	adds	r3, #20
 80244ec:	781b      	ldrb	r3, [r3, #0]
 80244ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80244f0:	78fb      	ldrb	r3, [r7, #3]
 80244f2:	2b00      	cmp	r3, #0
 80244f4:	f000 8086 	beq.w	8024604 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80244f8:	4948      	ldr	r1, [pc, #288]	@ (802461c <etharp_tmr+0x14c>)
 80244fa:	687a      	ldr	r2, [r7, #4]
 80244fc:	4613      	mov	r3, r2
 80244fe:	005b      	lsls	r3, r3, #1
 8024500:	4413      	add	r3, r2
 8024502:	00db      	lsls	r3, r3, #3
 8024504:	440b      	add	r3, r1
 8024506:	3312      	adds	r3, #18
 8024508:	881b      	ldrh	r3, [r3, #0]
 802450a:	3301      	adds	r3, #1
 802450c:	b298      	uxth	r0, r3
 802450e:	4943      	ldr	r1, [pc, #268]	@ (802461c <etharp_tmr+0x14c>)
 8024510:	687a      	ldr	r2, [r7, #4]
 8024512:	4613      	mov	r3, r2
 8024514:	005b      	lsls	r3, r3, #1
 8024516:	4413      	add	r3, r2
 8024518:	00db      	lsls	r3, r3, #3
 802451a:	440b      	add	r3, r1
 802451c:	3312      	adds	r3, #18
 802451e:	4602      	mov	r2, r0
 8024520:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8024522:	493e      	ldr	r1, [pc, #248]	@ (802461c <etharp_tmr+0x14c>)
 8024524:	687a      	ldr	r2, [r7, #4]
 8024526:	4613      	mov	r3, r2
 8024528:	005b      	lsls	r3, r3, #1
 802452a:	4413      	add	r3, r2
 802452c:	00db      	lsls	r3, r3, #3
 802452e:	440b      	add	r3, r1
 8024530:	3312      	adds	r3, #18
 8024532:	881b      	ldrh	r3, [r3, #0]
 8024534:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8024538:	d215      	bcs.n	8024566 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802453a:	4938      	ldr	r1, [pc, #224]	@ (802461c <etharp_tmr+0x14c>)
 802453c:	687a      	ldr	r2, [r7, #4]
 802453e:	4613      	mov	r3, r2
 8024540:	005b      	lsls	r3, r3, #1
 8024542:	4413      	add	r3, r2
 8024544:	00db      	lsls	r3, r3, #3
 8024546:	440b      	add	r3, r1
 8024548:	3314      	adds	r3, #20
 802454a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802454c:	2b01      	cmp	r3, #1
 802454e:	d10e      	bne.n	802456e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8024550:	4932      	ldr	r1, [pc, #200]	@ (802461c <etharp_tmr+0x14c>)
 8024552:	687a      	ldr	r2, [r7, #4]
 8024554:	4613      	mov	r3, r2
 8024556:	005b      	lsls	r3, r3, #1
 8024558:	4413      	add	r3, r2
 802455a:	00db      	lsls	r3, r3, #3
 802455c:	440b      	add	r3, r1
 802455e:	3312      	adds	r3, #18
 8024560:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8024562:	2b04      	cmp	r3, #4
 8024564:	d903      	bls.n	802456e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8024566:	6878      	ldr	r0, [r7, #4]
 8024568:	f7ff ff80 	bl	802446c <etharp_free_entry>
 802456c:	e04a      	b.n	8024604 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 802456e:	492b      	ldr	r1, [pc, #172]	@ (802461c <etharp_tmr+0x14c>)
 8024570:	687a      	ldr	r2, [r7, #4]
 8024572:	4613      	mov	r3, r2
 8024574:	005b      	lsls	r3, r3, #1
 8024576:	4413      	add	r3, r2
 8024578:	00db      	lsls	r3, r3, #3
 802457a:	440b      	add	r3, r1
 802457c:	3314      	adds	r3, #20
 802457e:	781b      	ldrb	r3, [r3, #0]
 8024580:	2b03      	cmp	r3, #3
 8024582:	d10a      	bne.n	802459a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8024584:	4925      	ldr	r1, [pc, #148]	@ (802461c <etharp_tmr+0x14c>)
 8024586:	687a      	ldr	r2, [r7, #4]
 8024588:	4613      	mov	r3, r2
 802458a:	005b      	lsls	r3, r3, #1
 802458c:	4413      	add	r3, r2
 802458e:	00db      	lsls	r3, r3, #3
 8024590:	440b      	add	r3, r1
 8024592:	3314      	adds	r3, #20
 8024594:	2204      	movs	r2, #4
 8024596:	701a      	strb	r2, [r3, #0]
 8024598:	e034      	b.n	8024604 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802459a:	4920      	ldr	r1, [pc, #128]	@ (802461c <etharp_tmr+0x14c>)
 802459c:	687a      	ldr	r2, [r7, #4]
 802459e:	4613      	mov	r3, r2
 80245a0:	005b      	lsls	r3, r3, #1
 80245a2:	4413      	add	r3, r2
 80245a4:	00db      	lsls	r3, r3, #3
 80245a6:	440b      	add	r3, r1
 80245a8:	3314      	adds	r3, #20
 80245aa:	781b      	ldrb	r3, [r3, #0]
 80245ac:	2b04      	cmp	r3, #4
 80245ae:	d10a      	bne.n	80245c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80245b0:	491a      	ldr	r1, [pc, #104]	@ (802461c <etharp_tmr+0x14c>)
 80245b2:	687a      	ldr	r2, [r7, #4]
 80245b4:	4613      	mov	r3, r2
 80245b6:	005b      	lsls	r3, r3, #1
 80245b8:	4413      	add	r3, r2
 80245ba:	00db      	lsls	r3, r3, #3
 80245bc:	440b      	add	r3, r1
 80245be:	3314      	adds	r3, #20
 80245c0:	2202      	movs	r2, #2
 80245c2:	701a      	strb	r2, [r3, #0]
 80245c4:	e01e      	b.n	8024604 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80245c6:	4915      	ldr	r1, [pc, #84]	@ (802461c <etharp_tmr+0x14c>)
 80245c8:	687a      	ldr	r2, [r7, #4]
 80245ca:	4613      	mov	r3, r2
 80245cc:	005b      	lsls	r3, r3, #1
 80245ce:	4413      	add	r3, r2
 80245d0:	00db      	lsls	r3, r3, #3
 80245d2:	440b      	add	r3, r1
 80245d4:	3314      	adds	r3, #20
 80245d6:	781b      	ldrb	r3, [r3, #0]
 80245d8:	2b01      	cmp	r3, #1
 80245da:	d113      	bne.n	8024604 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80245dc:	490f      	ldr	r1, [pc, #60]	@ (802461c <etharp_tmr+0x14c>)
 80245de:	687a      	ldr	r2, [r7, #4]
 80245e0:	4613      	mov	r3, r2
 80245e2:	005b      	lsls	r3, r3, #1
 80245e4:	4413      	add	r3, r2
 80245e6:	00db      	lsls	r3, r3, #3
 80245e8:	440b      	add	r3, r1
 80245ea:	3308      	adds	r3, #8
 80245ec:	6818      	ldr	r0, [r3, #0]
 80245ee:	687a      	ldr	r2, [r7, #4]
 80245f0:	4613      	mov	r3, r2
 80245f2:	005b      	lsls	r3, r3, #1
 80245f4:	4413      	add	r3, r2
 80245f6:	00db      	lsls	r3, r3, #3
 80245f8:	4a08      	ldr	r2, [pc, #32]	@ (802461c <etharp_tmr+0x14c>)
 80245fa:	4413      	add	r3, r2
 80245fc:	3304      	adds	r3, #4
 80245fe:	4619      	mov	r1, r3
 8024600:	f000 fe72 	bl	80252e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024604:	687b      	ldr	r3, [r7, #4]
 8024606:	3301      	adds	r3, #1
 8024608:	607b      	str	r3, [r7, #4]
 802460a:	687b      	ldr	r3, [r7, #4]
 802460c:	2b09      	cmp	r3, #9
 802460e:	f77f af65 	ble.w	80244dc <etharp_tmr+0xc>
      }
    }
  }
}
 8024612:	bf00      	nop
 8024614:	bf00      	nop
 8024616:	3708      	adds	r7, #8
 8024618:	46bd      	mov	sp, r7
 802461a:	bd80      	pop	{r7, pc}
 802461c:	200111f4 	.word	0x200111f4

08024620 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8024620:	b580      	push	{r7, lr}
 8024622:	b08a      	sub	sp, #40	@ 0x28
 8024624:	af00      	add	r7, sp, #0
 8024626:	60f8      	str	r0, [r7, #12]
 8024628:	460b      	mov	r3, r1
 802462a:	607a      	str	r2, [r7, #4]
 802462c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 802462e:	230a      	movs	r3, #10
 8024630:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8024632:	230a      	movs	r3, #10
 8024634:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8024636:	230a      	movs	r3, #10
 8024638:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 802463a:	2300      	movs	r3, #0
 802463c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 802463e:	230a      	movs	r3, #10
 8024640:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8024642:	2300      	movs	r3, #0
 8024644:	83bb      	strh	r3, [r7, #28]
 8024646:	2300      	movs	r3, #0
 8024648:	837b      	strh	r3, [r7, #26]
 802464a:	2300      	movs	r3, #0
 802464c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802464e:	2300      	movs	r3, #0
 8024650:	843b      	strh	r3, [r7, #32]
 8024652:	e0ae      	b.n	80247b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8024654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024658:	49a6      	ldr	r1, [pc, #664]	@ (80248f4 <etharp_find_entry+0x2d4>)
 802465a:	4613      	mov	r3, r2
 802465c:	005b      	lsls	r3, r3, #1
 802465e:	4413      	add	r3, r2
 8024660:	00db      	lsls	r3, r3, #3
 8024662:	440b      	add	r3, r1
 8024664:	3314      	adds	r3, #20
 8024666:	781b      	ldrb	r3, [r3, #0]
 8024668:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802466a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 802466e:	2b0a      	cmp	r3, #10
 8024670:	d105      	bne.n	802467e <etharp_find_entry+0x5e>
 8024672:	7dfb      	ldrb	r3, [r7, #23]
 8024674:	2b00      	cmp	r3, #0
 8024676:	d102      	bne.n	802467e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8024678:	8c3b      	ldrh	r3, [r7, #32]
 802467a:	847b      	strh	r3, [r7, #34]	@ 0x22
 802467c:	e095      	b.n	80247aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 802467e:	7dfb      	ldrb	r3, [r7, #23]
 8024680:	2b00      	cmp	r3, #0
 8024682:	f000 8092 	beq.w	80247aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8024686:	7dfb      	ldrb	r3, [r7, #23]
 8024688:	2b01      	cmp	r3, #1
 802468a:	d009      	beq.n	80246a0 <etharp_find_entry+0x80>
 802468c:	7dfb      	ldrb	r3, [r7, #23]
 802468e:	2b01      	cmp	r3, #1
 8024690:	d806      	bhi.n	80246a0 <etharp_find_entry+0x80>
 8024692:	4b99      	ldr	r3, [pc, #612]	@ (80248f8 <etharp_find_entry+0x2d8>)
 8024694:	f240 1223 	movw	r2, #291	@ 0x123
 8024698:	4998      	ldr	r1, [pc, #608]	@ (80248fc <etharp_find_entry+0x2dc>)
 802469a:	4899      	ldr	r0, [pc, #612]	@ (8024900 <etharp_find_entry+0x2e0>)
 802469c:	f003 f866 	bl	802776c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80246a0:	68fb      	ldr	r3, [r7, #12]
 80246a2:	2b00      	cmp	r3, #0
 80246a4:	d020      	beq.n	80246e8 <etharp_find_entry+0xc8>
 80246a6:	68fb      	ldr	r3, [r7, #12]
 80246a8:	6819      	ldr	r1, [r3, #0]
 80246aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80246ae:	4891      	ldr	r0, [pc, #580]	@ (80248f4 <etharp_find_entry+0x2d4>)
 80246b0:	4613      	mov	r3, r2
 80246b2:	005b      	lsls	r3, r3, #1
 80246b4:	4413      	add	r3, r2
 80246b6:	00db      	lsls	r3, r3, #3
 80246b8:	4403      	add	r3, r0
 80246ba:	3304      	adds	r3, #4
 80246bc:	681b      	ldr	r3, [r3, #0]
 80246be:	4299      	cmp	r1, r3
 80246c0:	d112      	bne.n	80246e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80246c2:	687b      	ldr	r3, [r7, #4]
 80246c4:	2b00      	cmp	r3, #0
 80246c6:	d00c      	beq.n	80246e2 <etharp_find_entry+0xc2>
 80246c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80246cc:	4989      	ldr	r1, [pc, #548]	@ (80248f4 <etharp_find_entry+0x2d4>)
 80246ce:	4613      	mov	r3, r2
 80246d0:	005b      	lsls	r3, r3, #1
 80246d2:	4413      	add	r3, r2
 80246d4:	00db      	lsls	r3, r3, #3
 80246d6:	440b      	add	r3, r1
 80246d8:	3308      	adds	r3, #8
 80246da:	681b      	ldr	r3, [r3, #0]
 80246dc:	687a      	ldr	r2, [r7, #4]
 80246de:	429a      	cmp	r2, r3
 80246e0:	d102      	bne.n	80246e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80246e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80246e6:	e100      	b.n	80248ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80246e8:	7dfb      	ldrb	r3, [r7, #23]
 80246ea:	2b01      	cmp	r3, #1
 80246ec:	d140      	bne.n	8024770 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80246ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80246f2:	4980      	ldr	r1, [pc, #512]	@ (80248f4 <etharp_find_entry+0x2d4>)
 80246f4:	4613      	mov	r3, r2
 80246f6:	005b      	lsls	r3, r3, #1
 80246f8:	4413      	add	r3, r2
 80246fa:	00db      	lsls	r3, r3, #3
 80246fc:	440b      	add	r3, r1
 80246fe:	681b      	ldr	r3, [r3, #0]
 8024700:	2b00      	cmp	r3, #0
 8024702:	d01a      	beq.n	802473a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8024704:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024708:	497a      	ldr	r1, [pc, #488]	@ (80248f4 <etharp_find_entry+0x2d4>)
 802470a:	4613      	mov	r3, r2
 802470c:	005b      	lsls	r3, r3, #1
 802470e:	4413      	add	r3, r2
 8024710:	00db      	lsls	r3, r3, #3
 8024712:	440b      	add	r3, r1
 8024714:	3312      	adds	r3, #18
 8024716:	881b      	ldrh	r3, [r3, #0]
 8024718:	8bba      	ldrh	r2, [r7, #28]
 802471a:	429a      	cmp	r2, r3
 802471c:	d845      	bhi.n	80247aa <etharp_find_entry+0x18a>
            old_queue = i;
 802471e:	8c3b      	ldrh	r3, [r7, #32]
 8024720:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8024722:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024726:	4973      	ldr	r1, [pc, #460]	@ (80248f4 <etharp_find_entry+0x2d4>)
 8024728:	4613      	mov	r3, r2
 802472a:	005b      	lsls	r3, r3, #1
 802472c:	4413      	add	r3, r2
 802472e:	00db      	lsls	r3, r3, #3
 8024730:	440b      	add	r3, r1
 8024732:	3312      	adds	r3, #18
 8024734:	881b      	ldrh	r3, [r3, #0]
 8024736:	83bb      	strh	r3, [r7, #28]
 8024738:	e037      	b.n	80247aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 802473a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802473e:	496d      	ldr	r1, [pc, #436]	@ (80248f4 <etharp_find_entry+0x2d4>)
 8024740:	4613      	mov	r3, r2
 8024742:	005b      	lsls	r3, r3, #1
 8024744:	4413      	add	r3, r2
 8024746:	00db      	lsls	r3, r3, #3
 8024748:	440b      	add	r3, r1
 802474a:	3312      	adds	r3, #18
 802474c:	881b      	ldrh	r3, [r3, #0]
 802474e:	8b7a      	ldrh	r2, [r7, #26]
 8024750:	429a      	cmp	r2, r3
 8024752:	d82a      	bhi.n	80247aa <etharp_find_entry+0x18a>
            old_pending = i;
 8024754:	8c3b      	ldrh	r3, [r7, #32]
 8024756:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8024758:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802475c:	4965      	ldr	r1, [pc, #404]	@ (80248f4 <etharp_find_entry+0x2d4>)
 802475e:	4613      	mov	r3, r2
 8024760:	005b      	lsls	r3, r3, #1
 8024762:	4413      	add	r3, r2
 8024764:	00db      	lsls	r3, r3, #3
 8024766:	440b      	add	r3, r1
 8024768:	3312      	adds	r3, #18
 802476a:	881b      	ldrh	r3, [r3, #0]
 802476c:	837b      	strh	r3, [r7, #26]
 802476e:	e01c      	b.n	80247aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8024770:	7dfb      	ldrb	r3, [r7, #23]
 8024772:	2b01      	cmp	r3, #1
 8024774:	d919      	bls.n	80247aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8024776:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802477a:	495e      	ldr	r1, [pc, #376]	@ (80248f4 <etharp_find_entry+0x2d4>)
 802477c:	4613      	mov	r3, r2
 802477e:	005b      	lsls	r3, r3, #1
 8024780:	4413      	add	r3, r2
 8024782:	00db      	lsls	r3, r3, #3
 8024784:	440b      	add	r3, r1
 8024786:	3312      	adds	r3, #18
 8024788:	881b      	ldrh	r3, [r3, #0]
 802478a:	8b3a      	ldrh	r2, [r7, #24]
 802478c:	429a      	cmp	r2, r3
 802478e:	d80c      	bhi.n	80247aa <etharp_find_entry+0x18a>
            old_stable = i;
 8024790:	8c3b      	ldrh	r3, [r7, #32]
 8024792:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8024794:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024798:	4956      	ldr	r1, [pc, #344]	@ (80248f4 <etharp_find_entry+0x2d4>)
 802479a:	4613      	mov	r3, r2
 802479c:	005b      	lsls	r3, r3, #1
 802479e:	4413      	add	r3, r2
 80247a0:	00db      	lsls	r3, r3, #3
 80247a2:	440b      	add	r3, r1
 80247a4:	3312      	adds	r3, #18
 80247a6:	881b      	ldrh	r3, [r3, #0]
 80247a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80247aa:	8c3b      	ldrh	r3, [r7, #32]
 80247ac:	3301      	adds	r3, #1
 80247ae:	b29b      	uxth	r3, r3
 80247b0:	843b      	strh	r3, [r7, #32]
 80247b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80247b6:	2b09      	cmp	r3, #9
 80247b8:	f77f af4c 	ble.w	8024654 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80247bc:	7afb      	ldrb	r3, [r7, #11]
 80247be:	f003 0302 	and.w	r3, r3, #2
 80247c2:	2b00      	cmp	r3, #0
 80247c4:	d108      	bne.n	80247d8 <etharp_find_entry+0x1b8>
 80247c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80247ca:	2b0a      	cmp	r3, #10
 80247cc:	d107      	bne.n	80247de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80247ce:	7afb      	ldrb	r3, [r7, #11]
 80247d0:	f003 0301 	and.w	r3, r3, #1
 80247d4:	2b00      	cmp	r3, #0
 80247d6:	d102      	bne.n	80247de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80247d8:	f04f 33ff 	mov.w	r3, #4294967295
 80247dc:	e085      	b.n	80248ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80247de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80247e2:	2b09      	cmp	r3, #9
 80247e4:	dc02      	bgt.n	80247ec <etharp_find_entry+0x1cc>
    i = empty;
 80247e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80247e8:	843b      	strh	r3, [r7, #32]
 80247ea:	e039      	b.n	8024860 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80247ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80247f0:	2b09      	cmp	r3, #9
 80247f2:	dc14      	bgt.n	802481e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80247f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80247f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80247f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80247fc:	493d      	ldr	r1, [pc, #244]	@ (80248f4 <etharp_find_entry+0x2d4>)
 80247fe:	4613      	mov	r3, r2
 8024800:	005b      	lsls	r3, r3, #1
 8024802:	4413      	add	r3, r2
 8024804:	00db      	lsls	r3, r3, #3
 8024806:	440b      	add	r3, r1
 8024808:	681b      	ldr	r3, [r3, #0]
 802480a:	2b00      	cmp	r3, #0
 802480c:	d018      	beq.n	8024840 <etharp_find_entry+0x220>
 802480e:	4b3a      	ldr	r3, [pc, #232]	@ (80248f8 <etharp_find_entry+0x2d8>)
 8024810:	f240 126d 	movw	r2, #365	@ 0x16d
 8024814:	493b      	ldr	r1, [pc, #236]	@ (8024904 <etharp_find_entry+0x2e4>)
 8024816:	483a      	ldr	r0, [pc, #232]	@ (8024900 <etharp_find_entry+0x2e0>)
 8024818:	f002 ffa8 	bl	802776c <iprintf>
 802481c:	e010      	b.n	8024840 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 802481e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8024822:	2b09      	cmp	r3, #9
 8024824:	dc02      	bgt.n	802482c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8024826:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8024828:	843b      	strh	r3, [r7, #32]
 802482a:	e009      	b.n	8024840 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 802482c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8024830:	2b09      	cmp	r3, #9
 8024832:	dc02      	bgt.n	802483a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8024834:	8bfb      	ldrh	r3, [r7, #30]
 8024836:	843b      	strh	r3, [r7, #32]
 8024838:	e002      	b.n	8024840 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 802483a:	f04f 33ff 	mov.w	r3, #4294967295
 802483e:	e054      	b.n	80248ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8024840:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8024844:	2b09      	cmp	r3, #9
 8024846:	dd06      	ble.n	8024856 <etharp_find_entry+0x236>
 8024848:	4b2b      	ldr	r3, [pc, #172]	@ (80248f8 <etharp_find_entry+0x2d8>)
 802484a:	f240 127f 	movw	r2, #383	@ 0x17f
 802484e:	492e      	ldr	r1, [pc, #184]	@ (8024908 <etharp_find_entry+0x2e8>)
 8024850:	482b      	ldr	r0, [pc, #172]	@ (8024900 <etharp_find_entry+0x2e0>)
 8024852:	f002 ff8b 	bl	802776c <iprintf>
    etharp_free_entry(i);
 8024856:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802485a:	4618      	mov	r0, r3
 802485c:	f7ff fe06 	bl	802446c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8024860:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8024864:	2b09      	cmp	r3, #9
 8024866:	dd06      	ble.n	8024876 <etharp_find_entry+0x256>
 8024868:	4b23      	ldr	r3, [pc, #140]	@ (80248f8 <etharp_find_entry+0x2d8>)
 802486a:	f240 1283 	movw	r2, #387	@ 0x183
 802486e:	4926      	ldr	r1, [pc, #152]	@ (8024908 <etharp_find_entry+0x2e8>)
 8024870:	4823      	ldr	r0, [pc, #140]	@ (8024900 <etharp_find_entry+0x2e0>)
 8024872:	f002 ff7b 	bl	802776c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8024876:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802487a:	491e      	ldr	r1, [pc, #120]	@ (80248f4 <etharp_find_entry+0x2d4>)
 802487c:	4613      	mov	r3, r2
 802487e:	005b      	lsls	r3, r3, #1
 8024880:	4413      	add	r3, r2
 8024882:	00db      	lsls	r3, r3, #3
 8024884:	440b      	add	r3, r1
 8024886:	3314      	adds	r3, #20
 8024888:	781b      	ldrb	r3, [r3, #0]
 802488a:	2b00      	cmp	r3, #0
 802488c:	d006      	beq.n	802489c <etharp_find_entry+0x27c>
 802488e:	4b1a      	ldr	r3, [pc, #104]	@ (80248f8 <etharp_find_entry+0x2d8>)
 8024890:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8024894:	491d      	ldr	r1, [pc, #116]	@ (802490c <etharp_find_entry+0x2ec>)
 8024896:	481a      	ldr	r0, [pc, #104]	@ (8024900 <etharp_find_entry+0x2e0>)
 8024898:	f002 ff68 	bl	802776c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 802489c:	68fb      	ldr	r3, [r7, #12]
 802489e:	2b00      	cmp	r3, #0
 80248a0:	d00b      	beq.n	80248ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80248a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80248a6:	68fb      	ldr	r3, [r7, #12]
 80248a8:	6819      	ldr	r1, [r3, #0]
 80248aa:	4812      	ldr	r0, [pc, #72]	@ (80248f4 <etharp_find_entry+0x2d4>)
 80248ac:	4613      	mov	r3, r2
 80248ae:	005b      	lsls	r3, r3, #1
 80248b0:	4413      	add	r3, r2
 80248b2:	00db      	lsls	r3, r3, #3
 80248b4:	4403      	add	r3, r0
 80248b6:	3304      	adds	r3, #4
 80248b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80248ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80248be:	490d      	ldr	r1, [pc, #52]	@ (80248f4 <etharp_find_entry+0x2d4>)
 80248c0:	4613      	mov	r3, r2
 80248c2:	005b      	lsls	r3, r3, #1
 80248c4:	4413      	add	r3, r2
 80248c6:	00db      	lsls	r3, r3, #3
 80248c8:	440b      	add	r3, r1
 80248ca:	3312      	adds	r3, #18
 80248cc:	2200      	movs	r2, #0
 80248ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80248d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80248d4:	4907      	ldr	r1, [pc, #28]	@ (80248f4 <etharp_find_entry+0x2d4>)
 80248d6:	4613      	mov	r3, r2
 80248d8:	005b      	lsls	r3, r3, #1
 80248da:	4413      	add	r3, r2
 80248dc:	00db      	lsls	r3, r3, #3
 80248de:	440b      	add	r3, r1
 80248e0:	3308      	adds	r3, #8
 80248e2:	687a      	ldr	r2, [r7, #4]
 80248e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80248e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80248ea:	4618      	mov	r0, r3
 80248ec:	3728      	adds	r7, #40	@ 0x28
 80248ee:	46bd      	mov	sp, r7
 80248f0:	bd80      	pop	{r7, pc}
 80248f2:	bf00      	nop
 80248f4:	200111f4 	.word	0x200111f4
 80248f8:	0802bd24 	.word	0x0802bd24
 80248fc:	0802bd5c 	.word	0x0802bd5c
 8024900:	0802bd9c 	.word	0x0802bd9c
 8024904:	0802bdc4 	.word	0x0802bdc4
 8024908:	0802bddc 	.word	0x0802bddc
 802490c:	0802bdf0 	.word	0x0802bdf0

08024910 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8024910:	b580      	push	{r7, lr}
 8024912:	b088      	sub	sp, #32
 8024914:	af02      	add	r7, sp, #8
 8024916:	60f8      	str	r0, [r7, #12]
 8024918:	60b9      	str	r1, [r7, #8]
 802491a:	607a      	str	r2, [r7, #4]
 802491c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802491e:	68fb      	ldr	r3, [r7, #12]
 8024920:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8024924:	2b06      	cmp	r3, #6
 8024926:	d006      	beq.n	8024936 <etharp_update_arp_entry+0x26>
 8024928:	4b48      	ldr	r3, [pc, #288]	@ (8024a4c <etharp_update_arp_entry+0x13c>)
 802492a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 802492e:	4948      	ldr	r1, [pc, #288]	@ (8024a50 <etharp_update_arp_entry+0x140>)
 8024930:	4848      	ldr	r0, [pc, #288]	@ (8024a54 <etharp_update_arp_entry+0x144>)
 8024932:	f002 ff1b 	bl	802776c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8024936:	68bb      	ldr	r3, [r7, #8]
 8024938:	2b00      	cmp	r3, #0
 802493a:	d012      	beq.n	8024962 <etharp_update_arp_entry+0x52>
 802493c:	68bb      	ldr	r3, [r7, #8]
 802493e:	681b      	ldr	r3, [r3, #0]
 8024940:	2b00      	cmp	r3, #0
 8024942:	d00e      	beq.n	8024962 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8024944:	68bb      	ldr	r3, [r7, #8]
 8024946:	681b      	ldr	r3, [r3, #0]
 8024948:	68f9      	ldr	r1, [r7, #12]
 802494a:	4618      	mov	r0, r3
 802494c:	f001 f920 	bl	8025b90 <ip4_addr_isbroadcast_u32>
 8024950:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8024952:	2b00      	cmp	r3, #0
 8024954:	d105      	bne.n	8024962 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8024956:	68bb      	ldr	r3, [r7, #8]
 8024958:	681b      	ldr	r3, [r3, #0]
 802495a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802495e:	2be0      	cmp	r3, #224	@ 0xe0
 8024960:	d102      	bne.n	8024968 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024962:	f06f 030f 	mvn.w	r3, #15
 8024966:	e06c      	b.n	8024a42 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8024968:	78fb      	ldrb	r3, [r7, #3]
 802496a:	68fa      	ldr	r2, [r7, #12]
 802496c:	4619      	mov	r1, r3
 802496e:	68b8      	ldr	r0, [r7, #8]
 8024970:	f7ff fe56 	bl	8024620 <etharp_find_entry>
 8024974:	4603      	mov	r3, r0
 8024976:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8024978:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802497c:	2b00      	cmp	r3, #0
 802497e:	da02      	bge.n	8024986 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8024980:	8afb      	ldrh	r3, [r7, #22]
 8024982:	b25b      	sxtb	r3, r3
 8024984:	e05d      	b.n	8024a42 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8024986:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802498a:	4933      	ldr	r1, [pc, #204]	@ (8024a58 <etharp_update_arp_entry+0x148>)
 802498c:	4613      	mov	r3, r2
 802498e:	005b      	lsls	r3, r3, #1
 8024990:	4413      	add	r3, r2
 8024992:	00db      	lsls	r3, r3, #3
 8024994:	440b      	add	r3, r1
 8024996:	3314      	adds	r3, #20
 8024998:	2202      	movs	r2, #2
 802499a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 802499c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80249a0:	492d      	ldr	r1, [pc, #180]	@ (8024a58 <etharp_update_arp_entry+0x148>)
 80249a2:	4613      	mov	r3, r2
 80249a4:	005b      	lsls	r3, r3, #1
 80249a6:	4413      	add	r3, r2
 80249a8:	00db      	lsls	r3, r3, #3
 80249aa:	440b      	add	r3, r1
 80249ac:	3308      	adds	r3, #8
 80249ae:	68fa      	ldr	r2, [r7, #12]
 80249b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80249b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80249b6:	4613      	mov	r3, r2
 80249b8:	005b      	lsls	r3, r3, #1
 80249ba:	4413      	add	r3, r2
 80249bc:	00db      	lsls	r3, r3, #3
 80249be:	3308      	adds	r3, #8
 80249c0:	4a25      	ldr	r2, [pc, #148]	@ (8024a58 <etharp_update_arp_entry+0x148>)
 80249c2:	4413      	add	r3, r2
 80249c4:	3304      	adds	r3, #4
 80249c6:	2206      	movs	r2, #6
 80249c8:	6879      	ldr	r1, [r7, #4]
 80249ca:	4618      	mov	r0, r3
 80249cc:	f003 f901 	bl	8027bd2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80249d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80249d4:	4920      	ldr	r1, [pc, #128]	@ (8024a58 <etharp_update_arp_entry+0x148>)
 80249d6:	4613      	mov	r3, r2
 80249d8:	005b      	lsls	r3, r3, #1
 80249da:	4413      	add	r3, r2
 80249dc:	00db      	lsls	r3, r3, #3
 80249de:	440b      	add	r3, r1
 80249e0:	3312      	adds	r3, #18
 80249e2:	2200      	movs	r2, #0
 80249e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80249e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80249ea:	491b      	ldr	r1, [pc, #108]	@ (8024a58 <etharp_update_arp_entry+0x148>)
 80249ec:	4613      	mov	r3, r2
 80249ee:	005b      	lsls	r3, r3, #1
 80249f0:	4413      	add	r3, r2
 80249f2:	00db      	lsls	r3, r3, #3
 80249f4:	440b      	add	r3, r1
 80249f6:	681b      	ldr	r3, [r3, #0]
 80249f8:	2b00      	cmp	r3, #0
 80249fa:	d021      	beq.n	8024a40 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80249fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024a00:	4915      	ldr	r1, [pc, #84]	@ (8024a58 <etharp_update_arp_entry+0x148>)
 8024a02:	4613      	mov	r3, r2
 8024a04:	005b      	lsls	r3, r3, #1
 8024a06:	4413      	add	r3, r2
 8024a08:	00db      	lsls	r3, r3, #3
 8024a0a:	440b      	add	r3, r1
 8024a0c:	681b      	ldr	r3, [r3, #0]
 8024a0e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8024a10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024a14:	4910      	ldr	r1, [pc, #64]	@ (8024a58 <etharp_update_arp_entry+0x148>)
 8024a16:	4613      	mov	r3, r2
 8024a18:	005b      	lsls	r3, r3, #1
 8024a1a:	4413      	add	r3, r2
 8024a1c:	00db      	lsls	r3, r3, #3
 8024a1e:	440b      	add	r3, r1
 8024a20:	2200      	movs	r2, #0
 8024a22:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8024a24:	68fb      	ldr	r3, [r7, #12]
 8024a26:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8024a2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8024a2e:	9300      	str	r3, [sp, #0]
 8024a30:	687b      	ldr	r3, [r7, #4]
 8024a32:	6939      	ldr	r1, [r7, #16]
 8024a34:	68f8      	ldr	r0, [r7, #12]
 8024a36:	f001 ffb9 	bl	80269ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8024a3a:	6938      	ldr	r0, [r7, #16]
 8024a3c:	f7f6 fc8a 	bl	801b354 <pbuf_free>
  }
  return ERR_OK;
 8024a40:	2300      	movs	r3, #0
}
 8024a42:	4618      	mov	r0, r3
 8024a44:	3718      	adds	r7, #24
 8024a46:	46bd      	mov	sp, r7
 8024a48:	bd80      	pop	{r7, pc}
 8024a4a:	bf00      	nop
 8024a4c:	0802bd24 	.word	0x0802bd24
 8024a50:	0802be1c 	.word	0x0802be1c
 8024a54:	0802bd9c 	.word	0x0802bd9c
 8024a58:	200111f4 	.word	0x200111f4

08024a5c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8024a5c:	b580      	push	{r7, lr}
 8024a5e:	b084      	sub	sp, #16
 8024a60:	af00      	add	r7, sp, #0
 8024a62:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024a64:	2300      	movs	r3, #0
 8024a66:	60fb      	str	r3, [r7, #12]
 8024a68:	e01e      	b.n	8024aa8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8024a6a:	4913      	ldr	r1, [pc, #76]	@ (8024ab8 <etharp_cleanup_netif+0x5c>)
 8024a6c:	68fa      	ldr	r2, [r7, #12]
 8024a6e:	4613      	mov	r3, r2
 8024a70:	005b      	lsls	r3, r3, #1
 8024a72:	4413      	add	r3, r2
 8024a74:	00db      	lsls	r3, r3, #3
 8024a76:	440b      	add	r3, r1
 8024a78:	3314      	adds	r3, #20
 8024a7a:	781b      	ldrb	r3, [r3, #0]
 8024a7c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8024a7e:	7afb      	ldrb	r3, [r7, #11]
 8024a80:	2b00      	cmp	r3, #0
 8024a82:	d00e      	beq.n	8024aa2 <etharp_cleanup_netif+0x46>
 8024a84:	490c      	ldr	r1, [pc, #48]	@ (8024ab8 <etharp_cleanup_netif+0x5c>)
 8024a86:	68fa      	ldr	r2, [r7, #12]
 8024a88:	4613      	mov	r3, r2
 8024a8a:	005b      	lsls	r3, r3, #1
 8024a8c:	4413      	add	r3, r2
 8024a8e:	00db      	lsls	r3, r3, #3
 8024a90:	440b      	add	r3, r1
 8024a92:	3308      	adds	r3, #8
 8024a94:	681b      	ldr	r3, [r3, #0]
 8024a96:	687a      	ldr	r2, [r7, #4]
 8024a98:	429a      	cmp	r2, r3
 8024a9a:	d102      	bne.n	8024aa2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8024a9c:	68f8      	ldr	r0, [r7, #12]
 8024a9e:	f7ff fce5 	bl	802446c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024aa2:	68fb      	ldr	r3, [r7, #12]
 8024aa4:	3301      	adds	r3, #1
 8024aa6:	60fb      	str	r3, [r7, #12]
 8024aa8:	68fb      	ldr	r3, [r7, #12]
 8024aaa:	2b09      	cmp	r3, #9
 8024aac:	dddd      	ble.n	8024a6a <etharp_cleanup_netif+0xe>
    }
  }
}
 8024aae:	bf00      	nop
 8024ab0:	bf00      	nop
 8024ab2:	3710      	adds	r7, #16
 8024ab4:	46bd      	mov	sp, r7
 8024ab6:	bd80      	pop	{r7, pc}
 8024ab8:	200111f4 	.word	0x200111f4

08024abc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8024abc:	b5b0      	push	{r4, r5, r7, lr}
 8024abe:	b08a      	sub	sp, #40	@ 0x28
 8024ac0:	af04      	add	r7, sp, #16
 8024ac2:	6078      	str	r0, [r7, #4]
 8024ac4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8024ac6:	683b      	ldr	r3, [r7, #0]
 8024ac8:	2b00      	cmp	r3, #0
 8024aca:	d107      	bne.n	8024adc <etharp_input+0x20>
 8024acc:	4b3f      	ldr	r3, [pc, #252]	@ (8024bcc <etharp_input+0x110>)
 8024ace:	f240 228a 	movw	r2, #650	@ 0x28a
 8024ad2:	493f      	ldr	r1, [pc, #252]	@ (8024bd0 <etharp_input+0x114>)
 8024ad4:	483f      	ldr	r0, [pc, #252]	@ (8024bd4 <etharp_input+0x118>)
 8024ad6:	f002 fe49 	bl	802776c <iprintf>
 8024ada:	e074      	b.n	8024bc6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8024adc:	687b      	ldr	r3, [r7, #4]
 8024ade:	685b      	ldr	r3, [r3, #4]
 8024ae0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8024ae2:	693b      	ldr	r3, [r7, #16]
 8024ae4:	881b      	ldrh	r3, [r3, #0]
 8024ae6:	b29b      	uxth	r3, r3
 8024ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8024aec:	d10c      	bne.n	8024b08 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8024aee:	693b      	ldr	r3, [r7, #16]
 8024af0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8024af2:	2b06      	cmp	r3, #6
 8024af4:	d108      	bne.n	8024b08 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8024af6:	693b      	ldr	r3, [r7, #16]
 8024af8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8024afa:	2b04      	cmp	r3, #4
 8024afc:	d104      	bne.n	8024b08 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8024afe:	693b      	ldr	r3, [r7, #16]
 8024b00:	885b      	ldrh	r3, [r3, #2]
 8024b02:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8024b04:	2b08      	cmp	r3, #8
 8024b06:	d003      	beq.n	8024b10 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8024b08:	6878      	ldr	r0, [r7, #4]
 8024b0a:	f7f6 fc23 	bl	801b354 <pbuf_free>
    return;
 8024b0e:	e05a      	b.n	8024bc6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8024b10:	693b      	ldr	r3, [r7, #16]
 8024b12:	330e      	adds	r3, #14
 8024b14:	681b      	ldr	r3, [r3, #0]
 8024b16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8024b18:	693b      	ldr	r3, [r7, #16]
 8024b1a:	3318      	adds	r3, #24
 8024b1c:	681b      	ldr	r3, [r3, #0]
 8024b1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024b20:	683b      	ldr	r3, [r7, #0]
 8024b22:	3304      	adds	r3, #4
 8024b24:	681b      	ldr	r3, [r3, #0]
 8024b26:	2b00      	cmp	r3, #0
 8024b28:	d102      	bne.n	8024b30 <etharp_input+0x74>
    for_us = 0;
 8024b2a:	2300      	movs	r3, #0
 8024b2c:	75fb      	strb	r3, [r7, #23]
 8024b2e:	e009      	b.n	8024b44 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8024b30:	68ba      	ldr	r2, [r7, #8]
 8024b32:	683b      	ldr	r3, [r7, #0]
 8024b34:	3304      	adds	r3, #4
 8024b36:	681b      	ldr	r3, [r3, #0]
 8024b38:	429a      	cmp	r2, r3
 8024b3a:	bf0c      	ite	eq
 8024b3c:	2301      	moveq	r3, #1
 8024b3e:	2300      	movne	r3, #0
 8024b40:	b2db      	uxtb	r3, r3
 8024b42:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8024b44:	693b      	ldr	r3, [r7, #16]
 8024b46:	f103 0208 	add.w	r2, r3, #8
 8024b4a:	7dfb      	ldrb	r3, [r7, #23]
 8024b4c:	2b00      	cmp	r3, #0
 8024b4e:	d001      	beq.n	8024b54 <etharp_input+0x98>
 8024b50:	2301      	movs	r3, #1
 8024b52:	e000      	b.n	8024b56 <etharp_input+0x9a>
 8024b54:	2302      	movs	r3, #2
 8024b56:	f107 010c 	add.w	r1, r7, #12
 8024b5a:	6838      	ldr	r0, [r7, #0]
 8024b5c:	f7ff fed8 	bl	8024910 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8024b60:	693b      	ldr	r3, [r7, #16]
 8024b62:	88db      	ldrh	r3, [r3, #6]
 8024b64:	b29b      	uxth	r3, r3
 8024b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8024b6a:	d003      	beq.n	8024b74 <etharp_input+0xb8>
 8024b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024b70:	d01e      	beq.n	8024bb0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8024b72:	e025      	b.n	8024bc0 <etharp_input+0x104>
      if (for_us) {
 8024b74:	7dfb      	ldrb	r3, [r7, #23]
 8024b76:	2b00      	cmp	r3, #0
 8024b78:	d021      	beq.n	8024bbe <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8024b7a:	683b      	ldr	r3, [r7, #0]
 8024b7c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8024b80:	693b      	ldr	r3, [r7, #16]
 8024b82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8024b86:	683b      	ldr	r3, [r7, #0]
 8024b88:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8024b8c:	683b      	ldr	r3, [r7, #0]
 8024b8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8024b90:	693a      	ldr	r2, [r7, #16]
 8024b92:	3208      	adds	r2, #8
        etharp_raw(netif,
 8024b94:	2102      	movs	r1, #2
 8024b96:	9103      	str	r1, [sp, #12]
 8024b98:	f107 010c 	add.w	r1, r7, #12
 8024b9c:	9102      	str	r1, [sp, #8]
 8024b9e:	9201      	str	r2, [sp, #4]
 8024ba0:	9300      	str	r3, [sp, #0]
 8024ba2:	462b      	mov	r3, r5
 8024ba4:	4622      	mov	r2, r4
 8024ba6:	4601      	mov	r1, r0
 8024ba8:	6838      	ldr	r0, [r7, #0]
 8024baa:	f000 faef 	bl	802518c <etharp_raw>
      break;
 8024bae:	e006      	b.n	8024bbe <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8024bb0:	f107 030c 	add.w	r3, r7, #12
 8024bb4:	4619      	mov	r1, r3
 8024bb6:	6838      	ldr	r0, [r7, #0]
 8024bb8:	f7fe fa02 	bl	8022fc0 <dhcp_arp_reply>
      break;
 8024bbc:	e000      	b.n	8024bc0 <etharp_input+0x104>
      break;
 8024bbe:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8024bc0:	6878      	ldr	r0, [r7, #4]
 8024bc2:	f7f6 fbc7 	bl	801b354 <pbuf_free>
}
 8024bc6:	3718      	adds	r7, #24
 8024bc8:	46bd      	mov	sp, r7
 8024bca:	bdb0      	pop	{r4, r5, r7, pc}
 8024bcc:	0802bd24 	.word	0x0802bd24
 8024bd0:	0802be74 	.word	0x0802be74
 8024bd4:	0802bd9c 	.word	0x0802bd9c

08024bd8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8024bd8:	b580      	push	{r7, lr}
 8024bda:	b086      	sub	sp, #24
 8024bdc:	af02      	add	r7, sp, #8
 8024bde:	60f8      	str	r0, [r7, #12]
 8024be0:	60b9      	str	r1, [r7, #8]
 8024be2:	4613      	mov	r3, r2
 8024be4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8024be6:	79fa      	ldrb	r2, [r7, #7]
 8024be8:	4944      	ldr	r1, [pc, #272]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024bea:	4613      	mov	r3, r2
 8024bec:	005b      	lsls	r3, r3, #1
 8024bee:	4413      	add	r3, r2
 8024bf0:	00db      	lsls	r3, r3, #3
 8024bf2:	440b      	add	r3, r1
 8024bf4:	3314      	adds	r3, #20
 8024bf6:	781b      	ldrb	r3, [r3, #0]
 8024bf8:	2b01      	cmp	r3, #1
 8024bfa:	d806      	bhi.n	8024c0a <etharp_output_to_arp_index+0x32>
 8024bfc:	4b40      	ldr	r3, [pc, #256]	@ (8024d00 <etharp_output_to_arp_index+0x128>)
 8024bfe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8024c02:	4940      	ldr	r1, [pc, #256]	@ (8024d04 <etharp_output_to_arp_index+0x12c>)
 8024c04:	4840      	ldr	r0, [pc, #256]	@ (8024d08 <etharp_output_to_arp_index+0x130>)
 8024c06:	f002 fdb1 	bl	802776c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8024c0a:	79fa      	ldrb	r2, [r7, #7]
 8024c0c:	493b      	ldr	r1, [pc, #236]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024c0e:	4613      	mov	r3, r2
 8024c10:	005b      	lsls	r3, r3, #1
 8024c12:	4413      	add	r3, r2
 8024c14:	00db      	lsls	r3, r3, #3
 8024c16:	440b      	add	r3, r1
 8024c18:	3314      	adds	r3, #20
 8024c1a:	781b      	ldrb	r3, [r3, #0]
 8024c1c:	2b02      	cmp	r3, #2
 8024c1e:	d153      	bne.n	8024cc8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8024c20:	79fa      	ldrb	r2, [r7, #7]
 8024c22:	4936      	ldr	r1, [pc, #216]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024c24:	4613      	mov	r3, r2
 8024c26:	005b      	lsls	r3, r3, #1
 8024c28:	4413      	add	r3, r2
 8024c2a:	00db      	lsls	r3, r3, #3
 8024c2c:	440b      	add	r3, r1
 8024c2e:	3312      	adds	r3, #18
 8024c30:	881b      	ldrh	r3, [r3, #0]
 8024c32:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8024c36:	d919      	bls.n	8024c6c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8024c38:	79fa      	ldrb	r2, [r7, #7]
 8024c3a:	4613      	mov	r3, r2
 8024c3c:	005b      	lsls	r3, r3, #1
 8024c3e:	4413      	add	r3, r2
 8024c40:	00db      	lsls	r3, r3, #3
 8024c42:	4a2e      	ldr	r2, [pc, #184]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024c44:	4413      	add	r3, r2
 8024c46:	3304      	adds	r3, #4
 8024c48:	4619      	mov	r1, r3
 8024c4a:	68f8      	ldr	r0, [r7, #12]
 8024c4c:	f000 fb4c 	bl	80252e8 <etharp_request>
 8024c50:	4603      	mov	r3, r0
 8024c52:	2b00      	cmp	r3, #0
 8024c54:	d138      	bne.n	8024cc8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8024c56:	79fa      	ldrb	r2, [r7, #7]
 8024c58:	4928      	ldr	r1, [pc, #160]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024c5a:	4613      	mov	r3, r2
 8024c5c:	005b      	lsls	r3, r3, #1
 8024c5e:	4413      	add	r3, r2
 8024c60:	00db      	lsls	r3, r3, #3
 8024c62:	440b      	add	r3, r1
 8024c64:	3314      	adds	r3, #20
 8024c66:	2203      	movs	r2, #3
 8024c68:	701a      	strb	r2, [r3, #0]
 8024c6a:	e02d      	b.n	8024cc8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8024c6c:	79fa      	ldrb	r2, [r7, #7]
 8024c6e:	4923      	ldr	r1, [pc, #140]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024c70:	4613      	mov	r3, r2
 8024c72:	005b      	lsls	r3, r3, #1
 8024c74:	4413      	add	r3, r2
 8024c76:	00db      	lsls	r3, r3, #3
 8024c78:	440b      	add	r3, r1
 8024c7a:	3312      	adds	r3, #18
 8024c7c:	881b      	ldrh	r3, [r3, #0]
 8024c7e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8024c82:	d321      	bcc.n	8024cc8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8024c84:	79fa      	ldrb	r2, [r7, #7]
 8024c86:	4613      	mov	r3, r2
 8024c88:	005b      	lsls	r3, r3, #1
 8024c8a:	4413      	add	r3, r2
 8024c8c:	00db      	lsls	r3, r3, #3
 8024c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024c90:	4413      	add	r3, r2
 8024c92:	1d19      	adds	r1, r3, #4
 8024c94:	79fa      	ldrb	r2, [r7, #7]
 8024c96:	4613      	mov	r3, r2
 8024c98:	005b      	lsls	r3, r3, #1
 8024c9a:	4413      	add	r3, r2
 8024c9c:	00db      	lsls	r3, r3, #3
 8024c9e:	3308      	adds	r3, #8
 8024ca0:	4a16      	ldr	r2, [pc, #88]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024ca2:	4413      	add	r3, r2
 8024ca4:	3304      	adds	r3, #4
 8024ca6:	461a      	mov	r2, r3
 8024ca8:	68f8      	ldr	r0, [r7, #12]
 8024caa:	f000 fafb 	bl	80252a4 <etharp_request_dst>
 8024cae:	4603      	mov	r3, r0
 8024cb0:	2b00      	cmp	r3, #0
 8024cb2:	d109      	bne.n	8024cc8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8024cb4:	79fa      	ldrb	r2, [r7, #7]
 8024cb6:	4911      	ldr	r1, [pc, #68]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024cb8:	4613      	mov	r3, r2
 8024cba:	005b      	lsls	r3, r3, #1
 8024cbc:	4413      	add	r3, r2
 8024cbe:	00db      	lsls	r3, r3, #3
 8024cc0:	440b      	add	r3, r1
 8024cc2:	3314      	adds	r3, #20
 8024cc4:	2203      	movs	r2, #3
 8024cc6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8024cc8:	68fb      	ldr	r3, [r7, #12]
 8024cca:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8024cce:	79fa      	ldrb	r2, [r7, #7]
 8024cd0:	4613      	mov	r3, r2
 8024cd2:	005b      	lsls	r3, r3, #1
 8024cd4:	4413      	add	r3, r2
 8024cd6:	00db      	lsls	r3, r3, #3
 8024cd8:	3308      	adds	r3, #8
 8024cda:	4a08      	ldr	r2, [pc, #32]	@ (8024cfc <etharp_output_to_arp_index+0x124>)
 8024cdc:	4413      	add	r3, r2
 8024cde:	3304      	adds	r3, #4
 8024ce0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8024ce4:	9200      	str	r2, [sp, #0]
 8024ce6:	460a      	mov	r2, r1
 8024ce8:	68b9      	ldr	r1, [r7, #8]
 8024cea:	68f8      	ldr	r0, [r7, #12]
 8024cec:	f001 fe5e 	bl	80269ac <ethernet_output>
 8024cf0:	4603      	mov	r3, r0
}
 8024cf2:	4618      	mov	r0, r3
 8024cf4:	3710      	adds	r7, #16
 8024cf6:	46bd      	mov	sp, r7
 8024cf8:	bd80      	pop	{r7, pc}
 8024cfa:	bf00      	nop
 8024cfc:	200111f4 	.word	0x200111f4
 8024d00:	0802bd24 	.word	0x0802bd24
 8024d04:	0802be94 	.word	0x0802be94
 8024d08:	0802bd9c 	.word	0x0802bd9c

08024d0c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8024d0c:	b580      	push	{r7, lr}
 8024d0e:	b08a      	sub	sp, #40	@ 0x28
 8024d10:	af02      	add	r7, sp, #8
 8024d12:	60f8      	str	r0, [r7, #12]
 8024d14:	60b9      	str	r1, [r7, #8]
 8024d16:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8024d1c:	68fb      	ldr	r3, [r7, #12]
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	d106      	bne.n	8024d30 <etharp_output+0x24>
 8024d22:	4b73      	ldr	r3, [pc, #460]	@ (8024ef0 <etharp_output+0x1e4>)
 8024d24:	f240 321e 	movw	r2, #798	@ 0x31e
 8024d28:	4972      	ldr	r1, [pc, #456]	@ (8024ef4 <etharp_output+0x1e8>)
 8024d2a:	4873      	ldr	r0, [pc, #460]	@ (8024ef8 <etharp_output+0x1ec>)
 8024d2c:	f002 fd1e 	bl	802776c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8024d30:	68bb      	ldr	r3, [r7, #8]
 8024d32:	2b00      	cmp	r3, #0
 8024d34:	d106      	bne.n	8024d44 <etharp_output+0x38>
 8024d36:	4b6e      	ldr	r3, [pc, #440]	@ (8024ef0 <etharp_output+0x1e4>)
 8024d38:	f240 321f 	movw	r2, #799	@ 0x31f
 8024d3c:	496f      	ldr	r1, [pc, #444]	@ (8024efc <etharp_output+0x1f0>)
 8024d3e:	486e      	ldr	r0, [pc, #440]	@ (8024ef8 <etharp_output+0x1ec>)
 8024d40:	f002 fd14 	bl	802776c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8024d44:	687b      	ldr	r3, [r7, #4]
 8024d46:	2b00      	cmp	r3, #0
 8024d48:	d106      	bne.n	8024d58 <etharp_output+0x4c>
 8024d4a:	4b69      	ldr	r3, [pc, #420]	@ (8024ef0 <etharp_output+0x1e4>)
 8024d4c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8024d50:	496b      	ldr	r1, [pc, #428]	@ (8024f00 <etharp_output+0x1f4>)
 8024d52:	4869      	ldr	r0, [pc, #420]	@ (8024ef8 <etharp_output+0x1ec>)
 8024d54:	f002 fd0a 	bl	802776c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	681b      	ldr	r3, [r3, #0]
 8024d5c:	68f9      	ldr	r1, [r7, #12]
 8024d5e:	4618      	mov	r0, r3
 8024d60:	f000 ff16 	bl	8025b90 <ip4_addr_isbroadcast_u32>
 8024d64:	4603      	mov	r3, r0
 8024d66:	2b00      	cmp	r3, #0
 8024d68:	d002      	beq.n	8024d70 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8024d6a:	4b66      	ldr	r3, [pc, #408]	@ (8024f04 <etharp_output+0x1f8>)
 8024d6c:	61fb      	str	r3, [r7, #28]
 8024d6e:	e0af      	b.n	8024ed0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8024d70:	687b      	ldr	r3, [r7, #4]
 8024d72:	681b      	ldr	r3, [r3, #0]
 8024d74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8024d78:	2be0      	cmp	r3, #224	@ 0xe0
 8024d7a:	d118      	bne.n	8024dae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8024d7c:	2301      	movs	r3, #1
 8024d7e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8024d80:	2300      	movs	r3, #0
 8024d82:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8024d84:	235e      	movs	r3, #94	@ 0x5e
 8024d86:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8024d88:	687b      	ldr	r3, [r7, #4]
 8024d8a:	3301      	adds	r3, #1
 8024d8c:	781b      	ldrb	r3, [r3, #0]
 8024d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8024d92:	b2db      	uxtb	r3, r3
 8024d94:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	3302      	adds	r3, #2
 8024d9a:	781b      	ldrb	r3, [r3, #0]
 8024d9c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8024d9e:	687b      	ldr	r3, [r7, #4]
 8024da0:	3303      	adds	r3, #3
 8024da2:	781b      	ldrb	r3, [r3, #0]
 8024da4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8024da6:	f107 0310 	add.w	r3, r7, #16
 8024daa:	61fb      	str	r3, [r7, #28]
 8024dac:	e090      	b.n	8024ed0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8024dae:	687b      	ldr	r3, [r7, #4]
 8024db0:	681a      	ldr	r2, [r3, #0]
 8024db2:	68fb      	ldr	r3, [r7, #12]
 8024db4:	3304      	adds	r3, #4
 8024db6:	681b      	ldr	r3, [r3, #0]
 8024db8:	405a      	eors	r2, r3
 8024dba:	68fb      	ldr	r3, [r7, #12]
 8024dbc:	3308      	adds	r3, #8
 8024dbe:	681b      	ldr	r3, [r3, #0]
 8024dc0:	4013      	ands	r3, r2
 8024dc2:	2b00      	cmp	r3, #0
 8024dc4:	d012      	beq.n	8024dec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8024dc6:	687b      	ldr	r3, [r7, #4]
 8024dc8:	681b      	ldr	r3, [r3, #0]
 8024dca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8024dcc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8024dd0:	4293      	cmp	r3, r2
 8024dd2:	d00b      	beq.n	8024dec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8024dd4:	68fb      	ldr	r3, [r7, #12]
 8024dd6:	330c      	adds	r3, #12
 8024dd8:	681b      	ldr	r3, [r3, #0]
 8024dda:	2b00      	cmp	r3, #0
 8024ddc:	d003      	beq.n	8024de6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8024dde:	68fb      	ldr	r3, [r7, #12]
 8024de0:	330c      	adds	r3, #12
 8024de2:	61bb      	str	r3, [r7, #24]
 8024de4:	e002      	b.n	8024dec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8024de6:	f06f 0303 	mvn.w	r3, #3
 8024dea:	e07d      	b.n	8024ee8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8024dec:	4b46      	ldr	r3, [pc, #280]	@ (8024f08 <etharp_output+0x1fc>)
 8024dee:	781b      	ldrb	r3, [r3, #0]
 8024df0:	4619      	mov	r1, r3
 8024df2:	4a46      	ldr	r2, [pc, #280]	@ (8024f0c <etharp_output+0x200>)
 8024df4:	460b      	mov	r3, r1
 8024df6:	005b      	lsls	r3, r3, #1
 8024df8:	440b      	add	r3, r1
 8024dfa:	00db      	lsls	r3, r3, #3
 8024dfc:	4413      	add	r3, r2
 8024dfe:	3314      	adds	r3, #20
 8024e00:	781b      	ldrb	r3, [r3, #0]
 8024e02:	2b01      	cmp	r3, #1
 8024e04:	d925      	bls.n	8024e52 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8024e06:	4b40      	ldr	r3, [pc, #256]	@ (8024f08 <etharp_output+0x1fc>)
 8024e08:	781b      	ldrb	r3, [r3, #0]
 8024e0a:	4619      	mov	r1, r3
 8024e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8024f0c <etharp_output+0x200>)
 8024e0e:	460b      	mov	r3, r1
 8024e10:	005b      	lsls	r3, r3, #1
 8024e12:	440b      	add	r3, r1
 8024e14:	00db      	lsls	r3, r3, #3
 8024e16:	4413      	add	r3, r2
 8024e18:	3308      	adds	r3, #8
 8024e1a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8024e1c:	68fa      	ldr	r2, [r7, #12]
 8024e1e:	429a      	cmp	r2, r3
 8024e20:	d117      	bne.n	8024e52 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8024e22:	69bb      	ldr	r3, [r7, #24]
 8024e24:	681a      	ldr	r2, [r3, #0]
 8024e26:	4b38      	ldr	r3, [pc, #224]	@ (8024f08 <etharp_output+0x1fc>)
 8024e28:	781b      	ldrb	r3, [r3, #0]
 8024e2a:	4618      	mov	r0, r3
 8024e2c:	4937      	ldr	r1, [pc, #220]	@ (8024f0c <etharp_output+0x200>)
 8024e2e:	4603      	mov	r3, r0
 8024e30:	005b      	lsls	r3, r3, #1
 8024e32:	4403      	add	r3, r0
 8024e34:	00db      	lsls	r3, r3, #3
 8024e36:	440b      	add	r3, r1
 8024e38:	3304      	adds	r3, #4
 8024e3a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8024e3c:	429a      	cmp	r2, r3
 8024e3e:	d108      	bne.n	8024e52 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8024e40:	4b31      	ldr	r3, [pc, #196]	@ (8024f08 <etharp_output+0x1fc>)
 8024e42:	781b      	ldrb	r3, [r3, #0]
 8024e44:	461a      	mov	r2, r3
 8024e46:	68b9      	ldr	r1, [r7, #8]
 8024e48:	68f8      	ldr	r0, [r7, #12]
 8024e4a:	f7ff fec5 	bl	8024bd8 <etharp_output_to_arp_index>
 8024e4e:	4603      	mov	r3, r0
 8024e50:	e04a      	b.n	8024ee8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8024e52:	2300      	movs	r3, #0
 8024e54:	75fb      	strb	r3, [r7, #23]
 8024e56:	e031      	b.n	8024ebc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024e58:	7dfa      	ldrb	r2, [r7, #23]
 8024e5a:	492c      	ldr	r1, [pc, #176]	@ (8024f0c <etharp_output+0x200>)
 8024e5c:	4613      	mov	r3, r2
 8024e5e:	005b      	lsls	r3, r3, #1
 8024e60:	4413      	add	r3, r2
 8024e62:	00db      	lsls	r3, r3, #3
 8024e64:	440b      	add	r3, r1
 8024e66:	3314      	adds	r3, #20
 8024e68:	781b      	ldrb	r3, [r3, #0]
 8024e6a:	2b01      	cmp	r3, #1
 8024e6c:	d923      	bls.n	8024eb6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8024e6e:	7dfa      	ldrb	r2, [r7, #23]
 8024e70:	4926      	ldr	r1, [pc, #152]	@ (8024f0c <etharp_output+0x200>)
 8024e72:	4613      	mov	r3, r2
 8024e74:	005b      	lsls	r3, r3, #1
 8024e76:	4413      	add	r3, r2
 8024e78:	00db      	lsls	r3, r3, #3
 8024e7a:	440b      	add	r3, r1
 8024e7c:	3308      	adds	r3, #8
 8024e7e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024e80:	68fa      	ldr	r2, [r7, #12]
 8024e82:	429a      	cmp	r2, r3
 8024e84:	d117      	bne.n	8024eb6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8024e86:	69bb      	ldr	r3, [r7, #24]
 8024e88:	6819      	ldr	r1, [r3, #0]
 8024e8a:	7dfa      	ldrb	r2, [r7, #23]
 8024e8c:	481f      	ldr	r0, [pc, #124]	@ (8024f0c <etharp_output+0x200>)
 8024e8e:	4613      	mov	r3, r2
 8024e90:	005b      	lsls	r3, r3, #1
 8024e92:	4413      	add	r3, r2
 8024e94:	00db      	lsls	r3, r3, #3
 8024e96:	4403      	add	r3, r0
 8024e98:	3304      	adds	r3, #4
 8024e9a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8024e9c:	4299      	cmp	r1, r3
 8024e9e:	d10a      	bne.n	8024eb6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8024ea0:	4a19      	ldr	r2, [pc, #100]	@ (8024f08 <etharp_output+0x1fc>)
 8024ea2:	7dfb      	ldrb	r3, [r7, #23]
 8024ea4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8024ea6:	7dfb      	ldrb	r3, [r7, #23]
 8024ea8:	461a      	mov	r2, r3
 8024eaa:	68b9      	ldr	r1, [r7, #8]
 8024eac:	68f8      	ldr	r0, [r7, #12]
 8024eae:	f7ff fe93 	bl	8024bd8 <etharp_output_to_arp_index>
 8024eb2:	4603      	mov	r3, r0
 8024eb4:	e018      	b.n	8024ee8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8024eb6:	7dfb      	ldrb	r3, [r7, #23]
 8024eb8:	3301      	adds	r3, #1
 8024eba:	75fb      	strb	r3, [r7, #23]
 8024ebc:	7dfb      	ldrb	r3, [r7, #23]
 8024ebe:	2b09      	cmp	r3, #9
 8024ec0:	d9ca      	bls.n	8024e58 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8024ec2:	68ba      	ldr	r2, [r7, #8]
 8024ec4:	69b9      	ldr	r1, [r7, #24]
 8024ec6:	68f8      	ldr	r0, [r7, #12]
 8024ec8:	f000 f822 	bl	8024f10 <etharp_query>
 8024ecc:	4603      	mov	r3, r0
 8024ece:	e00b      	b.n	8024ee8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8024ed0:	68fb      	ldr	r3, [r7, #12]
 8024ed2:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8024ed6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8024eda:	9300      	str	r3, [sp, #0]
 8024edc:	69fb      	ldr	r3, [r7, #28]
 8024ede:	68b9      	ldr	r1, [r7, #8]
 8024ee0:	68f8      	ldr	r0, [r7, #12]
 8024ee2:	f001 fd63 	bl	80269ac <ethernet_output>
 8024ee6:	4603      	mov	r3, r0
}
 8024ee8:	4618      	mov	r0, r3
 8024eea:	3720      	adds	r7, #32
 8024eec:	46bd      	mov	sp, r7
 8024eee:	bd80      	pop	{r7, pc}
 8024ef0:	0802bd24 	.word	0x0802bd24
 8024ef4:	0802be74 	.word	0x0802be74
 8024ef8:	0802bd9c 	.word	0x0802bd9c
 8024efc:	0802bec4 	.word	0x0802bec4
 8024f00:	0802be64 	.word	0x0802be64
 8024f04:	0802c590 	.word	0x0802c590
 8024f08:	200112e4 	.word	0x200112e4
 8024f0c:	200111f4 	.word	0x200111f4

08024f10 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8024f10:	b580      	push	{r7, lr}
 8024f12:	b08c      	sub	sp, #48	@ 0x30
 8024f14:	af02      	add	r7, sp, #8
 8024f16:	60f8      	str	r0, [r7, #12]
 8024f18:	60b9      	str	r1, [r7, #8]
 8024f1a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8024f1c:	68fb      	ldr	r3, [r7, #12]
 8024f1e:	332a      	adds	r3, #42	@ 0x2a
 8024f20:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8024f22:	23ff      	movs	r3, #255	@ 0xff
 8024f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8024f28:	2300      	movs	r3, #0
 8024f2a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024f2c:	68bb      	ldr	r3, [r7, #8]
 8024f2e:	681b      	ldr	r3, [r3, #0]
 8024f30:	68f9      	ldr	r1, [r7, #12]
 8024f32:	4618      	mov	r0, r3
 8024f34:	f000 fe2c 	bl	8025b90 <ip4_addr_isbroadcast_u32>
 8024f38:	4603      	mov	r3, r0
 8024f3a:	2b00      	cmp	r3, #0
 8024f3c:	d10c      	bne.n	8024f58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8024f3e:	68bb      	ldr	r3, [r7, #8]
 8024f40:	681b      	ldr	r3, [r3, #0]
 8024f42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024f46:	2be0      	cmp	r3, #224	@ 0xe0
 8024f48:	d006      	beq.n	8024f58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8024f4a:	68bb      	ldr	r3, [r7, #8]
 8024f4c:	2b00      	cmp	r3, #0
 8024f4e:	d003      	beq.n	8024f58 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8024f50:	68bb      	ldr	r3, [r7, #8]
 8024f52:	681b      	ldr	r3, [r3, #0]
 8024f54:	2b00      	cmp	r3, #0
 8024f56:	d102      	bne.n	8024f5e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024f58:	f06f 030f 	mvn.w	r3, #15
 8024f5c:	e101      	b.n	8025162 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8024f5e:	68fa      	ldr	r2, [r7, #12]
 8024f60:	2101      	movs	r1, #1
 8024f62:	68b8      	ldr	r0, [r7, #8]
 8024f64:	f7ff fb5c 	bl	8024620 <etharp_find_entry>
 8024f68:	4603      	mov	r3, r0
 8024f6a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8024f6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8024f70:	2b00      	cmp	r3, #0
 8024f72:	da02      	bge.n	8024f7a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8024f74:	8a7b      	ldrh	r3, [r7, #18]
 8024f76:	b25b      	sxtb	r3, r3
 8024f78:	e0f3      	b.n	8025162 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8024f7a:	8a7b      	ldrh	r3, [r7, #18]
 8024f7c:	2b7e      	cmp	r3, #126	@ 0x7e
 8024f7e:	d906      	bls.n	8024f8e <etharp_query+0x7e>
 8024f80:	4b7a      	ldr	r3, [pc, #488]	@ (802516c <etharp_query+0x25c>)
 8024f82:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8024f86:	497a      	ldr	r1, [pc, #488]	@ (8025170 <etharp_query+0x260>)
 8024f88:	487a      	ldr	r0, [pc, #488]	@ (8025174 <etharp_query+0x264>)
 8024f8a:	f002 fbef 	bl	802776c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8024f8e:	8a7b      	ldrh	r3, [r7, #18]
 8024f90:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8024f92:	7c7a      	ldrb	r2, [r7, #17]
 8024f94:	4978      	ldr	r1, [pc, #480]	@ (8025178 <etharp_query+0x268>)
 8024f96:	4613      	mov	r3, r2
 8024f98:	005b      	lsls	r3, r3, #1
 8024f9a:	4413      	add	r3, r2
 8024f9c:	00db      	lsls	r3, r3, #3
 8024f9e:	440b      	add	r3, r1
 8024fa0:	3314      	adds	r3, #20
 8024fa2:	781b      	ldrb	r3, [r3, #0]
 8024fa4:	2b00      	cmp	r3, #0
 8024fa6:	d115      	bne.n	8024fd4 <etharp_query+0xc4>
    is_new_entry = 1;
 8024fa8:	2301      	movs	r3, #1
 8024faa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8024fac:	7c7a      	ldrb	r2, [r7, #17]
 8024fae:	4972      	ldr	r1, [pc, #456]	@ (8025178 <etharp_query+0x268>)
 8024fb0:	4613      	mov	r3, r2
 8024fb2:	005b      	lsls	r3, r3, #1
 8024fb4:	4413      	add	r3, r2
 8024fb6:	00db      	lsls	r3, r3, #3
 8024fb8:	440b      	add	r3, r1
 8024fba:	3314      	adds	r3, #20
 8024fbc:	2201      	movs	r2, #1
 8024fbe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8024fc0:	7c7a      	ldrb	r2, [r7, #17]
 8024fc2:	496d      	ldr	r1, [pc, #436]	@ (8025178 <etharp_query+0x268>)
 8024fc4:	4613      	mov	r3, r2
 8024fc6:	005b      	lsls	r3, r3, #1
 8024fc8:	4413      	add	r3, r2
 8024fca:	00db      	lsls	r3, r3, #3
 8024fcc:	440b      	add	r3, r1
 8024fce:	3308      	adds	r3, #8
 8024fd0:	68fa      	ldr	r2, [r7, #12]
 8024fd2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8024fd4:	7c7a      	ldrb	r2, [r7, #17]
 8024fd6:	4968      	ldr	r1, [pc, #416]	@ (8025178 <etharp_query+0x268>)
 8024fd8:	4613      	mov	r3, r2
 8024fda:	005b      	lsls	r3, r3, #1
 8024fdc:	4413      	add	r3, r2
 8024fde:	00db      	lsls	r3, r3, #3
 8024fe0:	440b      	add	r3, r1
 8024fe2:	3314      	adds	r3, #20
 8024fe4:	781b      	ldrb	r3, [r3, #0]
 8024fe6:	2b01      	cmp	r3, #1
 8024fe8:	d011      	beq.n	802500e <etharp_query+0xfe>
 8024fea:	7c7a      	ldrb	r2, [r7, #17]
 8024fec:	4962      	ldr	r1, [pc, #392]	@ (8025178 <etharp_query+0x268>)
 8024fee:	4613      	mov	r3, r2
 8024ff0:	005b      	lsls	r3, r3, #1
 8024ff2:	4413      	add	r3, r2
 8024ff4:	00db      	lsls	r3, r3, #3
 8024ff6:	440b      	add	r3, r1
 8024ff8:	3314      	adds	r3, #20
 8024ffa:	781b      	ldrb	r3, [r3, #0]
 8024ffc:	2b01      	cmp	r3, #1
 8024ffe:	d806      	bhi.n	802500e <etharp_query+0xfe>
 8025000:	4b5a      	ldr	r3, [pc, #360]	@ (802516c <etharp_query+0x25c>)
 8025002:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8025006:	495d      	ldr	r1, [pc, #372]	@ (802517c <etharp_query+0x26c>)
 8025008:	485a      	ldr	r0, [pc, #360]	@ (8025174 <etharp_query+0x264>)
 802500a:	f002 fbaf 	bl	802776c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 802500e:	6a3b      	ldr	r3, [r7, #32]
 8025010:	2b00      	cmp	r3, #0
 8025012:	d102      	bne.n	802501a <etharp_query+0x10a>
 8025014:	687b      	ldr	r3, [r7, #4]
 8025016:	2b00      	cmp	r3, #0
 8025018:	d10c      	bne.n	8025034 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802501a:	68b9      	ldr	r1, [r7, #8]
 802501c:	68f8      	ldr	r0, [r7, #12]
 802501e:	f000 f963 	bl	80252e8 <etharp_request>
 8025022:	4603      	mov	r3, r0
 8025024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8025028:	687b      	ldr	r3, [r7, #4]
 802502a:	2b00      	cmp	r3, #0
 802502c:	d102      	bne.n	8025034 <etharp_query+0x124>
      return result;
 802502e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8025032:	e096      	b.n	8025162 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8025034:	687b      	ldr	r3, [r7, #4]
 8025036:	2b00      	cmp	r3, #0
 8025038:	d106      	bne.n	8025048 <etharp_query+0x138>
 802503a:	4b4c      	ldr	r3, [pc, #304]	@ (802516c <etharp_query+0x25c>)
 802503c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8025040:	494f      	ldr	r1, [pc, #316]	@ (8025180 <etharp_query+0x270>)
 8025042:	484c      	ldr	r0, [pc, #304]	@ (8025174 <etharp_query+0x264>)
 8025044:	f002 fb92 	bl	802776c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8025048:	7c7a      	ldrb	r2, [r7, #17]
 802504a:	494b      	ldr	r1, [pc, #300]	@ (8025178 <etharp_query+0x268>)
 802504c:	4613      	mov	r3, r2
 802504e:	005b      	lsls	r3, r3, #1
 8025050:	4413      	add	r3, r2
 8025052:	00db      	lsls	r3, r3, #3
 8025054:	440b      	add	r3, r1
 8025056:	3314      	adds	r3, #20
 8025058:	781b      	ldrb	r3, [r3, #0]
 802505a:	2b01      	cmp	r3, #1
 802505c:	d917      	bls.n	802508e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802505e:	4a49      	ldr	r2, [pc, #292]	@ (8025184 <etharp_query+0x274>)
 8025060:	7c7b      	ldrb	r3, [r7, #17]
 8025062:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8025064:	7c7a      	ldrb	r2, [r7, #17]
 8025066:	4613      	mov	r3, r2
 8025068:	005b      	lsls	r3, r3, #1
 802506a:	4413      	add	r3, r2
 802506c:	00db      	lsls	r3, r3, #3
 802506e:	3308      	adds	r3, #8
 8025070:	4a41      	ldr	r2, [pc, #260]	@ (8025178 <etharp_query+0x268>)
 8025072:	4413      	add	r3, r2
 8025074:	3304      	adds	r3, #4
 8025076:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 802507a:	9200      	str	r2, [sp, #0]
 802507c:	697a      	ldr	r2, [r7, #20]
 802507e:	6879      	ldr	r1, [r7, #4]
 8025080:	68f8      	ldr	r0, [r7, #12]
 8025082:	f001 fc93 	bl	80269ac <ethernet_output>
 8025086:	4603      	mov	r3, r0
 8025088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 802508c:	e067      	b.n	802515e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802508e:	7c7a      	ldrb	r2, [r7, #17]
 8025090:	4939      	ldr	r1, [pc, #228]	@ (8025178 <etharp_query+0x268>)
 8025092:	4613      	mov	r3, r2
 8025094:	005b      	lsls	r3, r3, #1
 8025096:	4413      	add	r3, r2
 8025098:	00db      	lsls	r3, r3, #3
 802509a:	440b      	add	r3, r1
 802509c:	3314      	adds	r3, #20
 802509e:	781b      	ldrb	r3, [r3, #0]
 80250a0:	2b01      	cmp	r3, #1
 80250a2:	d15c      	bne.n	802515e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80250a4:	2300      	movs	r3, #0
 80250a6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80250a8:	687b      	ldr	r3, [r7, #4]
 80250aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80250ac:	e01c      	b.n	80250e8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80250ae:	69fb      	ldr	r3, [r7, #28]
 80250b0:	895a      	ldrh	r2, [r3, #10]
 80250b2:	69fb      	ldr	r3, [r7, #28]
 80250b4:	891b      	ldrh	r3, [r3, #8]
 80250b6:	429a      	cmp	r2, r3
 80250b8:	d10a      	bne.n	80250d0 <etharp_query+0x1c0>
 80250ba:	69fb      	ldr	r3, [r7, #28]
 80250bc:	681b      	ldr	r3, [r3, #0]
 80250be:	2b00      	cmp	r3, #0
 80250c0:	d006      	beq.n	80250d0 <etharp_query+0x1c0>
 80250c2:	4b2a      	ldr	r3, [pc, #168]	@ (802516c <etharp_query+0x25c>)
 80250c4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80250c8:	492f      	ldr	r1, [pc, #188]	@ (8025188 <etharp_query+0x278>)
 80250ca:	482a      	ldr	r0, [pc, #168]	@ (8025174 <etharp_query+0x264>)
 80250cc:	f002 fb4e 	bl	802776c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80250d0:	69fb      	ldr	r3, [r7, #28]
 80250d2:	7b1b      	ldrb	r3, [r3, #12]
 80250d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80250d8:	2b00      	cmp	r3, #0
 80250da:	d002      	beq.n	80250e2 <etharp_query+0x1d2>
        copy_needed = 1;
 80250dc:	2301      	movs	r3, #1
 80250de:	61bb      	str	r3, [r7, #24]
        break;
 80250e0:	e005      	b.n	80250ee <etharp_query+0x1de>
      }
      p = p->next;
 80250e2:	69fb      	ldr	r3, [r7, #28]
 80250e4:	681b      	ldr	r3, [r3, #0]
 80250e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80250e8:	69fb      	ldr	r3, [r7, #28]
 80250ea:	2b00      	cmp	r3, #0
 80250ec:	d1df      	bne.n	80250ae <etharp_query+0x19e>
    }
    if (copy_needed) {
 80250ee:	69bb      	ldr	r3, [r7, #24]
 80250f0:	2b00      	cmp	r3, #0
 80250f2:	d007      	beq.n	8025104 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80250f4:	687a      	ldr	r2, [r7, #4]
 80250f6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80250fa:	200e      	movs	r0, #14
 80250fc:	f7f6 fba2 	bl	801b844 <pbuf_clone>
 8025100:	61f8      	str	r0, [r7, #28]
 8025102:	e004      	b.n	802510e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8025104:	687b      	ldr	r3, [r7, #4]
 8025106:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8025108:	69f8      	ldr	r0, [r7, #28]
 802510a:	f7f6 f9c9 	bl	801b4a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 802510e:	69fb      	ldr	r3, [r7, #28]
 8025110:	2b00      	cmp	r3, #0
 8025112:	d021      	beq.n	8025158 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8025114:	7c7a      	ldrb	r2, [r7, #17]
 8025116:	4918      	ldr	r1, [pc, #96]	@ (8025178 <etharp_query+0x268>)
 8025118:	4613      	mov	r3, r2
 802511a:	005b      	lsls	r3, r3, #1
 802511c:	4413      	add	r3, r2
 802511e:	00db      	lsls	r3, r3, #3
 8025120:	440b      	add	r3, r1
 8025122:	681b      	ldr	r3, [r3, #0]
 8025124:	2b00      	cmp	r3, #0
 8025126:	d00a      	beq.n	802513e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8025128:	7c7a      	ldrb	r2, [r7, #17]
 802512a:	4913      	ldr	r1, [pc, #76]	@ (8025178 <etharp_query+0x268>)
 802512c:	4613      	mov	r3, r2
 802512e:	005b      	lsls	r3, r3, #1
 8025130:	4413      	add	r3, r2
 8025132:	00db      	lsls	r3, r3, #3
 8025134:	440b      	add	r3, r1
 8025136:	681b      	ldr	r3, [r3, #0]
 8025138:	4618      	mov	r0, r3
 802513a:	f7f6 f90b 	bl	801b354 <pbuf_free>
      }
      arp_table[i].q = p;
 802513e:	7c7a      	ldrb	r2, [r7, #17]
 8025140:	490d      	ldr	r1, [pc, #52]	@ (8025178 <etharp_query+0x268>)
 8025142:	4613      	mov	r3, r2
 8025144:	005b      	lsls	r3, r3, #1
 8025146:	4413      	add	r3, r2
 8025148:	00db      	lsls	r3, r3, #3
 802514a:	440b      	add	r3, r1
 802514c:	69fa      	ldr	r2, [r7, #28]
 802514e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8025150:	2300      	movs	r3, #0
 8025152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8025156:	e002      	b.n	802515e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8025158:	23ff      	movs	r3, #255	@ 0xff
 802515a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 802515e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8025162:	4618      	mov	r0, r3
 8025164:	3728      	adds	r7, #40	@ 0x28
 8025166:	46bd      	mov	sp, r7
 8025168:	bd80      	pop	{r7, pc}
 802516a:	bf00      	nop
 802516c:	0802bd24 	.word	0x0802bd24
 8025170:	0802bed0 	.word	0x0802bed0
 8025174:	0802bd9c 	.word	0x0802bd9c
 8025178:	200111f4 	.word	0x200111f4
 802517c:	0802bee0 	.word	0x0802bee0
 8025180:	0802bec4 	.word	0x0802bec4
 8025184:	200112e4 	.word	0x200112e4
 8025188:	0802bf08 	.word	0x0802bf08

0802518c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 802518c:	b580      	push	{r7, lr}
 802518e:	b08a      	sub	sp, #40	@ 0x28
 8025190:	af02      	add	r7, sp, #8
 8025192:	60f8      	str	r0, [r7, #12]
 8025194:	60b9      	str	r1, [r7, #8]
 8025196:	607a      	str	r2, [r7, #4]
 8025198:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802519a:	2300      	movs	r3, #0
 802519c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802519e:	68fb      	ldr	r3, [r7, #12]
 80251a0:	2b00      	cmp	r3, #0
 80251a2:	d106      	bne.n	80251b2 <etharp_raw+0x26>
 80251a4:	4b3a      	ldr	r3, [pc, #232]	@ (8025290 <etharp_raw+0x104>)
 80251a6:	f240 4257 	movw	r2, #1111	@ 0x457
 80251aa:	493a      	ldr	r1, [pc, #232]	@ (8025294 <etharp_raw+0x108>)
 80251ac:	483a      	ldr	r0, [pc, #232]	@ (8025298 <etharp_raw+0x10c>)
 80251ae:	f002 fadd 	bl	802776c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80251b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80251b6:	211c      	movs	r1, #28
 80251b8:	200e      	movs	r0, #14
 80251ba:	f7f5 fdb5 	bl	801ad28 <pbuf_alloc>
 80251be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80251c0:	69bb      	ldr	r3, [r7, #24]
 80251c2:	2b00      	cmp	r3, #0
 80251c4:	d102      	bne.n	80251cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80251c6:	f04f 33ff 	mov.w	r3, #4294967295
 80251ca:	e05d      	b.n	8025288 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80251cc:	69bb      	ldr	r3, [r7, #24]
 80251ce:	895b      	ldrh	r3, [r3, #10]
 80251d0:	2b1b      	cmp	r3, #27
 80251d2:	d806      	bhi.n	80251e2 <etharp_raw+0x56>
 80251d4:	4b2e      	ldr	r3, [pc, #184]	@ (8025290 <etharp_raw+0x104>)
 80251d6:	f240 4262 	movw	r2, #1122	@ 0x462
 80251da:	4930      	ldr	r1, [pc, #192]	@ (802529c <etharp_raw+0x110>)
 80251dc:	482e      	ldr	r0, [pc, #184]	@ (8025298 <etharp_raw+0x10c>)
 80251de:	f002 fac5 	bl	802776c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80251e2:	69bb      	ldr	r3, [r7, #24]
 80251e4:	685b      	ldr	r3, [r3, #4]
 80251e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80251e8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80251ea:	4618      	mov	r0, r3
 80251ec:	f7f4 fc82 	bl	8019af4 <lwip_htons>
 80251f0:	4603      	mov	r3, r0
 80251f2:	461a      	mov	r2, r3
 80251f4:	697b      	ldr	r3, [r7, #20]
 80251f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80251f8:	68fb      	ldr	r3, [r7, #12]
 80251fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80251fe:	2b06      	cmp	r3, #6
 8025200:	d006      	beq.n	8025210 <etharp_raw+0x84>
 8025202:	4b23      	ldr	r3, [pc, #140]	@ (8025290 <etharp_raw+0x104>)
 8025204:	f240 4269 	movw	r2, #1129	@ 0x469
 8025208:	4925      	ldr	r1, [pc, #148]	@ (80252a0 <etharp_raw+0x114>)
 802520a:	4823      	ldr	r0, [pc, #140]	@ (8025298 <etharp_raw+0x10c>)
 802520c:	f002 faae 	bl	802776c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8025210:	697b      	ldr	r3, [r7, #20]
 8025212:	3308      	adds	r3, #8
 8025214:	2206      	movs	r2, #6
 8025216:	6839      	ldr	r1, [r7, #0]
 8025218:	4618      	mov	r0, r3
 802521a:	f002 fcda 	bl	8027bd2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802521e:	697b      	ldr	r3, [r7, #20]
 8025220:	3312      	adds	r3, #18
 8025222:	2206      	movs	r2, #6
 8025224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8025226:	4618      	mov	r0, r3
 8025228:	f002 fcd3 	bl	8027bd2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 802522c:	697b      	ldr	r3, [r7, #20]
 802522e:	330e      	adds	r3, #14
 8025230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8025232:	6812      	ldr	r2, [r2, #0]
 8025234:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8025236:	697b      	ldr	r3, [r7, #20]
 8025238:	3318      	adds	r3, #24
 802523a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802523c:	6812      	ldr	r2, [r2, #0]
 802523e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8025240:	697b      	ldr	r3, [r7, #20]
 8025242:	2200      	movs	r2, #0
 8025244:	701a      	strb	r2, [r3, #0]
 8025246:	2200      	movs	r2, #0
 8025248:	f042 0201 	orr.w	r2, r2, #1
 802524c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802524e:	697b      	ldr	r3, [r7, #20]
 8025250:	2200      	movs	r2, #0
 8025252:	f042 0208 	orr.w	r2, r2, #8
 8025256:	709a      	strb	r2, [r3, #2]
 8025258:	2200      	movs	r2, #0
 802525a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 802525c:	697b      	ldr	r3, [r7, #20]
 802525e:	2206      	movs	r2, #6
 8025260:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8025262:	697b      	ldr	r3, [r7, #20]
 8025264:	2204      	movs	r2, #4
 8025266:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8025268:	f640 0306 	movw	r3, #2054	@ 0x806
 802526c:	9300      	str	r3, [sp, #0]
 802526e:	687b      	ldr	r3, [r7, #4]
 8025270:	68ba      	ldr	r2, [r7, #8]
 8025272:	69b9      	ldr	r1, [r7, #24]
 8025274:	68f8      	ldr	r0, [r7, #12]
 8025276:	f001 fb99 	bl	80269ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802527a:	69b8      	ldr	r0, [r7, #24]
 802527c:	f7f6 f86a 	bl	801b354 <pbuf_free>
  p = NULL;
 8025280:	2300      	movs	r3, #0
 8025282:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8025284:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8025288:	4618      	mov	r0, r3
 802528a:	3720      	adds	r7, #32
 802528c:	46bd      	mov	sp, r7
 802528e:	bd80      	pop	{r7, pc}
 8025290:	0802bd24 	.word	0x0802bd24
 8025294:	0802be74 	.word	0x0802be74
 8025298:	0802bd9c 	.word	0x0802bd9c
 802529c:	0802bf24 	.word	0x0802bf24
 80252a0:	0802bf58 	.word	0x0802bf58

080252a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80252a4:	b580      	push	{r7, lr}
 80252a6:	b088      	sub	sp, #32
 80252a8:	af04      	add	r7, sp, #16
 80252aa:	60f8      	str	r0, [r7, #12]
 80252ac:	60b9      	str	r1, [r7, #8]
 80252ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80252b0:	68fb      	ldr	r3, [r7, #12]
 80252b2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80252b6:	68fb      	ldr	r3, [r7, #12]
 80252b8:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80252bc:	68fb      	ldr	r3, [r7, #12]
 80252be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80252c0:	2201      	movs	r2, #1
 80252c2:	9203      	str	r2, [sp, #12]
 80252c4:	68ba      	ldr	r2, [r7, #8]
 80252c6:	9202      	str	r2, [sp, #8]
 80252c8:	4a06      	ldr	r2, [pc, #24]	@ (80252e4 <etharp_request_dst+0x40>)
 80252ca:	9201      	str	r2, [sp, #4]
 80252cc:	9300      	str	r3, [sp, #0]
 80252ce:	4603      	mov	r3, r0
 80252d0:	687a      	ldr	r2, [r7, #4]
 80252d2:	68f8      	ldr	r0, [r7, #12]
 80252d4:	f7ff ff5a 	bl	802518c <etharp_raw>
 80252d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80252da:	4618      	mov	r0, r3
 80252dc:	3710      	adds	r7, #16
 80252de:	46bd      	mov	sp, r7
 80252e0:	bd80      	pop	{r7, pc}
 80252e2:	bf00      	nop
 80252e4:	0802c598 	.word	0x0802c598

080252e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80252e8:	b580      	push	{r7, lr}
 80252ea:	b082      	sub	sp, #8
 80252ec:	af00      	add	r7, sp, #0
 80252ee:	6078      	str	r0, [r7, #4]
 80252f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80252f2:	4a05      	ldr	r2, [pc, #20]	@ (8025308 <etharp_request+0x20>)
 80252f4:	6839      	ldr	r1, [r7, #0]
 80252f6:	6878      	ldr	r0, [r7, #4]
 80252f8:	f7ff ffd4 	bl	80252a4 <etharp_request_dst>
 80252fc:	4603      	mov	r3, r0
}
 80252fe:	4618      	mov	r0, r3
 8025300:	3708      	adds	r7, #8
 8025302:	46bd      	mov	sp, r7
 8025304:	bd80      	pop	{r7, pc}
 8025306:	bf00      	nop
 8025308:	0802c590 	.word	0x0802c590

0802530c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 802530c:	b580      	push	{r7, lr}
 802530e:	b08e      	sub	sp, #56	@ 0x38
 8025310:	af04      	add	r7, sp, #16
 8025312:	6078      	str	r0, [r7, #4]
 8025314:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8025316:	4b79      	ldr	r3, [pc, #484]	@ (80254fc <icmp_input+0x1f0>)
 8025318:	689b      	ldr	r3, [r3, #8]
 802531a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 802531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802531e:	781b      	ldrb	r3, [r3, #0]
 8025320:	f003 030f 	and.w	r3, r3, #15
 8025324:	b2db      	uxtb	r3, r3
 8025326:	009b      	lsls	r3, r3, #2
 8025328:	b2db      	uxtb	r3, r3
 802532a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 802532c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802532e:	2b13      	cmp	r3, #19
 8025330:	f240 80cd 	bls.w	80254ce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8025334:	687b      	ldr	r3, [r7, #4]
 8025336:	895b      	ldrh	r3, [r3, #10]
 8025338:	2b03      	cmp	r3, #3
 802533a:	f240 80ca 	bls.w	80254d2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802533e:	687b      	ldr	r3, [r7, #4]
 8025340:	685b      	ldr	r3, [r3, #4]
 8025342:	781b      	ldrb	r3, [r3, #0]
 8025344:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8025348:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 802534c:	2b00      	cmp	r3, #0
 802534e:	f000 80b7 	beq.w	80254c0 <icmp_input+0x1b4>
 8025352:	2b08      	cmp	r3, #8
 8025354:	f040 80b7 	bne.w	80254c6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8025358:	4b69      	ldr	r3, [pc, #420]	@ (8025500 <icmp_input+0x1f4>)
 802535a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802535c:	4b67      	ldr	r3, [pc, #412]	@ (80254fc <icmp_input+0x1f0>)
 802535e:	695b      	ldr	r3, [r3, #20]
 8025360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8025364:	2be0      	cmp	r3, #224	@ 0xe0
 8025366:	f000 80bb 	beq.w	80254e0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802536a:	4b64      	ldr	r3, [pc, #400]	@ (80254fc <icmp_input+0x1f0>)
 802536c:	695b      	ldr	r3, [r3, #20]
 802536e:	4a63      	ldr	r2, [pc, #396]	@ (80254fc <icmp_input+0x1f0>)
 8025370:	6812      	ldr	r2, [r2, #0]
 8025372:	4611      	mov	r1, r2
 8025374:	4618      	mov	r0, r3
 8025376:	f000 fc0b 	bl	8025b90 <ip4_addr_isbroadcast_u32>
 802537a:	4603      	mov	r3, r0
 802537c:	2b00      	cmp	r3, #0
 802537e:	f040 80b1 	bne.w	80254e4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8025382:	687b      	ldr	r3, [r7, #4]
 8025384:	891b      	ldrh	r3, [r3, #8]
 8025386:	2b07      	cmp	r3, #7
 8025388:	f240 80a5 	bls.w	80254d6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802538c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802538e:	330e      	adds	r3, #14
 8025390:	4619      	mov	r1, r3
 8025392:	6878      	ldr	r0, [r7, #4]
 8025394:	f7f5 ff16 	bl	801b1c4 <pbuf_add_header>
 8025398:	4603      	mov	r3, r0
 802539a:	2b00      	cmp	r3, #0
 802539c:	d04b      	beq.n	8025436 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802539e:	687b      	ldr	r3, [r7, #4]
 80253a0:	891a      	ldrh	r2, [r3, #8]
 80253a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80253a4:	4413      	add	r3, r2
 80253a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80253a8:	687b      	ldr	r3, [r7, #4]
 80253aa:	891b      	ldrh	r3, [r3, #8]
 80253ac:	8b7a      	ldrh	r2, [r7, #26]
 80253ae:	429a      	cmp	r2, r3
 80253b0:	f0c0 809a 	bcc.w	80254e8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80253b4:	8b7b      	ldrh	r3, [r7, #26]
 80253b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80253ba:	4619      	mov	r1, r3
 80253bc:	200e      	movs	r0, #14
 80253be:	f7f5 fcb3 	bl	801ad28 <pbuf_alloc>
 80253c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80253c4:	697b      	ldr	r3, [r7, #20]
 80253c6:	2b00      	cmp	r3, #0
 80253c8:	f000 8090 	beq.w	80254ec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80253cc:	697b      	ldr	r3, [r7, #20]
 80253ce:	895b      	ldrh	r3, [r3, #10]
 80253d0:	461a      	mov	r2, r3
 80253d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80253d4:	3308      	adds	r3, #8
 80253d6:	429a      	cmp	r2, r3
 80253d8:	d203      	bcs.n	80253e2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80253da:	6978      	ldr	r0, [r7, #20]
 80253dc:	f7f5 ffba 	bl	801b354 <pbuf_free>
          goto icmperr;
 80253e0:	e085      	b.n	80254ee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80253e2:	697b      	ldr	r3, [r7, #20]
 80253e4:	685b      	ldr	r3, [r3, #4]
 80253e6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80253e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80253ea:	4618      	mov	r0, r3
 80253ec:	f002 fbf1 	bl	8027bd2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80253f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80253f2:	4619      	mov	r1, r3
 80253f4:	6978      	ldr	r0, [r7, #20]
 80253f6:	f7f5 fef5 	bl	801b1e4 <pbuf_remove_header>
 80253fa:	4603      	mov	r3, r0
 80253fc:	2b00      	cmp	r3, #0
 80253fe:	d009      	beq.n	8025414 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8025400:	4b40      	ldr	r3, [pc, #256]	@ (8025504 <icmp_input+0x1f8>)
 8025402:	22b6      	movs	r2, #182	@ 0xb6
 8025404:	4940      	ldr	r1, [pc, #256]	@ (8025508 <icmp_input+0x1fc>)
 8025406:	4841      	ldr	r0, [pc, #260]	@ (802550c <icmp_input+0x200>)
 8025408:	f002 f9b0 	bl	802776c <iprintf>
          pbuf_free(r);
 802540c:	6978      	ldr	r0, [r7, #20]
 802540e:	f7f5 ffa1 	bl	801b354 <pbuf_free>
          goto icmperr;
 8025412:	e06c      	b.n	80254ee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8025414:	6879      	ldr	r1, [r7, #4]
 8025416:	6978      	ldr	r0, [r7, #20]
 8025418:	f7f6 f8d0 	bl	801b5bc <pbuf_copy>
 802541c:	4603      	mov	r3, r0
 802541e:	2b00      	cmp	r3, #0
 8025420:	d003      	beq.n	802542a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8025422:	6978      	ldr	r0, [r7, #20]
 8025424:	f7f5 ff96 	bl	801b354 <pbuf_free>
          goto icmperr;
 8025428:	e061      	b.n	80254ee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802542a:	6878      	ldr	r0, [r7, #4]
 802542c:	f7f5 ff92 	bl	801b354 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8025430:	697b      	ldr	r3, [r7, #20]
 8025432:	607b      	str	r3, [r7, #4]
 8025434:	e00f      	b.n	8025456 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8025436:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8025438:	330e      	adds	r3, #14
 802543a:	4619      	mov	r1, r3
 802543c:	6878      	ldr	r0, [r7, #4]
 802543e:	f7f5 fed1 	bl	801b1e4 <pbuf_remove_header>
 8025442:	4603      	mov	r3, r0
 8025444:	2b00      	cmp	r3, #0
 8025446:	d006      	beq.n	8025456 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8025448:	4b2e      	ldr	r3, [pc, #184]	@ (8025504 <icmp_input+0x1f8>)
 802544a:	22c7      	movs	r2, #199	@ 0xc7
 802544c:	4930      	ldr	r1, [pc, #192]	@ (8025510 <icmp_input+0x204>)
 802544e:	482f      	ldr	r0, [pc, #188]	@ (802550c <icmp_input+0x200>)
 8025450:	f002 f98c 	bl	802776c <iprintf>
          goto icmperr;
 8025454:	e04b      	b.n	80254ee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8025456:	687b      	ldr	r3, [r7, #4]
 8025458:	685b      	ldr	r3, [r3, #4]
 802545a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 802545c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802545e:	4619      	mov	r1, r3
 8025460:	6878      	ldr	r0, [r7, #4]
 8025462:	f7f5 feaf 	bl	801b1c4 <pbuf_add_header>
 8025466:	4603      	mov	r3, r0
 8025468:	2b00      	cmp	r3, #0
 802546a:	d12b      	bne.n	80254c4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	685b      	ldr	r3, [r3, #4]
 8025470:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8025472:	69fb      	ldr	r3, [r7, #28]
 8025474:	681a      	ldr	r2, [r3, #0]
 8025476:	68fb      	ldr	r3, [r7, #12]
 8025478:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802547a:	4b20      	ldr	r3, [pc, #128]	@ (80254fc <icmp_input+0x1f0>)
 802547c:	691a      	ldr	r2, [r3, #16]
 802547e:	68fb      	ldr	r3, [r7, #12]
 8025480:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8025482:	693b      	ldr	r3, [r7, #16]
 8025484:	2200      	movs	r2, #0
 8025486:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8025488:	693b      	ldr	r3, [r7, #16]
 802548a:	2200      	movs	r2, #0
 802548c:	709a      	strb	r2, [r3, #2]
 802548e:	2200      	movs	r2, #0
 8025490:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8025492:	68fb      	ldr	r3, [r7, #12]
 8025494:	22ff      	movs	r2, #255	@ 0xff
 8025496:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8025498:	68fb      	ldr	r3, [r7, #12]
 802549a:	2200      	movs	r2, #0
 802549c:	729a      	strb	r2, [r3, #10]
 802549e:	2200      	movs	r2, #0
 80254a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80254a2:	683b      	ldr	r3, [r7, #0]
 80254a4:	9302      	str	r3, [sp, #8]
 80254a6:	2301      	movs	r3, #1
 80254a8:	9301      	str	r3, [sp, #4]
 80254aa:	2300      	movs	r3, #0
 80254ac:	9300      	str	r3, [sp, #0]
 80254ae:	23ff      	movs	r3, #255	@ 0xff
 80254b0:	2200      	movs	r2, #0
 80254b2:	69f9      	ldr	r1, [r7, #28]
 80254b4:	6878      	ldr	r0, [r7, #4]
 80254b6:	f000 fa93 	bl	80259e0 <ip4_output_if>
 80254ba:	4603      	mov	r3, r0
 80254bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80254be:	e001      	b.n	80254c4 <icmp_input+0x1b8>
      break;
 80254c0:	bf00      	nop
 80254c2:	e000      	b.n	80254c6 <icmp_input+0x1ba>
      break;
 80254c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80254c6:	6878      	ldr	r0, [r7, #4]
 80254c8:	f7f5 ff44 	bl	801b354 <pbuf_free>
  return;
 80254cc:	e013      	b.n	80254f6 <icmp_input+0x1ea>
    goto lenerr;
 80254ce:	bf00      	nop
 80254d0:	e002      	b.n	80254d8 <icmp_input+0x1cc>
    goto lenerr;
 80254d2:	bf00      	nop
 80254d4:	e000      	b.n	80254d8 <icmp_input+0x1cc>
        goto lenerr;
 80254d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80254d8:	6878      	ldr	r0, [r7, #4]
 80254da:	f7f5 ff3b 	bl	801b354 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80254de:	e00a      	b.n	80254f6 <icmp_input+0x1ea>
        goto icmperr;
 80254e0:	bf00      	nop
 80254e2:	e004      	b.n	80254ee <icmp_input+0x1e2>
        goto icmperr;
 80254e4:	bf00      	nop
 80254e6:	e002      	b.n	80254ee <icmp_input+0x1e2>
          goto icmperr;
 80254e8:	bf00      	nop
 80254ea:	e000      	b.n	80254ee <icmp_input+0x1e2>
          goto icmperr;
 80254ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80254ee:	6878      	ldr	r0, [r7, #4]
 80254f0:	f7f5 ff30 	bl	801b354 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80254f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80254f6:	3728      	adds	r7, #40	@ 0x28
 80254f8:	46bd      	mov	sp, r7
 80254fa:	bd80      	pop	{r7, pc}
 80254fc:	2000d9ec 	.word	0x2000d9ec
 8025500:	2000da00 	.word	0x2000da00
 8025504:	0802bf9c 	.word	0x0802bf9c
 8025508:	0802bfd4 	.word	0x0802bfd4
 802550c:	0802c00c 	.word	0x0802c00c
 8025510:	0802c034 	.word	0x0802c034

08025514 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8025514:	b580      	push	{r7, lr}
 8025516:	b082      	sub	sp, #8
 8025518:	af00      	add	r7, sp, #0
 802551a:	6078      	str	r0, [r7, #4]
 802551c:	460b      	mov	r3, r1
 802551e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8025520:	78fb      	ldrb	r3, [r7, #3]
 8025522:	461a      	mov	r2, r3
 8025524:	2103      	movs	r1, #3
 8025526:	6878      	ldr	r0, [r7, #4]
 8025528:	f000 f814 	bl	8025554 <icmp_send_response>
}
 802552c:	bf00      	nop
 802552e:	3708      	adds	r7, #8
 8025530:	46bd      	mov	sp, r7
 8025532:	bd80      	pop	{r7, pc}

08025534 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8025534:	b580      	push	{r7, lr}
 8025536:	b082      	sub	sp, #8
 8025538:	af00      	add	r7, sp, #0
 802553a:	6078      	str	r0, [r7, #4]
 802553c:	460b      	mov	r3, r1
 802553e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8025540:	78fb      	ldrb	r3, [r7, #3]
 8025542:	461a      	mov	r2, r3
 8025544:	210b      	movs	r1, #11
 8025546:	6878      	ldr	r0, [r7, #4]
 8025548:	f000 f804 	bl	8025554 <icmp_send_response>
}
 802554c:	bf00      	nop
 802554e:	3708      	adds	r7, #8
 8025550:	46bd      	mov	sp, r7
 8025552:	bd80      	pop	{r7, pc}

08025554 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8025554:	b580      	push	{r7, lr}
 8025556:	b08c      	sub	sp, #48	@ 0x30
 8025558:	af04      	add	r7, sp, #16
 802555a:	6078      	str	r0, [r7, #4]
 802555c:	460b      	mov	r3, r1
 802555e:	70fb      	strb	r3, [r7, #3]
 8025560:	4613      	mov	r3, r2
 8025562:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8025564:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8025568:	2124      	movs	r1, #36	@ 0x24
 802556a:	2022      	movs	r0, #34	@ 0x22
 802556c:	f7f5 fbdc 	bl	801ad28 <pbuf_alloc>
 8025570:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8025572:	69fb      	ldr	r3, [r7, #28]
 8025574:	2b00      	cmp	r3, #0
 8025576:	d04c      	beq.n	8025612 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8025578:	69fb      	ldr	r3, [r7, #28]
 802557a:	895b      	ldrh	r3, [r3, #10]
 802557c:	2b23      	cmp	r3, #35	@ 0x23
 802557e:	d806      	bhi.n	802558e <icmp_send_response+0x3a>
 8025580:	4b26      	ldr	r3, [pc, #152]	@ (802561c <icmp_send_response+0xc8>)
 8025582:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8025586:	4926      	ldr	r1, [pc, #152]	@ (8025620 <icmp_send_response+0xcc>)
 8025588:	4826      	ldr	r0, [pc, #152]	@ (8025624 <icmp_send_response+0xd0>)
 802558a:	f002 f8ef 	bl	802776c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802558e:	687b      	ldr	r3, [r7, #4]
 8025590:	685b      	ldr	r3, [r3, #4]
 8025592:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8025594:	69fb      	ldr	r3, [r7, #28]
 8025596:	685b      	ldr	r3, [r3, #4]
 8025598:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 802559a:	697b      	ldr	r3, [r7, #20]
 802559c:	78fa      	ldrb	r2, [r7, #3]
 802559e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80255a0:	697b      	ldr	r3, [r7, #20]
 80255a2:	78ba      	ldrb	r2, [r7, #2]
 80255a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80255a6:	697b      	ldr	r3, [r7, #20]
 80255a8:	2200      	movs	r2, #0
 80255aa:	711a      	strb	r2, [r3, #4]
 80255ac:	2200      	movs	r2, #0
 80255ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80255b0:	697b      	ldr	r3, [r7, #20]
 80255b2:	2200      	movs	r2, #0
 80255b4:	719a      	strb	r2, [r3, #6]
 80255b6:	2200      	movs	r2, #0
 80255b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80255ba:	69fb      	ldr	r3, [r7, #28]
 80255bc:	685b      	ldr	r3, [r3, #4]
 80255be:	f103 0008 	add.w	r0, r3, #8
 80255c2:	687b      	ldr	r3, [r7, #4]
 80255c4:	685b      	ldr	r3, [r3, #4]
 80255c6:	221c      	movs	r2, #28
 80255c8:	4619      	mov	r1, r3
 80255ca:	f002 fb02 	bl	8027bd2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80255ce:	69bb      	ldr	r3, [r7, #24]
 80255d0:	68db      	ldr	r3, [r3, #12]
 80255d2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80255d4:	f107 030c 	add.w	r3, r7, #12
 80255d8:	4618      	mov	r0, r3
 80255da:	f000 f825 	bl	8025628 <ip4_route>
 80255de:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80255e0:	693b      	ldr	r3, [r7, #16]
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	d011      	beq.n	802560a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80255e6:	697b      	ldr	r3, [r7, #20]
 80255e8:	2200      	movs	r2, #0
 80255ea:	709a      	strb	r2, [r3, #2]
 80255ec:	2200      	movs	r2, #0
 80255ee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80255f0:	f107 020c 	add.w	r2, r7, #12
 80255f4:	693b      	ldr	r3, [r7, #16]
 80255f6:	9302      	str	r3, [sp, #8]
 80255f8:	2301      	movs	r3, #1
 80255fa:	9301      	str	r3, [sp, #4]
 80255fc:	2300      	movs	r3, #0
 80255fe:	9300      	str	r3, [sp, #0]
 8025600:	23ff      	movs	r3, #255	@ 0xff
 8025602:	2100      	movs	r1, #0
 8025604:	69f8      	ldr	r0, [r7, #28]
 8025606:	f000 f9eb 	bl	80259e0 <ip4_output_if>
  }
  pbuf_free(q);
 802560a:	69f8      	ldr	r0, [r7, #28]
 802560c:	f7f5 fea2 	bl	801b354 <pbuf_free>
 8025610:	e000      	b.n	8025614 <icmp_send_response+0xc0>
    return;
 8025612:	bf00      	nop
}
 8025614:	3720      	adds	r7, #32
 8025616:	46bd      	mov	sp, r7
 8025618:	bd80      	pop	{r7, pc}
 802561a:	bf00      	nop
 802561c:	0802bf9c 	.word	0x0802bf9c
 8025620:	0802c068 	.word	0x0802c068
 8025624:	0802c00c 	.word	0x0802c00c

08025628 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8025628:	b480      	push	{r7}
 802562a:	b085      	sub	sp, #20
 802562c:	af00      	add	r7, sp, #0
 802562e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8025630:	4b33      	ldr	r3, [pc, #204]	@ (8025700 <ip4_route+0xd8>)
 8025632:	681b      	ldr	r3, [r3, #0]
 8025634:	60fb      	str	r3, [r7, #12]
 8025636:	e036      	b.n	80256a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8025638:	68fb      	ldr	r3, [r7, #12]
 802563a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 802563e:	f003 0301 	and.w	r3, r3, #1
 8025642:	b2db      	uxtb	r3, r3
 8025644:	2b00      	cmp	r3, #0
 8025646:	d02b      	beq.n	80256a0 <ip4_route+0x78>
 8025648:	68fb      	ldr	r3, [r7, #12]
 802564a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 802564e:	089b      	lsrs	r3, r3, #2
 8025650:	f003 0301 	and.w	r3, r3, #1
 8025654:	b2db      	uxtb	r3, r3
 8025656:	2b00      	cmp	r3, #0
 8025658:	d022      	beq.n	80256a0 <ip4_route+0x78>
 802565a:	68fb      	ldr	r3, [r7, #12]
 802565c:	3304      	adds	r3, #4
 802565e:	681b      	ldr	r3, [r3, #0]
 8025660:	2b00      	cmp	r3, #0
 8025662:	d01d      	beq.n	80256a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8025664:	687b      	ldr	r3, [r7, #4]
 8025666:	681a      	ldr	r2, [r3, #0]
 8025668:	68fb      	ldr	r3, [r7, #12]
 802566a:	3304      	adds	r3, #4
 802566c:	681b      	ldr	r3, [r3, #0]
 802566e:	405a      	eors	r2, r3
 8025670:	68fb      	ldr	r3, [r7, #12]
 8025672:	3308      	adds	r3, #8
 8025674:	681b      	ldr	r3, [r3, #0]
 8025676:	4013      	ands	r3, r2
 8025678:	2b00      	cmp	r3, #0
 802567a:	d101      	bne.n	8025680 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 802567c:	68fb      	ldr	r3, [r7, #12]
 802567e:	e038      	b.n	80256f2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8025680:	68fb      	ldr	r3, [r7, #12]
 8025682:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8025686:	f003 0302 	and.w	r3, r3, #2
 802568a:	2b00      	cmp	r3, #0
 802568c:	d108      	bne.n	80256a0 <ip4_route+0x78>
 802568e:	687b      	ldr	r3, [r7, #4]
 8025690:	681a      	ldr	r2, [r3, #0]
 8025692:	68fb      	ldr	r3, [r7, #12]
 8025694:	330c      	adds	r3, #12
 8025696:	681b      	ldr	r3, [r3, #0]
 8025698:	429a      	cmp	r2, r3
 802569a:	d101      	bne.n	80256a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 802569c:	68fb      	ldr	r3, [r7, #12]
 802569e:	e028      	b.n	80256f2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80256a0:	68fb      	ldr	r3, [r7, #12]
 80256a2:	681b      	ldr	r3, [r3, #0]
 80256a4:	60fb      	str	r3, [r7, #12]
 80256a6:	68fb      	ldr	r3, [r7, #12]
 80256a8:	2b00      	cmp	r3, #0
 80256aa:	d1c5      	bne.n	8025638 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80256ac:	4b15      	ldr	r3, [pc, #84]	@ (8025704 <ip4_route+0xdc>)
 80256ae:	681b      	ldr	r3, [r3, #0]
 80256b0:	2b00      	cmp	r3, #0
 80256b2:	d01a      	beq.n	80256ea <ip4_route+0xc2>
 80256b4:	4b13      	ldr	r3, [pc, #76]	@ (8025704 <ip4_route+0xdc>)
 80256b6:	681b      	ldr	r3, [r3, #0]
 80256b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80256bc:	f003 0301 	and.w	r3, r3, #1
 80256c0:	2b00      	cmp	r3, #0
 80256c2:	d012      	beq.n	80256ea <ip4_route+0xc2>
 80256c4:	4b0f      	ldr	r3, [pc, #60]	@ (8025704 <ip4_route+0xdc>)
 80256c6:	681b      	ldr	r3, [r3, #0]
 80256c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80256cc:	f003 0304 	and.w	r3, r3, #4
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	d00a      	beq.n	80256ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80256d4:	4b0b      	ldr	r3, [pc, #44]	@ (8025704 <ip4_route+0xdc>)
 80256d6:	681b      	ldr	r3, [r3, #0]
 80256d8:	3304      	adds	r3, #4
 80256da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80256dc:	2b00      	cmp	r3, #0
 80256de:	d004      	beq.n	80256ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80256e0:	687b      	ldr	r3, [r7, #4]
 80256e2:	681b      	ldr	r3, [r3, #0]
 80256e4:	b2db      	uxtb	r3, r3
 80256e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80256e8:	d101      	bne.n	80256ee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80256ea:	2300      	movs	r3, #0
 80256ec:	e001      	b.n	80256f2 <ip4_route+0xca>
  }

  return netif_default;
 80256ee:	4b05      	ldr	r3, [pc, #20]	@ (8025704 <ip4_route+0xdc>)
 80256f0:	681b      	ldr	r3, [r3, #0]
}
 80256f2:	4618      	mov	r0, r3
 80256f4:	3714      	adds	r7, #20
 80256f6:	46bd      	mov	sp, r7
 80256f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256fc:	4770      	bx	lr
 80256fe:	bf00      	nop
 8025700:	20011154 	.word	0x20011154
 8025704:	20011158 	.word	0x20011158

08025708 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8025708:	b580      	push	{r7, lr}
 802570a:	b082      	sub	sp, #8
 802570c:	af00      	add	r7, sp, #0
 802570e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8025710:	687b      	ldr	r3, [r7, #4]
 8025712:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8025716:	f003 0301 	and.w	r3, r3, #1
 802571a:	b2db      	uxtb	r3, r3
 802571c:	2b00      	cmp	r3, #0
 802571e:	d016      	beq.n	802574e <ip4_input_accept+0x46>
 8025720:	687b      	ldr	r3, [r7, #4]
 8025722:	3304      	adds	r3, #4
 8025724:	681b      	ldr	r3, [r3, #0]
 8025726:	2b00      	cmp	r3, #0
 8025728:	d011      	beq.n	802574e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802572a:	4b0b      	ldr	r3, [pc, #44]	@ (8025758 <ip4_input_accept+0x50>)
 802572c:	695a      	ldr	r2, [r3, #20]
 802572e:	687b      	ldr	r3, [r7, #4]
 8025730:	3304      	adds	r3, #4
 8025732:	681b      	ldr	r3, [r3, #0]
 8025734:	429a      	cmp	r2, r3
 8025736:	d008      	beq.n	802574a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8025738:	4b07      	ldr	r3, [pc, #28]	@ (8025758 <ip4_input_accept+0x50>)
 802573a:	695b      	ldr	r3, [r3, #20]
 802573c:	6879      	ldr	r1, [r7, #4]
 802573e:	4618      	mov	r0, r3
 8025740:	f000 fa26 	bl	8025b90 <ip4_addr_isbroadcast_u32>
 8025744:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8025746:	2b00      	cmp	r3, #0
 8025748:	d001      	beq.n	802574e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802574a:	2301      	movs	r3, #1
 802574c:	e000      	b.n	8025750 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802574e:	2300      	movs	r3, #0
}
 8025750:	4618      	mov	r0, r3
 8025752:	3708      	adds	r7, #8
 8025754:	46bd      	mov	sp, r7
 8025756:	bd80      	pop	{r7, pc}
 8025758:	2000d9ec 	.word	0x2000d9ec

0802575c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 802575c:	b580      	push	{r7, lr}
 802575e:	b088      	sub	sp, #32
 8025760:	af00      	add	r7, sp, #0
 8025762:	6078      	str	r0, [r7, #4]
 8025764:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8025766:	2301      	movs	r3, #1
 8025768:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802576a:	687b      	ldr	r3, [r7, #4]
 802576c:	685b      	ldr	r3, [r3, #4]
 802576e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8025770:	69fb      	ldr	r3, [r7, #28]
 8025772:	781b      	ldrb	r3, [r3, #0]
 8025774:	091b      	lsrs	r3, r3, #4
 8025776:	b2db      	uxtb	r3, r3
 8025778:	2b04      	cmp	r3, #4
 802577a:	d004      	beq.n	8025786 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 802577c:	6878      	ldr	r0, [r7, #4]
 802577e:	f7f5 fde9 	bl	801b354 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8025782:	2300      	movs	r3, #0
 8025784:	e123      	b.n	80259ce <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8025786:	69fb      	ldr	r3, [r7, #28]
 8025788:	781b      	ldrb	r3, [r3, #0]
 802578a:	f003 030f 	and.w	r3, r3, #15
 802578e:	b2db      	uxtb	r3, r3
 8025790:	009b      	lsls	r3, r3, #2
 8025792:	b2db      	uxtb	r3, r3
 8025794:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8025796:	69fb      	ldr	r3, [r7, #28]
 8025798:	885b      	ldrh	r3, [r3, #2]
 802579a:	b29b      	uxth	r3, r3
 802579c:	4618      	mov	r0, r3
 802579e:	f7f4 f9a9 	bl	8019af4 <lwip_htons>
 80257a2:	4603      	mov	r3, r0
 80257a4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80257a6:	687b      	ldr	r3, [r7, #4]
 80257a8:	891b      	ldrh	r3, [r3, #8]
 80257aa:	8a3a      	ldrh	r2, [r7, #16]
 80257ac:	429a      	cmp	r2, r3
 80257ae:	d204      	bcs.n	80257ba <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80257b0:	8a3b      	ldrh	r3, [r7, #16]
 80257b2:	4619      	mov	r1, r3
 80257b4:	6878      	ldr	r0, [r7, #4]
 80257b6:	f7f5 fc15 	bl	801afe4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80257ba:	687b      	ldr	r3, [r7, #4]
 80257bc:	895b      	ldrh	r3, [r3, #10]
 80257be:	8a7a      	ldrh	r2, [r7, #18]
 80257c0:	429a      	cmp	r2, r3
 80257c2:	d807      	bhi.n	80257d4 <ip4_input+0x78>
 80257c4:	687b      	ldr	r3, [r7, #4]
 80257c6:	891b      	ldrh	r3, [r3, #8]
 80257c8:	8a3a      	ldrh	r2, [r7, #16]
 80257ca:	429a      	cmp	r2, r3
 80257cc:	d802      	bhi.n	80257d4 <ip4_input+0x78>
 80257ce:	8a7b      	ldrh	r3, [r7, #18]
 80257d0:	2b13      	cmp	r3, #19
 80257d2:	d804      	bhi.n	80257de <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80257d4:	6878      	ldr	r0, [r7, #4]
 80257d6:	f7f5 fdbd 	bl	801b354 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80257da:	2300      	movs	r3, #0
 80257dc:	e0f7      	b.n	80259ce <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80257de:	69fb      	ldr	r3, [r7, #28]
 80257e0:	691b      	ldr	r3, [r3, #16]
 80257e2:	4a7d      	ldr	r2, [pc, #500]	@ (80259d8 <ip4_input+0x27c>)
 80257e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80257e6:	69fb      	ldr	r3, [r7, #28]
 80257e8:	68db      	ldr	r3, [r3, #12]
 80257ea:	4a7b      	ldr	r2, [pc, #492]	@ (80259d8 <ip4_input+0x27c>)
 80257ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80257ee:	4b7a      	ldr	r3, [pc, #488]	@ (80259d8 <ip4_input+0x27c>)
 80257f0:	695b      	ldr	r3, [r3, #20]
 80257f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80257f6:	2be0      	cmp	r3, #224	@ 0xe0
 80257f8:	d112      	bne.n	8025820 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80257fa:	683b      	ldr	r3, [r7, #0]
 80257fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8025800:	f003 0301 	and.w	r3, r3, #1
 8025804:	b2db      	uxtb	r3, r3
 8025806:	2b00      	cmp	r3, #0
 8025808:	d007      	beq.n	802581a <ip4_input+0xbe>
 802580a:	683b      	ldr	r3, [r7, #0]
 802580c:	3304      	adds	r3, #4
 802580e:	681b      	ldr	r3, [r3, #0]
 8025810:	2b00      	cmp	r3, #0
 8025812:	d002      	beq.n	802581a <ip4_input+0xbe>
      netif = inp;
 8025814:	683b      	ldr	r3, [r7, #0]
 8025816:	61bb      	str	r3, [r7, #24]
 8025818:	e02a      	b.n	8025870 <ip4_input+0x114>
    } else {
      netif = NULL;
 802581a:	2300      	movs	r3, #0
 802581c:	61bb      	str	r3, [r7, #24]
 802581e:	e027      	b.n	8025870 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8025820:	6838      	ldr	r0, [r7, #0]
 8025822:	f7ff ff71 	bl	8025708 <ip4_input_accept>
 8025826:	4603      	mov	r3, r0
 8025828:	2b00      	cmp	r3, #0
 802582a:	d002      	beq.n	8025832 <ip4_input+0xd6>
      netif = inp;
 802582c:	683b      	ldr	r3, [r7, #0]
 802582e:	61bb      	str	r3, [r7, #24]
 8025830:	e01e      	b.n	8025870 <ip4_input+0x114>
    } else {
      netif = NULL;
 8025832:	2300      	movs	r3, #0
 8025834:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8025836:	4b68      	ldr	r3, [pc, #416]	@ (80259d8 <ip4_input+0x27c>)
 8025838:	695b      	ldr	r3, [r3, #20]
 802583a:	b2db      	uxtb	r3, r3
 802583c:	2b7f      	cmp	r3, #127	@ 0x7f
 802583e:	d017      	beq.n	8025870 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8025840:	4b66      	ldr	r3, [pc, #408]	@ (80259dc <ip4_input+0x280>)
 8025842:	681b      	ldr	r3, [r3, #0]
 8025844:	61bb      	str	r3, [r7, #24]
 8025846:	e00e      	b.n	8025866 <ip4_input+0x10a>
          if (netif == inp) {
 8025848:	69ba      	ldr	r2, [r7, #24]
 802584a:	683b      	ldr	r3, [r7, #0]
 802584c:	429a      	cmp	r2, r3
 802584e:	d006      	beq.n	802585e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8025850:	69b8      	ldr	r0, [r7, #24]
 8025852:	f7ff ff59 	bl	8025708 <ip4_input_accept>
 8025856:	4603      	mov	r3, r0
 8025858:	2b00      	cmp	r3, #0
 802585a:	d108      	bne.n	802586e <ip4_input+0x112>
 802585c:	e000      	b.n	8025860 <ip4_input+0x104>
            continue;
 802585e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8025860:	69bb      	ldr	r3, [r7, #24]
 8025862:	681b      	ldr	r3, [r3, #0]
 8025864:	61bb      	str	r3, [r7, #24]
 8025866:	69bb      	ldr	r3, [r7, #24]
 8025868:	2b00      	cmp	r3, #0
 802586a:	d1ed      	bne.n	8025848 <ip4_input+0xec>
 802586c:	e000      	b.n	8025870 <ip4_input+0x114>
            break;
 802586e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8025870:	69bb      	ldr	r3, [r7, #24]
 8025872:	2b00      	cmp	r3, #0
 8025874:	d111      	bne.n	802589a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8025876:	69fb      	ldr	r3, [r7, #28]
 8025878:	7a5b      	ldrb	r3, [r3, #9]
 802587a:	2b11      	cmp	r3, #17
 802587c:	d10d      	bne.n	802589a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 802587e:	8a7b      	ldrh	r3, [r7, #18]
 8025880:	69fa      	ldr	r2, [r7, #28]
 8025882:	4413      	add	r3, r2
 8025884:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8025886:	68fb      	ldr	r3, [r7, #12]
 8025888:	885b      	ldrh	r3, [r3, #2]
 802588a:	b29b      	uxth	r3, r3
 802588c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8025890:	d103      	bne.n	802589a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8025892:	683b      	ldr	r3, [r7, #0]
 8025894:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8025896:	2300      	movs	r3, #0
 8025898:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 802589a:	697b      	ldr	r3, [r7, #20]
 802589c:	2b00      	cmp	r3, #0
 802589e:	d017      	beq.n	80258d0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80258a0:	4b4d      	ldr	r3, [pc, #308]	@ (80259d8 <ip4_input+0x27c>)
 80258a2:	691b      	ldr	r3, [r3, #16]
 80258a4:	2b00      	cmp	r3, #0
 80258a6:	d013      	beq.n	80258d0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80258a8:	4b4b      	ldr	r3, [pc, #300]	@ (80259d8 <ip4_input+0x27c>)
 80258aa:	691b      	ldr	r3, [r3, #16]
 80258ac:	6839      	ldr	r1, [r7, #0]
 80258ae:	4618      	mov	r0, r3
 80258b0:	f000 f96e 	bl	8025b90 <ip4_addr_isbroadcast_u32>
 80258b4:	4603      	mov	r3, r0
 80258b6:	2b00      	cmp	r3, #0
 80258b8:	d105      	bne.n	80258c6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80258ba:	4b47      	ldr	r3, [pc, #284]	@ (80259d8 <ip4_input+0x27c>)
 80258bc:	691b      	ldr	r3, [r3, #16]
 80258be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80258c2:	2be0      	cmp	r3, #224	@ 0xe0
 80258c4:	d104      	bne.n	80258d0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80258c6:	6878      	ldr	r0, [r7, #4]
 80258c8:	f7f5 fd44 	bl	801b354 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80258cc:	2300      	movs	r3, #0
 80258ce:	e07e      	b.n	80259ce <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80258d0:	69bb      	ldr	r3, [r7, #24]
 80258d2:	2b00      	cmp	r3, #0
 80258d4:	d104      	bne.n	80258e0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80258d6:	6878      	ldr	r0, [r7, #4]
 80258d8:	f7f5 fd3c 	bl	801b354 <pbuf_free>
    return ERR_OK;
 80258dc:	2300      	movs	r3, #0
 80258de:	e076      	b.n	80259ce <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80258e0:	69fb      	ldr	r3, [r7, #28]
 80258e2:	88db      	ldrh	r3, [r3, #6]
 80258e4:	b29b      	uxth	r3, r3
 80258e6:	461a      	mov	r2, r3
 80258e8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80258ec:	4013      	ands	r3, r2
 80258ee:	2b00      	cmp	r3, #0
 80258f0:	d00b      	beq.n	802590a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80258f2:	6878      	ldr	r0, [r7, #4]
 80258f4:	f000 fc92 	bl	802621c <ip4_reass>
 80258f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80258fa:	687b      	ldr	r3, [r7, #4]
 80258fc:	2b00      	cmp	r3, #0
 80258fe:	d101      	bne.n	8025904 <ip4_input+0x1a8>
      return ERR_OK;
 8025900:	2300      	movs	r3, #0
 8025902:	e064      	b.n	80259ce <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8025904:	687b      	ldr	r3, [r7, #4]
 8025906:	685b      	ldr	r3, [r3, #4]
 8025908:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802590a:	4a33      	ldr	r2, [pc, #204]	@ (80259d8 <ip4_input+0x27c>)
 802590c:	69bb      	ldr	r3, [r7, #24]
 802590e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8025910:	4a31      	ldr	r2, [pc, #196]	@ (80259d8 <ip4_input+0x27c>)
 8025912:	683b      	ldr	r3, [r7, #0]
 8025914:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8025916:	4a30      	ldr	r2, [pc, #192]	@ (80259d8 <ip4_input+0x27c>)
 8025918:	69fb      	ldr	r3, [r7, #28]
 802591a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 802591c:	69fb      	ldr	r3, [r7, #28]
 802591e:	781b      	ldrb	r3, [r3, #0]
 8025920:	f003 030f 	and.w	r3, r3, #15
 8025924:	b2db      	uxtb	r3, r3
 8025926:	009b      	lsls	r3, r3, #2
 8025928:	b2db      	uxtb	r3, r3
 802592a:	461a      	mov	r2, r3
 802592c:	4b2a      	ldr	r3, [pc, #168]	@ (80259d8 <ip4_input+0x27c>)
 802592e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8025930:	8a7b      	ldrh	r3, [r7, #18]
 8025932:	4619      	mov	r1, r3
 8025934:	6878      	ldr	r0, [r7, #4]
 8025936:	f7f5 fc55 	bl	801b1e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802593a:	69fb      	ldr	r3, [r7, #28]
 802593c:	7a5b      	ldrb	r3, [r3, #9]
 802593e:	2b11      	cmp	r3, #17
 8025940:	d006      	beq.n	8025950 <ip4_input+0x1f4>
 8025942:	2b11      	cmp	r3, #17
 8025944:	dc13      	bgt.n	802596e <ip4_input+0x212>
 8025946:	2b01      	cmp	r3, #1
 8025948:	d00c      	beq.n	8025964 <ip4_input+0x208>
 802594a:	2b06      	cmp	r3, #6
 802594c:	d005      	beq.n	802595a <ip4_input+0x1fe>
 802594e:	e00e      	b.n	802596e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8025950:	6839      	ldr	r1, [r7, #0]
 8025952:	6878      	ldr	r0, [r7, #4]
 8025954:	f7fc fa52 	bl	8021dfc <udp_input>
        break;
 8025958:	e026      	b.n	80259a8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 802595a:	6839      	ldr	r1, [r7, #0]
 802595c:	6878      	ldr	r0, [r7, #4]
 802595e:	f7f7 fe11 	bl	801d584 <tcp_input>
        break;
 8025962:	e021      	b.n	80259a8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8025964:	6839      	ldr	r1, [r7, #0]
 8025966:	6878      	ldr	r0, [r7, #4]
 8025968:	f7ff fcd0 	bl	802530c <icmp_input>
        break;
 802596c:	e01c      	b.n	80259a8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802596e:	4b1a      	ldr	r3, [pc, #104]	@ (80259d8 <ip4_input+0x27c>)
 8025970:	695b      	ldr	r3, [r3, #20]
 8025972:	69b9      	ldr	r1, [r7, #24]
 8025974:	4618      	mov	r0, r3
 8025976:	f000 f90b 	bl	8025b90 <ip4_addr_isbroadcast_u32>
 802597a:	4603      	mov	r3, r0
 802597c:	2b00      	cmp	r3, #0
 802597e:	d10f      	bne.n	80259a0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8025980:	4b15      	ldr	r3, [pc, #84]	@ (80259d8 <ip4_input+0x27c>)
 8025982:	695b      	ldr	r3, [r3, #20]
 8025984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8025988:	2be0      	cmp	r3, #224	@ 0xe0
 802598a:	d009      	beq.n	80259a0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 802598c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8025990:	4619      	mov	r1, r3
 8025992:	6878      	ldr	r0, [r7, #4]
 8025994:	f7f5 fc99 	bl	801b2ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8025998:	2102      	movs	r1, #2
 802599a:	6878      	ldr	r0, [r7, #4]
 802599c:	f7ff fdba 	bl	8025514 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80259a0:	6878      	ldr	r0, [r7, #4]
 80259a2:	f7f5 fcd7 	bl	801b354 <pbuf_free>
        break;
 80259a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80259a8:	4b0b      	ldr	r3, [pc, #44]	@ (80259d8 <ip4_input+0x27c>)
 80259aa:	2200      	movs	r2, #0
 80259ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80259ae:	4b0a      	ldr	r3, [pc, #40]	@ (80259d8 <ip4_input+0x27c>)
 80259b0:	2200      	movs	r2, #0
 80259b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80259b4:	4b08      	ldr	r3, [pc, #32]	@ (80259d8 <ip4_input+0x27c>)
 80259b6:	2200      	movs	r2, #0
 80259b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80259ba:	4b07      	ldr	r3, [pc, #28]	@ (80259d8 <ip4_input+0x27c>)
 80259bc:	2200      	movs	r2, #0
 80259be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80259c0:	4b05      	ldr	r3, [pc, #20]	@ (80259d8 <ip4_input+0x27c>)
 80259c2:	2200      	movs	r2, #0
 80259c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80259c6:	4b04      	ldr	r3, [pc, #16]	@ (80259d8 <ip4_input+0x27c>)
 80259c8:	2200      	movs	r2, #0
 80259ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80259cc:	2300      	movs	r3, #0
}
 80259ce:	4618      	mov	r0, r3
 80259d0:	3720      	adds	r7, #32
 80259d2:	46bd      	mov	sp, r7
 80259d4:	bd80      	pop	{r7, pc}
 80259d6:	bf00      	nop
 80259d8:	2000d9ec 	.word	0x2000d9ec
 80259dc:	20011154 	.word	0x20011154

080259e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80259e0:	b580      	push	{r7, lr}
 80259e2:	b08a      	sub	sp, #40	@ 0x28
 80259e4:	af04      	add	r7, sp, #16
 80259e6:	60f8      	str	r0, [r7, #12]
 80259e8:	60b9      	str	r1, [r7, #8]
 80259ea:	607a      	str	r2, [r7, #4]
 80259ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80259ee:	68bb      	ldr	r3, [r7, #8]
 80259f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80259f2:	687b      	ldr	r3, [r7, #4]
 80259f4:	2b00      	cmp	r3, #0
 80259f6:	d009      	beq.n	8025a0c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80259f8:	68bb      	ldr	r3, [r7, #8]
 80259fa:	2b00      	cmp	r3, #0
 80259fc:	d003      	beq.n	8025a06 <ip4_output_if+0x26>
 80259fe:	68bb      	ldr	r3, [r7, #8]
 8025a00:	681b      	ldr	r3, [r3, #0]
 8025a02:	2b00      	cmp	r3, #0
 8025a04:	d102      	bne.n	8025a0c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8025a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025a08:	3304      	adds	r3, #4
 8025a0a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8025a0c:	78fa      	ldrb	r2, [r7, #3]
 8025a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025a10:	9302      	str	r3, [sp, #8]
 8025a12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8025a16:	9301      	str	r3, [sp, #4]
 8025a18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025a1c:	9300      	str	r3, [sp, #0]
 8025a1e:	4613      	mov	r3, r2
 8025a20:	687a      	ldr	r2, [r7, #4]
 8025a22:	6979      	ldr	r1, [r7, #20]
 8025a24:	68f8      	ldr	r0, [r7, #12]
 8025a26:	f000 f805 	bl	8025a34 <ip4_output_if_src>
 8025a2a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8025a2c:	4618      	mov	r0, r3
 8025a2e:	3718      	adds	r7, #24
 8025a30:	46bd      	mov	sp, r7
 8025a32:	bd80      	pop	{r7, pc}

08025a34 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8025a34:	b580      	push	{r7, lr}
 8025a36:	b088      	sub	sp, #32
 8025a38:	af00      	add	r7, sp, #0
 8025a3a:	60f8      	str	r0, [r7, #12]
 8025a3c:	60b9      	str	r1, [r7, #8]
 8025a3e:	607a      	str	r2, [r7, #4]
 8025a40:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8025a42:	68fb      	ldr	r3, [r7, #12]
 8025a44:	7b9b      	ldrb	r3, [r3, #14]
 8025a46:	2b01      	cmp	r3, #1
 8025a48:	d006      	beq.n	8025a58 <ip4_output_if_src+0x24>
 8025a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8025b78 <ip4_output_if_src+0x144>)
 8025a4c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8025a50:	494a      	ldr	r1, [pc, #296]	@ (8025b7c <ip4_output_if_src+0x148>)
 8025a52:	484b      	ldr	r0, [pc, #300]	@ (8025b80 <ip4_output_if_src+0x14c>)
 8025a54:	f001 fe8a 	bl	802776c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8025a58:	687b      	ldr	r3, [r7, #4]
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d060      	beq.n	8025b20 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8025a5e:	2314      	movs	r3, #20
 8025a60:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8025a62:	2114      	movs	r1, #20
 8025a64:	68f8      	ldr	r0, [r7, #12]
 8025a66:	f7f5 fbad 	bl	801b1c4 <pbuf_add_header>
 8025a6a:	4603      	mov	r3, r0
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	d002      	beq.n	8025a76 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8025a70:	f06f 0301 	mvn.w	r3, #1
 8025a74:	e07c      	b.n	8025b70 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8025a76:	68fb      	ldr	r3, [r7, #12]
 8025a78:	685b      	ldr	r3, [r3, #4]
 8025a7a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8025a7c:	68fb      	ldr	r3, [r7, #12]
 8025a7e:	895b      	ldrh	r3, [r3, #10]
 8025a80:	2b13      	cmp	r3, #19
 8025a82:	d806      	bhi.n	8025a92 <ip4_output_if_src+0x5e>
 8025a84:	4b3c      	ldr	r3, [pc, #240]	@ (8025b78 <ip4_output_if_src+0x144>)
 8025a86:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8025a8a:	493e      	ldr	r1, [pc, #248]	@ (8025b84 <ip4_output_if_src+0x150>)
 8025a8c:	483c      	ldr	r0, [pc, #240]	@ (8025b80 <ip4_output_if_src+0x14c>)
 8025a8e:	f001 fe6d 	bl	802776c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8025a92:	69fb      	ldr	r3, [r7, #28]
 8025a94:	78fa      	ldrb	r2, [r7, #3]
 8025a96:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8025a98:	69fb      	ldr	r3, [r7, #28]
 8025a9a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8025a9e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8025aa0:	687b      	ldr	r3, [r7, #4]
 8025aa2:	681a      	ldr	r2, [r3, #0]
 8025aa4:	69fb      	ldr	r3, [r7, #28]
 8025aa6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8025aa8:	8b7b      	ldrh	r3, [r7, #26]
 8025aaa:	089b      	lsrs	r3, r3, #2
 8025aac:	b29b      	uxth	r3, r3
 8025aae:	b2db      	uxtb	r3, r3
 8025ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025ab4:	b2da      	uxtb	r2, r3
 8025ab6:	69fb      	ldr	r3, [r7, #28]
 8025ab8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8025aba:	69fb      	ldr	r3, [r7, #28]
 8025abc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8025ac0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8025ac2:	68fb      	ldr	r3, [r7, #12]
 8025ac4:	891b      	ldrh	r3, [r3, #8]
 8025ac6:	4618      	mov	r0, r3
 8025ac8:	f7f4 f814 	bl	8019af4 <lwip_htons>
 8025acc:	4603      	mov	r3, r0
 8025ace:	461a      	mov	r2, r3
 8025ad0:	69fb      	ldr	r3, [r7, #28]
 8025ad2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8025ad4:	69fb      	ldr	r3, [r7, #28]
 8025ad6:	2200      	movs	r2, #0
 8025ad8:	719a      	strb	r2, [r3, #6]
 8025ada:	2200      	movs	r2, #0
 8025adc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8025ade:	4b2a      	ldr	r3, [pc, #168]	@ (8025b88 <ip4_output_if_src+0x154>)
 8025ae0:	881b      	ldrh	r3, [r3, #0]
 8025ae2:	4618      	mov	r0, r3
 8025ae4:	f7f4 f806 	bl	8019af4 <lwip_htons>
 8025ae8:	4603      	mov	r3, r0
 8025aea:	461a      	mov	r2, r3
 8025aec:	69fb      	ldr	r3, [r7, #28]
 8025aee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8025af0:	4b25      	ldr	r3, [pc, #148]	@ (8025b88 <ip4_output_if_src+0x154>)
 8025af2:	881b      	ldrh	r3, [r3, #0]
 8025af4:	3301      	adds	r3, #1
 8025af6:	b29a      	uxth	r2, r3
 8025af8:	4b23      	ldr	r3, [pc, #140]	@ (8025b88 <ip4_output_if_src+0x154>)
 8025afa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8025afc:	68bb      	ldr	r3, [r7, #8]
 8025afe:	2b00      	cmp	r3, #0
 8025b00:	d104      	bne.n	8025b0c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8025b02:	4b22      	ldr	r3, [pc, #136]	@ (8025b8c <ip4_output_if_src+0x158>)
 8025b04:	681a      	ldr	r2, [r3, #0]
 8025b06:	69fb      	ldr	r3, [r7, #28]
 8025b08:	60da      	str	r2, [r3, #12]
 8025b0a:	e003      	b.n	8025b14 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8025b0c:	68bb      	ldr	r3, [r7, #8]
 8025b0e:	681a      	ldr	r2, [r3, #0]
 8025b10:	69fb      	ldr	r3, [r7, #28]
 8025b12:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8025b14:	69fb      	ldr	r3, [r7, #28]
 8025b16:	2200      	movs	r2, #0
 8025b18:	729a      	strb	r2, [r3, #10]
 8025b1a:	2200      	movs	r2, #0
 8025b1c:	72da      	strb	r2, [r3, #11]
 8025b1e:	e00f      	b.n	8025b40 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8025b20:	68fb      	ldr	r3, [r7, #12]
 8025b22:	895b      	ldrh	r3, [r3, #10]
 8025b24:	2b13      	cmp	r3, #19
 8025b26:	d802      	bhi.n	8025b2e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8025b28:	f06f 0301 	mvn.w	r3, #1
 8025b2c:	e020      	b.n	8025b70 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8025b2e:	68fb      	ldr	r3, [r7, #12]
 8025b30:	685b      	ldr	r3, [r3, #4]
 8025b32:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8025b34:	69fb      	ldr	r3, [r7, #28]
 8025b36:	691b      	ldr	r3, [r3, #16]
 8025b38:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8025b3a:	f107 0314 	add.w	r3, r7, #20
 8025b3e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8025b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8025b44:	2b00      	cmp	r3, #0
 8025b46:	d00c      	beq.n	8025b62 <ip4_output_if_src+0x12e>
 8025b48:	68fb      	ldr	r3, [r7, #12]
 8025b4a:	891a      	ldrh	r2, [r3, #8]
 8025b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8025b50:	429a      	cmp	r2, r3
 8025b52:	d906      	bls.n	8025b62 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8025b54:	687a      	ldr	r2, [r7, #4]
 8025b56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8025b58:	68f8      	ldr	r0, [r7, #12]
 8025b5a:	f000 fd53 	bl	8026604 <ip4_frag>
 8025b5e:	4603      	mov	r3, r0
 8025b60:	e006      	b.n	8025b70 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8025b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025b64:	695b      	ldr	r3, [r3, #20]
 8025b66:	687a      	ldr	r2, [r7, #4]
 8025b68:	68f9      	ldr	r1, [r7, #12]
 8025b6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8025b6c:	4798      	blx	r3
 8025b6e:	4603      	mov	r3, r0
}
 8025b70:	4618      	mov	r0, r3
 8025b72:	3720      	adds	r7, #32
 8025b74:	46bd      	mov	sp, r7
 8025b76:	bd80      	pop	{r7, pc}
 8025b78:	0802c094 	.word	0x0802c094
 8025b7c:	0802c0c8 	.word	0x0802c0c8
 8025b80:	0802c0d4 	.word	0x0802c0d4
 8025b84:	0802c0fc 	.word	0x0802c0fc
 8025b88:	200112e6 	.word	0x200112e6
 8025b8c:	0802c588 	.word	0x0802c588

08025b90 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8025b90:	b480      	push	{r7}
 8025b92:	b085      	sub	sp, #20
 8025b94:	af00      	add	r7, sp, #0
 8025b96:	6078      	str	r0, [r7, #4]
 8025b98:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8025b9a:	687b      	ldr	r3, [r7, #4]
 8025b9c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8025b9e:	687b      	ldr	r3, [r7, #4]
 8025ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025ba4:	d002      	beq.n	8025bac <ip4_addr_isbroadcast_u32+0x1c>
 8025ba6:	687b      	ldr	r3, [r7, #4]
 8025ba8:	2b00      	cmp	r3, #0
 8025baa:	d101      	bne.n	8025bb0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8025bac:	2301      	movs	r3, #1
 8025bae:	e02a      	b.n	8025c06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8025bb0:	683b      	ldr	r3, [r7, #0]
 8025bb2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8025bb6:	f003 0302 	and.w	r3, r3, #2
 8025bba:	2b00      	cmp	r3, #0
 8025bbc:	d101      	bne.n	8025bc2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8025bbe:	2300      	movs	r3, #0
 8025bc0:	e021      	b.n	8025c06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8025bc2:	683b      	ldr	r3, [r7, #0]
 8025bc4:	3304      	adds	r3, #4
 8025bc6:	681b      	ldr	r3, [r3, #0]
 8025bc8:	687a      	ldr	r2, [r7, #4]
 8025bca:	429a      	cmp	r2, r3
 8025bcc:	d101      	bne.n	8025bd2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8025bce:	2300      	movs	r3, #0
 8025bd0:	e019      	b.n	8025c06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8025bd2:	68fa      	ldr	r2, [r7, #12]
 8025bd4:	683b      	ldr	r3, [r7, #0]
 8025bd6:	3304      	adds	r3, #4
 8025bd8:	681b      	ldr	r3, [r3, #0]
 8025bda:	405a      	eors	r2, r3
 8025bdc:	683b      	ldr	r3, [r7, #0]
 8025bde:	3308      	adds	r3, #8
 8025be0:	681b      	ldr	r3, [r3, #0]
 8025be2:	4013      	ands	r3, r2
 8025be4:	2b00      	cmp	r3, #0
 8025be6:	d10d      	bne.n	8025c04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8025be8:	683b      	ldr	r3, [r7, #0]
 8025bea:	3308      	adds	r3, #8
 8025bec:	681b      	ldr	r3, [r3, #0]
 8025bee:	43da      	mvns	r2, r3
 8025bf0:	687b      	ldr	r3, [r7, #4]
 8025bf2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8025bf4:	683b      	ldr	r3, [r7, #0]
 8025bf6:	3308      	adds	r3, #8
 8025bf8:	681b      	ldr	r3, [r3, #0]
 8025bfa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8025bfc:	429a      	cmp	r2, r3
 8025bfe:	d101      	bne.n	8025c04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8025c00:	2301      	movs	r3, #1
 8025c02:	e000      	b.n	8025c06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8025c04:	2300      	movs	r3, #0
  }
}
 8025c06:	4618      	mov	r0, r3
 8025c08:	3714      	adds	r7, #20
 8025c0a:	46bd      	mov	sp, r7
 8025c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c10:	4770      	bx	lr
	...

08025c14 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8025c14:	b580      	push	{r7, lr}
 8025c16:	b084      	sub	sp, #16
 8025c18:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8025c1a:	2300      	movs	r3, #0
 8025c1c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8025c1e:	4b12      	ldr	r3, [pc, #72]	@ (8025c68 <ip_reass_tmr+0x54>)
 8025c20:	681b      	ldr	r3, [r3, #0]
 8025c22:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8025c24:	e018      	b.n	8025c58 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8025c26:	68fb      	ldr	r3, [r7, #12]
 8025c28:	7fdb      	ldrb	r3, [r3, #31]
 8025c2a:	2b00      	cmp	r3, #0
 8025c2c:	d00b      	beq.n	8025c46 <ip_reass_tmr+0x32>
      r->timer--;
 8025c2e:	68fb      	ldr	r3, [r7, #12]
 8025c30:	7fdb      	ldrb	r3, [r3, #31]
 8025c32:	3b01      	subs	r3, #1
 8025c34:	b2da      	uxtb	r2, r3
 8025c36:	68fb      	ldr	r3, [r7, #12]
 8025c38:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8025c3a:	68fb      	ldr	r3, [r7, #12]
 8025c3c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8025c3e:	68fb      	ldr	r3, [r7, #12]
 8025c40:	681b      	ldr	r3, [r3, #0]
 8025c42:	60fb      	str	r3, [r7, #12]
 8025c44:	e008      	b.n	8025c58 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8025c46:	68fb      	ldr	r3, [r7, #12]
 8025c48:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8025c4a:	68fb      	ldr	r3, [r7, #12]
 8025c4c:	681b      	ldr	r3, [r3, #0]
 8025c4e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8025c50:	68b9      	ldr	r1, [r7, #8]
 8025c52:	6878      	ldr	r0, [r7, #4]
 8025c54:	f000 f80a 	bl	8025c6c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8025c58:	68fb      	ldr	r3, [r7, #12]
 8025c5a:	2b00      	cmp	r3, #0
 8025c5c:	d1e3      	bne.n	8025c26 <ip_reass_tmr+0x12>
    }
  }
}
 8025c5e:	bf00      	nop
 8025c60:	bf00      	nop
 8025c62:	3710      	adds	r7, #16
 8025c64:	46bd      	mov	sp, r7
 8025c66:	bd80      	pop	{r7, pc}
 8025c68:	200112e8 	.word	0x200112e8

08025c6c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8025c6c:	b580      	push	{r7, lr}
 8025c6e:	b088      	sub	sp, #32
 8025c70:	af00      	add	r7, sp, #0
 8025c72:	6078      	str	r0, [r7, #4]
 8025c74:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8025c76:	2300      	movs	r3, #0
 8025c78:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8025c7a:	683a      	ldr	r2, [r7, #0]
 8025c7c:	687b      	ldr	r3, [r7, #4]
 8025c7e:	429a      	cmp	r2, r3
 8025c80:	d105      	bne.n	8025c8e <ip_reass_free_complete_datagram+0x22>
 8025c82:	4b45      	ldr	r3, [pc, #276]	@ (8025d98 <ip_reass_free_complete_datagram+0x12c>)
 8025c84:	22ab      	movs	r2, #171	@ 0xab
 8025c86:	4945      	ldr	r1, [pc, #276]	@ (8025d9c <ip_reass_free_complete_datagram+0x130>)
 8025c88:	4845      	ldr	r0, [pc, #276]	@ (8025da0 <ip_reass_free_complete_datagram+0x134>)
 8025c8a:	f001 fd6f 	bl	802776c <iprintf>
  if (prev != NULL) {
 8025c8e:	683b      	ldr	r3, [r7, #0]
 8025c90:	2b00      	cmp	r3, #0
 8025c92:	d00a      	beq.n	8025caa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8025c94:	683b      	ldr	r3, [r7, #0]
 8025c96:	681b      	ldr	r3, [r3, #0]
 8025c98:	687a      	ldr	r2, [r7, #4]
 8025c9a:	429a      	cmp	r2, r3
 8025c9c:	d005      	beq.n	8025caa <ip_reass_free_complete_datagram+0x3e>
 8025c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8025d98 <ip_reass_free_complete_datagram+0x12c>)
 8025ca0:	22ad      	movs	r2, #173	@ 0xad
 8025ca2:	4940      	ldr	r1, [pc, #256]	@ (8025da4 <ip_reass_free_complete_datagram+0x138>)
 8025ca4:	483e      	ldr	r0, [pc, #248]	@ (8025da0 <ip_reass_free_complete_datagram+0x134>)
 8025ca6:	f001 fd61 	bl	802776c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8025caa:	687b      	ldr	r3, [r7, #4]
 8025cac:	685b      	ldr	r3, [r3, #4]
 8025cae:	685b      	ldr	r3, [r3, #4]
 8025cb0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8025cb2:	697b      	ldr	r3, [r7, #20]
 8025cb4:	889b      	ldrh	r3, [r3, #4]
 8025cb6:	b29b      	uxth	r3, r3
 8025cb8:	2b00      	cmp	r3, #0
 8025cba:	d12a      	bne.n	8025d12 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8025cbc:	687b      	ldr	r3, [r7, #4]
 8025cbe:	685b      	ldr	r3, [r3, #4]
 8025cc0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8025cc2:	697b      	ldr	r3, [r7, #20]
 8025cc4:	681a      	ldr	r2, [r3, #0]
 8025cc6:	687b      	ldr	r3, [r7, #4]
 8025cc8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8025cca:	69bb      	ldr	r3, [r7, #24]
 8025ccc:	6858      	ldr	r0, [r3, #4]
 8025cce:	687b      	ldr	r3, [r7, #4]
 8025cd0:	3308      	adds	r3, #8
 8025cd2:	2214      	movs	r2, #20
 8025cd4:	4619      	mov	r1, r3
 8025cd6:	f001 ff7c 	bl	8027bd2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8025cda:	2101      	movs	r1, #1
 8025cdc:	69b8      	ldr	r0, [r7, #24]
 8025cde:	f7ff fc29 	bl	8025534 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8025ce2:	69b8      	ldr	r0, [r7, #24]
 8025ce4:	f7f5 fbc4 	bl	801b470 <pbuf_clen>
 8025ce8:	4603      	mov	r3, r0
 8025cea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8025cec:	8bfa      	ldrh	r2, [r7, #30]
 8025cee:	8a7b      	ldrh	r3, [r7, #18]
 8025cf0:	4413      	add	r3, r2
 8025cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8025cf6:	db05      	blt.n	8025d04 <ip_reass_free_complete_datagram+0x98>
 8025cf8:	4b27      	ldr	r3, [pc, #156]	@ (8025d98 <ip_reass_free_complete_datagram+0x12c>)
 8025cfa:	22bc      	movs	r2, #188	@ 0xbc
 8025cfc:	492a      	ldr	r1, [pc, #168]	@ (8025da8 <ip_reass_free_complete_datagram+0x13c>)
 8025cfe:	4828      	ldr	r0, [pc, #160]	@ (8025da0 <ip_reass_free_complete_datagram+0x134>)
 8025d00:	f001 fd34 	bl	802776c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025d04:	8bfa      	ldrh	r2, [r7, #30]
 8025d06:	8a7b      	ldrh	r3, [r7, #18]
 8025d08:	4413      	add	r3, r2
 8025d0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8025d0c:	69b8      	ldr	r0, [r7, #24]
 8025d0e:	f7f5 fb21 	bl	801b354 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8025d12:	687b      	ldr	r3, [r7, #4]
 8025d14:	685b      	ldr	r3, [r3, #4]
 8025d16:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8025d18:	e01f      	b.n	8025d5a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8025d1a:	69bb      	ldr	r3, [r7, #24]
 8025d1c:	685b      	ldr	r3, [r3, #4]
 8025d1e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8025d20:	69bb      	ldr	r3, [r7, #24]
 8025d22:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8025d24:	697b      	ldr	r3, [r7, #20]
 8025d26:	681b      	ldr	r3, [r3, #0]
 8025d28:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8025d2a:	68f8      	ldr	r0, [r7, #12]
 8025d2c:	f7f5 fba0 	bl	801b470 <pbuf_clen>
 8025d30:	4603      	mov	r3, r0
 8025d32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8025d34:	8bfa      	ldrh	r2, [r7, #30]
 8025d36:	8a7b      	ldrh	r3, [r7, #18]
 8025d38:	4413      	add	r3, r2
 8025d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8025d3e:	db05      	blt.n	8025d4c <ip_reass_free_complete_datagram+0xe0>
 8025d40:	4b15      	ldr	r3, [pc, #84]	@ (8025d98 <ip_reass_free_complete_datagram+0x12c>)
 8025d42:	22cc      	movs	r2, #204	@ 0xcc
 8025d44:	4918      	ldr	r1, [pc, #96]	@ (8025da8 <ip_reass_free_complete_datagram+0x13c>)
 8025d46:	4816      	ldr	r0, [pc, #88]	@ (8025da0 <ip_reass_free_complete_datagram+0x134>)
 8025d48:	f001 fd10 	bl	802776c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025d4c:	8bfa      	ldrh	r2, [r7, #30]
 8025d4e:	8a7b      	ldrh	r3, [r7, #18]
 8025d50:	4413      	add	r3, r2
 8025d52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8025d54:	68f8      	ldr	r0, [r7, #12]
 8025d56:	f7f5 fafd 	bl	801b354 <pbuf_free>
  while (p != NULL) {
 8025d5a:	69bb      	ldr	r3, [r7, #24]
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	d1dc      	bne.n	8025d1a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8025d60:	6839      	ldr	r1, [r7, #0]
 8025d62:	6878      	ldr	r0, [r7, #4]
 8025d64:	f000 f8c2 	bl	8025eec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8025d68:	4b10      	ldr	r3, [pc, #64]	@ (8025dac <ip_reass_free_complete_datagram+0x140>)
 8025d6a:	881b      	ldrh	r3, [r3, #0]
 8025d6c:	8bfa      	ldrh	r2, [r7, #30]
 8025d6e:	429a      	cmp	r2, r3
 8025d70:	d905      	bls.n	8025d7e <ip_reass_free_complete_datagram+0x112>
 8025d72:	4b09      	ldr	r3, [pc, #36]	@ (8025d98 <ip_reass_free_complete_datagram+0x12c>)
 8025d74:	22d2      	movs	r2, #210	@ 0xd2
 8025d76:	490e      	ldr	r1, [pc, #56]	@ (8025db0 <ip_reass_free_complete_datagram+0x144>)
 8025d78:	4809      	ldr	r0, [pc, #36]	@ (8025da0 <ip_reass_free_complete_datagram+0x134>)
 8025d7a:	f001 fcf7 	bl	802776c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8025d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8025dac <ip_reass_free_complete_datagram+0x140>)
 8025d80:	881a      	ldrh	r2, [r3, #0]
 8025d82:	8bfb      	ldrh	r3, [r7, #30]
 8025d84:	1ad3      	subs	r3, r2, r3
 8025d86:	b29a      	uxth	r2, r3
 8025d88:	4b08      	ldr	r3, [pc, #32]	@ (8025dac <ip_reass_free_complete_datagram+0x140>)
 8025d8a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8025d8c:	8bfb      	ldrh	r3, [r7, #30]
}
 8025d8e:	4618      	mov	r0, r3
 8025d90:	3720      	adds	r7, #32
 8025d92:	46bd      	mov	sp, r7
 8025d94:	bd80      	pop	{r7, pc}
 8025d96:	bf00      	nop
 8025d98:	0802c12c 	.word	0x0802c12c
 8025d9c:	0802c168 	.word	0x0802c168
 8025da0:	0802c174 	.word	0x0802c174
 8025da4:	0802c19c 	.word	0x0802c19c
 8025da8:	0802c1b0 	.word	0x0802c1b0
 8025dac:	200112ec 	.word	0x200112ec
 8025db0:	0802c1d0 	.word	0x0802c1d0

08025db4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8025db4:	b580      	push	{r7, lr}
 8025db6:	b08a      	sub	sp, #40	@ 0x28
 8025db8:	af00      	add	r7, sp, #0
 8025dba:	6078      	str	r0, [r7, #4]
 8025dbc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8025dbe:	2300      	movs	r3, #0
 8025dc0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8025dc2:	2300      	movs	r3, #0
 8025dc4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8025dc6:	2300      	movs	r3, #0
 8025dc8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8025dca:	2300      	movs	r3, #0
 8025dcc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8025dce:	2300      	movs	r3, #0
 8025dd0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8025dd2:	4b28      	ldr	r3, [pc, #160]	@ (8025e74 <ip_reass_remove_oldest_datagram+0xc0>)
 8025dd4:	681b      	ldr	r3, [r3, #0]
 8025dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8025dd8:	e030      	b.n	8025e3c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8025dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025ddc:	695a      	ldr	r2, [r3, #20]
 8025dde:	687b      	ldr	r3, [r7, #4]
 8025de0:	68db      	ldr	r3, [r3, #12]
 8025de2:	429a      	cmp	r2, r3
 8025de4:	d10c      	bne.n	8025e00 <ip_reass_remove_oldest_datagram+0x4c>
 8025de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025de8:	699a      	ldr	r2, [r3, #24]
 8025dea:	687b      	ldr	r3, [r7, #4]
 8025dec:	691b      	ldr	r3, [r3, #16]
 8025dee:	429a      	cmp	r2, r3
 8025df0:	d106      	bne.n	8025e00 <ip_reass_remove_oldest_datagram+0x4c>
 8025df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025df4:	899a      	ldrh	r2, [r3, #12]
 8025df6:	687b      	ldr	r3, [r7, #4]
 8025df8:	889b      	ldrh	r3, [r3, #4]
 8025dfa:	b29b      	uxth	r3, r3
 8025dfc:	429a      	cmp	r2, r3
 8025dfe:	d014      	beq.n	8025e2a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8025e00:	693b      	ldr	r3, [r7, #16]
 8025e02:	3301      	adds	r3, #1
 8025e04:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8025e06:	6a3b      	ldr	r3, [r7, #32]
 8025e08:	2b00      	cmp	r3, #0
 8025e0a:	d104      	bne.n	8025e16 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8025e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e0e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8025e10:	69fb      	ldr	r3, [r7, #28]
 8025e12:	61bb      	str	r3, [r7, #24]
 8025e14:	e009      	b.n	8025e2a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8025e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e18:	7fda      	ldrb	r2, [r3, #31]
 8025e1a:	6a3b      	ldr	r3, [r7, #32]
 8025e1c:	7fdb      	ldrb	r3, [r3, #31]
 8025e1e:	429a      	cmp	r2, r3
 8025e20:	d803      	bhi.n	8025e2a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8025e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e24:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8025e26:	69fb      	ldr	r3, [r7, #28]
 8025e28:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8025e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e2c:	681b      	ldr	r3, [r3, #0]
 8025e2e:	2b00      	cmp	r3, #0
 8025e30:	d001      	beq.n	8025e36 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8025e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e34:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8025e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e38:	681b      	ldr	r3, [r3, #0]
 8025e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8025e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e3e:	2b00      	cmp	r3, #0
 8025e40:	d1cb      	bne.n	8025dda <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8025e42:	6a3b      	ldr	r3, [r7, #32]
 8025e44:	2b00      	cmp	r3, #0
 8025e46:	d008      	beq.n	8025e5a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8025e48:	69b9      	ldr	r1, [r7, #24]
 8025e4a:	6a38      	ldr	r0, [r7, #32]
 8025e4c:	f7ff ff0e 	bl	8025c6c <ip_reass_free_complete_datagram>
 8025e50:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8025e52:	697a      	ldr	r2, [r7, #20]
 8025e54:	68fb      	ldr	r3, [r7, #12]
 8025e56:	4413      	add	r3, r2
 8025e58:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8025e5a:	697a      	ldr	r2, [r7, #20]
 8025e5c:	683b      	ldr	r3, [r7, #0]
 8025e5e:	429a      	cmp	r2, r3
 8025e60:	da02      	bge.n	8025e68 <ip_reass_remove_oldest_datagram+0xb4>
 8025e62:	693b      	ldr	r3, [r7, #16]
 8025e64:	2b01      	cmp	r3, #1
 8025e66:	dcac      	bgt.n	8025dc2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8025e68:	697b      	ldr	r3, [r7, #20]
}
 8025e6a:	4618      	mov	r0, r3
 8025e6c:	3728      	adds	r7, #40	@ 0x28
 8025e6e:	46bd      	mov	sp, r7
 8025e70:	bd80      	pop	{r7, pc}
 8025e72:	bf00      	nop
 8025e74:	200112e8 	.word	0x200112e8

08025e78 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8025e78:	b580      	push	{r7, lr}
 8025e7a:	b084      	sub	sp, #16
 8025e7c:	af00      	add	r7, sp, #0
 8025e7e:	6078      	str	r0, [r7, #4]
 8025e80:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025e82:	2004      	movs	r0, #4
 8025e84:	f7f4 fb0e 	bl	801a4a4 <memp_malloc>
 8025e88:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8025e8a:	68fb      	ldr	r3, [r7, #12]
 8025e8c:	2b00      	cmp	r3, #0
 8025e8e:	d110      	bne.n	8025eb2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8025e90:	6839      	ldr	r1, [r7, #0]
 8025e92:	6878      	ldr	r0, [r7, #4]
 8025e94:	f7ff ff8e 	bl	8025db4 <ip_reass_remove_oldest_datagram>
 8025e98:	4602      	mov	r2, r0
 8025e9a:	683b      	ldr	r3, [r7, #0]
 8025e9c:	4293      	cmp	r3, r2
 8025e9e:	dc03      	bgt.n	8025ea8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025ea0:	2004      	movs	r0, #4
 8025ea2:	f7f4 faff 	bl	801a4a4 <memp_malloc>
 8025ea6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8025ea8:	68fb      	ldr	r3, [r7, #12]
 8025eaa:	2b00      	cmp	r3, #0
 8025eac:	d101      	bne.n	8025eb2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8025eae:	2300      	movs	r3, #0
 8025eb0:	e016      	b.n	8025ee0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8025eb2:	2220      	movs	r2, #32
 8025eb4:	2100      	movs	r1, #0
 8025eb6:	68f8      	ldr	r0, [r7, #12]
 8025eb8:	f001 fdb0 	bl	8027a1c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8025ebc:	68fb      	ldr	r3, [r7, #12]
 8025ebe:	220f      	movs	r2, #15
 8025ec0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8025ec2:	4b09      	ldr	r3, [pc, #36]	@ (8025ee8 <ip_reass_enqueue_new_datagram+0x70>)
 8025ec4:	681a      	ldr	r2, [r3, #0]
 8025ec6:	68fb      	ldr	r3, [r7, #12]
 8025ec8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8025eca:	4a07      	ldr	r2, [pc, #28]	@ (8025ee8 <ip_reass_enqueue_new_datagram+0x70>)
 8025ecc:	68fb      	ldr	r3, [r7, #12]
 8025ece:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8025ed0:	68fb      	ldr	r3, [r7, #12]
 8025ed2:	3308      	adds	r3, #8
 8025ed4:	2214      	movs	r2, #20
 8025ed6:	6879      	ldr	r1, [r7, #4]
 8025ed8:	4618      	mov	r0, r3
 8025eda:	f001 fe7a 	bl	8027bd2 <memcpy>
  return ipr;
 8025ede:	68fb      	ldr	r3, [r7, #12]
}
 8025ee0:	4618      	mov	r0, r3
 8025ee2:	3710      	adds	r7, #16
 8025ee4:	46bd      	mov	sp, r7
 8025ee6:	bd80      	pop	{r7, pc}
 8025ee8:	200112e8 	.word	0x200112e8

08025eec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8025eec:	b580      	push	{r7, lr}
 8025eee:	b082      	sub	sp, #8
 8025ef0:	af00      	add	r7, sp, #0
 8025ef2:	6078      	str	r0, [r7, #4]
 8025ef4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8025ef6:	4b10      	ldr	r3, [pc, #64]	@ (8025f38 <ip_reass_dequeue_datagram+0x4c>)
 8025ef8:	681b      	ldr	r3, [r3, #0]
 8025efa:	687a      	ldr	r2, [r7, #4]
 8025efc:	429a      	cmp	r2, r3
 8025efe:	d104      	bne.n	8025f0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8025f00:	687b      	ldr	r3, [r7, #4]
 8025f02:	681b      	ldr	r3, [r3, #0]
 8025f04:	4a0c      	ldr	r2, [pc, #48]	@ (8025f38 <ip_reass_dequeue_datagram+0x4c>)
 8025f06:	6013      	str	r3, [r2, #0]
 8025f08:	e00d      	b.n	8025f26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8025f0a:	683b      	ldr	r3, [r7, #0]
 8025f0c:	2b00      	cmp	r3, #0
 8025f0e:	d106      	bne.n	8025f1e <ip_reass_dequeue_datagram+0x32>
 8025f10:	4b0a      	ldr	r3, [pc, #40]	@ (8025f3c <ip_reass_dequeue_datagram+0x50>)
 8025f12:	f240 1245 	movw	r2, #325	@ 0x145
 8025f16:	490a      	ldr	r1, [pc, #40]	@ (8025f40 <ip_reass_dequeue_datagram+0x54>)
 8025f18:	480a      	ldr	r0, [pc, #40]	@ (8025f44 <ip_reass_dequeue_datagram+0x58>)
 8025f1a:	f001 fc27 	bl	802776c <iprintf>
    prev->next = ipr->next;
 8025f1e:	687b      	ldr	r3, [r7, #4]
 8025f20:	681a      	ldr	r2, [r3, #0]
 8025f22:	683b      	ldr	r3, [r7, #0]
 8025f24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8025f26:	6879      	ldr	r1, [r7, #4]
 8025f28:	2004      	movs	r0, #4
 8025f2a:	f7f4 fb31 	bl	801a590 <memp_free>
}
 8025f2e:	bf00      	nop
 8025f30:	3708      	adds	r7, #8
 8025f32:	46bd      	mov	sp, r7
 8025f34:	bd80      	pop	{r7, pc}
 8025f36:	bf00      	nop
 8025f38:	200112e8 	.word	0x200112e8
 8025f3c:	0802c12c 	.word	0x0802c12c
 8025f40:	0802c1f4 	.word	0x0802c1f4
 8025f44:	0802c174 	.word	0x0802c174

08025f48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8025f48:	b580      	push	{r7, lr}
 8025f4a:	b08c      	sub	sp, #48	@ 0x30
 8025f4c:	af00      	add	r7, sp, #0
 8025f4e:	60f8      	str	r0, [r7, #12]
 8025f50:	60b9      	str	r1, [r7, #8]
 8025f52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8025f54:	2300      	movs	r3, #0
 8025f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8025f58:	2301      	movs	r3, #1
 8025f5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8025f5c:	68bb      	ldr	r3, [r7, #8]
 8025f5e:	685b      	ldr	r3, [r3, #4]
 8025f60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8025f62:	69fb      	ldr	r3, [r7, #28]
 8025f64:	885b      	ldrh	r3, [r3, #2]
 8025f66:	b29b      	uxth	r3, r3
 8025f68:	4618      	mov	r0, r3
 8025f6a:	f7f3 fdc3 	bl	8019af4 <lwip_htons>
 8025f6e:	4603      	mov	r3, r0
 8025f70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8025f72:	69fb      	ldr	r3, [r7, #28]
 8025f74:	781b      	ldrb	r3, [r3, #0]
 8025f76:	f003 030f 	and.w	r3, r3, #15
 8025f7a:	b2db      	uxtb	r3, r3
 8025f7c:	009b      	lsls	r3, r3, #2
 8025f7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8025f80:	7e7b      	ldrb	r3, [r7, #25]
 8025f82:	b29b      	uxth	r3, r3
 8025f84:	8b7a      	ldrh	r2, [r7, #26]
 8025f86:	429a      	cmp	r2, r3
 8025f88:	d202      	bcs.n	8025f90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8025f8e:	e135      	b.n	80261fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8025f90:	7e7b      	ldrb	r3, [r7, #25]
 8025f92:	b29b      	uxth	r3, r3
 8025f94:	8b7a      	ldrh	r2, [r7, #26]
 8025f96:	1ad3      	subs	r3, r2, r3
 8025f98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8025f9a:	69fb      	ldr	r3, [r7, #28]
 8025f9c:	88db      	ldrh	r3, [r3, #6]
 8025f9e:	b29b      	uxth	r3, r3
 8025fa0:	4618      	mov	r0, r3
 8025fa2:	f7f3 fda7 	bl	8019af4 <lwip_htons>
 8025fa6:	4603      	mov	r3, r0
 8025fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025fac:	b29b      	uxth	r3, r3
 8025fae:	00db      	lsls	r3, r3, #3
 8025fb0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8025fb2:	68bb      	ldr	r3, [r7, #8]
 8025fb4:	685b      	ldr	r3, [r3, #4]
 8025fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8025fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025fba:	2200      	movs	r2, #0
 8025fbc:	701a      	strb	r2, [r3, #0]
 8025fbe:	2200      	movs	r2, #0
 8025fc0:	705a      	strb	r2, [r3, #1]
 8025fc2:	2200      	movs	r2, #0
 8025fc4:	709a      	strb	r2, [r3, #2]
 8025fc6:	2200      	movs	r2, #0
 8025fc8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8025fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025fcc:	8afa      	ldrh	r2, [r7, #22]
 8025fce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8025fd0:	8afa      	ldrh	r2, [r7, #22]
 8025fd2:	8b7b      	ldrh	r3, [r7, #26]
 8025fd4:	4413      	add	r3, r2
 8025fd6:	b29a      	uxth	r2, r3
 8025fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025fda:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8025fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025fde:	88db      	ldrh	r3, [r3, #6]
 8025fe0:	b29b      	uxth	r3, r3
 8025fe2:	8afa      	ldrh	r2, [r7, #22]
 8025fe4:	429a      	cmp	r2, r3
 8025fe6:	d902      	bls.n	8025fee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8025fec:	e106      	b.n	80261fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8025fee:	68fb      	ldr	r3, [r7, #12]
 8025ff0:	685b      	ldr	r3, [r3, #4]
 8025ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8025ff4:	e068      	b.n	80260c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8025ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025ff8:	685b      	ldr	r3, [r3, #4]
 8025ffa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8025ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025ffe:	889b      	ldrh	r3, [r3, #4]
 8026000:	b29a      	uxth	r2, r3
 8026002:	693b      	ldr	r3, [r7, #16]
 8026004:	889b      	ldrh	r3, [r3, #4]
 8026006:	b29b      	uxth	r3, r3
 8026008:	429a      	cmp	r2, r3
 802600a:	d235      	bcs.n	8026078 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 802600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802600e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026010:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8026012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026014:	2b00      	cmp	r3, #0
 8026016:	d020      	beq.n	802605a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8026018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802601a:	889b      	ldrh	r3, [r3, #4]
 802601c:	b29a      	uxth	r2, r3
 802601e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026020:	88db      	ldrh	r3, [r3, #6]
 8026022:	b29b      	uxth	r3, r3
 8026024:	429a      	cmp	r2, r3
 8026026:	d307      	bcc.n	8026038 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8026028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802602a:	88db      	ldrh	r3, [r3, #6]
 802602c:	b29a      	uxth	r2, r3
 802602e:	693b      	ldr	r3, [r7, #16]
 8026030:	889b      	ldrh	r3, [r3, #4]
 8026032:	b29b      	uxth	r3, r3
 8026034:	429a      	cmp	r2, r3
 8026036:	d902      	bls.n	802603e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8026038:	f04f 33ff 	mov.w	r3, #4294967295
 802603c:	e0de      	b.n	80261fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 802603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026040:	68ba      	ldr	r2, [r7, #8]
 8026042:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8026044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026046:	88db      	ldrh	r3, [r3, #6]
 8026048:	b29a      	uxth	r2, r3
 802604a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802604c:	889b      	ldrh	r3, [r3, #4]
 802604e:	b29b      	uxth	r3, r3
 8026050:	429a      	cmp	r2, r3
 8026052:	d03d      	beq.n	80260d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8026054:	2300      	movs	r3, #0
 8026056:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8026058:	e03a      	b.n	80260d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 802605a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802605c:	88db      	ldrh	r3, [r3, #6]
 802605e:	b29a      	uxth	r2, r3
 8026060:	693b      	ldr	r3, [r7, #16]
 8026062:	889b      	ldrh	r3, [r3, #4]
 8026064:	b29b      	uxth	r3, r3
 8026066:	429a      	cmp	r2, r3
 8026068:	d902      	bls.n	8026070 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802606a:	f04f 33ff 	mov.w	r3, #4294967295
 802606e:	e0c5      	b.n	80261fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8026070:	68fb      	ldr	r3, [r7, #12]
 8026072:	68ba      	ldr	r2, [r7, #8]
 8026074:	605a      	str	r2, [r3, #4]
      break;
 8026076:	e02b      	b.n	80260d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8026078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802607a:	889b      	ldrh	r3, [r3, #4]
 802607c:	b29a      	uxth	r2, r3
 802607e:	693b      	ldr	r3, [r7, #16]
 8026080:	889b      	ldrh	r3, [r3, #4]
 8026082:	b29b      	uxth	r3, r3
 8026084:	429a      	cmp	r2, r3
 8026086:	d102      	bne.n	802608e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8026088:	f04f 33ff 	mov.w	r3, #4294967295
 802608c:	e0b6      	b.n	80261fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802608e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026090:	889b      	ldrh	r3, [r3, #4]
 8026092:	b29a      	uxth	r2, r3
 8026094:	693b      	ldr	r3, [r7, #16]
 8026096:	88db      	ldrh	r3, [r3, #6]
 8026098:	b29b      	uxth	r3, r3
 802609a:	429a      	cmp	r2, r3
 802609c:	d202      	bcs.n	80260a4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802609e:	f04f 33ff 	mov.w	r3, #4294967295
 80260a2:	e0ab      	b.n	80261fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80260a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80260a6:	2b00      	cmp	r3, #0
 80260a8:	d009      	beq.n	80260be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80260aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80260ac:	88db      	ldrh	r3, [r3, #6]
 80260ae:	b29a      	uxth	r2, r3
 80260b0:	693b      	ldr	r3, [r7, #16]
 80260b2:	889b      	ldrh	r3, [r3, #4]
 80260b4:	b29b      	uxth	r3, r3
 80260b6:	429a      	cmp	r2, r3
 80260b8:	d001      	beq.n	80260be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80260ba:	2300      	movs	r3, #0
 80260bc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80260be:	693b      	ldr	r3, [r7, #16]
 80260c0:	681b      	ldr	r3, [r3, #0]
 80260c2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80260c4:	693b      	ldr	r3, [r7, #16]
 80260c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80260c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80260ca:	2b00      	cmp	r3, #0
 80260cc:	d193      	bne.n	8025ff6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80260ce:	e000      	b.n	80260d2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80260d0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80260d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80260d4:	2b00      	cmp	r3, #0
 80260d6:	d12d      	bne.n	8026134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80260d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80260da:	2b00      	cmp	r3, #0
 80260dc:	d01c      	beq.n	8026118 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80260de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80260e0:	88db      	ldrh	r3, [r3, #6]
 80260e2:	b29a      	uxth	r2, r3
 80260e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80260e6:	889b      	ldrh	r3, [r3, #4]
 80260e8:	b29b      	uxth	r3, r3
 80260ea:	429a      	cmp	r2, r3
 80260ec:	d906      	bls.n	80260fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80260ee:	4b45      	ldr	r3, [pc, #276]	@ (8026204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80260f0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80260f4:	4944      	ldr	r1, [pc, #272]	@ (8026208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80260f6:	4845      	ldr	r0, [pc, #276]	@ (802620c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80260f8:	f001 fb38 	bl	802776c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80260fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80260fe:	68ba      	ldr	r2, [r7, #8]
 8026100:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8026102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026104:	88db      	ldrh	r3, [r3, #6]
 8026106:	b29a      	uxth	r2, r3
 8026108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802610a:	889b      	ldrh	r3, [r3, #4]
 802610c:	b29b      	uxth	r3, r3
 802610e:	429a      	cmp	r2, r3
 8026110:	d010      	beq.n	8026134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8026112:	2300      	movs	r3, #0
 8026114:	623b      	str	r3, [r7, #32]
 8026116:	e00d      	b.n	8026134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8026118:	68fb      	ldr	r3, [r7, #12]
 802611a:	685b      	ldr	r3, [r3, #4]
 802611c:	2b00      	cmp	r3, #0
 802611e:	d006      	beq.n	802612e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8026120:	4b38      	ldr	r3, [pc, #224]	@ (8026204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8026122:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8026126:	493a      	ldr	r1, [pc, #232]	@ (8026210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8026128:	4838      	ldr	r0, [pc, #224]	@ (802620c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802612a:	f001 fb1f 	bl	802776c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 802612e:	68fb      	ldr	r3, [r7, #12]
 8026130:	68ba      	ldr	r2, [r7, #8]
 8026132:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8026134:	687b      	ldr	r3, [r7, #4]
 8026136:	2b00      	cmp	r3, #0
 8026138:	d105      	bne.n	8026146 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 802613a:	68fb      	ldr	r3, [r7, #12]
 802613c:	7f9b      	ldrb	r3, [r3, #30]
 802613e:	f003 0301 	and.w	r3, r3, #1
 8026142:	2b00      	cmp	r3, #0
 8026144:	d059      	beq.n	80261fa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8026146:	6a3b      	ldr	r3, [r7, #32]
 8026148:	2b00      	cmp	r3, #0
 802614a:	d04f      	beq.n	80261ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 802614c:	68fb      	ldr	r3, [r7, #12]
 802614e:	685b      	ldr	r3, [r3, #4]
 8026150:	2b00      	cmp	r3, #0
 8026152:	d006      	beq.n	8026162 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8026154:	68fb      	ldr	r3, [r7, #12]
 8026156:	685b      	ldr	r3, [r3, #4]
 8026158:	685b      	ldr	r3, [r3, #4]
 802615a:	889b      	ldrh	r3, [r3, #4]
 802615c:	b29b      	uxth	r3, r3
 802615e:	2b00      	cmp	r3, #0
 8026160:	d002      	beq.n	8026168 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8026162:	2300      	movs	r3, #0
 8026164:	623b      	str	r3, [r7, #32]
 8026166:	e041      	b.n	80261ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8026168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802616a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 802616c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802616e:	681b      	ldr	r3, [r3, #0]
 8026170:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8026172:	e012      	b.n	802619a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8026174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026176:	685b      	ldr	r3, [r3, #4]
 8026178:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 802617a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802617c:	88db      	ldrh	r3, [r3, #6]
 802617e:	b29a      	uxth	r2, r3
 8026180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026182:	889b      	ldrh	r3, [r3, #4]
 8026184:	b29b      	uxth	r3, r3
 8026186:	429a      	cmp	r2, r3
 8026188:	d002      	beq.n	8026190 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802618a:	2300      	movs	r3, #0
 802618c:	623b      	str	r3, [r7, #32]
            break;
 802618e:	e007      	b.n	80261a0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8026190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026192:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8026194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026196:	681b      	ldr	r3, [r3, #0]
 8026198:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 802619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802619c:	2b00      	cmp	r3, #0
 802619e:	d1e9      	bne.n	8026174 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80261a0:	6a3b      	ldr	r3, [r7, #32]
 80261a2:	2b00      	cmp	r3, #0
 80261a4:	d022      	beq.n	80261ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80261a6:	68fb      	ldr	r3, [r7, #12]
 80261a8:	685b      	ldr	r3, [r3, #4]
 80261aa:	2b00      	cmp	r3, #0
 80261ac:	d106      	bne.n	80261bc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80261ae:	4b15      	ldr	r3, [pc, #84]	@ (8026204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80261b0:	f240 12df 	movw	r2, #479	@ 0x1df
 80261b4:	4917      	ldr	r1, [pc, #92]	@ (8026214 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80261b6:	4815      	ldr	r0, [pc, #84]	@ (802620c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80261b8:	f001 fad8 	bl	802776c <iprintf>
          LWIP_ASSERT("sanity check",
 80261bc:	68fb      	ldr	r3, [r7, #12]
 80261be:	685b      	ldr	r3, [r3, #4]
 80261c0:	685b      	ldr	r3, [r3, #4]
 80261c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80261c4:	429a      	cmp	r2, r3
 80261c6:	d106      	bne.n	80261d6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80261c8:	4b0e      	ldr	r3, [pc, #56]	@ (8026204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80261ca:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80261ce:	4911      	ldr	r1, [pc, #68]	@ (8026214 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80261d0:	480e      	ldr	r0, [pc, #56]	@ (802620c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80261d2:	f001 facb 	bl	802776c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80261d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80261d8:	681b      	ldr	r3, [r3, #0]
 80261da:	2b00      	cmp	r3, #0
 80261dc:	d006      	beq.n	80261ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80261de:	4b09      	ldr	r3, [pc, #36]	@ (8026204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80261e0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80261e4:	490c      	ldr	r1, [pc, #48]	@ (8026218 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80261e6:	4809      	ldr	r0, [pc, #36]	@ (802620c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80261e8:	f001 fac0 	bl	802776c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80261ec:	6a3b      	ldr	r3, [r7, #32]
 80261ee:	2b00      	cmp	r3, #0
 80261f0:	bf14      	ite	ne
 80261f2:	2301      	movne	r3, #1
 80261f4:	2300      	moveq	r3, #0
 80261f6:	b2db      	uxtb	r3, r3
 80261f8:	e000      	b.n	80261fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80261fa:	2300      	movs	r3, #0
}
 80261fc:	4618      	mov	r0, r3
 80261fe:	3730      	adds	r7, #48	@ 0x30
 8026200:	46bd      	mov	sp, r7
 8026202:	bd80      	pop	{r7, pc}
 8026204:	0802c12c 	.word	0x0802c12c
 8026208:	0802c210 	.word	0x0802c210
 802620c:	0802c174 	.word	0x0802c174
 8026210:	0802c230 	.word	0x0802c230
 8026214:	0802c268 	.word	0x0802c268
 8026218:	0802c278 	.word	0x0802c278

0802621c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 802621c:	b580      	push	{r7, lr}
 802621e:	b08e      	sub	sp, #56	@ 0x38
 8026220:	af00      	add	r7, sp, #0
 8026222:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8026224:	687b      	ldr	r3, [r7, #4]
 8026226:	685b      	ldr	r3, [r3, #4]
 8026228:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 802622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802622c:	781b      	ldrb	r3, [r3, #0]
 802622e:	f003 030f 	and.w	r3, r3, #15
 8026232:	b2db      	uxtb	r3, r3
 8026234:	009b      	lsls	r3, r3, #2
 8026236:	b2db      	uxtb	r3, r3
 8026238:	2b14      	cmp	r3, #20
 802623a:	f040 8171 	bne.w	8026520 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 802623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026240:	88db      	ldrh	r3, [r3, #6]
 8026242:	b29b      	uxth	r3, r3
 8026244:	4618      	mov	r0, r3
 8026246:	f7f3 fc55 	bl	8019af4 <lwip_htons>
 802624a:	4603      	mov	r3, r0
 802624c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026250:	b29b      	uxth	r3, r3
 8026252:	00db      	lsls	r3, r3, #3
 8026254:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8026256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026258:	885b      	ldrh	r3, [r3, #2]
 802625a:	b29b      	uxth	r3, r3
 802625c:	4618      	mov	r0, r3
 802625e:	f7f3 fc49 	bl	8019af4 <lwip_htons>
 8026262:	4603      	mov	r3, r0
 8026264:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8026266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026268:	781b      	ldrb	r3, [r3, #0]
 802626a:	f003 030f 	and.w	r3, r3, #15
 802626e:	b2db      	uxtb	r3, r3
 8026270:	009b      	lsls	r3, r3, #2
 8026272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8026276:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 802627a:	b29b      	uxth	r3, r3
 802627c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 802627e:	429a      	cmp	r2, r3
 8026280:	f0c0 8150 	bcc.w	8026524 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8026284:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8026288:	b29b      	uxth	r3, r3
 802628a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 802628c:	1ad3      	subs	r3, r2, r3
 802628e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8026290:	6878      	ldr	r0, [r7, #4]
 8026292:	f7f5 f8ed 	bl	801b470 <pbuf_clen>
 8026296:	4603      	mov	r3, r0
 8026298:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802629a:	4b8c      	ldr	r3, [pc, #560]	@ (80264cc <ip4_reass+0x2b0>)
 802629c:	881b      	ldrh	r3, [r3, #0]
 802629e:	461a      	mov	r2, r3
 80262a0:	8c3b      	ldrh	r3, [r7, #32]
 80262a2:	4413      	add	r3, r2
 80262a4:	2b0a      	cmp	r3, #10
 80262a6:	dd10      	ble.n	80262ca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80262a8:	8c3b      	ldrh	r3, [r7, #32]
 80262aa:	4619      	mov	r1, r3
 80262ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80262ae:	f7ff fd81 	bl	8025db4 <ip_reass_remove_oldest_datagram>
 80262b2:	4603      	mov	r3, r0
 80262b4:	2b00      	cmp	r3, #0
 80262b6:	f000 8137 	beq.w	8026528 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80262ba:	4b84      	ldr	r3, [pc, #528]	@ (80264cc <ip4_reass+0x2b0>)
 80262bc:	881b      	ldrh	r3, [r3, #0]
 80262be:	461a      	mov	r2, r3
 80262c0:	8c3b      	ldrh	r3, [r7, #32]
 80262c2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80262c4:	2b0a      	cmp	r3, #10
 80262c6:	f300 812f 	bgt.w	8026528 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80262ca:	4b81      	ldr	r3, [pc, #516]	@ (80264d0 <ip4_reass+0x2b4>)
 80262cc:	681b      	ldr	r3, [r3, #0]
 80262ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80262d0:	e015      	b.n	80262fe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80262d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80262d4:	695a      	ldr	r2, [r3, #20]
 80262d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80262d8:	68db      	ldr	r3, [r3, #12]
 80262da:	429a      	cmp	r2, r3
 80262dc:	d10c      	bne.n	80262f8 <ip4_reass+0xdc>
 80262de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80262e0:	699a      	ldr	r2, [r3, #24]
 80262e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80262e4:	691b      	ldr	r3, [r3, #16]
 80262e6:	429a      	cmp	r2, r3
 80262e8:	d106      	bne.n	80262f8 <ip4_reass+0xdc>
 80262ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80262ec:	899a      	ldrh	r2, [r3, #12]
 80262ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80262f0:	889b      	ldrh	r3, [r3, #4]
 80262f2:	b29b      	uxth	r3, r3
 80262f4:	429a      	cmp	r2, r3
 80262f6:	d006      	beq.n	8026306 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80262f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80262fa:	681b      	ldr	r3, [r3, #0]
 80262fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80262fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026300:	2b00      	cmp	r3, #0
 8026302:	d1e6      	bne.n	80262d2 <ip4_reass+0xb6>
 8026304:	e000      	b.n	8026308 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8026306:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8026308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802630a:	2b00      	cmp	r3, #0
 802630c:	d109      	bne.n	8026322 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802630e:	8c3b      	ldrh	r3, [r7, #32]
 8026310:	4619      	mov	r1, r3
 8026312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8026314:	f7ff fdb0 	bl	8025e78 <ip_reass_enqueue_new_datagram>
 8026318:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802631c:	2b00      	cmp	r3, #0
 802631e:	d11c      	bne.n	802635a <ip4_reass+0x13e>
      goto nullreturn;
 8026320:	e105      	b.n	802652e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8026322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026324:	88db      	ldrh	r3, [r3, #6]
 8026326:	b29b      	uxth	r3, r3
 8026328:	4618      	mov	r0, r3
 802632a:	f7f3 fbe3 	bl	8019af4 <lwip_htons>
 802632e:	4603      	mov	r3, r0
 8026330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026334:	2b00      	cmp	r3, #0
 8026336:	d110      	bne.n	802635a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8026338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802633a:	89db      	ldrh	r3, [r3, #14]
 802633c:	4618      	mov	r0, r3
 802633e:	f7f3 fbd9 	bl	8019af4 <lwip_htons>
 8026342:	4603      	mov	r3, r0
 8026344:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8026348:	2b00      	cmp	r3, #0
 802634a:	d006      	beq.n	802635a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802634e:	3308      	adds	r3, #8
 8026350:	2214      	movs	r2, #20
 8026352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8026354:	4618      	mov	r0, r3
 8026356:	f001 fc3c 	bl	8027bd2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802635c:	88db      	ldrh	r3, [r3, #6]
 802635e:	b29b      	uxth	r3, r3
 8026360:	f003 0320 	and.w	r3, r3, #32
 8026364:	2b00      	cmp	r3, #0
 8026366:	bf0c      	ite	eq
 8026368:	2301      	moveq	r3, #1
 802636a:	2300      	movne	r3, #0
 802636c:	b2db      	uxtb	r3, r3
 802636e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8026370:	69fb      	ldr	r3, [r7, #28]
 8026372:	2b00      	cmp	r3, #0
 8026374:	d00e      	beq.n	8026394 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8026376:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8026378:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802637a:	4413      	add	r3, r2
 802637c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802637e:	8b7a      	ldrh	r2, [r7, #26]
 8026380:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8026382:	429a      	cmp	r2, r3
 8026384:	f0c0 80a0 	bcc.w	80264c8 <ip4_reass+0x2ac>
 8026388:	8b7b      	ldrh	r3, [r7, #26]
 802638a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 802638e:	4293      	cmp	r3, r2
 8026390:	f200 809a 	bhi.w	80264c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8026394:	69fa      	ldr	r2, [r7, #28]
 8026396:	6879      	ldr	r1, [r7, #4]
 8026398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802639a:	f7ff fdd5 	bl	8025f48 <ip_reass_chain_frag_into_datagram_and_validate>
 802639e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80263a0:	697b      	ldr	r3, [r7, #20]
 80263a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80263a6:	f000 809b 	beq.w	80264e0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80263aa:	4b48      	ldr	r3, [pc, #288]	@ (80264cc <ip4_reass+0x2b0>)
 80263ac:	881a      	ldrh	r2, [r3, #0]
 80263ae:	8c3b      	ldrh	r3, [r7, #32]
 80263b0:	4413      	add	r3, r2
 80263b2:	b29a      	uxth	r2, r3
 80263b4:	4b45      	ldr	r3, [pc, #276]	@ (80264cc <ip4_reass+0x2b0>)
 80263b6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80263b8:	69fb      	ldr	r3, [r7, #28]
 80263ba:	2b00      	cmp	r3, #0
 80263bc:	d00d      	beq.n	80263da <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80263be:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80263c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80263c2:	4413      	add	r3, r2
 80263c4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80263c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80263c8:	8a7a      	ldrh	r2, [r7, #18]
 80263ca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80263cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80263ce:	7f9b      	ldrb	r3, [r3, #30]
 80263d0:	f043 0301 	orr.w	r3, r3, #1
 80263d4:	b2da      	uxtb	r2, r3
 80263d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80263d8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80263da:	697b      	ldr	r3, [r7, #20]
 80263dc:	2b01      	cmp	r3, #1
 80263de:	d171      	bne.n	80264c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80263e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80263e2:	8b9b      	ldrh	r3, [r3, #28]
 80263e4:	3314      	adds	r3, #20
 80263e6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80263e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80263ea:	685b      	ldr	r3, [r3, #4]
 80263ec:	685b      	ldr	r3, [r3, #4]
 80263ee:	681b      	ldr	r3, [r3, #0]
 80263f0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80263f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80263f4:	685b      	ldr	r3, [r3, #4]
 80263f6:	685b      	ldr	r3, [r3, #4]
 80263f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80263fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80263fc:	3308      	adds	r3, #8
 80263fe:	2214      	movs	r2, #20
 8026400:	4619      	mov	r1, r3
 8026402:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8026404:	f001 fbe5 	bl	8027bd2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8026408:	8a3b      	ldrh	r3, [r7, #16]
 802640a:	4618      	mov	r0, r3
 802640c:	f7f3 fb72 	bl	8019af4 <lwip_htons>
 8026410:	4603      	mov	r3, r0
 8026412:	461a      	mov	r2, r3
 8026414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026416:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8026418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802641a:	2200      	movs	r2, #0
 802641c:	719a      	strb	r2, [r3, #6]
 802641e:	2200      	movs	r2, #0
 8026420:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8026422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026424:	2200      	movs	r2, #0
 8026426:	729a      	strb	r2, [r3, #10]
 8026428:	2200      	movs	r2, #0
 802642a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 802642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802642e:	685b      	ldr	r3, [r3, #4]
 8026430:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8026432:	e00d      	b.n	8026450 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8026434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026436:	685b      	ldr	r3, [r3, #4]
 8026438:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802643a:	2114      	movs	r1, #20
 802643c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 802643e:	f7f4 fed1 	bl	801b1e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8026442:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8026444:	6878      	ldr	r0, [r7, #4]
 8026446:	f7f5 f853 	bl	801b4f0 <pbuf_cat>
      r = iprh->next_pbuf;
 802644a:	68fb      	ldr	r3, [r7, #12]
 802644c:	681b      	ldr	r3, [r3, #0]
 802644e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8026450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026452:	2b00      	cmp	r3, #0
 8026454:	d1ee      	bne.n	8026434 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8026456:	4b1e      	ldr	r3, [pc, #120]	@ (80264d0 <ip4_reass+0x2b4>)
 8026458:	681b      	ldr	r3, [r3, #0]
 802645a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802645c:	429a      	cmp	r2, r3
 802645e:	d102      	bne.n	8026466 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8026460:	2300      	movs	r3, #0
 8026462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8026464:	e010      	b.n	8026488 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8026466:	4b1a      	ldr	r3, [pc, #104]	@ (80264d0 <ip4_reass+0x2b4>)
 8026468:	681b      	ldr	r3, [r3, #0]
 802646a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802646c:	e007      	b.n	802647e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802646e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026470:	681b      	ldr	r3, [r3, #0]
 8026472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026474:	429a      	cmp	r2, r3
 8026476:	d006      	beq.n	8026486 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8026478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802647a:	681b      	ldr	r3, [r3, #0]
 802647c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802647e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026480:	2b00      	cmp	r3, #0
 8026482:	d1f4      	bne.n	802646e <ip4_reass+0x252>
 8026484:	e000      	b.n	8026488 <ip4_reass+0x26c>
          break;
 8026486:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8026488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802648a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802648c:	f7ff fd2e 	bl	8025eec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8026490:	6878      	ldr	r0, [r7, #4]
 8026492:	f7f4 ffed 	bl	801b470 <pbuf_clen>
 8026496:	4603      	mov	r3, r0
 8026498:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802649a:	4b0c      	ldr	r3, [pc, #48]	@ (80264cc <ip4_reass+0x2b0>)
 802649c:	881b      	ldrh	r3, [r3, #0]
 802649e:	8c3a      	ldrh	r2, [r7, #32]
 80264a0:	429a      	cmp	r2, r3
 80264a2:	d906      	bls.n	80264b2 <ip4_reass+0x296>
 80264a4:	4b0b      	ldr	r3, [pc, #44]	@ (80264d4 <ip4_reass+0x2b8>)
 80264a6:	f240 229b 	movw	r2, #667	@ 0x29b
 80264aa:	490b      	ldr	r1, [pc, #44]	@ (80264d8 <ip4_reass+0x2bc>)
 80264ac:	480b      	ldr	r0, [pc, #44]	@ (80264dc <ip4_reass+0x2c0>)
 80264ae:	f001 f95d 	bl	802776c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80264b2:	4b06      	ldr	r3, [pc, #24]	@ (80264cc <ip4_reass+0x2b0>)
 80264b4:	881a      	ldrh	r2, [r3, #0]
 80264b6:	8c3b      	ldrh	r3, [r7, #32]
 80264b8:	1ad3      	subs	r3, r2, r3
 80264ba:	b29a      	uxth	r2, r3
 80264bc:	4b03      	ldr	r3, [pc, #12]	@ (80264cc <ip4_reass+0x2b0>)
 80264be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80264c0:	687b      	ldr	r3, [r7, #4]
 80264c2:	e038      	b.n	8026536 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80264c4:	2300      	movs	r3, #0
 80264c6:	e036      	b.n	8026536 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80264c8:	bf00      	nop
 80264ca:	e00a      	b.n	80264e2 <ip4_reass+0x2c6>
 80264cc:	200112ec 	.word	0x200112ec
 80264d0:	200112e8 	.word	0x200112e8
 80264d4:	0802c12c 	.word	0x0802c12c
 80264d8:	0802c29c 	.word	0x0802c29c
 80264dc:	0802c174 	.word	0x0802c174
    goto nullreturn_ipr;
 80264e0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80264e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80264e4:	2b00      	cmp	r3, #0
 80264e6:	d106      	bne.n	80264f6 <ip4_reass+0x2da>
 80264e8:	4b15      	ldr	r3, [pc, #84]	@ (8026540 <ip4_reass+0x324>)
 80264ea:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80264ee:	4915      	ldr	r1, [pc, #84]	@ (8026544 <ip4_reass+0x328>)
 80264f0:	4815      	ldr	r0, [pc, #84]	@ (8026548 <ip4_reass+0x32c>)
 80264f2:	f001 f93b 	bl	802776c <iprintf>
  if (ipr->p == NULL) {
 80264f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80264f8:	685b      	ldr	r3, [r3, #4]
 80264fa:	2b00      	cmp	r3, #0
 80264fc:	d116      	bne.n	802652c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80264fe:	4b13      	ldr	r3, [pc, #76]	@ (802654c <ip4_reass+0x330>)
 8026500:	681b      	ldr	r3, [r3, #0]
 8026502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026504:	429a      	cmp	r2, r3
 8026506:	d006      	beq.n	8026516 <ip4_reass+0x2fa>
 8026508:	4b0d      	ldr	r3, [pc, #52]	@ (8026540 <ip4_reass+0x324>)
 802650a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 802650e:	4910      	ldr	r1, [pc, #64]	@ (8026550 <ip4_reass+0x334>)
 8026510:	480d      	ldr	r0, [pc, #52]	@ (8026548 <ip4_reass+0x32c>)
 8026512:	f001 f92b 	bl	802776c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8026516:	2100      	movs	r1, #0
 8026518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802651a:	f7ff fce7 	bl	8025eec <ip_reass_dequeue_datagram>
 802651e:	e006      	b.n	802652e <ip4_reass+0x312>
    goto nullreturn;
 8026520:	bf00      	nop
 8026522:	e004      	b.n	802652e <ip4_reass+0x312>
    goto nullreturn;
 8026524:	bf00      	nop
 8026526:	e002      	b.n	802652e <ip4_reass+0x312>
      goto nullreturn;
 8026528:	bf00      	nop
 802652a:	e000      	b.n	802652e <ip4_reass+0x312>
  }

nullreturn:
 802652c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802652e:	6878      	ldr	r0, [r7, #4]
 8026530:	f7f4 ff10 	bl	801b354 <pbuf_free>
  return NULL;
 8026534:	2300      	movs	r3, #0
}
 8026536:	4618      	mov	r0, r3
 8026538:	3738      	adds	r7, #56	@ 0x38
 802653a:	46bd      	mov	sp, r7
 802653c:	bd80      	pop	{r7, pc}
 802653e:	bf00      	nop
 8026540:	0802c12c 	.word	0x0802c12c
 8026544:	0802c2b8 	.word	0x0802c2b8
 8026548:	0802c174 	.word	0x0802c174
 802654c:	200112e8 	.word	0x200112e8
 8026550:	0802c2c4 	.word	0x0802c2c4

08026554 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8026554:	b580      	push	{r7, lr}
 8026556:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8026558:	2005      	movs	r0, #5
 802655a:	f7f3 ffa3 	bl	801a4a4 <memp_malloc>
 802655e:	4603      	mov	r3, r0
}
 8026560:	4618      	mov	r0, r3
 8026562:	bd80      	pop	{r7, pc}

08026564 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8026564:	b580      	push	{r7, lr}
 8026566:	b082      	sub	sp, #8
 8026568:	af00      	add	r7, sp, #0
 802656a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 802656c:	687b      	ldr	r3, [r7, #4]
 802656e:	2b00      	cmp	r3, #0
 8026570:	d106      	bne.n	8026580 <ip_frag_free_pbuf_custom_ref+0x1c>
 8026572:	4b07      	ldr	r3, [pc, #28]	@ (8026590 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8026574:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8026578:	4906      	ldr	r1, [pc, #24]	@ (8026594 <ip_frag_free_pbuf_custom_ref+0x30>)
 802657a:	4807      	ldr	r0, [pc, #28]	@ (8026598 <ip_frag_free_pbuf_custom_ref+0x34>)
 802657c:	f001 f8f6 	bl	802776c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8026580:	6879      	ldr	r1, [r7, #4]
 8026582:	2005      	movs	r0, #5
 8026584:	f7f4 f804 	bl	801a590 <memp_free>
}
 8026588:	bf00      	nop
 802658a:	3708      	adds	r7, #8
 802658c:	46bd      	mov	sp, r7
 802658e:	bd80      	pop	{r7, pc}
 8026590:	0802c12c 	.word	0x0802c12c
 8026594:	0802c2e4 	.word	0x0802c2e4
 8026598:	0802c174 	.word	0x0802c174

0802659c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 802659c:	b580      	push	{r7, lr}
 802659e:	b084      	sub	sp, #16
 80265a0:	af00      	add	r7, sp, #0
 80265a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80265a4:	687b      	ldr	r3, [r7, #4]
 80265a6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80265a8:	68fb      	ldr	r3, [r7, #12]
 80265aa:	2b00      	cmp	r3, #0
 80265ac:	d106      	bne.n	80265bc <ipfrag_free_pbuf_custom+0x20>
 80265ae:	4b11      	ldr	r3, [pc, #68]	@ (80265f4 <ipfrag_free_pbuf_custom+0x58>)
 80265b0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80265b4:	4910      	ldr	r1, [pc, #64]	@ (80265f8 <ipfrag_free_pbuf_custom+0x5c>)
 80265b6:	4811      	ldr	r0, [pc, #68]	@ (80265fc <ipfrag_free_pbuf_custom+0x60>)
 80265b8:	f001 f8d8 	bl	802776c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80265bc:	68fa      	ldr	r2, [r7, #12]
 80265be:	687b      	ldr	r3, [r7, #4]
 80265c0:	429a      	cmp	r2, r3
 80265c2:	d006      	beq.n	80265d2 <ipfrag_free_pbuf_custom+0x36>
 80265c4:	4b0b      	ldr	r3, [pc, #44]	@ (80265f4 <ipfrag_free_pbuf_custom+0x58>)
 80265c6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80265ca:	490d      	ldr	r1, [pc, #52]	@ (8026600 <ipfrag_free_pbuf_custom+0x64>)
 80265cc:	480b      	ldr	r0, [pc, #44]	@ (80265fc <ipfrag_free_pbuf_custom+0x60>)
 80265ce:	f001 f8cd 	bl	802776c <iprintf>
  if (pcr->original != NULL) {
 80265d2:	68fb      	ldr	r3, [r7, #12]
 80265d4:	695b      	ldr	r3, [r3, #20]
 80265d6:	2b00      	cmp	r3, #0
 80265d8:	d004      	beq.n	80265e4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80265da:	68fb      	ldr	r3, [r7, #12]
 80265dc:	695b      	ldr	r3, [r3, #20]
 80265de:	4618      	mov	r0, r3
 80265e0:	f7f4 feb8 	bl	801b354 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80265e4:	68f8      	ldr	r0, [r7, #12]
 80265e6:	f7ff ffbd 	bl	8026564 <ip_frag_free_pbuf_custom_ref>
}
 80265ea:	bf00      	nop
 80265ec:	3710      	adds	r7, #16
 80265ee:	46bd      	mov	sp, r7
 80265f0:	bd80      	pop	{r7, pc}
 80265f2:	bf00      	nop
 80265f4:	0802c12c 	.word	0x0802c12c
 80265f8:	0802c2f0 	.word	0x0802c2f0
 80265fc:	0802c174 	.word	0x0802c174
 8026600:	0802c2fc 	.word	0x0802c2fc

08026604 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8026604:	b580      	push	{r7, lr}
 8026606:	b094      	sub	sp, #80	@ 0x50
 8026608:	af02      	add	r7, sp, #8
 802660a:	60f8      	str	r0, [r7, #12]
 802660c:	60b9      	str	r1, [r7, #8]
 802660e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8026610:	2300      	movs	r3, #0
 8026612:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8026616:	68bb      	ldr	r3, [r7, #8]
 8026618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 802661a:	3b14      	subs	r3, #20
 802661c:	2b00      	cmp	r3, #0
 802661e:	da00      	bge.n	8026622 <ip4_frag+0x1e>
 8026620:	3307      	adds	r3, #7
 8026622:	10db      	asrs	r3, r3, #3
 8026624:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8026626:	2314      	movs	r3, #20
 8026628:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802662a:	68fb      	ldr	r3, [r7, #12]
 802662c:	685b      	ldr	r3, [r3, #4]
 802662e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8026630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026632:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8026634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026636:	781b      	ldrb	r3, [r3, #0]
 8026638:	f003 030f 	and.w	r3, r3, #15
 802663c:	b2db      	uxtb	r3, r3
 802663e:	009b      	lsls	r3, r3, #2
 8026640:	b2db      	uxtb	r3, r3
 8026642:	2b14      	cmp	r3, #20
 8026644:	d002      	beq.n	802664c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8026646:	f06f 0305 	mvn.w	r3, #5
 802664a:	e110      	b.n	802686e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 802664c:	68fb      	ldr	r3, [r7, #12]
 802664e:	895b      	ldrh	r3, [r3, #10]
 8026650:	2b13      	cmp	r3, #19
 8026652:	d809      	bhi.n	8026668 <ip4_frag+0x64>
 8026654:	4b88      	ldr	r3, [pc, #544]	@ (8026878 <ip4_frag+0x274>)
 8026656:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 802665a:	4988      	ldr	r1, [pc, #544]	@ (802687c <ip4_frag+0x278>)
 802665c:	4888      	ldr	r0, [pc, #544]	@ (8026880 <ip4_frag+0x27c>)
 802665e:	f001 f885 	bl	802776c <iprintf>
 8026662:	f06f 0305 	mvn.w	r3, #5
 8026666:	e102      	b.n	802686e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8026668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802666a:	88db      	ldrh	r3, [r3, #6]
 802666c:	b29b      	uxth	r3, r3
 802666e:	4618      	mov	r0, r3
 8026670:	f7f3 fa40 	bl	8019af4 <lwip_htons>
 8026674:	4603      	mov	r3, r0
 8026676:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8026678:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 802667a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802667e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8026682:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8026684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8026688:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802668a:	68fb      	ldr	r3, [r7, #12]
 802668c:	891b      	ldrh	r3, [r3, #8]
 802668e:	3b14      	subs	r3, #20
 8026690:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8026694:	e0e1      	b.n	802685a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8026696:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8026698:	00db      	lsls	r3, r3, #3
 802669a:	b29b      	uxth	r3, r3
 802669c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80266a0:	4293      	cmp	r3, r2
 80266a2:	bf28      	it	cs
 80266a4:	4613      	movcs	r3, r2
 80266a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80266a8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80266ac:	2114      	movs	r1, #20
 80266ae:	200e      	movs	r0, #14
 80266b0:	f7f4 fb3a 	bl	801ad28 <pbuf_alloc>
 80266b4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80266b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80266b8:	2b00      	cmp	r3, #0
 80266ba:	f000 80d5 	beq.w	8026868 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80266be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80266c0:	895b      	ldrh	r3, [r3, #10]
 80266c2:	2b13      	cmp	r3, #19
 80266c4:	d806      	bhi.n	80266d4 <ip4_frag+0xd0>
 80266c6:	4b6c      	ldr	r3, [pc, #432]	@ (8026878 <ip4_frag+0x274>)
 80266c8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80266cc:	496d      	ldr	r1, [pc, #436]	@ (8026884 <ip4_frag+0x280>)
 80266ce:	486c      	ldr	r0, [pc, #432]	@ (8026880 <ip4_frag+0x27c>)
 80266d0:	f001 f84c 	bl	802776c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80266d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80266d6:	685b      	ldr	r3, [r3, #4]
 80266d8:	2214      	movs	r2, #20
 80266da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80266dc:	4618      	mov	r0, r3
 80266de:	f001 fa78 	bl	8027bd2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80266e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80266e4:	685b      	ldr	r3, [r3, #4]
 80266e6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80266e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80266ea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80266ee:	e064      	b.n	80267ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80266f0:	68fb      	ldr	r3, [r7, #12]
 80266f2:	895a      	ldrh	r2, [r3, #10]
 80266f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80266f6:	1ad3      	subs	r3, r2, r3
 80266f8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80266fa:	68fb      	ldr	r3, [r7, #12]
 80266fc:	895b      	ldrh	r3, [r3, #10]
 80266fe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8026700:	429a      	cmp	r2, r3
 8026702:	d906      	bls.n	8026712 <ip4_frag+0x10e>
 8026704:	4b5c      	ldr	r3, [pc, #368]	@ (8026878 <ip4_frag+0x274>)
 8026706:	f240 322d 	movw	r2, #813	@ 0x32d
 802670a:	495f      	ldr	r1, [pc, #380]	@ (8026888 <ip4_frag+0x284>)
 802670c:	485c      	ldr	r0, [pc, #368]	@ (8026880 <ip4_frag+0x27c>)
 802670e:	f001 f82d 	bl	802776c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8026712:	8bfa      	ldrh	r2, [r7, #30]
 8026714:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8026718:	4293      	cmp	r3, r2
 802671a:	bf28      	it	cs
 802671c:	4613      	movcs	r3, r2
 802671e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8026722:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8026726:	2b00      	cmp	r3, #0
 8026728:	d105      	bne.n	8026736 <ip4_frag+0x132>
        poff = 0;
 802672a:	2300      	movs	r3, #0
 802672c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 802672e:	68fb      	ldr	r3, [r7, #12]
 8026730:	681b      	ldr	r3, [r3, #0]
 8026732:	60fb      	str	r3, [r7, #12]
        continue;
 8026734:	e041      	b.n	80267ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8026736:	f7ff ff0d 	bl	8026554 <ip_frag_alloc_pbuf_custom_ref>
 802673a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 802673c:	69bb      	ldr	r3, [r7, #24]
 802673e:	2b00      	cmp	r3, #0
 8026740:	d103      	bne.n	802674a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8026742:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8026744:	f7f4 fe06 	bl	801b354 <pbuf_free>
        goto memerr;
 8026748:	e08f      	b.n	802686a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802674a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 802674c:	68fb      	ldr	r3, [r7, #12]
 802674e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8026750:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8026752:	4413      	add	r3, r2
 8026754:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8026758:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 802675c:	9201      	str	r2, [sp, #4]
 802675e:	9300      	str	r3, [sp, #0]
 8026760:	4603      	mov	r3, r0
 8026762:	2241      	movs	r2, #65	@ 0x41
 8026764:	2000      	movs	r0, #0
 8026766:	f7f4 fc09 	bl	801af7c <pbuf_alloced_custom>
 802676a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 802676c:	697b      	ldr	r3, [r7, #20]
 802676e:	2b00      	cmp	r3, #0
 8026770:	d106      	bne.n	8026780 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8026772:	69b8      	ldr	r0, [r7, #24]
 8026774:	f7ff fef6 	bl	8026564 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8026778:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802677a:	f7f4 fdeb 	bl	801b354 <pbuf_free>
        goto memerr;
 802677e:	e074      	b.n	802686a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8026780:	68f8      	ldr	r0, [r7, #12]
 8026782:	f7f4 fe8d 	bl	801b4a0 <pbuf_ref>
      pcr->original = p;
 8026786:	69bb      	ldr	r3, [r7, #24]
 8026788:	68fa      	ldr	r2, [r7, #12]
 802678a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802678c:	69bb      	ldr	r3, [r7, #24]
 802678e:	4a3f      	ldr	r2, [pc, #252]	@ (802688c <ip4_frag+0x288>)
 8026790:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8026792:	6979      	ldr	r1, [r7, #20]
 8026794:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8026796:	f7f4 feab 	bl	801b4f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802679a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 802679e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80267a2:	1ad3      	subs	r3, r2, r3
 80267a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80267a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80267ac:	2b00      	cmp	r3, #0
 80267ae:	d004      	beq.n	80267ba <ip4_frag+0x1b6>
        poff = 0;
 80267b0:	2300      	movs	r3, #0
 80267b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80267b4:	68fb      	ldr	r3, [r7, #12]
 80267b6:	681b      	ldr	r3, [r3, #0]
 80267b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80267ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80267be:	2b00      	cmp	r3, #0
 80267c0:	d196      	bne.n	80266f0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80267c2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80267c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80267c8:	4413      	add	r3, r2
 80267ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80267cc:	68bb      	ldr	r3, [r7, #8]
 80267ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80267d0:	f1a3 0213 	sub.w	r2, r3, #19
 80267d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80267d8:	429a      	cmp	r2, r3
 80267da:	bfcc      	ite	gt
 80267dc:	2301      	movgt	r3, #1
 80267de:	2300      	movle	r3, #0
 80267e0:	b2db      	uxtb	r3, r3
 80267e2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80267e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80267e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80267ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80267ee:	6a3b      	ldr	r3, [r7, #32]
 80267f0:	2b00      	cmp	r3, #0
 80267f2:	d002      	beq.n	80267fa <ip4_frag+0x1f6>
 80267f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80267f6:	2b00      	cmp	r3, #0
 80267f8:	d003      	beq.n	8026802 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80267fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80267fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8026800:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8026802:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8026804:	4618      	mov	r0, r3
 8026806:	f7f3 f975 	bl	8019af4 <lwip_htons>
 802680a:	4603      	mov	r3, r0
 802680c:	461a      	mov	r2, r3
 802680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026810:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8026812:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8026814:	3314      	adds	r3, #20
 8026816:	b29b      	uxth	r3, r3
 8026818:	4618      	mov	r0, r3
 802681a:	f7f3 f96b 	bl	8019af4 <lwip_htons>
 802681e:	4603      	mov	r3, r0
 8026820:	461a      	mov	r2, r3
 8026822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026824:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8026826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026828:	2200      	movs	r2, #0
 802682a:	729a      	strb	r2, [r3, #10]
 802682c:	2200      	movs	r2, #0
 802682e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8026830:	68bb      	ldr	r3, [r7, #8]
 8026832:	695b      	ldr	r3, [r3, #20]
 8026834:	687a      	ldr	r2, [r7, #4]
 8026836:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8026838:	68b8      	ldr	r0, [r7, #8]
 802683a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802683c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802683e:	f7f4 fd89 	bl	801b354 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8026842:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8026846:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8026848:	1ad3      	subs	r3, r2, r3
 802684a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 802684e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8026852:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8026854:	4413      	add	r3, r2
 8026856:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 802685a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 802685e:	2b00      	cmp	r3, #0
 8026860:	f47f af19 	bne.w	8026696 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8026864:	2300      	movs	r3, #0
 8026866:	e002      	b.n	802686e <ip4_frag+0x26a>
      goto memerr;
 8026868:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802686a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802686e:	4618      	mov	r0, r3
 8026870:	3748      	adds	r7, #72	@ 0x48
 8026872:	46bd      	mov	sp, r7
 8026874:	bd80      	pop	{r7, pc}
 8026876:	bf00      	nop
 8026878:	0802c12c 	.word	0x0802c12c
 802687c:	0802c308 	.word	0x0802c308
 8026880:	0802c174 	.word	0x0802c174
 8026884:	0802c324 	.word	0x0802c324
 8026888:	0802c344 	.word	0x0802c344
 802688c:	0802659d 	.word	0x0802659d

08026890 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8026890:	b580      	push	{r7, lr}
 8026892:	b086      	sub	sp, #24
 8026894:	af00      	add	r7, sp, #0
 8026896:	6078      	str	r0, [r7, #4]
 8026898:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802689a:	230e      	movs	r3, #14
 802689c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802689e:	687b      	ldr	r3, [r7, #4]
 80268a0:	895b      	ldrh	r3, [r3, #10]
 80268a2:	2b0e      	cmp	r3, #14
 80268a4:	d96e      	bls.n	8026984 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80268a6:	687b      	ldr	r3, [r7, #4]
 80268a8:	7bdb      	ldrb	r3, [r3, #15]
 80268aa:	2b00      	cmp	r3, #0
 80268ac:	d106      	bne.n	80268bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80268ae:	683b      	ldr	r3, [r7, #0]
 80268b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80268b4:	3301      	adds	r3, #1
 80268b6:	b2da      	uxtb	r2, r3
 80268b8:	687b      	ldr	r3, [r7, #4]
 80268ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80268bc:	687b      	ldr	r3, [r7, #4]
 80268be:	685b      	ldr	r3, [r3, #4]
 80268c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80268c2:	693b      	ldr	r3, [r7, #16]
 80268c4:	7b1a      	ldrb	r2, [r3, #12]
 80268c6:	7b5b      	ldrb	r3, [r3, #13]
 80268c8:	021b      	lsls	r3, r3, #8
 80268ca:	4313      	orrs	r3, r2
 80268cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80268ce:	693b      	ldr	r3, [r7, #16]
 80268d0:	781b      	ldrb	r3, [r3, #0]
 80268d2:	f003 0301 	and.w	r3, r3, #1
 80268d6:	2b00      	cmp	r3, #0
 80268d8:	d023      	beq.n	8026922 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80268da:	693b      	ldr	r3, [r7, #16]
 80268dc:	781b      	ldrb	r3, [r3, #0]
 80268de:	2b01      	cmp	r3, #1
 80268e0:	d10f      	bne.n	8026902 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80268e2:	693b      	ldr	r3, [r7, #16]
 80268e4:	785b      	ldrb	r3, [r3, #1]
 80268e6:	2b00      	cmp	r3, #0
 80268e8:	d11b      	bne.n	8026922 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80268ea:	693b      	ldr	r3, [r7, #16]
 80268ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80268ee:	2b5e      	cmp	r3, #94	@ 0x5e
 80268f0:	d117      	bne.n	8026922 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80268f2:	687b      	ldr	r3, [r7, #4]
 80268f4:	7b5b      	ldrb	r3, [r3, #13]
 80268f6:	f043 0310 	orr.w	r3, r3, #16
 80268fa:	b2da      	uxtb	r2, r3
 80268fc:	687b      	ldr	r3, [r7, #4]
 80268fe:	735a      	strb	r2, [r3, #13]
 8026900:	e00f      	b.n	8026922 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8026902:	693b      	ldr	r3, [r7, #16]
 8026904:	2206      	movs	r2, #6
 8026906:	4928      	ldr	r1, [pc, #160]	@ (80269a8 <ethernet_input+0x118>)
 8026908:	4618      	mov	r0, r3
 802690a:	f001 f877 	bl	80279fc <memcmp>
 802690e:	4603      	mov	r3, r0
 8026910:	2b00      	cmp	r3, #0
 8026912:	d106      	bne.n	8026922 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8026914:	687b      	ldr	r3, [r7, #4]
 8026916:	7b5b      	ldrb	r3, [r3, #13]
 8026918:	f043 0308 	orr.w	r3, r3, #8
 802691c:	b2da      	uxtb	r2, r3
 802691e:	687b      	ldr	r3, [r7, #4]
 8026920:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8026922:	89fb      	ldrh	r3, [r7, #14]
 8026924:	2b08      	cmp	r3, #8
 8026926:	d003      	beq.n	8026930 <ethernet_input+0xa0>
 8026928:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 802692c:	d014      	beq.n	8026958 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802692e:	e032      	b.n	8026996 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8026930:	683b      	ldr	r3, [r7, #0]
 8026932:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8026936:	f003 0308 	and.w	r3, r3, #8
 802693a:	2b00      	cmp	r3, #0
 802693c:	d024      	beq.n	8026988 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802693e:	8afb      	ldrh	r3, [r7, #22]
 8026940:	4619      	mov	r1, r3
 8026942:	6878      	ldr	r0, [r7, #4]
 8026944:	f7f4 fc4e 	bl	801b1e4 <pbuf_remove_header>
 8026948:	4603      	mov	r3, r0
 802694a:	2b00      	cmp	r3, #0
 802694c:	d11e      	bne.n	802698c <ethernet_input+0xfc>
        ip4_input(p, netif);
 802694e:	6839      	ldr	r1, [r7, #0]
 8026950:	6878      	ldr	r0, [r7, #4]
 8026952:	f7fe ff03 	bl	802575c <ip4_input>
      break;
 8026956:	e013      	b.n	8026980 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8026958:	683b      	ldr	r3, [r7, #0]
 802695a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 802695e:	f003 0308 	and.w	r3, r3, #8
 8026962:	2b00      	cmp	r3, #0
 8026964:	d014      	beq.n	8026990 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8026966:	8afb      	ldrh	r3, [r7, #22]
 8026968:	4619      	mov	r1, r3
 802696a:	6878      	ldr	r0, [r7, #4]
 802696c:	f7f4 fc3a 	bl	801b1e4 <pbuf_remove_header>
 8026970:	4603      	mov	r3, r0
 8026972:	2b00      	cmp	r3, #0
 8026974:	d10e      	bne.n	8026994 <ethernet_input+0x104>
        etharp_input(p, netif);
 8026976:	6839      	ldr	r1, [r7, #0]
 8026978:	6878      	ldr	r0, [r7, #4]
 802697a:	f7fe f89f 	bl	8024abc <etharp_input>
      break;
 802697e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8026980:	2300      	movs	r3, #0
 8026982:	e00c      	b.n	802699e <ethernet_input+0x10e>
    goto free_and_return;
 8026984:	bf00      	nop
 8026986:	e006      	b.n	8026996 <ethernet_input+0x106>
        goto free_and_return;
 8026988:	bf00      	nop
 802698a:	e004      	b.n	8026996 <ethernet_input+0x106>
        goto free_and_return;
 802698c:	bf00      	nop
 802698e:	e002      	b.n	8026996 <ethernet_input+0x106>
        goto free_and_return;
 8026990:	bf00      	nop
 8026992:	e000      	b.n	8026996 <ethernet_input+0x106>
        goto free_and_return;
 8026994:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8026996:	6878      	ldr	r0, [r7, #4]
 8026998:	f7f4 fcdc 	bl	801b354 <pbuf_free>
  return ERR_OK;
 802699c:	2300      	movs	r3, #0
}
 802699e:	4618      	mov	r0, r3
 80269a0:	3718      	adds	r7, #24
 80269a2:	46bd      	mov	sp, r7
 80269a4:	bd80      	pop	{r7, pc}
 80269a6:	bf00      	nop
 80269a8:	0802c590 	.word	0x0802c590

080269ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80269ac:	b580      	push	{r7, lr}
 80269ae:	b086      	sub	sp, #24
 80269b0:	af00      	add	r7, sp, #0
 80269b2:	60f8      	str	r0, [r7, #12]
 80269b4:	60b9      	str	r1, [r7, #8]
 80269b6:	607a      	str	r2, [r7, #4]
 80269b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80269ba:	8c3b      	ldrh	r3, [r7, #32]
 80269bc:	4618      	mov	r0, r3
 80269be:	f7f3 f899 	bl	8019af4 <lwip_htons>
 80269c2:	4603      	mov	r3, r0
 80269c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80269c6:	210e      	movs	r1, #14
 80269c8:	68b8      	ldr	r0, [r7, #8]
 80269ca:	f7f4 fbfb 	bl	801b1c4 <pbuf_add_header>
 80269ce:	4603      	mov	r3, r0
 80269d0:	2b00      	cmp	r3, #0
 80269d2:	d125      	bne.n	8026a20 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80269d4:	68bb      	ldr	r3, [r7, #8]
 80269d6:	685b      	ldr	r3, [r3, #4]
 80269d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80269da:	693b      	ldr	r3, [r7, #16]
 80269dc:	8afa      	ldrh	r2, [r7, #22]
 80269de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80269e0:	693b      	ldr	r3, [r7, #16]
 80269e2:	2206      	movs	r2, #6
 80269e4:	6839      	ldr	r1, [r7, #0]
 80269e6:	4618      	mov	r0, r3
 80269e8:	f001 f8f3 	bl	8027bd2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80269ec:	693b      	ldr	r3, [r7, #16]
 80269ee:	3306      	adds	r3, #6
 80269f0:	2206      	movs	r2, #6
 80269f2:	6879      	ldr	r1, [r7, #4]
 80269f4:	4618      	mov	r0, r3
 80269f6:	f001 f8ec 	bl	8027bd2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80269fa:	68fb      	ldr	r3, [r7, #12]
 80269fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026a00:	2b06      	cmp	r3, #6
 8026a02:	d006      	beq.n	8026a12 <ethernet_output+0x66>
 8026a04:	4b0a      	ldr	r3, [pc, #40]	@ (8026a30 <ethernet_output+0x84>)
 8026a06:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8026a0a:	490a      	ldr	r1, [pc, #40]	@ (8026a34 <ethernet_output+0x88>)
 8026a0c:	480a      	ldr	r0, [pc, #40]	@ (8026a38 <ethernet_output+0x8c>)
 8026a0e:	f000 fead 	bl	802776c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8026a12:	68fb      	ldr	r3, [r7, #12]
 8026a14:	699b      	ldr	r3, [r3, #24]
 8026a16:	68b9      	ldr	r1, [r7, #8]
 8026a18:	68f8      	ldr	r0, [r7, #12]
 8026a1a:	4798      	blx	r3
 8026a1c:	4603      	mov	r3, r0
 8026a1e:	e002      	b.n	8026a26 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8026a20:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8026a22:	f06f 0301 	mvn.w	r3, #1
}
 8026a26:	4618      	mov	r0, r3
 8026a28:	3718      	adds	r7, #24
 8026a2a:	46bd      	mov	sp, r7
 8026a2c:	bd80      	pop	{r7, pc}
 8026a2e:	bf00      	nop
 8026a30:	0802c354 	.word	0x0802c354
 8026a34:	0802c38c 	.word	0x0802c38c
 8026a38:	0802c3c0 	.word	0x0802c3c0

08026a3c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8026a3c:	b580      	push	{r7, lr}
 8026a3e:	b086      	sub	sp, #24
 8026a40:	af00      	add	r7, sp, #0
 8026a42:	6078      	str	r0, [r7, #4]
 8026a44:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8026a46:	683b      	ldr	r3, [r7, #0]
 8026a48:	60bb      	str	r3, [r7, #8]
 8026a4a:	2304      	movs	r3, #4
 8026a4c:	60fb      	str	r3, [r7, #12]
 8026a4e:	2300      	movs	r3, #0
 8026a50:	613b      	str	r3, [r7, #16]
 8026a52:	2300      	movs	r3, #0
 8026a54:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8026a56:	f107 0308 	add.w	r3, r7, #8
 8026a5a:	2100      	movs	r1, #0
 8026a5c:	4618      	mov	r0, r3
 8026a5e:	f7ec fa82 	bl	8012f66 <osMessageCreate>
 8026a62:	4602      	mov	r2, r0
 8026a64:	687b      	ldr	r3, [r7, #4]
 8026a66:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8026a68:	687b      	ldr	r3, [r7, #4]
 8026a6a:	681b      	ldr	r3, [r3, #0]
 8026a6c:	2b00      	cmp	r3, #0
 8026a6e:	d102      	bne.n	8026a76 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8026a70:	f04f 33ff 	mov.w	r3, #4294967295
 8026a74:	e000      	b.n	8026a78 <sys_mbox_new+0x3c>

  return ERR_OK;
 8026a76:	2300      	movs	r3, #0
}
 8026a78:	4618      	mov	r0, r3
 8026a7a:	3718      	adds	r7, #24
 8026a7c:	46bd      	mov	sp, r7
 8026a7e:	bd80      	pop	{r7, pc}

08026a80 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8026a80:	b580      	push	{r7, lr}
 8026a82:	b082      	sub	sp, #8
 8026a84:	af00      	add	r7, sp, #0
 8026a86:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8026a88:	687b      	ldr	r3, [r7, #4]
 8026a8a:	681b      	ldr	r3, [r3, #0]
 8026a8c:	4618      	mov	r0, r3
 8026a8e:	f7ec fb47 	bl	8013120 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8026a92:	687b      	ldr	r3, [r7, #4]
 8026a94:	681b      	ldr	r3, [r3, #0]
 8026a96:	4618      	mov	r0, r3
 8026a98:	f7ec fb58 	bl	801314c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8026a9c:	bf00      	nop
 8026a9e:	3708      	adds	r7, #8
 8026aa0:	46bd      	mov	sp, r7
 8026aa2:	bd80      	pop	{r7, pc}

08026aa4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8026aa4:	b580      	push	{r7, lr}
 8026aa6:	b084      	sub	sp, #16
 8026aa8:	af00      	add	r7, sp, #0
 8026aaa:	6078      	str	r0, [r7, #4]
 8026aac:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8026aae:	687b      	ldr	r3, [r7, #4]
 8026ab0:	681b      	ldr	r3, [r3, #0]
 8026ab2:	6839      	ldr	r1, [r7, #0]
 8026ab4:	2200      	movs	r2, #0
 8026ab6:	4618      	mov	r0, r3
 8026ab8:	f7ec fa7e 	bl	8012fb8 <osMessagePut>
 8026abc:	4603      	mov	r3, r0
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d102      	bne.n	8026ac8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8026ac2:	2300      	movs	r3, #0
 8026ac4:	73fb      	strb	r3, [r7, #15]
 8026ac6:	e001      	b.n	8026acc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8026ac8:	23ff      	movs	r3, #255	@ 0xff
 8026aca:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8026acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8026ad0:	4618      	mov	r0, r3
 8026ad2:	3710      	adds	r7, #16
 8026ad4:	46bd      	mov	sp, r7
 8026ad6:	bd80      	pop	{r7, pc}

08026ad8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8026ad8:	b580      	push	{r7, lr}
 8026ada:	b08c      	sub	sp, #48	@ 0x30
 8026adc:	af00      	add	r7, sp, #0
 8026ade:	61f8      	str	r0, [r7, #28]
 8026ae0:	61b9      	str	r1, [r7, #24]
 8026ae2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8026ae4:	f7ec f850 	bl	8012b88 <osKernelSysTick>
 8026ae8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8026aea:	697b      	ldr	r3, [r7, #20]
 8026aec:	2b00      	cmp	r3, #0
 8026aee:	d017      	beq.n	8026b20 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8026af0:	69fb      	ldr	r3, [r7, #28]
 8026af2:	6819      	ldr	r1, [r3, #0]
 8026af4:	f107 0320 	add.w	r3, r7, #32
 8026af8:	697a      	ldr	r2, [r7, #20]
 8026afa:	4618      	mov	r0, r3
 8026afc:	f7ec fa9c 	bl	8013038 <osMessageGet>

    if(event.status == osEventMessage)
 8026b00:	6a3b      	ldr	r3, [r7, #32]
 8026b02:	2b10      	cmp	r3, #16
 8026b04:	d109      	bne.n	8026b1a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8026b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026b08:	461a      	mov	r2, r3
 8026b0a:	69bb      	ldr	r3, [r7, #24]
 8026b0c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8026b0e:	f7ec f83b 	bl	8012b88 <osKernelSysTick>
 8026b12:	4602      	mov	r2, r0
 8026b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026b16:	1ad3      	subs	r3, r2, r3
 8026b18:	e019      	b.n	8026b4e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8026b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8026b1e:	e016      	b.n	8026b4e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8026b20:	69fb      	ldr	r3, [r7, #28]
 8026b22:	6819      	ldr	r1, [r3, #0]
 8026b24:	463b      	mov	r3, r7
 8026b26:	f04f 32ff 	mov.w	r2, #4294967295
 8026b2a:	4618      	mov	r0, r3
 8026b2c:	f7ec fa84 	bl	8013038 <osMessageGet>
 8026b30:	f107 0320 	add.w	r3, r7, #32
 8026b34:	463a      	mov	r2, r7
 8026b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8026b38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8026b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026b3e:	461a      	mov	r2, r3
 8026b40:	69bb      	ldr	r3, [r7, #24]
 8026b42:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8026b44:	f7ec f820 	bl	8012b88 <osKernelSysTick>
 8026b48:	4602      	mov	r2, r0
 8026b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026b4c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8026b4e:	4618      	mov	r0, r3
 8026b50:	3730      	adds	r7, #48	@ 0x30
 8026b52:	46bd      	mov	sp, r7
 8026b54:	bd80      	pop	{r7, pc}

08026b56 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8026b56:	b580      	push	{r7, lr}
 8026b58:	b086      	sub	sp, #24
 8026b5a:	af00      	add	r7, sp, #0
 8026b5c:	6078      	str	r0, [r7, #4]
 8026b5e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8026b60:	687b      	ldr	r3, [r7, #4]
 8026b62:	6819      	ldr	r1, [r3, #0]
 8026b64:	f107 030c 	add.w	r3, r7, #12
 8026b68:	2200      	movs	r2, #0
 8026b6a:	4618      	mov	r0, r3
 8026b6c:	f7ec fa64 	bl	8013038 <osMessageGet>

  if(event.status == osEventMessage)
 8026b70:	68fb      	ldr	r3, [r7, #12]
 8026b72:	2b10      	cmp	r3, #16
 8026b74:	d105      	bne.n	8026b82 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8026b76:	693b      	ldr	r3, [r7, #16]
 8026b78:	461a      	mov	r2, r3
 8026b7a:	683b      	ldr	r3, [r7, #0]
 8026b7c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8026b7e:	2300      	movs	r3, #0
 8026b80:	e001      	b.n	8026b86 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8026b82:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8026b86:	4618      	mov	r0, r3
 8026b88:	3718      	adds	r7, #24
 8026b8a:	46bd      	mov	sp, r7
 8026b8c:	bd80      	pop	{r7, pc}

08026b8e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8026b8e:	b480      	push	{r7}
 8026b90:	b083      	sub	sp, #12
 8026b92:	af00      	add	r7, sp, #0
 8026b94:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8026b96:	687b      	ldr	r3, [r7, #4]
 8026b98:	681b      	ldr	r3, [r3, #0]
 8026b9a:	2b00      	cmp	r3, #0
 8026b9c:	d101      	bne.n	8026ba2 <sys_mbox_valid+0x14>
    return 0;
 8026b9e:	2300      	movs	r3, #0
 8026ba0:	e000      	b.n	8026ba4 <sys_mbox_valid+0x16>
  else
    return 1;
 8026ba2:	2301      	movs	r3, #1
}
 8026ba4:	4618      	mov	r0, r3
 8026ba6:	370c      	adds	r7, #12
 8026ba8:	46bd      	mov	sp, r7
 8026baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bae:	4770      	bx	lr

08026bb0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8026bb0:	b480      	push	{r7}
 8026bb2:	b083      	sub	sp, #12
 8026bb4:	af00      	add	r7, sp, #0
 8026bb6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8026bb8:	687b      	ldr	r3, [r7, #4]
 8026bba:	2200      	movs	r2, #0
 8026bbc:	601a      	str	r2, [r3, #0]
}
 8026bbe:	bf00      	nop
 8026bc0:	370c      	adds	r7, #12
 8026bc2:	46bd      	mov	sp, r7
 8026bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bc8:	4770      	bx	lr

08026bca <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8026bca:	b580      	push	{r7, lr}
 8026bcc:	b084      	sub	sp, #16
 8026bce:	af00      	add	r7, sp, #0
 8026bd0:	6078      	str	r0, [r7, #4]
 8026bd2:	460b      	mov	r3, r1
 8026bd4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8026bd6:	2300      	movs	r3, #0
 8026bd8:	60bb      	str	r3, [r7, #8]
 8026bda:	2300      	movs	r3, #0
 8026bdc:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8026bde:	f107 0308 	add.w	r3, r7, #8
 8026be2:	2101      	movs	r1, #1
 8026be4:	4618      	mov	r0, r3
 8026be6:	f7ec f8e7 	bl	8012db8 <osSemaphoreCreate>
 8026bea:	4602      	mov	r2, r0
 8026bec:	687b      	ldr	r3, [r7, #4]
 8026bee:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8026bf0:	687b      	ldr	r3, [r7, #4]
 8026bf2:	681b      	ldr	r3, [r3, #0]
 8026bf4:	2b00      	cmp	r3, #0
 8026bf6:	d102      	bne.n	8026bfe <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8026bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8026bfc:	e009      	b.n	8026c12 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8026bfe:	78fb      	ldrb	r3, [r7, #3]
 8026c00:	2b00      	cmp	r3, #0
 8026c02:	d105      	bne.n	8026c10 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8026c04:	687b      	ldr	r3, [r7, #4]
 8026c06:	681b      	ldr	r3, [r3, #0]
 8026c08:	2100      	movs	r1, #0
 8026c0a:	4618      	mov	r0, r3
 8026c0c:	f7ec f914 	bl	8012e38 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8026c10:	2300      	movs	r3, #0
}
 8026c12:	4618      	mov	r0, r3
 8026c14:	3710      	adds	r7, #16
 8026c16:	46bd      	mov	sp, r7
 8026c18:	bd80      	pop	{r7, pc}

08026c1a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8026c1a:	b580      	push	{r7, lr}
 8026c1c:	b084      	sub	sp, #16
 8026c1e:	af00      	add	r7, sp, #0
 8026c20:	6078      	str	r0, [r7, #4]
 8026c22:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8026c24:	f7eb ffb0 	bl	8012b88 <osKernelSysTick>
 8026c28:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8026c2a:	683b      	ldr	r3, [r7, #0]
 8026c2c:	2b00      	cmp	r3, #0
 8026c2e:	d011      	beq.n	8026c54 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8026c30:	687b      	ldr	r3, [r7, #4]
 8026c32:	681b      	ldr	r3, [r3, #0]
 8026c34:	6839      	ldr	r1, [r7, #0]
 8026c36:	4618      	mov	r0, r3
 8026c38:	f7ec f8fe 	bl	8012e38 <osSemaphoreWait>
 8026c3c:	4603      	mov	r3, r0
 8026c3e:	2b00      	cmp	r3, #0
 8026c40:	d105      	bne.n	8026c4e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8026c42:	f7eb ffa1 	bl	8012b88 <osKernelSysTick>
 8026c46:	4602      	mov	r2, r0
 8026c48:	68fb      	ldr	r3, [r7, #12]
 8026c4a:	1ad3      	subs	r3, r2, r3
 8026c4c:	e012      	b.n	8026c74 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8026c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8026c52:	e00f      	b.n	8026c74 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8026c54:	bf00      	nop
 8026c56:	687b      	ldr	r3, [r7, #4]
 8026c58:	681b      	ldr	r3, [r3, #0]
 8026c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8026c5e:	4618      	mov	r0, r3
 8026c60:	f7ec f8ea 	bl	8012e38 <osSemaphoreWait>
 8026c64:	4603      	mov	r3, r0
 8026c66:	2b00      	cmp	r3, #0
 8026c68:	d1f5      	bne.n	8026c56 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8026c6a:	f7eb ff8d 	bl	8012b88 <osKernelSysTick>
 8026c6e:	4602      	mov	r2, r0
 8026c70:	68fb      	ldr	r3, [r7, #12]
 8026c72:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8026c74:	4618      	mov	r0, r3
 8026c76:	3710      	adds	r7, #16
 8026c78:	46bd      	mov	sp, r7
 8026c7a:	bd80      	pop	{r7, pc}

08026c7c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8026c7c:	b580      	push	{r7, lr}
 8026c7e:	b082      	sub	sp, #8
 8026c80:	af00      	add	r7, sp, #0
 8026c82:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8026c84:	687b      	ldr	r3, [r7, #4]
 8026c86:	681b      	ldr	r3, [r3, #0]
 8026c88:	4618      	mov	r0, r3
 8026c8a:	f7ec f923 	bl	8012ed4 <osSemaphoreRelease>
}
 8026c8e:	bf00      	nop
 8026c90:	3708      	adds	r7, #8
 8026c92:	46bd      	mov	sp, r7
 8026c94:	bd80      	pop	{r7, pc}

08026c96 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8026c96:	b580      	push	{r7, lr}
 8026c98:	b082      	sub	sp, #8
 8026c9a:	af00      	add	r7, sp, #0
 8026c9c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8026c9e:	687b      	ldr	r3, [r7, #4]
 8026ca0:	681b      	ldr	r3, [r3, #0]
 8026ca2:	4618      	mov	r0, r3
 8026ca4:	f7ec f94c 	bl	8012f40 <osSemaphoreDelete>
}
 8026ca8:	bf00      	nop
 8026caa:	3708      	adds	r7, #8
 8026cac:	46bd      	mov	sp, r7
 8026cae:	bd80      	pop	{r7, pc}

08026cb0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8026cb0:	b480      	push	{r7}
 8026cb2:	b083      	sub	sp, #12
 8026cb4:	af00      	add	r7, sp, #0
 8026cb6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8026cb8:	687b      	ldr	r3, [r7, #4]
 8026cba:	681b      	ldr	r3, [r3, #0]
 8026cbc:	2b00      	cmp	r3, #0
 8026cbe:	d101      	bne.n	8026cc4 <sys_sem_valid+0x14>
    return 0;
 8026cc0:	2300      	movs	r3, #0
 8026cc2:	e000      	b.n	8026cc6 <sys_sem_valid+0x16>
  else
    return 1;
 8026cc4:	2301      	movs	r3, #1
}
 8026cc6:	4618      	mov	r0, r3
 8026cc8:	370c      	adds	r7, #12
 8026cca:	46bd      	mov	sp, r7
 8026ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cd0:	4770      	bx	lr

08026cd2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8026cd2:	b480      	push	{r7}
 8026cd4:	b083      	sub	sp, #12
 8026cd6:	af00      	add	r7, sp, #0
 8026cd8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8026cda:	687b      	ldr	r3, [r7, #4]
 8026cdc:	2200      	movs	r2, #0
 8026cde:	601a      	str	r2, [r3, #0]
}
 8026ce0:	bf00      	nop
 8026ce2:	370c      	adds	r7, #12
 8026ce4:	46bd      	mov	sp, r7
 8026ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cea:	4770      	bx	lr

08026cec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8026cec:	b580      	push	{r7, lr}
 8026cee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8026cf0:	4803      	ldr	r0, [pc, #12]	@ (8026d00 <sys_init+0x14>)
 8026cf2:	f7eb ffc5 	bl	8012c80 <osMutexCreate>
 8026cf6:	4603      	mov	r3, r0
 8026cf8:	4a02      	ldr	r2, [pc, #8]	@ (8026d04 <sys_init+0x18>)
 8026cfa:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8026cfc:	bf00      	nop
 8026cfe:	bd80      	pop	{r7, pc}
 8026d00:	0802c5a0 	.word	0x0802c5a0
 8026d04:	200112f0 	.word	0x200112f0

08026d08 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8026d08:	b580      	push	{r7, lr}
 8026d0a:	b084      	sub	sp, #16
 8026d0c:	af00      	add	r7, sp, #0
 8026d0e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8026d10:	2300      	movs	r3, #0
 8026d12:	60bb      	str	r3, [r7, #8]
 8026d14:	2300      	movs	r3, #0
 8026d16:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8026d18:	f107 0308 	add.w	r3, r7, #8
 8026d1c:	4618      	mov	r0, r3
 8026d1e:	f7eb ffaf 	bl	8012c80 <osMutexCreate>
 8026d22:	4602      	mov	r2, r0
 8026d24:	687b      	ldr	r3, [r7, #4]
 8026d26:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8026d28:	687b      	ldr	r3, [r7, #4]
 8026d2a:	681b      	ldr	r3, [r3, #0]
 8026d2c:	2b00      	cmp	r3, #0
 8026d2e:	d102      	bne.n	8026d36 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8026d30:	f04f 33ff 	mov.w	r3, #4294967295
 8026d34:	e000      	b.n	8026d38 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8026d36:	2300      	movs	r3, #0
}
 8026d38:	4618      	mov	r0, r3
 8026d3a:	3710      	adds	r7, #16
 8026d3c:	46bd      	mov	sp, r7
 8026d3e:	bd80      	pop	{r7, pc}

08026d40 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8026d40:	b580      	push	{r7, lr}
 8026d42:	b082      	sub	sp, #8
 8026d44:	af00      	add	r7, sp, #0
 8026d46:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8026d48:	687b      	ldr	r3, [r7, #4]
 8026d4a:	681b      	ldr	r3, [r3, #0]
 8026d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8026d50:	4618      	mov	r0, r3
 8026d52:	f7eb ffad 	bl	8012cb0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8026d56:	bf00      	nop
 8026d58:	3708      	adds	r7, #8
 8026d5a:	46bd      	mov	sp, r7
 8026d5c:	bd80      	pop	{r7, pc}

08026d5e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8026d5e:	b580      	push	{r7, lr}
 8026d60:	b082      	sub	sp, #8
 8026d62:	af00      	add	r7, sp, #0
 8026d64:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8026d66:	687b      	ldr	r3, [r7, #4]
 8026d68:	681b      	ldr	r3, [r3, #0]
 8026d6a:	4618      	mov	r0, r3
 8026d6c:	f7eb ffee 	bl	8012d4c <osMutexRelease>
}
 8026d70:	bf00      	nop
 8026d72:	3708      	adds	r7, #8
 8026d74:	46bd      	mov	sp, r7
 8026d76:	bd80      	pop	{r7, pc}

08026d78 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8026d78:	b580      	push	{r7, lr}
 8026d7a:	b08c      	sub	sp, #48	@ 0x30
 8026d7c:	af00      	add	r7, sp, #0
 8026d7e:	60f8      	str	r0, [r7, #12]
 8026d80:	60b9      	str	r1, [r7, #8]
 8026d82:	607a      	str	r2, [r7, #4]
 8026d84:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8026d86:	f107 0314 	add.w	r3, r7, #20
 8026d8a:	2200      	movs	r2, #0
 8026d8c:	601a      	str	r2, [r3, #0]
 8026d8e:	605a      	str	r2, [r3, #4]
 8026d90:	609a      	str	r2, [r3, #8]
 8026d92:	60da      	str	r2, [r3, #12]
 8026d94:	611a      	str	r2, [r3, #16]
 8026d96:	615a      	str	r2, [r3, #20]
 8026d98:	619a      	str	r2, [r3, #24]
 8026d9a:	68fb      	ldr	r3, [r7, #12]
 8026d9c:	617b      	str	r3, [r7, #20]
 8026d9e:	68bb      	ldr	r3, [r7, #8]
 8026da0:	61bb      	str	r3, [r7, #24]
 8026da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8026da4:	b21b      	sxth	r3, r3
 8026da6:	83bb      	strh	r3, [r7, #28]
 8026da8:	683b      	ldr	r3, [r7, #0]
 8026daa:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8026dac:	f107 0314 	add.w	r3, r7, #20
 8026db0:	6879      	ldr	r1, [r7, #4]
 8026db2:	4618      	mov	r0, r3
 8026db4:	f7eb fef8 	bl	8012ba8 <osThreadCreate>
 8026db8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8026dba:	4618      	mov	r0, r3
 8026dbc:	3730      	adds	r7, #48	@ 0x30
 8026dbe:	46bd      	mov	sp, r7
 8026dc0:	bd80      	pop	{r7, pc}
	...

08026dc4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8026dc4:	b580      	push	{r7, lr}
 8026dc6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8026dc8:	4b04      	ldr	r3, [pc, #16]	@ (8026ddc <sys_arch_protect+0x18>)
 8026dca:	681b      	ldr	r3, [r3, #0]
 8026dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8026dd0:	4618      	mov	r0, r3
 8026dd2:	f7eb ff6d 	bl	8012cb0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8026dd6:	2301      	movs	r3, #1
}
 8026dd8:	4618      	mov	r0, r3
 8026dda:	bd80      	pop	{r7, pc}
 8026ddc:	200112f0 	.word	0x200112f0

08026de0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8026de0:	b580      	push	{r7, lr}
 8026de2:	b082      	sub	sp, #8
 8026de4:	af00      	add	r7, sp, #0
 8026de6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8026de8:	4b04      	ldr	r3, [pc, #16]	@ (8026dfc <sys_arch_unprotect+0x1c>)
 8026dea:	681b      	ldr	r3, [r3, #0]
 8026dec:	4618      	mov	r0, r3
 8026dee:	f7eb ffad 	bl	8012d4c <osMutexRelease>
}
 8026df2:	bf00      	nop
 8026df4:	3708      	adds	r7, #8
 8026df6:	46bd      	mov	sp, r7
 8026df8:	bd80      	pop	{r7, pc}
 8026dfa:	bf00      	nop
 8026dfc:	200112f0 	.word	0x200112f0

08026e00 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8026e00:	b580      	push	{r7, lr}
 8026e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8026e04:	2201      	movs	r2, #1
 8026e06:	490e      	ldr	r1, [pc, #56]	@ (8026e40 <MX_USB_HOST_Init+0x40>)
 8026e08:	480e      	ldr	r0, [pc, #56]	@ (8026e44 <MX_USB_HOST_Init+0x44>)
 8026e0a:	f7e9 ff0d 	bl	8010c28 <USBH_Init>
 8026e0e:	4603      	mov	r3, r0
 8026e10:	2b00      	cmp	r3, #0
 8026e12:	d001      	beq.n	8026e18 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8026e14:	f7da feb2 	bl	8001b7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8026e18:	490b      	ldr	r1, [pc, #44]	@ (8026e48 <MX_USB_HOST_Init+0x48>)
 8026e1a:	480a      	ldr	r0, [pc, #40]	@ (8026e44 <MX_USB_HOST_Init+0x44>)
 8026e1c:	f7e9 ffd9 	bl	8010dd2 <USBH_RegisterClass>
 8026e20:	4603      	mov	r3, r0
 8026e22:	2b00      	cmp	r3, #0
 8026e24:	d001      	beq.n	8026e2a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8026e26:	f7da fea9 	bl	8001b7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8026e2a:	4806      	ldr	r0, [pc, #24]	@ (8026e44 <MX_USB_HOST_Init+0x44>)
 8026e2c:	f7ea f85d 	bl	8010eea <USBH_Start>
 8026e30:	4603      	mov	r3, r0
 8026e32:	2b00      	cmp	r3, #0
 8026e34:	d001      	beq.n	8026e3a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8026e36:	f7da fea1 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8026e3a:	bf00      	nop
 8026e3c:	bd80      	pop	{r7, pc}
 8026e3e:	bf00      	nop
 8026e40:	08026e4d 	.word	0x08026e4d
 8026e44:	200112f4 	.word	0x200112f4
 8026e48:	20000020 	.word	0x20000020

08026e4c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8026e4c:	b480      	push	{r7}
 8026e4e:	b083      	sub	sp, #12
 8026e50:	af00      	add	r7, sp, #0
 8026e52:	6078      	str	r0, [r7, #4]
 8026e54:	460b      	mov	r3, r1
 8026e56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8026e58:	78fb      	ldrb	r3, [r7, #3]
 8026e5a:	3b01      	subs	r3, #1
 8026e5c:	2b04      	cmp	r3, #4
 8026e5e:	d819      	bhi.n	8026e94 <USBH_UserProcess+0x48>
 8026e60:	a201      	add	r2, pc, #4	@ (adr r2, 8026e68 <USBH_UserProcess+0x1c>)
 8026e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026e66:	bf00      	nop
 8026e68:	08026e95 	.word	0x08026e95
 8026e6c:	08026e85 	.word	0x08026e85
 8026e70:	08026e95 	.word	0x08026e95
 8026e74:	08026e8d 	.word	0x08026e8d
 8026e78:	08026e7d 	.word	0x08026e7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8026e7c:	4b09      	ldr	r3, [pc, #36]	@ (8026ea4 <USBH_UserProcess+0x58>)
 8026e7e:	2203      	movs	r2, #3
 8026e80:	701a      	strb	r2, [r3, #0]
  break;
 8026e82:	e008      	b.n	8026e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8026e84:	4b07      	ldr	r3, [pc, #28]	@ (8026ea4 <USBH_UserProcess+0x58>)
 8026e86:	2202      	movs	r2, #2
 8026e88:	701a      	strb	r2, [r3, #0]
  break;
 8026e8a:	e004      	b.n	8026e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8026e8c:	4b05      	ldr	r3, [pc, #20]	@ (8026ea4 <USBH_UserProcess+0x58>)
 8026e8e:	2201      	movs	r2, #1
 8026e90:	701a      	strb	r2, [r3, #0]
  break;
 8026e92:	e000      	b.n	8026e96 <USBH_UserProcess+0x4a>

  default:
  break;
 8026e94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8026e96:	bf00      	nop
 8026e98:	370c      	adds	r7, #12
 8026e9a:	46bd      	mov	sp, r7
 8026e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ea0:	4770      	bx	lr
 8026ea2:	bf00      	nop
 8026ea4:	200116d8 	.word	0x200116d8

08026ea8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8026ea8:	b580      	push	{r7, lr}
 8026eaa:	b08a      	sub	sp, #40	@ 0x28
 8026eac:	af00      	add	r7, sp, #0
 8026eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026eb0:	f107 0314 	add.w	r3, r7, #20
 8026eb4:	2200      	movs	r2, #0
 8026eb6:	601a      	str	r2, [r3, #0]
 8026eb8:	605a      	str	r2, [r3, #4]
 8026eba:	609a      	str	r2, [r3, #8]
 8026ebc:	60da      	str	r2, [r3, #12]
 8026ebe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8026ec0:	687b      	ldr	r3, [r7, #4]
 8026ec2:	681b      	ldr	r3, [r3, #0]
 8026ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8026ec8:	d13c      	bne.n	8026f44 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8026eca:	4b20      	ldr	r3, [pc, #128]	@ (8026f4c <HAL_HCD_MspInit+0xa4>)
 8026ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026ece:	4a1f      	ldr	r2, [pc, #124]	@ (8026f4c <HAL_HCD_MspInit+0xa4>)
 8026ed0:	f043 0301 	orr.w	r3, r3, #1
 8026ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8026ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8026f4c <HAL_HCD_MspInit+0xa4>)
 8026ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026eda:	f003 0301 	and.w	r3, r3, #1
 8026ede:	613b      	str	r3, [r7, #16]
 8026ee0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8026ee2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8026ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026ee8:	2302      	movs	r3, #2
 8026eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026eec:	2300      	movs	r3, #0
 8026eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026ef0:	2303      	movs	r3, #3
 8026ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8026ef4:	230a      	movs	r3, #10
 8026ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026ef8:	f107 0314 	add.w	r3, r7, #20
 8026efc:	4619      	mov	r1, r3
 8026efe:	4814      	ldr	r0, [pc, #80]	@ (8026f50 <HAL_HCD_MspInit+0xa8>)
 8026f00:	f7de fbe6 	bl	80056d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8026f04:	4b11      	ldr	r3, [pc, #68]	@ (8026f4c <HAL_HCD_MspInit+0xa4>)
 8026f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8026f08:	4a10      	ldr	r2, [pc, #64]	@ (8026f4c <HAL_HCD_MspInit+0xa4>)
 8026f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026f0e:	6353      	str	r3, [r2, #52]	@ 0x34
 8026f10:	4b0e      	ldr	r3, [pc, #56]	@ (8026f4c <HAL_HCD_MspInit+0xa4>)
 8026f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8026f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8026f18:	60fb      	str	r3, [r7, #12]
 8026f1a:	68fb      	ldr	r3, [r7, #12]
 8026f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8026f4c <HAL_HCD_MspInit+0xa4>)
 8026f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8026f20:	4a0a      	ldr	r2, [pc, #40]	@ (8026f4c <HAL_HCD_MspInit+0xa4>)
 8026f22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8026f26:	6453      	str	r3, [r2, #68]	@ 0x44
 8026f28:	4b08      	ldr	r3, [pc, #32]	@ (8026f4c <HAL_HCD_MspInit+0xa4>)
 8026f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8026f2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8026f30:	60bb      	str	r3, [r7, #8]
 8026f32:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8026f34:	2200      	movs	r2, #0
 8026f36:	2105      	movs	r1, #5
 8026f38:	2043      	movs	r0, #67	@ 0x43
 8026f3a:	f7dc fd45 	bl	80039c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8026f3e:	2043      	movs	r0, #67	@ 0x43
 8026f40:	f7dc fd5e 	bl	8003a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8026f44:	bf00      	nop
 8026f46:	3728      	adds	r7, #40	@ 0x28
 8026f48:	46bd      	mov	sp, r7
 8026f4a:	bd80      	pop	{r7, pc}
 8026f4c:	40023800 	.word	0x40023800
 8026f50:	40020000 	.word	0x40020000

08026f54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8026f54:	b580      	push	{r7, lr}
 8026f56:	b082      	sub	sp, #8
 8026f58:	af00      	add	r7, sp, #0
 8026f5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8026f5c:	687b      	ldr	r3, [r7, #4]
 8026f5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8026f62:	4618      	mov	r0, r3
 8026f64:	f7ea fc73 	bl	801184e <USBH_LL_IncTimer>
}
 8026f68:	bf00      	nop
 8026f6a:	3708      	adds	r7, #8
 8026f6c:	46bd      	mov	sp, r7
 8026f6e:	bd80      	pop	{r7, pc}

08026f70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8026f70:	b580      	push	{r7, lr}
 8026f72:	b082      	sub	sp, #8
 8026f74:	af00      	add	r7, sp, #0
 8026f76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8026f78:	687b      	ldr	r3, [r7, #4]
 8026f7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8026f7e:	4618      	mov	r0, r3
 8026f80:	f7ea fcb7 	bl	80118f2 <USBH_LL_Connect>
}
 8026f84:	bf00      	nop
 8026f86:	3708      	adds	r7, #8
 8026f88:	46bd      	mov	sp, r7
 8026f8a:	bd80      	pop	{r7, pc}

08026f8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8026f8c:	b580      	push	{r7, lr}
 8026f8e:	b082      	sub	sp, #8
 8026f90:	af00      	add	r7, sp, #0
 8026f92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8026f94:	687b      	ldr	r3, [r7, #4]
 8026f96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8026f9a:	4618      	mov	r0, r3
 8026f9c:	f7ea fccc 	bl	8011938 <USBH_LL_Disconnect>
}
 8026fa0:	bf00      	nop
 8026fa2:	3708      	adds	r7, #8
 8026fa4:	46bd      	mov	sp, r7
 8026fa6:	bd80      	pop	{r7, pc}

08026fa8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8026fa8:	b580      	push	{r7, lr}
 8026faa:	b082      	sub	sp, #8
 8026fac:	af00      	add	r7, sp, #0
 8026fae:	6078      	str	r0, [r7, #4]
 8026fb0:	460b      	mov	r3, r1
 8026fb2:	70fb      	strb	r3, [r7, #3]
 8026fb4:	4613      	mov	r3, r2
 8026fb6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8026fb8:	687b      	ldr	r3, [r7, #4]
 8026fba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8026fbe:	4618      	mov	r0, r3
 8026fc0:	f7ea fd01 	bl	80119c6 <USBH_LL_NotifyURBChange>
#endif
}
 8026fc4:	bf00      	nop
 8026fc6:	3708      	adds	r7, #8
 8026fc8:	46bd      	mov	sp, r7
 8026fca:	bd80      	pop	{r7, pc}

08026fcc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8026fcc:	b580      	push	{r7, lr}
 8026fce:	b082      	sub	sp, #8
 8026fd0:	af00      	add	r7, sp, #0
 8026fd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8026fd4:	687b      	ldr	r3, [r7, #4]
 8026fd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8026fda:	4618      	mov	r0, r3
 8026fdc:	f7ea fc61 	bl	80118a2 <USBH_LL_PortEnabled>
}
 8026fe0:	bf00      	nop
 8026fe2:	3708      	adds	r7, #8
 8026fe4:	46bd      	mov	sp, r7
 8026fe6:	bd80      	pop	{r7, pc}

08026fe8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8026fe8:	b580      	push	{r7, lr}
 8026fea:	b082      	sub	sp, #8
 8026fec:	af00      	add	r7, sp, #0
 8026fee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8026ff0:	687b      	ldr	r3, [r7, #4]
 8026ff2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8026ff6:	4618      	mov	r0, r3
 8026ff8:	f7ea fc6d 	bl	80118d6 <USBH_LL_PortDisabled>
}
 8026ffc:	bf00      	nop
 8026ffe:	3708      	adds	r7, #8
 8027000:	46bd      	mov	sp, r7
 8027002:	bd80      	pop	{r7, pc}

08027004 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8027004:	b580      	push	{r7, lr}
 8027006:	b082      	sub	sp, #8
 8027008:	af00      	add	r7, sp, #0
 802700a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 802700c:	687b      	ldr	r3, [r7, #4]
 802700e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8027012:	2b01      	cmp	r3, #1
 8027014:	d12a      	bne.n	802706c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8027016:	4a18      	ldr	r2, [pc, #96]	@ (8027078 <USBH_LL_Init+0x74>)
 8027018:	687b      	ldr	r3, [r7, #4]
 802701a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 802701e:	687b      	ldr	r3, [r7, #4]
 8027020:	4a15      	ldr	r2, [pc, #84]	@ (8027078 <USBH_LL_Init+0x74>)
 8027022:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8027026:	4b14      	ldr	r3, [pc, #80]	@ (8027078 <USBH_LL_Init+0x74>)
 8027028:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 802702c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 802702e:	4b12      	ldr	r3, [pc, #72]	@ (8027078 <USBH_LL_Init+0x74>)
 8027030:	2208      	movs	r2, #8
 8027032:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8027034:	4b10      	ldr	r3, [pc, #64]	@ (8027078 <USBH_LL_Init+0x74>)
 8027036:	2201      	movs	r2, #1
 8027038:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 802703a:	4b0f      	ldr	r3, [pc, #60]	@ (8027078 <USBH_LL_Init+0x74>)
 802703c:	2200      	movs	r2, #0
 802703e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8027040:	4b0d      	ldr	r3, [pc, #52]	@ (8027078 <USBH_LL_Init+0x74>)
 8027042:	2202      	movs	r2, #2
 8027044:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8027046:	4b0c      	ldr	r3, [pc, #48]	@ (8027078 <USBH_LL_Init+0x74>)
 8027048:	2200      	movs	r2, #0
 802704a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 802704c:	480a      	ldr	r0, [pc, #40]	@ (8027078 <USBH_LL_Init+0x74>)
 802704e:	f7de fd1c 	bl	8005a8a <HAL_HCD_Init>
 8027052:	4603      	mov	r3, r0
 8027054:	2b00      	cmp	r3, #0
 8027056:	d001      	beq.n	802705c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8027058:	f7da fd90 	bl	8001b7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 802705c:	4806      	ldr	r0, [pc, #24]	@ (8027078 <USBH_LL_Init+0x74>)
 802705e:	f7df f97d 	bl	800635c <HAL_HCD_GetCurrentFrame>
 8027062:	4603      	mov	r3, r0
 8027064:	4619      	mov	r1, r3
 8027066:	6878      	ldr	r0, [r7, #4]
 8027068:	f7ea fbe2 	bl	8011830 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802706c:	2300      	movs	r3, #0
}
 802706e:	4618      	mov	r0, r3
 8027070:	3708      	adds	r7, #8
 8027072:	46bd      	mov	sp, r7
 8027074:	bd80      	pop	{r7, pc}
 8027076:	bf00      	nop
 8027078:	200116dc 	.word	0x200116dc

0802707c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802707c:	b580      	push	{r7, lr}
 802707e:	b084      	sub	sp, #16
 8027080:	af00      	add	r7, sp, #0
 8027082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027084:	2300      	movs	r3, #0
 8027086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8027088:	2300      	movs	r3, #0
 802708a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802708c:	687b      	ldr	r3, [r7, #4]
 802708e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8027092:	4618      	mov	r0, r3
 8027094:	f7df f8ea 	bl	800626c <HAL_HCD_Start>
 8027098:	4603      	mov	r3, r0
 802709a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802709c:	7bfb      	ldrb	r3, [r7, #15]
 802709e:	4618      	mov	r0, r3
 80270a0:	f000 f95e 	bl	8027360 <USBH_Get_USB_Status>
 80270a4:	4603      	mov	r3, r0
 80270a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80270a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80270aa:	4618      	mov	r0, r3
 80270ac:	3710      	adds	r7, #16
 80270ae:	46bd      	mov	sp, r7
 80270b0:	bd80      	pop	{r7, pc}

080270b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80270b2:	b580      	push	{r7, lr}
 80270b4:	b084      	sub	sp, #16
 80270b6:	af00      	add	r7, sp, #0
 80270b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80270ba:	2300      	movs	r3, #0
 80270bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80270be:	2300      	movs	r3, #0
 80270c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80270c2:	687b      	ldr	r3, [r7, #4]
 80270c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80270c8:	4618      	mov	r0, r3
 80270ca:	f7df f8f2 	bl	80062b2 <HAL_HCD_Stop>
 80270ce:	4603      	mov	r3, r0
 80270d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80270d2:	7bfb      	ldrb	r3, [r7, #15]
 80270d4:	4618      	mov	r0, r3
 80270d6:	f000 f943 	bl	8027360 <USBH_Get_USB_Status>
 80270da:	4603      	mov	r3, r0
 80270dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80270de:	7bbb      	ldrb	r3, [r7, #14]
}
 80270e0:	4618      	mov	r0, r3
 80270e2:	3710      	adds	r7, #16
 80270e4:	46bd      	mov	sp, r7
 80270e6:	bd80      	pop	{r7, pc}

080270e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80270e8:	b580      	push	{r7, lr}
 80270ea:	b084      	sub	sp, #16
 80270ec:	af00      	add	r7, sp, #0
 80270ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80270f0:	2301      	movs	r3, #1
 80270f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80270f4:	687b      	ldr	r3, [r7, #4]
 80270f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80270fa:	4618      	mov	r0, r3
 80270fc:	f7df f93c 	bl	8006378 <HAL_HCD_GetCurrentSpeed>
 8027100:	4603      	mov	r3, r0
 8027102:	2b02      	cmp	r3, #2
 8027104:	d00c      	beq.n	8027120 <USBH_LL_GetSpeed+0x38>
 8027106:	2b02      	cmp	r3, #2
 8027108:	d80d      	bhi.n	8027126 <USBH_LL_GetSpeed+0x3e>
 802710a:	2b00      	cmp	r3, #0
 802710c:	d002      	beq.n	8027114 <USBH_LL_GetSpeed+0x2c>
 802710e:	2b01      	cmp	r3, #1
 8027110:	d003      	beq.n	802711a <USBH_LL_GetSpeed+0x32>
 8027112:	e008      	b.n	8027126 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8027114:	2300      	movs	r3, #0
 8027116:	73fb      	strb	r3, [r7, #15]
    break;
 8027118:	e008      	b.n	802712c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802711a:	2301      	movs	r3, #1
 802711c:	73fb      	strb	r3, [r7, #15]
    break;
 802711e:	e005      	b.n	802712c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8027120:	2302      	movs	r3, #2
 8027122:	73fb      	strb	r3, [r7, #15]
    break;
 8027124:	e002      	b.n	802712c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8027126:	2301      	movs	r3, #1
 8027128:	73fb      	strb	r3, [r7, #15]
    break;
 802712a:	bf00      	nop
  }
  return  speed;
 802712c:	7bfb      	ldrb	r3, [r7, #15]
}
 802712e:	4618      	mov	r0, r3
 8027130:	3710      	adds	r7, #16
 8027132:	46bd      	mov	sp, r7
 8027134:	bd80      	pop	{r7, pc}

08027136 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8027136:	b580      	push	{r7, lr}
 8027138:	b084      	sub	sp, #16
 802713a:	af00      	add	r7, sp, #0
 802713c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802713e:	2300      	movs	r3, #0
 8027140:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8027142:	2300      	movs	r3, #0
 8027144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8027146:	687b      	ldr	r3, [r7, #4]
 8027148:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802714c:	4618      	mov	r0, r3
 802714e:	f7df f8cd 	bl	80062ec <HAL_HCD_ResetPort>
 8027152:	4603      	mov	r3, r0
 8027154:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8027156:	7bfb      	ldrb	r3, [r7, #15]
 8027158:	4618      	mov	r0, r3
 802715a:	f000 f901 	bl	8027360 <USBH_Get_USB_Status>
 802715e:	4603      	mov	r3, r0
 8027160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027162:	7bbb      	ldrb	r3, [r7, #14]
}
 8027164:	4618      	mov	r0, r3
 8027166:	3710      	adds	r7, #16
 8027168:	46bd      	mov	sp, r7
 802716a:	bd80      	pop	{r7, pc}

0802716c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802716c:	b580      	push	{r7, lr}
 802716e:	b082      	sub	sp, #8
 8027170:	af00      	add	r7, sp, #0
 8027172:	6078      	str	r0, [r7, #4]
 8027174:	460b      	mov	r3, r1
 8027176:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8027178:	687b      	ldr	r3, [r7, #4]
 802717a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802717e:	78fa      	ldrb	r2, [r7, #3]
 8027180:	4611      	mov	r1, r2
 8027182:	4618      	mov	r0, r3
 8027184:	f7df f8d5 	bl	8006332 <HAL_HCD_HC_GetXferCount>
 8027188:	4603      	mov	r3, r0
}
 802718a:	4618      	mov	r0, r3
 802718c:	3708      	adds	r7, #8
 802718e:	46bd      	mov	sp, r7
 8027190:	bd80      	pop	{r7, pc}

08027192 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8027192:	b590      	push	{r4, r7, lr}
 8027194:	b089      	sub	sp, #36	@ 0x24
 8027196:	af04      	add	r7, sp, #16
 8027198:	6078      	str	r0, [r7, #4]
 802719a:	4608      	mov	r0, r1
 802719c:	4611      	mov	r1, r2
 802719e:	461a      	mov	r2, r3
 80271a0:	4603      	mov	r3, r0
 80271a2:	70fb      	strb	r3, [r7, #3]
 80271a4:	460b      	mov	r3, r1
 80271a6:	70bb      	strb	r3, [r7, #2]
 80271a8:	4613      	mov	r3, r2
 80271aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80271ac:	2300      	movs	r3, #0
 80271ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80271b0:	2300      	movs	r3, #0
 80271b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80271b4:	687b      	ldr	r3, [r7, #4]
 80271b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80271ba:	787c      	ldrb	r4, [r7, #1]
 80271bc:	78ba      	ldrb	r2, [r7, #2]
 80271be:	78f9      	ldrb	r1, [r7, #3]
 80271c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80271c2:	9302      	str	r3, [sp, #8]
 80271c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80271c8:	9301      	str	r3, [sp, #4]
 80271ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80271ce:	9300      	str	r3, [sp, #0]
 80271d0:	4623      	mov	r3, r4
 80271d2:	f7de fcc1 	bl	8005b58 <HAL_HCD_HC_Init>
 80271d6:	4603      	mov	r3, r0
 80271d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80271da:	7bfb      	ldrb	r3, [r7, #15]
 80271dc:	4618      	mov	r0, r3
 80271de:	f000 f8bf 	bl	8027360 <USBH_Get_USB_Status>
 80271e2:	4603      	mov	r3, r0
 80271e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80271e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80271e8:	4618      	mov	r0, r3
 80271ea:	3714      	adds	r7, #20
 80271ec:	46bd      	mov	sp, r7
 80271ee:	bd90      	pop	{r4, r7, pc}

080271f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80271f0:	b580      	push	{r7, lr}
 80271f2:	b084      	sub	sp, #16
 80271f4:	af00      	add	r7, sp, #0
 80271f6:	6078      	str	r0, [r7, #4]
 80271f8:	460b      	mov	r3, r1
 80271fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80271fc:	2300      	movs	r3, #0
 80271fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8027200:	2300      	movs	r3, #0
 8027202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8027204:	687b      	ldr	r3, [r7, #4]
 8027206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 802720a:	78fa      	ldrb	r2, [r7, #3]
 802720c:	4611      	mov	r1, r2
 802720e:	4618      	mov	r0, r3
 8027210:	f7de fd5a 	bl	8005cc8 <HAL_HCD_HC_Halt>
 8027214:	4603      	mov	r3, r0
 8027216:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8027218:	7bfb      	ldrb	r3, [r7, #15]
 802721a:	4618      	mov	r0, r3
 802721c:	f000 f8a0 	bl	8027360 <USBH_Get_USB_Status>
 8027220:	4603      	mov	r3, r0
 8027222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027224:	7bbb      	ldrb	r3, [r7, #14]
}
 8027226:	4618      	mov	r0, r3
 8027228:	3710      	adds	r7, #16
 802722a:	46bd      	mov	sp, r7
 802722c:	bd80      	pop	{r7, pc}

0802722e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802722e:	b590      	push	{r4, r7, lr}
 8027230:	b089      	sub	sp, #36	@ 0x24
 8027232:	af04      	add	r7, sp, #16
 8027234:	6078      	str	r0, [r7, #4]
 8027236:	4608      	mov	r0, r1
 8027238:	4611      	mov	r1, r2
 802723a:	461a      	mov	r2, r3
 802723c:	4603      	mov	r3, r0
 802723e:	70fb      	strb	r3, [r7, #3]
 8027240:	460b      	mov	r3, r1
 8027242:	70bb      	strb	r3, [r7, #2]
 8027244:	4613      	mov	r3, r2
 8027246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8027248:	2300      	movs	r3, #0
 802724a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802724c:	2300      	movs	r3, #0
 802724e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8027250:	687b      	ldr	r3, [r7, #4]
 8027252:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8027256:	787c      	ldrb	r4, [r7, #1]
 8027258:	78ba      	ldrb	r2, [r7, #2]
 802725a:	78f9      	ldrb	r1, [r7, #3]
 802725c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8027260:	9303      	str	r3, [sp, #12]
 8027262:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8027264:	9302      	str	r3, [sp, #8]
 8027266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027268:	9301      	str	r3, [sp, #4]
 802726a:	f897 3020 	ldrb.w	r3, [r7, #32]
 802726e:	9300      	str	r3, [sp, #0]
 8027270:	4623      	mov	r3, r4
 8027272:	f7de fd4d 	bl	8005d10 <HAL_HCD_HC_SubmitRequest>
 8027276:	4603      	mov	r3, r0
 8027278:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802727a:	7bfb      	ldrb	r3, [r7, #15]
 802727c:	4618      	mov	r0, r3
 802727e:	f000 f86f 	bl	8027360 <USBH_Get_USB_Status>
 8027282:	4603      	mov	r3, r0
 8027284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8027286:	7bbb      	ldrb	r3, [r7, #14]
}
 8027288:	4618      	mov	r0, r3
 802728a:	3714      	adds	r7, #20
 802728c:	46bd      	mov	sp, r7
 802728e:	bd90      	pop	{r4, r7, pc}

08027290 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8027290:	b580      	push	{r7, lr}
 8027292:	b082      	sub	sp, #8
 8027294:	af00      	add	r7, sp, #0
 8027296:	6078      	str	r0, [r7, #4]
 8027298:	460b      	mov	r3, r1
 802729a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802729c:	687b      	ldr	r3, [r7, #4]
 802729e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80272a2:	78fa      	ldrb	r2, [r7, #3]
 80272a4:	4611      	mov	r1, r2
 80272a6:	4618      	mov	r0, r3
 80272a8:	f7df f82e 	bl	8006308 <HAL_HCD_HC_GetURBState>
 80272ac:	4603      	mov	r3, r0
}
 80272ae:	4618      	mov	r0, r3
 80272b0:	3708      	adds	r7, #8
 80272b2:	46bd      	mov	sp, r7
 80272b4:	bd80      	pop	{r7, pc}

080272b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80272b6:	b580      	push	{r7, lr}
 80272b8:	b082      	sub	sp, #8
 80272ba:	af00      	add	r7, sp, #0
 80272bc:	6078      	str	r0, [r7, #4]
 80272be:	460b      	mov	r3, r1
 80272c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80272c2:	687b      	ldr	r3, [r7, #4]
 80272c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80272c8:	2b01      	cmp	r3, #1
 80272ca:	d103      	bne.n	80272d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80272cc:	78fb      	ldrb	r3, [r7, #3]
 80272ce:	4618      	mov	r0, r3
 80272d0:	f000 f872 	bl	80273b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80272d4:	20c8      	movs	r0, #200	@ 0xc8
 80272d6:	f7db fffb 	bl	80032d0 <HAL_Delay>
  return USBH_OK;
 80272da:	2300      	movs	r3, #0
}
 80272dc:	4618      	mov	r0, r3
 80272de:	3708      	adds	r7, #8
 80272e0:	46bd      	mov	sp, r7
 80272e2:	bd80      	pop	{r7, pc}

080272e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80272e4:	b480      	push	{r7}
 80272e6:	b085      	sub	sp, #20
 80272e8:	af00      	add	r7, sp, #0
 80272ea:	6078      	str	r0, [r7, #4]
 80272ec:	460b      	mov	r3, r1
 80272ee:	70fb      	strb	r3, [r7, #3]
 80272f0:	4613      	mov	r3, r2
 80272f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80272f4:	687b      	ldr	r3, [r7, #4]
 80272f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80272fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80272fc:	78fa      	ldrb	r2, [r7, #3]
 80272fe:	68f9      	ldr	r1, [r7, #12]
 8027300:	4613      	mov	r3, r2
 8027302:	011b      	lsls	r3, r3, #4
 8027304:	1a9b      	subs	r3, r3, r2
 8027306:	009b      	lsls	r3, r3, #2
 8027308:	440b      	add	r3, r1
 802730a:	3317      	adds	r3, #23
 802730c:	781b      	ldrb	r3, [r3, #0]
 802730e:	2b00      	cmp	r3, #0
 8027310:	d00a      	beq.n	8027328 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8027312:	78fa      	ldrb	r2, [r7, #3]
 8027314:	68f9      	ldr	r1, [r7, #12]
 8027316:	4613      	mov	r3, r2
 8027318:	011b      	lsls	r3, r3, #4
 802731a:	1a9b      	subs	r3, r3, r2
 802731c:	009b      	lsls	r3, r3, #2
 802731e:	440b      	add	r3, r1
 8027320:	333c      	adds	r3, #60	@ 0x3c
 8027322:	78ba      	ldrb	r2, [r7, #2]
 8027324:	701a      	strb	r2, [r3, #0]
 8027326:	e009      	b.n	802733c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8027328:	78fa      	ldrb	r2, [r7, #3]
 802732a:	68f9      	ldr	r1, [r7, #12]
 802732c:	4613      	mov	r3, r2
 802732e:	011b      	lsls	r3, r3, #4
 8027330:	1a9b      	subs	r3, r3, r2
 8027332:	009b      	lsls	r3, r3, #2
 8027334:	440b      	add	r3, r1
 8027336:	333d      	adds	r3, #61	@ 0x3d
 8027338:	78ba      	ldrb	r2, [r7, #2]
 802733a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802733c:	2300      	movs	r3, #0
}
 802733e:	4618      	mov	r0, r3
 8027340:	3714      	adds	r7, #20
 8027342:	46bd      	mov	sp, r7
 8027344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027348:	4770      	bx	lr

0802734a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802734a:	b580      	push	{r7, lr}
 802734c:	b082      	sub	sp, #8
 802734e:	af00      	add	r7, sp, #0
 8027350:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8027352:	6878      	ldr	r0, [r7, #4]
 8027354:	f7db ffbc 	bl	80032d0 <HAL_Delay>
}
 8027358:	bf00      	nop
 802735a:	3708      	adds	r7, #8
 802735c:	46bd      	mov	sp, r7
 802735e:	bd80      	pop	{r7, pc}

08027360 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8027360:	b480      	push	{r7}
 8027362:	b085      	sub	sp, #20
 8027364:	af00      	add	r7, sp, #0
 8027366:	4603      	mov	r3, r0
 8027368:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802736a:	2300      	movs	r3, #0
 802736c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802736e:	79fb      	ldrb	r3, [r7, #7]
 8027370:	2b03      	cmp	r3, #3
 8027372:	d817      	bhi.n	80273a4 <USBH_Get_USB_Status+0x44>
 8027374:	a201      	add	r2, pc, #4	@ (adr r2, 802737c <USBH_Get_USB_Status+0x1c>)
 8027376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802737a:	bf00      	nop
 802737c:	0802738d 	.word	0x0802738d
 8027380:	08027393 	.word	0x08027393
 8027384:	08027399 	.word	0x08027399
 8027388:	0802739f 	.word	0x0802739f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802738c:	2300      	movs	r3, #0
 802738e:	73fb      	strb	r3, [r7, #15]
    break;
 8027390:	e00b      	b.n	80273aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8027392:	2302      	movs	r3, #2
 8027394:	73fb      	strb	r3, [r7, #15]
    break;
 8027396:	e008      	b.n	80273aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8027398:	2301      	movs	r3, #1
 802739a:	73fb      	strb	r3, [r7, #15]
    break;
 802739c:	e005      	b.n	80273aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802739e:	2302      	movs	r3, #2
 80273a0:	73fb      	strb	r3, [r7, #15]
    break;
 80273a2:	e002      	b.n	80273aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80273a4:	2302      	movs	r3, #2
 80273a6:	73fb      	strb	r3, [r7, #15]
    break;
 80273a8:	bf00      	nop
  }
  return usb_status;
 80273aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80273ac:	4618      	mov	r0, r3
 80273ae:	3714      	adds	r7, #20
 80273b0:	46bd      	mov	sp, r7
 80273b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273b6:	4770      	bx	lr

080273b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80273b8:	b580      	push	{r7, lr}
 80273ba:	b084      	sub	sp, #16
 80273bc:	af00      	add	r7, sp, #0
 80273be:	4603      	mov	r3, r0
 80273c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80273c2:	79fb      	ldrb	r3, [r7, #7]
 80273c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80273c6:	79fb      	ldrb	r3, [r7, #7]
 80273c8:	2b00      	cmp	r3, #0
 80273ca:	d102      	bne.n	80273d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80273cc:	2300      	movs	r3, #0
 80273ce:	73fb      	strb	r3, [r7, #15]
 80273d0:	e001      	b.n	80273d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80273d2:	2301      	movs	r3, #1
 80273d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80273d6:	7bfb      	ldrb	r3, [r7, #15]
 80273d8:	461a      	mov	r2, r3
 80273da:	2120      	movs	r1, #32
 80273dc:	4803      	ldr	r0, [pc, #12]	@ (80273ec <MX_DriverVbusFS+0x34>)
 80273de:	f7de fb3b 	bl	8005a58 <HAL_GPIO_WritePin>
}
 80273e2:	bf00      	nop
 80273e4:	3710      	adds	r7, #16
 80273e6:	46bd      	mov	sp, r7
 80273e8:	bd80      	pop	{r7, pc}
 80273ea:	bf00      	nop
 80273ec:	40020c00 	.word	0x40020c00

080273f0 <malloc>:
 80273f0:	4b02      	ldr	r3, [pc, #8]	@ (80273fc <malloc+0xc>)
 80273f2:	4601      	mov	r1, r0
 80273f4:	6818      	ldr	r0, [r3, #0]
 80273f6:	f000 b82d 	b.w	8027454 <_malloc_r>
 80273fa:	bf00      	nop
 80273fc:	20000060 	.word	0x20000060

08027400 <free>:
 8027400:	4b02      	ldr	r3, [pc, #8]	@ (802740c <free+0xc>)
 8027402:	4601      	mov	r1, r0
 8027404:	6818      	ldr	r0, [r3, #0]
 8027406:	f000 bc11 	b.w	8027c2c <_free_r>
 802740a:	bf00      	nop
 802740c:	20000060 	.word	0x20000060

08027410 <sbrk_aligned>:
 8027410:	b570      	push	{r4, r5, r6, lr}
 8027412:	4e0f      	ldr	r6, [pc, #60]	@ (8027450 <sbrk_aligned+0x40>)
 8027414:	460c      	mov	r4, r1
 8027416:	6831      	ldr	r1, [r6, #0]
 8027418:	4605      	mov	r5, r0
 802741a:	b911      	cbnz	r1, 8027422 <sbrk_aligned+0x12>
 802741c:	f000 fb90 	bl	8027b40 <_sbrk_r>
 8027420:	6030      	str	r0, [r6, #0]
 8027422:	4621      	mov	r1, r4
 8027424:	4628      	mov	r0, r5
 8027426:	f000 fb8b 	bl	8027b40 <_sbrk_r>
 802742a:	1c43      	adds	r3, r0, #1
 802742c:	d103      	bne.n	8027436 <sbrk_aligned+0x26>
 802742e:	f04f 34ff 	mov.w	r4, #4294967295
 8027432:	4620      	mov	r0, r4
 8027434:	bd70      	pop	{r4, r5, r6, pc}
 8027436:	1cc4      	adds	r4, r0, #3
 8027438:	f024 0403 	bic.w	r4, r4, #3
 802743c:	42a0      	cmp	r0, r4
 802743e:	d0f8      	beq.n	8027432 <sbrk_aligned+0x22>
 8027440:	1a21      	subs	r1, r4, r0
 8027442:	4628      	mov	r0, r5
 8027444:	f000 fb7c 	bl	8027b40 <_sbrk_r>
 8027448:	3001      	adds	r0, #1
 802744a:	d1f2      	bne.n	8027432 <sbrk_aligned+0x22>
 802744c:	e7ef      	b.n	802742e <sbrk_aligned+0x1e>
 802744e:	bf00      	nop
 8027450:	20011abc 	.word	0x20011abc

08027454 <_malloc_r>:
 8027454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027458:	1ccd      	adds	r5, r1, #3
 802745a:	f025 0503 	bic.w	r5, r5, #3
 802745e:	3508      	adds	r5, #8
 8027460:	2d0c      	cmp	r5, #12
 8027462:	bf38      	it	cc
 8027464:	250c      	movcc	r5, #12
 8027466:	2d00      	cmp	r5, #0
 8027468:	4606      	mov	r6, r0
 802746a:	db01      	blt.n	8027470 <_malloc_r+0x1c>
 802746c:	42a9      	cmp	r1, r5
 802746e:	d904      	bls.n	802747a <_malloc_r+0x26>
 8027470:	230c      	movs	r3, #12
 8027472:	6033      	str	r3, [r6, #0]
 8027474:	2000      	movs	r0, #0
 8027476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802747a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8027550 <_malloc_r+0xfc>
 802747e:	f000 f869 	bl	8027554 <__malloc_lock>
 8027482:	f8d8 3000 	ldr.w	r3, [r8]
 8027486:	461c      	mov	r4, r3
 8027488:	bb44      	cbnz	r4, 80274dc <_malloc_r+0x88>
 802748a:	4629      	mov	r1, r5
 802748c:	4630      	mov	r0, r6
 802748e:	f7ff ffbf 	bl	8027410 <sbrk_aligned>
 8027492:	1c43      	adds	r3, r0, #1
 8027494:	4604      	mov	r4, r0
 8027496:	d158      	bne.n	802754a <_malloc_r+0xf6>
 8027498:	f8d8 4000 	ldr.w	r4, [r8]
 802749c:	4627      	mov	r7, r4
 802749e:	2f00      	cmp	r7, #0
 80274a0:	d143      	bne.n	802752a <_malloc_r+0xd6>
 80274a2:	2c00      	cmp	r4, #0
 80274a4:	d04b      	beq.n	802753e <_malloc_r+0xea>
 80274a6:	6823      	ldr	r3, [r4, #0]
 80274a8:	4639      	mov	r1, r7
 80274aa:	4630      	mov	r0, r6
 80274ac:	eb04 0903 	add.w	r9, r4, r3
 80274b0:	f000 fb46 	bl	8027b40 <_sbrk_r>
 80274b4:	4581      	cmp	r9, r0
 80274b6:	d142      	bne.n	802753e <_malloc_r+0xea>
 80274b8:	6821      	ldr	r1, [r4, #0]
 80274ba:	1a6d      	subs	r5, r5, r1
 80274bc:	4629      	mov	r1, r5
 80274be:	4630      	mov	r0, r6
 80274c0:	f7ff ffa6 	bl	8027410 <sbrk_aligned>
 80274c4:	3001      	adds	r0, #1
 80274c6:	d03a      	beq.n	802753e <_malloc_r+0xea>
 80274c8:	6823      	ldr	r3, [r4, #0]
 80274ca:	442b      	add	r3, r5
 80274cc:	6023      	str	r3, [r4, #0]
 80274ce:	f8d8 3000 	ldr.w	r3, [r8]
 80274d2:	685a      	ldr	r2, [r3, #4]
 80274d4:	bb62      	cbnz	r2, 8027530 <_malloc_r+0xdc>
 80274d6:	f8c8 7000 	str.w	r7, [r8]
 80274da:	e00f      	b.n	80274fc <_malloc_r+0xa8>
 80274dc:	6822      	ldr	r2, [r4, #0]
 80274de:	1b52      	subs	r2, r2, r5
 80274e0:	d420      	bmi.n	8027524 <_malloc_r+0xd0>
 80274e2:	2a0b      	cmp	r2, #11
 80274e4:	d917      	bls.n	8027516 <_malloc_r+0xc2>
 80274e6:	1961      	adds	r1, r4, r5
 80274e8:	42a3      	cmp	r3, r4
 80274ea:	6025      	str	r5, [r4, #0]
 80274ec:	bf18      	it	ne
 80274ee:	6059      	strne	r1, [r3, #4]
 80274f0:	6863      	ldr	r3, [r4, #4]
 80274f2:	bf08      	it	eq
 80274f4:	f8c8 1000 	streq.w	r1, [r8]
 80274f8:	5162      	str	r2, [r4, r5]
 80274fa:	604b      	str	r3, [r1, #4]
 80274fc:	4630      	mov	r0, r6
 80274fe:	f000 f82f 	bl	8027560 <__malloc_unlock>
 8027502:	f104 000b 	add.w	r0, r4, #11
 8027506:	1d23      	adds	r3, r4, #4
 8027508:	f020 0007 	bic.w	r0, r0, #7
 802750c:	1ac2      	subs	r2, r0, r3
 802750e:	bf1c      	itt	ne
 8027510:	1a1b      	subne	r3, r3, r0
 8027512:	50a3      	strne	r3, [r4, r2]
 8027514:	e7af      	b.n	8027476 <_malloc_r+0x22>
 8027516:	6862      	ldr	r2, [r4, #4]
 8027518:	42a3      	cmp	r3, r4
 802751a:	bf0c      	ite	eq
 802751c:	f8c8 2000 	streq.w	r2, [r8]
 8027520:	605a      	strne	r2, [r3, #4]
 8027522:	e7eb      	b.n	80274fc <_malloc_r+0xa8>
 8027524:	4623      	mov	r3, r4
 8027526:	6864      	ldr	r4, [r4, #4]
 8027528:	e7ae      	b.n	8027488 <_malloc_r+0x34>
 802752a:	463c      	mov	r4, r7
 802752c:	687f      	ldr	r7, [r7, #4]
 802752e:	e7b6      	b.n	802749e <_malloc_r+0x4a>
 8027530:	461a      	mov	r2, r3
 8027532:	685b      	ldr	r3, [r3, #4]
 8027534:	42a3      	cmp	r3, r4
 8027536:	d1fb      	bne.n	8027530 <_malloc_r+0xdc>
 8027538:	2300      	movs	r3, #0
 802753a:	6053      	str	r3, [r2, #4]
 802753c:	e7de      	b.n	80274fc <_malloc_r+0xa8>
 802753e:	230c      	movs	r3, #12
 8027540:	6033      	str	r3, [r6, #0]
 8027542:	4630      	mov	r0, r6
 8027544:	f000 f80c 	bl	8027560 <__malloc_unlock>
 8027548:	e794      	b.n	8027474 <_malloc_r+0x20>
 802754a:	6005      	str	r5, [r0, #0]
 802754c:	e7d6      	b.n	80274fc <_malloc_r+0xa8>
 802754e:	bf00      	nop
 8027550:	20011ac0 	.word	0x20011ac0

08027554 <__malloc_lock>:
 8027554:	4801      	ldr	r0, [pc, #4]	@ (802755c <__malloc_lock+0x8>)
 8027556:	f000 bb3a 	b.w	8027bce <__retarget_lock_acquire_recursive>
 802755a:	bf00      	nop
 802755c:	20011c04 	.word	0x20011c04

08027560 <__malloc_unlock>:
 8027560:	4801      	ldr	r0, [pc, #4]	@ (8027568 <__malloc_unlock+0x8>)
 8027562:	f000 bb35 	b.w	8027bd0 <__retarget_lock_release_recursive>
 8027566:	bf00      	nop
 8027568:	20011c04 	.word	0x20011c04

0802756c <rand>:
 802756c:	4b16      	ldr	r3, [pc, #88]	@ (80275c8 <rand+0x5c>)
 802756e:	b510      	push	{r4, lr}
 8027570:	681c      	ldr	r4, [r3, #0]
 8027572:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8027574:	b9b3      	cbnz	r3, 80275a4 <rand+0x38>
 8027576:	2018      	movs	r0, #24
 8027578:	f7ff ff3a 	bl	80273f0 <malloc>
 802757c:	4602      	mov	r2, r0
 802757e:	6320      	str	r0, [r4, #48]	@ 0x30
 8027580:	b920      	cbnz	r0, 802758c <rand+0x20>
 8027582:	4b12      	ldr	r3, [pc, #72]	@ (80275cc <rand+0x60>)
 8027584:	4812      	ldr	r0, [pc, #72]	@ (80275d0 <rand+0x64>)
 8027586:	2152      	movs	r1, #82	@ 0x52
 8027588:	f000 fb32 	bl	8027bf0 <__assert_func>
 802758c:	4911      	ldr	r1, [pc, #68]	@ (80275d4 <rand+0x68>)
 802758e:	4b12      	ldr	r3, [pc, #72]	@ (80275d8 <rand+0x6c>)
 8027590:	e9c0 1300 	strd	r1, r3, [r0]
 8027594:	4b11      	ldr	r3, [pc, #68]	@ (80275dc <rand+0x70>)
 8027596:	6083      	str	r3, [r0, #8]
 8027598:	230b      	movs	r3, #11
 802759a:	8183      	strh	r3, [r0, #12]
 802759c:	2100      	movs	r1, #0
 802759e:	2001      	movs	r0, #1
 80275a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80275a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80275a6:	480e      	ldr	r0, [pc, #56]	@ (80275e0 <rand+0x74>)
 80275a8:	690b      	ldr	r3, [r1, #16]
 80275aa:	694c      	ldr	r4, [r1, #20]
 80275ac:	4a0d      	ldr	r2, [pc, #52]	@ (80275e4 <rand+0x78>)
 80275ae:	4358      	muls	r0, r3
 80275b0:	fb02 0004 	mla	r0, r2, r4, r0
 80275b4:	fba3 3202 	umull	r3, r2, r3, r2
 80275b8:	3301      	adds	r3, #1
 80275ba:	eb40 0002 	adc.w	r0, r0, r2
 80275be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80275c2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80275c6:	bd10      	pop	{r4, pc}
 80275c8:	20000060 	.word	0x20000060
 80275cc:	0802c5a8 	.word	0x0802c5a8
 80275d0:	0802c5bf 	.word	0x0802c5bf
 80275d4:	abcd330e 	.word	0xabcd330e
 80275d8:	e66d1234 	.word	0xe66d1234
 80275dc:	0005deec 	.word	0x0005deec
 80275e0:	5851f42d 	.word	0x5851f42d
 80275e4:	4c957f2d 	.word	0x4c957f2d

080275e8 <std>:
 80275e8:	2300      	movs	r3, #0
 80275ea:	b510      	push	{r4, lr}
 80275ec:	4604      	mov	r4, r0
 80275ee:	e9c0 3300 	strd	r3, r3, [r0]
 80275f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80275f6:	6083      	str	r3, [r0, #8]
 80275f8:	8181      	strh	r1, [r0, #12]
 80275fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80275fc:	81c2      	strh	r2, [r0, #14]
 80275fe:	6183      	str	r3, [r0, #24]
 8027600:	4619      	mov	r1, r3
 8027602:	2208      	movs	r2, #8
 8027604:	305c      	adds	r0, #92	@ 0x5c
 8027606:	f000 fa09 	bl	8027a1c <memset>
 802760a:	4b0d      	ldr	r3, [pc, #52]	@ (8027640 <std+0x58>)
 802760c:	6263      	str	r3, [r4, #36]	@ 0x24
 802760e:	4b0d      	ldr	r3, [pc, #52]	@ (8027644 <std+0x5c>)
 8027610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8027612:	4b0d      	ldr	r3, [pc, #52]	@ (8027648 <std+0x60>)
 8027614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8027616:	4b0d      	ldr	r3, [pc, #52]	@ (802764c <std+0x64>)
 8027618:	6323      	str	r3, [r4, #48]	@ 0x30
 802761a:	4b0d      	ldr	r3, [pc, #52]	@ (8027650 <std+0x68>)
 802761c:	6224      	str	r4, [r4, #32]
 802761e:	429c      	cmp	r4, r3
 8027620:	d006      	beq.n	8027630 <std+0x48>
 8027622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8027626:	4294      	cmp	r4, r2
 8027628:	d002      	beq.n	8027630 <std+0x48>
 802762a:	33d0      	adds	r3, #208	@ 0xd0
 802762c:	429c      	cmp	r4, r3
 802762e:	d105      	bne.n	802763c <std+0x54>
 8027630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8027634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027638:	f000 bac8 	b.w	8027bcc <__retarget_lock_init_recursive>
 802763c:	bd10      	pop	{r4, pc}
 802763e:	bf00      	nop
 8027640:	0802784d 	.word	0x0802784d
 8027644:	0802786f 	.word	0x0802786f
 8027648:	080278a7 	.word	0x080278a7
 802764c:	080278cb 	.word	0x080278cb
 8027650:	20011ac4 	.word	0x20011ac4

08027654 <stdio_exit_handler>:
 8027654:	4a02      	ldr	r2, [pc, #8]	@ (8027660 <stdio_exit_handler+0xc>)
 8027656:	4903      	ldr	r1, [pc, #12]	@ (8027664 <stdio_exit_handler+0x10>)
 8027658:	4803      	ldr	r0, [pc, #12]	@ (8027668 <stdio_exit_handler+0x14>)
 802765a:	f000 b869 	b.w	8027730 <_fwalk_sglue>
 802765e:	bf00      	nop
 8027660:	20000054 	.word	0x20000054
 8027664:	08028369 	.word	0x08028369
 8027668:	20000064 	.word	0x20000064

0802766c <cleanup_stdio>:
 802766c:	6841      	ldr	r1, [r0, #4]
 802766e:	4b0c      	ldr	r3, [pc, #48]	@ (80276a0 <cleanup_stdio+0x34>)
 8027670:	4299      	cmp	r1, r3
 8027672:	b510      	push	{r4, lr}
 8027674:	4604      	mov	r4, r0
 8027676:	d001      	beq.n	802767c <cleanup_stdio+0x10>
 8027678:	f000 fe76 	bl	8028368 <_fflush_r>
 802767c:	68a1      	ldr	r1, [r4, #8]
 802767e:	4b09      	ldr	r3, [pc, #36]	@ (80276a4 <cleanup_stdio+0x38>)
 8027680:	4299      	cmp	r1, r3
 8027682:	d002      	beq.n	802768a <cleanup_stdio+0x1e>
 8027684:	4620      	mov	r0, r4
 8027686:	f000 fe6f 	bl	8028368 <_fflush_r>
 802768a:	68e1      	ldr	r1, [r4, #12]
 802768c:	4b06      	ldr	r3, [pc, #24]	@ (80276a8 <cleanup_stdio+0x3c>)
 802768e:	4299      	cmp	r1, r3
 8027690:	d004      	beq.n	802769c <cleanup_stdio+0x30>
 8027692:	4620      	mov	r0, r4
 8027694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027698:	f000 be66 	b.w	8028368 <_fflush_r>
 802769c:	bd10      	pop	{r4, pc}
 802769e:	bf00      	nop
 80276a0:	20011ac4 	.word	0x20011ac4
 80276a4:	20011b2c 	.word	0x20011b2c
 80276a8:	20011b94 	.word	0x20011b94

080276ac <global_stdio_init.part.0>:
 80276ac:	b510      	push	{r4, lr}
 80276ae:	4b0b      	ldr	r3, [pc, #44]	@ (80276dc <global_stdio_init.part.0+0x30>)
 80276b0:	4c0b      	ldr	r4, [pc, #44]	@ (80276e0 <global_stdio_init.part.0+0x34>)
 80276b2:	4a0c      	ldr	r2, [pc, #48]	@ (80276e4 <global_stdio_init.part.0+0x38>)
 80276b4:	601a      	str	r2, [r3, #0]
 80276b6:	4620      	mov	r0, r4
 80276b8:	2200      	movs	r2, #0
 80276ba:	2104      	movs	r1, #4
 80276bc:	f7ff ff94 	bl	80275e8 <std>
 80276c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80276c4:	2201      	movs	r2, #1
 80276c6:	2109      	movs	r1, #9
 80276c8:	f7ff ff8e 	bl	80275e8 <std>
 80276cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80276d0:	2202      	movs	r2, #2
 80276d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80276d6:	2112      	movs	r1, #18
 80276d8:	f7ff bf86 	b.w	80275e8 <std>
 80276dc:	20011bfc 	.word	0x20011bfc
 80276e0:	20011ac4 	.word	0x20011ac4
 80276e4:	08027655 	.word	0x08027655

080276e8 <__sfp_lock_acquire>:
 80276e8:	4801      	ldr	r0, [pc, #4]	@ (80276f0 <__sfp_lock_acquire+0x8>)
 80276ea:	f000 ba70 	b.w	8027bce <__retarget_lock_acquire_recursive>
 80276ee:	bf00      	nop
 80276f0:	20011c05 	.word	0x20011c05

080276f4 <__sfp_lock_release>:
 80276f4:	4801      	ldr	r0, [pc, #4]	@ (80276fc <__sfp_lock_release+0x8>)
 80276f6:	f000 ba6b 	b.w	8027bd0 <__retarget_lock_release_recursive>
 80276fa:	bf00      	nop
 80276fc:	20011c05 	.word	0x20011c05

08027700 <__sinit>:
 8027700:	b510      	push	{r4, lr}
 8027702:	4604      	mov	r4, r0
 8027704:	f7ff fff0 	bl	80276e8 <__sfp_lock_acquire>
 8027708:	6a23      	ldr	r3, [r4, #32]
 802770a:	b11b      	cbz	r3, 8027714 <__sinit+0x14>
 802770c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027710:	f7ff bff0 	b.w	80276f4 <__sfp_lock_release>
 8027714:	4b04      	ldr	r3, [pc, #16]	@ (8027728 <__sinit+0x28>)
 8027716:	6223      	str	r3, [r4, #32]
 8027718:	4b04      	ldr	r3, [pc, #16]	@ (802772c <__sinit+0x2c>)
 802771a:	681b      	ldr	r3, [r3, #0]
 802771c:	2b00      	cmp	r3, #0
 802771e:	d1f5      	bne.n	802770c <__sinit+0xc>
 8027720:	f7ff ffc4 	bl	80276ac <global_stdio_init.part.0>
 8027724:	e7f2      	b.n	802770c <__sinit+0xc>
 8027726:	bf00      	nop
 8027728:	0802766d 	.word	0x0802766d
 802772c:	20011bfc 	.word	0x20011bfc

08027730 <_fwalk_sglue>:
 8027730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027734:	4607      	mov	r7, r0
 8027736:	4688      	mov	r8, r1
 8027738:	4614      	mov	r4, r2
 802773a:	2600      	movs	r6, #0
 802773c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027740:	f1b9 0901 	subs.w	r9, r9, #1
 8027744:	d505      	bpl.n	8027752 <_fwalk_sglue+0x22>
 8027746:	6824      	ldr	r4, [r4, #0]
 8027748:	2c00      	cmp	r4, #0
 802774a:	d1f7      	bne.n	802773c <_fwalk_sglue+0xc>
 802774c:	4630      	mov	r0, r6
 802774e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027752:	89ab      	ldrh	r3, [r5, #12]
 8027754:	2b01      	cmp	r3, #1
 8027756:	d907      	bls.n	8027768 <_fwalk_sglue+0x38>
 8027758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802775c:	3301      	adds	r3, #1
 802775e:	d003      	beq.n	8027768 <_fwalk_sglue+0x38>
 8027760:	4629      	mov	r1, r5
 8027762:	4638      	mov	r0, r7
 8027764:	47c0      	blx	r8
 8027766:	4306      	orrs	r6, r0
 8027768:	3568      	adds	r5, #104	@ 0x68
 802776a:	e7e9      	b.n	8027740 <_fwalk_sglue+0x10>

0802776c <iprintf>:
 802776c:	b40f      	push	{r0, r1, r2, r3}
 802776e:	b507      	push	{r0, r1, r2, lr}
 8027770:	4906      	ldr	r1, [pc, #24]	@ (802778c <iprintf+0x20>)
 8027772:	ab04      	add	r3, sp, #16
 8027774:	6808      	ldr	r0, [r1, #0]
 8027776:	f853 2b04 	ldr.w	r2, [r3], #4
 802777a:	6881      	ldr	r1, [r0, #8]
 802777c:	9301      	str	r3, [sp, #4]
 802777e:	f000 fac9 	bl	8027d14 <_vfiprintf_r>
 8027782:	b003      	add	sp, #12
 8027784:	f85d eb04 	ldr.w	lr, [sp], #4
 8027788:	b004      	add	sp, #16
 802778a:	4770      	bx	lr
 802778c:	20000060 	.word	0x20000060

08027790 <_puts_r>:
 8027790:	6a03      	ldr	r3, [r0, #32]
 8027792:	b570      	push	{r4, r5, r6, lr}
 8027794:	6884      	ldr	r4, [r0, #8]
 8027796:	4605      	mov	r5, r0
 8027798:	460e      	mov	r6, r1
 802779a:	b90b      	cbnz	r3, 80277a0 <_puts_r+0x10>
 802779c:	f7ff ffb0 	bl	8027700 <__sinit>
 80277a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80277a2:	07db      	lsls	r3, r3, #31
 80277a4:	d405      	bmi.n	80277b2 <_puts_r+0x22>
 80277a6:	89a3      	ldrh	r3, [r4, #12]
 80277a8:	0598      	lsls	r0, r3, #22
 80277aa:	d402      	bmi.n	80277b2 <_puts_r+0x22>
 80277ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80277ae:	f000 fa0e 	bl	8027bce <__retarget_lock_acquire_recursive>
 80277b2:	89a3      	ldrh	r3, [r4, #12]
 80277b4:	0719      	lsls	r1, r3, #28
 80277b6:	d502      	bpl.n	80277be <_puts_r+0x2e>
 80277b8:	6923      	ldr	r3, [r4, #16]
 80277ba:	2b00      	cmp	r3, #0
 80277bc:	d135      	bne.n	802782a <_puts_r+0x9a>
 80277be:	4621      	mov	r1, r4
 80277c0:	4628      	mov	r0, r5
 80277c2:	f000 f8c5 	bl	8027950 <__swsetup_r>
 80277c6:	b380      	cbz	r0, 802782a <_puts_r+0x9a>
 80277c8:	f04f 35ff 	mov.w	r5, #4294967295
 80277cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80277ce:	07da      	lsls	r2, r3, #31
 80277d0:	d405      	bmi.n	80277de <_puts_r+0x4e>
 80277d2:	89a3      	ldrh	r3, [r4, #12]
 80277d4:	059b      	lsls	r3, r3, #22
 80277d6:	d402      	bmi.n	80277de <_puts_r+0x4e>
 80277d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80277da:	f000 f9f9 	bl	8027bd0 <__retarget_lock_release_recursive>
 80277de:	4628      	mov	r0, r5
 80277e0:	bd70      	pop	{r4, r5, r6, pc}
 80277e2:	2b00      	cmp	r3, #0
 80277e4:	da04      	bge.n	80277f0 <_puts_r+0x60>
 80277e6:	69a2      	ldr	r2, [r4, #24]
 80277e8:	429a      	cmp	r2, r3
 80277ea:	dc17      	bgt.n	802781c <_puts_r+0x8c>
 80277ec:	290a      	cmp	r1, #10
 80277ee:	d015      	beq.n	802781c <_puts_r+0x8c>
 80277f0:	6823      	ldr	r3, [r4, #0]
 80277f2:	1c5a      	adds	r2, r3, #1
 80277f4:	6022      	str	r2, [r4, #0]
 80277f6:	7019      	strb	r1, [r3, #0]
 80277f8:	68a3      	ldr	r3, [r4, #8]
 80277fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80277fe:	3b01      	subs	r3, #1
 8027800:	60a3      	str	r3, [r4, #8]
 8027802:	2900      	cmp	r1, #0
 8027804:	d1ed      	bne.n	80277e2 <_puts_r+0x52>
 8027806:	2b00      	cmp	r3, #0
 8027808:	da11      	bge.n	802782e <_puts_r+0x9e>
 802780a:	4622      	mov	r2, r4
 802780c:	210a      	movs	r1, #10
 802780e:	4628      	mov	r0, r5
 8027810:	f000 f85f 	bl	80278d2 <__swbuf_r>
 8027814:	3001      	adds	r0, #1
 8027816:	d0d7      	beq.n	80277c8 <_puts_r+0x38>
 8027818:	250a      	movs	r5, #10
 802781a:	e7d7      	b.n	80277cc <_puts_r+0x3c>
 802781c:	4622      	mov	r2, r4
 802781e:	4628      	mov	r0, r5
 8027820:	f000 f857 	bl	80278d2 <__swbuf_r>
 8027824:	3001      	adds	r0, #1
 8027826:	d1e7      	bne.n	80277f8 <_puts_r+0x68>
 8027828:	e7ce      	b.n	80277c8 <_puts_r+0x38>
 802782a:	3e01      	subs	r6, #1
 802782c:	e7e4      	b.n	80277f8 <_puts_r+0x68>
 802782e:	6823      	ldr	r3, [r4, #0]
 8027830:	1c5a      	adds	r2, r3, #1
 8027832:	6022      	str	r2, [r4, #0]
 8027834:	220a      	movs	r2, #10
 8027836:	701a      	strb	r2, [r3, #0]
 8027838:	e7ee      	b.n	8027818 <_puts_r+0x88>
	...

0802783c <puts>:
 802783c:	4b02      	ldr	r3, [pc, #8]	@ (8027848 <puts+0xc>)
 802783e:	4601      	mov	r1, r0
 8027840:	6818      	ldr	r0, [r3, #0]
 8027842:	f7ff bfa5 	b.w	8027790 <_puts_r>
 8027846:	bf00      	nop
 8027848:	20000060 	.word	0x20000060

0802784c <__sread>:
 802784c:	b510      	push	{r4, lr}
 802784e:	460c      	mov	r4, r1
 8027850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027854:	f000 f962 	bl	8027b1c <_read_r>
 8027858:	2800      	cmp	r0, #0
 802785a:	bfab      	itete	ge
 802785c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802785e:	89a3      	ldrhlt	r3, [r4, #12]
 8027860:	181b      	addge	r3, r3, r0
 8027862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8027866:	bfac      	ite	ge
 8027868:	6563      	strge	r3, [r4, #84]	@ 0x54
 802786a:	81a3      	strhlt	r3, [r4, #12]
 802786c:	bd10      	pop	{r4, pc}

0802786e <__swrite>:
 802786e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027872:	461f      	mov	r7, r3
 8027874:	898b      	ldrh	r3, [r1, #12]
 8027876:	05db      	lsls	r3, r3, #23
 8027878:	4605      	mov	r5, r0
 802787a:	460c      	mov	r4, r1
 802787c:	4616      	mov	r6, r2
 802787e:	d505      	bpl.n	802788c <__swrite+0x1e>
 8027880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027884:	2302      	movs	r3, #2
 8027886:	2200      	movs	r2, #0
 8027888:	f000 f936 	bl	8027af8 <_lseek_r>
 802788c:	89a3      	ldrh	r3, [r4, #12]
 802788e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8027896:	81a3      	strh	r3, [r4, #12]
 8027898:	4632      	mov	r2, r6
 802789a:	463b      	mov	r3, r7
 802789c:	4628      	mov	r0, r5
 802789e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80278a2:	f000 b95d 	b.w	8027b60 <_write_r>

080278a6 <__sseek>:
 80278a6:	b510      	push	{r4, lr}
 80278a8:	460c      	mov	r4, r1
 80278aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80278ae:	f000 f923 	bl	8027af8 <_lseek_r>
 80278b2:	1c43      	adds	r3, r0, #1
 80278b4:	89a3      	ldrh	r3, [r4, #12]
 80278b6:	bf15      	itete	ne
 80278b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80278ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80278be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80278c2:	81a3      	strheq	r3, [r4, #12]
 80278c4:	bf18      	it	ne
 80278c6:	81a3      	strhne	r3, [r4, #12]
 80278c8:	bd10      	pop	{r4, pc}

080278ca <__sclose>:
 80278ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80278ce:	f000 b8ad 	b.w	8027a2c <_close_r>

080278d2 <__swbuf_r>:
 80278d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80278d4:	460e      	mov	r6, r1
 80278d6:	4614      	mov	r4, r2
 80278d8:	4605      	mov	r5, r0
 80278da:	b118      	cbz	r0, 80278e4 <__swbuf_r+0x12>
 80278dc:	6a03      	ldr	r3, [r0, #32]
 80278de:	b90b      	cbnz	r3, 80278e4 <__swbuf_r+0x12>
 80278e0:	f7ff ff0e 	bl	8027700 <__sinit>
 80278e4:	69a3      	ldr	r3, [r4, #24]
 80278e6:	60a3      	str	r3, [r4, #8]
 80278e8:	89a3      	ldrh	r3, [r4, #12]
 80278ea:	071a      	lsls	r2, r3, #28
 80278ec:	d501      	bpl.n	80278f2 <__swbuf_r+0x20>
 80278ee:	6923      	ldr	r3, [r4, #16]
 80278f0:	b943      	cbnz	r3, 8027904 <__swbuf_r+0x32>
 80278f2:	4621      	mov	r1, r4
 80278f4:	4628      	mov	r0, r5
 80278f6:	f000 f82b 	bl	8027950 <__swsetup_r>
 80278fa:	b118      	cbz	r0, 8027904 <__swbuf_r+0x32>
 80278fc:	f04f 37ff 	mov.w	r7, #4294967295
 8027900:	4638      	mov	r0, r7
 8027902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027904:	6823      	ldr	r3, [r4, #0]
 8027906:	6922      	ldr	r2, [r4, #16]
 8027908:	1a98      	subs	r0, r3, r2
 802790a:	6963      	ldr	r3, [r4, #20]
 802790c:	b2f6      	uxtb	r6, r6
 802790e:	4283      	cmp	r3, r0
 8027910:	4637      	mov	r7, r6
 8027912:	dc05      	bgt.n	8027920 <__swbuf_r+0x4e>
 8027914:	4621      	mov	r1, r4
 8027916:	4628      	mov	r0, r5
 8027918:	f000 fd26 	bl	8028368 <_fflush_r>
 802791c:	2800      	cmp	r0, #0
 802791e:	d1ed      	bne.n	80278fc <__swbuf_r+0x2a>
 8027920:	68a3      	ldr	r3, [r4, #8]
 8027922:	3b01      	subs	r3, #1
 8027924:	60a3      	str	r3, [r4, #8]
 8027926:	6823      	ldr	r3, [r4, #0]
 8027928:	1c5a      	adds	r2, r3, #1
 802792a:	6022      	str	r2, [r4, #0]
 802792c:	701e      	strb	r6, [r3, #0]
 802792e:	6962      	ldr	r2, [r4, #20]
 8027930:	1c43      	adds	r3, r0, #1
 8027932:	429a      	cmp	r2, r3
 8027934:	d004      	beq.n	8027940 <__swbuf_r+0x6e>
 8027936:	89a3      	ldrh	r3, [r4, #12]
 8027938:	07db      	lsls	r3, r3, #31
 802793a:	d5e1      	bpl.n	8027900 <__swbuf_r+0x2e>
 802793c:	2e0a      	cmp	r6, #10
 802793e:	d1df      	bne.n	8027900 <__swbuf_r+0x2e>
 8027940:	4621      	mov	r1, r4
 8027942:	4628      	mov	r0, r5
 8027944:	f000 fd10 	bl	8028368 <_fflush_r>
 8027948:	2800      	cmp	r0, #0
 802794a:	d0d9      	beq.n	8027900 <__swbuf_r+0x2e>
 802794c:	e7d6      	b.n	80278fc <__swbuf_r+0x2a>
	...

08027950 <__swsetup_r>:
 8027950:	b538      	push	{r3, r4, r5, lr}
 8027952:	4b29      	ldr	r3, [pc, #164]	@ (80279f8 <__swsetup_r+0xa8>)
 8027954:	4605      	mov	r5, r0
 8027956:	6818      	ldr	r0, [r3, #0]
 8027958:	460c      	mov	r4, r1
 802795a:	b118      	cbz	r0, 8027964 <__swsetup_r+0x14>
 802795c:	6a03      	ldr	r3, [r0, #32]
 802795e:	b90b      	cbnz	r3, 8027964 <__swsetup_r+0x14>
 8027960:	f7ff fece 	bl	8027700 <__sinit>
 8027964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027968:	0719      	lsls	r1, r3, #28
 802796a:	d422      	bmi.n	80279b2 <__swsetup_r+0x62>
 802796c:	06da      	lsls	r2, r3, #27
 802796e:	d407      	bmi.n	8027980 <__swsetup_r+0x30>
 8027970:	2209      	movs	r2, #9
 8027972:	602a      	str	r2, [r5, #0]
 8027974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027978:	81a3      	strh	r3, [r4, #12]
 802797a:	f04f 30ff 	mov.w	r0, #4294967295
 802797e:	e033      	b.n	80279e8 <__swsetup_r+0x98>
 8027980:	0758      	lsls	r0, r3, #29
 8027982:	d512      	bpl.n	80279aa <__swsetup_r+0x5a>
 8027984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027986:	b141      	cbz	r1, 802799a <__swsetup_r+0x4a>
 8027988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802798c:	4299      	cmp	r1, r3
 802798e:	d002      	beq.n	8027996 <__swsetup_r+0x46>
 8027990:	4628      	mov	r0, r5
 8027992:	f000 f94b 	bl	8027c2c <_free_r>
 8027996:	2300      	movs	r3, #0
 8027998:	6363      	str	r3, [r4, #52]	@ 0x34
 802799a:	89a3      	ldrh	r3, [r4, #12]
 802799c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80279a0:	81a3      	strh	r3, [r4, #12]
 80279a2:	2300      	movs	r3, #0
 80279a4:	6063      	str	r3, [r4, #4]
 80279a6:	6923      	ldr	r3, [r4, #16]
 80279a8:	6023      	str	r3, [r4, #0]
 80279aa:	89a3      	ldrh	r3, [r4, #12]
 80279ac:	f043 0308 	orr.w	r3, r3, #8
 80279b0:	81a3      	strh	r3, [r4, #12]
 80279b2:	6923      	ldr	r3, [r4, #16]
 80279b4:	b94b      	cbnz	r3, 80279ca <__swsetup_r+0x7a>
 80279b6:	89a3      	ldrh	r3, [r4, #12]
 80279b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80279bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80279c0:	d003      	beq.n	80279ca <__swsetup_r+0x7a>
 80279c2:	4621      	mov	r1, r4
 80279c4:	4628      	mov	r0, r5
 80279c6:	f000 fd2f 	bl	8028428 <__smakebuf_r>
 80279ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80279ce:	f013 0201 	ands.w	r2, r3, #1
 80279d2:	d00a      	beq.n	80279ea <__swsetup_r+0x9a>
 80279d4:	2200      	movs	r2, #0
 80279d6:	60a2      	str	r2, [r4, #8]
 80279d8:	6962      	ldr	r2, [r4, #20]
 80279da:	4252      	negs	r2, r2
 80279dc:	61a2      	str	r2, [r4, #24]
 80279de:	6922      	ldr	r2, [r4, #16]
 80279e0:	b942      	cbnz	r2, 80279f4 <__swsetup_r+0xa4>
 80279e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80279e6:	d1c5      	bne.n	8027974 <__swsetup_r+0x24>
 80279e8:	bd38      	pop	{r3, r4, r5, pc}
 80279ea:	0799      	lsls	r1, r3, #30
 80279ec:	bf58      	it	pl
 80279ee:	6962      	ldrpl	r2, [r4, #20]
 80279f0:	60a2      	str	r2, [r4, #8]
 80279f2:	e7f4      	b.n	80279de <__swsetup_r+0x8e>
 80279f4:	2000      	movs	r0, #0
 80279f6:	e7f7      	b.n	80279e8 <__swsetup_r+0x98>
 80279f8:	20000060 	.word	0x20000060

080279fc <memcmp>:
 80279fc:	b510      	push	{r4, lr}
 80279fe:	3901      	subs	r1, #1
 8027a00:	4402      	add	r2, r0
 8027a02:	4290      	cmp	r0, r2
 8027a04:	d101      	bne.n	8027a0a <memcmp+0xe>
 8027a06:	2000      	movs	r0, #0
 8027a08:	e005      	b.n	8027a16 <memcmp+0x1a>
 8027a0a:	7803      	ldrb	r3, [r0, #0]
 8027a0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8027a10:	42a3      	cmp	r3, r4
 8027a12:	d001      	beq.n	8027a18 <memcmp+0x1c>
 8027a14:	1b18      	subs	r0, r3, r4
 8027a16:	bd10      	pop	{r4, pc}
 8027a18:	3001      	adds	r0, #1
 8027a1a:	e7f2      	b.n	8027a02 <memcmp+0x6>

08027a1c <memset>:
 8027a1c:	4402      	add	r2, r0
 8027a1e:	4603      	mov	r3, r0
 8027a20:	4293      	cmp	r3, r2
 8027a22:	d100      	bne.n	8027a26 <memset+0xa>
 8027a24:	4770      	bx	lr
 8027a26:	f803 1b01 	strb.w	r1, [r3], #1
 8027a2a:	e7f9      	b.n	8027a20 <memset+0x4>

08027a2c <_close_r>:
 8027a2c:	b538      	push	{r3, r4, r5, lr}
 8027a2e:	4d06      	ldr	r5, [pc, #24]	@ (8027a48 <_close_r+0x1c>)
 8027a30:	2300      	movs	r3, #0
 8027a32:	4604      	mov	r4, r0
 8027a34:	4608      	mov	r0, r1
 8027a36:	602b      	str	r3, [r5, #0]
 8027a38:	f7db f9d0 	bl	8002ddc <_close>
 8027a3c:	1c43      	adds	r3, r0, #1
 8027a3e:	d102      	bne.n	8027a46 <_close_r+0x1a>
 8027a40:	682b      	ldr	r3, [r5, #0]
 8027a42:	b103      	cbz	r3, 8027a46 <_close_r+0x1a>
 8027a44:	6023      	str	r3, [r4, #0]
 8027a46:	bd38      	pop	{r3, r4, r5, pc}
 8027a48:	20011c00 	.word	0x20011c00

08027a4c <_reclaim_reent>:
 8027a4c:	4b29      	ldr	r3, [pc, #164]	@ (8027af4 <_reclaim_reent+0xa8>)
 8027a4e:	681b      	ldr	r3, [r3, #0]
 8027a50:	4283      	cmp	r3, r0
 8027a52:	b570      	push	{r4, r5, r6, lr}
 8027a54:	4604      	mov	r4, r0
 8027a56:	d04b      	beq.n	8027af0 <_reclaim_reent+0xa4>
 8027a58:	69c3      	ldr	r3, [r0, #28]
 8027a5a:	b1ab      	cbz	r3, 8027a88 <_reclaim_reent+0x3c>
 8027a5c:	68db      	ldr	r3, [r3, #12]
 8027a5e:	b16b      	cbz	r3, 8027a7c <_reclaim_reent+0x30>
 8027a60:	2500      	movs	r5, #0
 8027a62:	69e3      	ldr	r3, [r4, #28]
 8027a64:	68db      	ldr	r3, [r3, #12]
 8027a66:	5959      	ldr	r1, [r3, r5]
 8027a68:	2900      	cmp	r1, #0
 8027a6a:	d13b      	bne.n	8027ae4 <_reclaim_reent+0x98>
 8027a6c:	3504      	adds	r5, #4
 8027a6e:	2d80      	cmp	r5, #128	@ 0x80
 8027a70:	d1f7      	bne.n	8027a62 <_reclaim_reent+0x16>
 8027a72:	69e3      	ldr	r3, [r4, #28]
 8027a74:	4620      	mov	r0, r4
 8027a76:	68d9      	ldr	r1, [r3, #12]
 8027a78:	f000 f8d8 	bl	8027c2c <_free_r>
 8027a7c:	69e3      	ldr	r3, [r4, #28]
 8027a7e:	6819      	ldr	r1, [r3, #0]
 8027a80:	b111      	cbz	r1, 8027a88 <_reclaim_reent+0x3c>
 8027a82:	4620      	mov	r0, r4
 8027a84:	f000 f8d2 	bl	8027c2c <_free_r>
 8027a88:	6961      	ldr	r1, [r4, #20]
 8027a8a:	b111      	cbz	r1, 8027a92 <_reclaim_reent+0x46>
 8027a8c:	4620      	mov	r0, r4
 8027a8e:	f000 f8cd 	bl	8027c2c <_free_r>
 8027a92:	69e1      	ldr	r1, [r4, #28]
 8027a94:	b111      	cbz	r1, 8027a9c <_reclaim_reent+0x50>
 8027a96:	4620      	mov	r0, r4
 8027a98:	f000 f8c8 	bl	8027c2c <_free_r>
 8027a9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8027a9e:	b111      	cbz	r1, 8027aa6 <_reclaim_reent+0x5a>
 8027aa0:	4620      	mov	r0, r4
 8027aa2:	f000 f8c3 	bl	8027c2c <_free_r>
 8027aa6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027aa8:	b111      	cbz	r1, 8027ab0 <_reclaim_reent+0x64>
 8027aaa:	4620      	mov	r0, r4
 8027aac:	f000 f8be 	bl	8027c2c <_free_r>
 8027ab0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8027ab2:	b111      	cbz	r1, 8027aba <_reclaim_reent+0x6e>
 8027ab4:	4620      	mov	r0, r4
 8027ab6:	f000 f8b9 	bl	8027c2c <_free_r>
 8027aba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8027abc:	b111      	cbz	r1, 8027ac4 <_reclaim_reent+0x78>
 8027abe:	4620      	mov	r0, r4
 8027ac0:	f000 f8b4 	bl	8027c2c <_free_r>
 8027ac4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8027ac6:	b111      	cbz	r1, 8027ace <_reclaim_reent+0x82>
 8027ac8:	4620      	mov	r0, r4
 8027aca:	f000 f8af 	bl	8027c2c <_free_r>
 8027ace:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8027ad0:	b111      	cbz	r1, 8027ad8 <_reclaim_reent+0x8c>
 8027ad2:	4620      	mov	r0, r4
 8027ad4:	f000 f8aa 	bl	8027c2c <_free_r>
 8027ad8:	6a23      	ldr	r3, [r4, #32]
 8027ada:	b14b      	cbz	r3, 8027af0 <_reclaim_reent+0xa4>
 8027adc:	4620      	mov	r0, r4
 8027ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8027ae2:	4718      	bx	r3
 8027ae4:	680e      	ldr	r6, [r1, #0]
 8027ae6:	4620      	mov	r0, r4
 8027ae8:	f000 f8a0 	bl	8027c2c <_free_r>
 8027aec:	4631      	mov	r1, r6
 8027aee:	e7bb      	b.n	8027a68 <_reclaim_reent+0x1c>
 8027af0:	bd70      	pop	{r4, r5, r6, pc}
 8027af2:	bf00      	nop
 8027af4:	20000060 	.word	0x20000060

08027af8 <_lseek_r>:
 8027af8:	b538      	push	{r3, r4, r5, lr}
 8027afa:	4d07      	ldr	r5, [pc, #28]	@ (8027b18 <_lseek_r+0x20>)
 8027afc:	4604      	mov	r4, r0
 8027afe:	4608      	mov	r0, r1
 8027b00:	4611      	mov	r1, r2
 8027b02:	2200      	movs	r2, #0
 8027b04:	602a      	str	r2, [r5, #0]
 8027b06:	461a      	mov	r2, r3
 8027b08:	f7db f98f 	bl	8002e2a <_lseek>
 8027b0c:	1c43      	adds	r3, r0, #1
 8027b0e:	d102      	bne.n	8027b16 <_lseek_r+0x1e>
 8027b10:	682b      	ldr	r3, [r5, #0]
 8027b12:	b103      	cbz	r3, 8027b16 <_lseek_r+0x1e>
 8027b14:	6023      	str	r3, [r4, #0]
 8027b16:	bd38      	pop	{r3, r4, r5, pc}
 8027b18:	20011c00 	.word	0x20011c00

08027b1c <_read_r>:
 8027b1c:	b538      	push	{r3, r4, r5, lr}
 8027b1e:	4d07      	ldr	r5, [pc, #28]	@ (8027b3c <_read_r+0x20>)
 8027b20:	4604      	mov	r4, r0
 8027b22:	4608      	mov	r0, r1
 8027b24:	4611      	mov	r1, r2
 8027b26:	2200      	movs	r2, #0
 8027b28:	602a      	str	r2, [r5, #0]
 8027b2a:	461a      	mov	r2, r3
 8027b2c:	f7db f91d 	bl	8002d6a <_read>
 8027b30:	1c43      	adds	r3, r0, #1
 8027b32:	d102      	bne.n	8027b3a <_read_r+0x1e>
 8027b34:	682b      	ldr	r3, [r5, #0]
 8027b36:	b103      	cbz	r3, 8027b3a <_read_r+0x1e>
 8027b38:	6023      	str	r3, [r4, #0]
 8027b3a:	bd38      	pop	{r3, r4, r5, pc}
 8027b3c:	20011c00 	.word	0x20011c00

08027b40 <_sbrk_r>:
 8027b40:	b538      	push	{r3, r4, r5, lr}
 8027b42:	4d06      	ldr	r5, [pc, #24]	@ (8027b5c <_sbrk_r+0x1c>)
 8027b44:	2300      	movs	r3, #0
 8027b46:	4604      	mov	r4, r0
 8027b48:	4608      	mov	r0, r1
 8027b4a:	602b      	str	r3, [r5, #0]
 8027b4c:	f7db f97a 	bl	8002e44 <_sbrk>
 8027b50:	1c43      	adds	r3, r0, #1
 8027b52:	d102      	bne.n	8027b5a <_sbrk_r+0x1a>
 8027b54:	682b      	ldr	r3, [r5, #0]
 8027b56:	b103      	cbz	r3, 8027b5a <_sbrk_r+0x1a>
 8027b58:	6023      	str	r3, [r4, #0]
 8027b5a:	bd38      	pop	{r3, r4, r5, pc}
 8027b5c:	20011c00 	.word	0x20011c00

08027b60 <_write_r>:
 8027b60:	b538      	push	{r3, r4, r5, lr}
 8027b62:	4d07      	ldr	r5, [pc, #28]	@ (8027b80 <_write_r+0x20>)
 8027b64:	4604      	mov	r4, r0
 8027b66:	4608      	mov	r0, r1
 8027b68:	4611      	mov	r1, r2
 8027b6a:	2200      	movs	r2, #0
 8027b6c:	602a      	str	r2, [r5, #0]
 8027b6e:	461a      	mov	r2, r3
 8027b70:	f7db f918 	bl	8002da4 <_write>
 8027b74:	1c43      	adds	r3, r0, #1
 8027b76:	d102      	bne.n	8027b7e <_write_r+0x1e>
 8027b78:	682b      	ldr	r3, [r5, #0]
 8027b7a:	b103      	cbz	r3, 8027b7e <_write_r+0x1e>
 8027b7c:	6023      	str	r3, [r4, #0]
 8027b7e:	bd38      	pop	{r3, r4, r5, pc}
 8027b80:	20011c00 	.word	0x20011c00

08027b84 <__libc_init_array>:
 8027b84:	b570      	push	{r4, r5, r6, lr}
 8027b86:	4d0d      	ldr	r5, [pc, #52]	@ (8027bbc <__libc_init_array+0x38>)
 8027b88:	4c0d      	ldr	r4, [pc, #52]	@ (8027bc0 <__libc_init_array+0x3c>)
 8027b8a:	1b64      	subs	r4, r4, r5
 8027b8c:	10a4      	asrs	r4, r4, #2
 8027b8e:	2600      	movs	r6, #0
 8027b90:	42a6      	cmp	r6, r4
 8027b92:	d109      	bne.n	8027ba8 <__libc_init_array+0x24>
 8027b94:	4d0b      	ldr	r5, [pc, #44]	@ (8027bc4 <__libc_init_array+0x40>)
 8027b96:	4c0c      	ldr	r4, [pc, #48]	@ (8027bc8 <__libc_init_array+0x44>)
 8027b98:	f000 fcf0 	bl	802857c <_init>
 8027b9c:	1b64      	subs	r4, r4, r5
 8027b9e:	10a4      	asrs	r4, r4, #2
 8027ba0:	2600      	movs	r6, #0
 8027ba2:	42a6      	cmp	r6, r4
 8027ba4:	d105      	bne.n	8027bb2 <__libc_init_array+0x2e>
 8027ba6:	bd70      	pop	{r4, r5, r6, pc}
 8027ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8027bac:	4798      	blx	r3
 8027bae:	3601      	adds	r6, #1
 8027bb0:	e7ee      	b.n	8027b90 <__libc_init_array+0xc>
 8027bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8027bb6:	4798      	blx	r3
 8027bb8:	3601      	adds	r6, #1
 8027bba:	e7f2      	b.n	8027ba2 <__libc_init_array+0x1e>
 8027bbc:	0802c690 	.word	0x0802c690
 8027bc0:	0802c690 	.word	0x0802c690
 8027bc4:	0802c690 	.word	0x0802c690
 8027bc8:	0802c694 	.word	0x0802c694

08027bcc <__retarget_lock_init_recursive>:
 8027bcc:	4770      	bx	lr

08027bce <__retarget_lock_acquire_recursive>:
 8027bce:	4770      	bx	lr

08027bd0 <__retarget_lock_release_recursive>:
 8027bd0:	4770      	bx	lr

08027bd2 <memcpy>:
 8027bd2:	440a      	add	r2, r1
 8027bd4:	4291      	cmp	r1, r2
 8027bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8027bda:	d100      	bne.n	8027bde <memcpy+0xc>
 8027bdc:	4770      	bx	lr
 8027bde:	b510      	push	{r4, lr}
 8027be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027be8:	4291      	cmp	r1, r2
 8027bea:	d1f9      	bne.n	8027be0 <memcpy+0xe>
 8027bec:	bd10      	pop	{r4, pc}
	...

08027bf0 <__assert_func>:
 8027bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027bf2:	4614      	mov	r4, r2
 8027bf4:	461a      	mov	r2, r3
 8027bf6:	4b09      	ldr	r3, [pc, #36]	@ (8027c1c <__assert_func+0x2c>)
 8027bf8:	681b      	ldr	r3, [r3, #0]
 8027bfa:	4605      	mov	r5, r0
 8027bfc:	68d8      	ldr	r0, [r3, #12]
 8027bfe:	b954      	cbnz	r4, 8027c16 <__assert_func+0x26>
 8027c00:	4b07      	ldr	r3, [pc, #28]	@ (8027c20 <__assert_func+0x30>)
 8027c02:	461c      	mov	r4, r3
 8027c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027c08:	9100      	str	r1, [sp, #0]
 8027c0a:	462b      	mov	r3, r5
 8027c0c:	4905      	ldr	r1, [pc, #20]	@ (8027c24 <__assert_func+0x34>)
 8027c0e:	f000 fbd3 	bl	80283b8 <fiprintf>
 8027c12:	f000 fc67 	bl	80284e4 <abort>
 8027c16:	4b04      	ldr	r3, [pc, #16]	@ (8027c28 <__assert_func+0x38>)
 8027c18:	e7f4      	b.n	8027c04 <__assert_func+0x14>
 8027c1a:	bf00      	nop
 8027c1c:	20000060 	.word	0x20000060
 8027c20:	0802c652 	.word	0x0802c652
 8027c24:	0802c624 	.word	0x0802c624
 8027c28:	0802c617 	.word	0x0802c617

08027c2c <_free_r>:
 8027c2c:	b538      	push	{r3, r4, r5, lr}
 8027c2e:	4605      	mov	r5, r0
 8027c30:	2900      	cmp	r1, #0
 8027c32:	d041      	beq.n	8027cb8 <_free_r+0x8c>
 8027c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027c38:	1f0c      	subs	r4, r1, #4
 8027c3a:	2b00      	cmp	r3, #0
 8027c3c:	bfb8      	it	lt
 8027c3e:	18e4      	addlt	r4, r4, r3
 8027c40:	f7ff fc88 	bl	8027554 <__malloc_lock>
 8027c44:	4a1d      	ldr	r2, [pc, #116]	@ (8027cbc <_free_r+0x90>)
 8027c46:	6813      	ldr	r3, [r2, #0]
 8027c48:	b933      	cbnz	r3, 8027c58 <_free_r+0x2c>
 8027c4a:	6063      	str	r3, [r4, #4]
 8027c4c:	6014      	str	r4, [r2, #0]
 8027c4e:	4628      	mov	r0, r5
 8027c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027c54:	f7ff bc84 	b.w	8027560 <__malloc_unlock>
 8027c58:	42a3      	cmp	r3, r4
 8027c5a:	d908      	bls.n	8027c6e <_free_r+0x42>
 8027c5c:	6820      	ldr	r0, [r4, #0]
 8027c5e:	1821      	adds	r1, r4, r0
 8027c60:	428b      	cmp	r3, r1
 8027c62:	bf01      	itttt	eq
 8027c64:	6819      	ldreq	r1, [r3, #0]
 8027c66:	685b      	ldreq	r3, [r3, #4]
 8027c68:	1809      	addeq	r1, r1, r0
 8027c6a:	6021      	streq	r1, [r4, #0]
 8027c6c:	e7ed      	b.n	8027c4a <_free_r+0x1e>
 8027c6e:	461a      	mov	r2, r3
 8027c70:	685b      	ldr	r3, [r3, #4]
 8027c72:	b10b      	cbz	r3, 8027c78 <_free_r+0x4c>
 8027c74:	42a3      	cmp	r3, r4
 8027c76:	d9fa      	bls.n	8027c6e <_free_r+0x42>
 8027c78:	6811      	ldr	r1, [r2, #0]
 8027c7a:	1850      	adds	r0, r2, r1
 8027c7c:	42a0      	cmp	r0, r4
 8027c7e:	d10b      	bne.n	8027c98 <_free_r+0x6c>
 8027c80:	6820      	ldr	r0, [r4, #0]
 8027c82:	4401      	add	r1, r0
 8027c84:	1850      	adds	r0, r2, r1
 8027c86:	4283      	cmp	r3, r0
 8027c88:	6011      	str	r1, [r2, #0]
 8027c8a:	d1e0      	bne.n	8027c4e <_free_r+0x22>
 8027c8c:	6818      	ldr	r0, [r3, #0]
 8027c8e:	685b      	ldr	r3, [r3, #4]
 8027c90:	6053      	str	r3, [r2, #4]
 8027c92:	4408      	add	r0, r1
 8027c94:	6010      	str	r0, [r2, #0]
 8027c96:	e7da      	b.n	8027c4e <_free_r+0x22>
 8027c98:	d902      	bls.n	8027ca0 <_free_r+0x74>
 8027c9a:	230c      	movs	r3, #12
 8027c9c:	602b      	str	r3, [r5, #0]
 8027c9e:	e7d6      	b.n	8027c4e <_free_r+0x22>
 8027ca0:	6820      	ldr	r0, [r4, #0]
 8027ca2:	1821      	adds	r1, r4, r0
 8027ca4:	428b      	cmp	r3, r1
 8027ca6:	bf04      	itt	eq
 8027ca8:	6819      	ldreq	r1, [r3, #0]
 8027caa:	685b      	ldreq	r3, [r3, #4]
 8027cac:	6063      	str	r3, [r4, #4]
 8027cae:	bf04      	itt	eq
 8027cb0:	1809      	addeq	r1, r1, r0
 8027cb2:	6021      	streq	r1, [r4, #0]
 8027cb4:	6054      	str	r4, [r2, #4]
 8027cb6:	e7ca      	b.n	8027c4e <_free_r+0x22>
 8027cb8:	bd38      	pop	{r3, r4, r5, pc}
 8027cba:	bf00      	nop
 8027cbc:	20011ac0 	.word	0x20011ac0

08027cc0 <__sfputc_r>:
 8027cc0:	6893      	ldr	r3, [r2, #8]
 8027cc2:	3b01      	subs	r3, #1
 8027cc4:	2b00      	cmp	r3, #0
 8027cc6:	b410      	push	{r4}
 8027cc8:	6093      	str	r3, [r2, #8]
 8027cca:	da08      	bge.n	8027cde <__sfputc_r+0x1e>
 8027ccc:	6994      	ldr	r4, [r2, #24]
 8027cce:	42a3      	cmp	r3, r4
 8027cd0:	db01      	blt.n	8027cd6 <__sfputc_r+0x16>
 8027cd2:	290a      	cmp	r1, #10
 8027cd4:	d103      	bne.n	8027cde <__sfputc_r+0x1e>
 8027cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027cda:	f7ff bdfa 	b.w	80278d2 <__swbuf_r>
 8027cde:	6813      	ldr	r3, [r2, #0]
 8027ce0:	1c58      	adds	r0, r3, #1
 8027ce2:	6010      	str	r0, [r2, #0]
 8027ce4:	7019      	strb	r1, [r3, #0]
 8027ce6:	4608      	mov	r0, r1
 8027ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027cec:	4770      	bx	lr

08027cee <__sfputs_r>:
 8027cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027cf0:	4606      	mov	r6, r0
 8027cf2:	460f      	mov	r7, r1
 8027cf4:	4614      	mov	r4, r2
 8027cf6:	18d5      	adds	r5, r2, r3
 8027cf8:	42ac      	cmp	r4, r5
 8027cfa:	d101      	bne.n	8027d00 <__sfputs_r+0x12>
 8027cfc:	2000      	movs	r0, #0
 8027cfe:	e007      	b.n	8027d10 <__sfputs_r+0x22>
 8027d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027d04:	463a      	mov	r2, r7
 8027d06:	4630      	mov	r0, r6
 8027d08:	f7ff ffda 	bl	8027cc0 <__sfputc_r>
 8027d0c:	1c43      	adds	r3, r0, #1
 8027d0e:	d1f3      	bne.n	8027cf8 <__sfputs_r+0xa>
 8027d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027d14 <_vfiprintf_r>:
 8027d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d18:	460d      	mov	r5, r1
 8027d1a:	b09d      	sub	sp, #116	@ 0x74
 8027d1c:	4614      	mov	r4, r2
 8027d1e:	4698      	mov	r8, r3
 8027d20:	4606      	mov	r6, r0
 8027d22:	b118      	cbz	r0, 8027d2c <_vfiprintf_r+0x18>
 8027d24:	6a03      	ldr	r3, [r0, #32]
 8027d26:	b90b      	cbnz	r3, 8027d2c <_vfiprintf_r+0x18>
 8027d28:	f7ff fcea 	bl	8027700 <__sinit>
 8027d2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027d2e:	07d9      	lsls	r1, r3, #31
 8027d30:	d405      	bmi.n	8027d3e <_vfiprintf_r+0x2a>
 8027d32:	89ab      	ldrh	r3, [r5, #12]
 8027d34:	059a      	lsls	r2, r3, #22
 8027d36:	d402      	bmi.n	8027d3e <_vfiprintf_r+0x2a>
 8027d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027d3a:	f7ff ff48 	bl	8027bce <__retarget_lock_acquire_recursive>
 8027d3e:	89ab      	ldrh	r3, [r5, #12]
 8027d40:	071b      	lsls	r3, r3, #28
 8027d42:	d501      	bpl.n	8027d48 <_vfiprintf_r+0x34>
 8027d44:	692b      	ldr	r3, [r5, #16]
 8027d46:	b99b      	cbnz	r3, 8027d70 <_vfiprintf_r+0x5c>
 8027d48:	4629      	mov	r1, r5
 8027d4a:	4630      	mov	r0, r6
 8027d4c:	f7ff fe00 	bl	8027950 <__swsetup_r>
 8027d50:	b170      	cbz	r0, 8027d70 <_vfiprintf_r+0x5c>
 8027d52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027d54:	07dc      	lsls	r4, r3, #31
 8027d56:	d504      	bpl.n	8027d62 <_vfiprintf_r+0x4e>
 8027d58:	f04f 30ff 	mov.w	r0, #4294967295
 8027d5c:	b01d      	add	sp, #116	@ 0x74
 8027d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d62:	89ab      	ldrh	r3, [r5, #12]
 8027d64:	0598      	lsls	r0, r3, #22
 8027d66:	d4f7      	bmi.n	8027d58 <_vfiprintf_r+0x44>
 8027d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027d6a:	f7ff ff31 	bl	8027bd0 <__retarget_lock_release_recursive>
 8027d6e:	e7f3      	b.n	8027d58 <_vfiprintf_r+0x44>
 8027d70:	2300      	movs	r3, #0
 8027d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8027d74:	2320      	movs	r3, #32
 8027d76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027d7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8027d7e:	2330      	movs	r3, #48	@ 0x30
 8027d80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8027f30 <_vfiprintf_r+0x21c>
 8027d84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027d88:	f04f 0901 	mov.w	r9, #1
 8027d8c:	4623      	mov	r3, r4
 8027d8e:	469a      	mov	sl, r3
 8027d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027d94:	b10a      	cbz	r2, 8027d9a <_vfiprintf_r+0x86>
 8027d96:	2a25      	cmp	r2, #37	@ 0x25
 8027d98:	d1f9      	bne.n	8027d8e <_vfiprintf_r+0x7a>
 8027d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8027d9e:	d00b      	beq.n	8027db8 <_vfiprintf_r+0xa4>
 8027da0:	465b      	mov	r3, fp
 8027da2:	4622      	mov	r2, r4
 8027da4:	4629      	mov	r1, r5
 8027da6:	4630      	mov	r0, r6
 8027da8:	f7ff ffa1 	bl	8027cee <__sfputs_r>
 8027dac:	3001      	adds	r0, #1
 8027dae:	f000 80a7 	beq.w	8027f00 <_vfiprintf_r+0x1ec>
 8027db2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027db4:	445a      	add	r2, fp
 8027db6:	9209      	str	r2, [sp, #36]	@ 0x24
 8027db8:	f89a 3000 	ldrb.w	r3, [sl]
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	f000 809f 	beq.w	8027f00 <_vfiprintf_r+0x1ec>
 8027dc2:	2300      	movs	r3, #0
 8027dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8027dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027dcc:	f10a 0a01 	add.w	sl, sl, #1
 8027dd0:	9304      	str	r3, [sp, #16]
 8027dd2:	9307      	str	r3, [sp, #28]
 8027dd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8027dd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8027dda:	4654      	mov	r4, sl
 8027ddc:	2205      	movs	r2, #5
 8027dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027de2:	4853      	ldr	r0, [pc, #332]	@ (8027f30 <_vfiprintf_r+0x21c>)
 8027de4:	f7d8 fa14 	bl	8000210 <memchr>
 8027de8:	9a04      	ldr	r2, [sp, #16]
 8027dea:	b9d8      	cbnz	r0, 8027e24 <_vfiprintf_r+0x110>
 8027dec:	06d1      	lsls	r1, r2, #27
 8027dee:	bf44      	itt	mi
 8027df0:	2320      	movmi	r3, #32
 8027df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027df6:	0713      	lsls	r3, r2, #28
 8027df8:	bf44      	itt	mi
 8027dfa:	232b      	movmi	r3, #43	@ 0x2b
 8027dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027e00:	f89a 3000 	ldrb.w	r3, [sl]
 8027e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8027e06:	d015      	beq.n	8027e34 <_vfiprintf_r+0x120>
 8027e08:	9a07      	ldr	r2, [sp, #28]
 8027e0a:	4654      	mov	r4, sl
 8027e0c:	2000      	movs	r0, #0
 8027e0e:	f04f 0c0a 	mov.w	ip, #10
 8027e12:	4621      	mov	r1, r4
 8027e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027e18:	3b30      	subs	r3, #48	@ 0x30
 8027e1a:	2b09      	cmp	r3, #9
 8027e1c:	d94b      	bls.n	8027eb6 <_vfiprintf_r+0x1a2>
 8027e1e:	b1b0      	cbz	r0, 8027e4e <_vfiprintf_r+0x13a>
 8027e20:	9207      	str	r2, [sp, #28]
 8027e22:	e014      	b.n	8027e4e <_vfiprintf_r+0x13a>
 8027e24:	eba0 0308 	sub.w	r3, r0, r8
 8027e28:	fa09 f303 	lsl.w	r3, r9, r3
 8027e2c:	4313      	orrs	r3, r2
 8027e2e:	9304      	str	r3, [sp, #16]
 8027e30:	46a2      	mov	sl, r4
 8027e32:	e7d2      	b.n	8027dda <_vfiprintf_r+0xc6>
 8027e34:	9b03      	ldr	r3, [sp, #12]
 8027e36:	1d19      	adds	r1, r3, #4
 8027e38:	681b      	ldr	r3, [r3, #0]
 8027e3a:	9103      	str	r1, [sp, #12]
 8027e3c:	2b00      	cmp	r3, #0
 8027e3e:	bfbb      	ittet	lt
 8027e40:	425b      	neglt	r3, r3
 8027e42:	f042 0202 	orrlt.w	r2, r2, #2
 8027e46:	9307      	strge	r3, [sp, #28]
 8027e48:	9307      	strlt	r3, [sp, #28]
 8027e4a:	bfb8      	it	lt
 8027e4c:	9204      	strlt	r2, [sp, #16]
 8027e4e:	7823      	ldrb	r3, [r4, #0]
 8027e50:	2b2e      	cmp	r3, #46	@ 0x2e
 8027e52:	d10a      	bne.n	8027e6a <_vfiprintf_r+0x156>
 8027e54:	7863      	ldrb	r3, [r4, #1]
 8027e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8027e58:	d132      	bne.n	8027ec0 <_vfiprintf_r+0x1ac>
 8027e5a:	9b03      	ldr	r3, [sp, #12]
 8027e5c:	1d1a      	adds	r2, r3, #4
 8027e5e:	681b      	ldr	r3, [r3, #0]
 8027e60:	9203      	str	r2, [sp, #12]
 8027e62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027e66:	3402      	adds	r4, #2
 8027e68:	9305      	str	r3, [sp, #20]
 8027e6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8027f40 <_vfiprintf_r+0x22c>
 8027e6e:	7821      	ldrb	r1, [r4, #0]
 8027e70:	2203      	movs	r2, #3
 8027e72:	4650      	mov	r0, sl
 8027e74:	f7d8 f9cc 	bl	8000210 <memchr>
 8027e78:	b138      	cbz	r0, 8027e8a <_vfiprintf_r+0x176>
 8027e7a:	9b04      	ldr	r3, [sp, #16]
 8027e7c:	eba0 000a 	sub.w	r0, r0, sl
 8027e80:	2240      	movs	r2, #64	@ 0x40
 8027e82:	4082      	lsls	r2, r0
 8027e84:	4313      	orrs	r3, r2
 8027e86:	3401      	adds	r4, #1
 8027e88:	9304      	str	r3, [sp, #16]
 8027e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027e8e:	4829      	ldr	r0, [pc, #164]	@ (8027f34 <_vfiprintf_r+0x220>)
 8027e90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027e94:	2206      	movs	r2, #6
 8027e96:	f7d8 f9bb 	bl	8000210 <memchr>
 8027e9a:	2800      	cmp	r0, #0
 8027e9c:	d03f      	beq.n	8027f1e <_vfiprintf_r+0x20a>
 8027e9e:	4b26      	ldr	r3, [pc, #152]	@ (8027f38 <_vfiprintf_r+0x224>)
 8027ea0:	bb1b      	cbnz	r3, 8027eea <_vfiprintf_r+0x1d6>
 8027ea2:	9b03      	ldr	r3, [sp, #12]
 8027ea4:	3307      	adds	r3, #7
 8027ea6:	f023 0307 	bic.w	r3, r3, #7
 8027eaa:	3308      	adds	r3, #8
 8027eac:	9303      	str	r3, [sp, #12]
 8027eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027eb0:	443b      	add	r3, r7
 8027eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8027eb4:	e76a      	b.n	8027d8c <_vfiprintf_r+0x78>
 8027eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8027eba:	460c      	mov	r4, r1
 8027ebc:	2001      	movs	r0, #1
 8027ebe:	e7a8      	b.n	8027e12 <_vfiprintf_r+0xfe>
 8027ec0:	2300      	movs	r3, #0
 8027ec2:	3401      	adds	r4, #1
 8027ec4:	9305      	str	r3, [sp, #20]
 8027ec6:	4619      	mov	r1, r3
 8027ec8:	f04f 0c0a 	mov.w	ip, #10
 8027ecc:	4620      	mov	r0, r4
 8027ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027ed2:	3a30      	subs	r2, #48	@ 0x30
 8027ed4:	2a09      	cmp	r2, #9
 8027ed6:	d903      	bls.n	8027ee0 <_vfiprintf_r+0x1cc>
 8027ed8:	2b00      	cmp	r3, #0
 8027eda:	d0c6      	beq.n	8027e6a <_vfiprintf_r+0x156>
 8027edc:	9105      	str	r1, [sp, #20]
 8027ede:	e7c4      	b.n	8027e6a <_vfiprintf_r+0x156>
 8027ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8027ee4:	4604      	mov	r4, r0
 8027ee6:	2301      	movs	r3, #1
 8027ee8:	e7f0      	b.n	8027ecc <_vfiprintf_r+0x1b8>
 8027eea:	ab03      	add	r3, sp, #12
 8027eec:	9300      	str	r3, [sp, #0]
 8027eee:	462a      	mov	r2, r5
 8027ef0:	4b12      	ldr	r3, [pc, #72]	@ (8027f3c <_vfiprintf_r+0x228>)
 8027ef2:	a904      	add	r1, sp, #16
 8027ef4:	4630      	mov	r0, r6
 8027ef6:	f3af 8000 	nop.w
 8027efa:	4607      	mov	r7, r0
 8027efc:	1c78      	adds	r0, r7, #1
 8027efe:	d1d6      	bne.n	8027eae <_vfiprintf_r+0x19a>
 8027f00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027f02:	07d9      	lsls	r1, r3, #31
 8027f04:	d405      	bmi.n	8027f12 <_vfiprintf_r+0x1fe>
 8027f06:	89ab      	ldrh	r3, [r5, #12]
 8027f08:	059a      	lsls	r2, r3, #22
 8027f0a:	d402      	bmi.n	8027f12 <_vfiprintf_r+0x1fe>
 8027f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8027f0e:	f7ff fe5f 	bl	8027bd0 <__retarget_lock_release_recursive>
 8027f12:	89ab      	ldrh	r3, [r5, #12]
 8027f14:	065b      	lsls	r3, r3, #25
 8027f16:	f53f af1f 	bmi.w	8027d58 <_vfiprintf_r+0x44>
 8027f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027f1c:	e71e      	b.n	8027d5c <_vfiprintf_r+0x48>
 8027f1e:	ab03      	add	r3, sp, #12
 8027f20:	9300      	str	r3, [sp, #0]
 8027f22:	462a      	mov	r2, r5
 8027f24:	4b05      	ldr	r3, [pc, #20]	@ (8027f3c <_vfiprintf_r+0x228>)
 8027f26:	a904      	add	r1, sp, #16
 8027f28:	4630      	mov	r0, r6
 8027f2a:	f000 f879 	bl	8028020 <_printf_i>
 8027f2e:	e7e4      	b.n	8027efa <_vfiprintf_r+0x1e6>
 8027f30:	0802c653 	.word	0x0802c653
 8027f34:	0802c65d 	.word	0x0802c65d
 8027f38:	00000000 	.word	0x00000000
 8027f3c:	08027cef 	.word	0x08027cef
 8027f40:	0802c659 	.word	0x0802c659

08027f44 <_printf_common>:
 8027f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027f48:	4616      	mov	r6, r2
 8027f4a:	4698      	mov	r8, r3
 8027f4c:	688a      	ldr	r2, [r1, #8]
 8027f4e:	690b      	ldr	r3, [r1, #16]
 8027f50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8027f54:	4293      	cmp	r3, r2
 8027f56:	bfb8      	it	lt
 8027f58:	4613      	movlt	r3, r2
 8027f5a:	6033      	str	r3, [r6, #0]
 8027f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8027f60:	4607      	mov	r7, r0
 8027f62:	460c      	mov	r4, r1
 8027f64:	b10a      	cbz	r2, 8027f6a <_printf_common+0x26>
 8027f66:	3301      	adds	r3, #1
 8027f68:	6033      	str	r3, [r6, #0]
 8027f6a:	6823      	ldr	r3, [r4, #0]
 8027f6c:	0699      	lsls	r1, r3, #26
 8027f6e:	bf42      	ittt	mi
 8027f70:	6833      	ldrmi	r3, [r6, #0]
 8027f72:	3302      	addmi	r3, #2
 8027f74:	6033      	strmi	r3, [r6, #0]
 8027f76:	6825      	ldr	r5, [r4, #0]
 8027f78:	f015 0506 	ands.w	r5, r5, #6
 8027f7c:	d106      	bne.n	8027f8c <_printf_common+0x48>
 8027f7e:	f104 0a19 	add.w	sl, r4, #25
 8027f82:	68e3      	ldr	r3, [r4, #12]
 8027f84:	6832      	ldr	r2, [r6, #0]
 8027f86:	1a9b      	subs	r3, r3, r2
 8027f88:	42ab      	cmp	r3, r5
 8027f8a:	dc26      	bgt.n	8027fda <_printf_common+0x96>
 8027f8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8027f90:	6822      	ldr	r2, [r4, #0]
 8027f92:	3b00      	subs	r3, #0
 8027f94:	bf18      	it	ne
 8027f96:	2301      	movne	r3, #1
 8027f98:	0692      	lsls	r2, r2, #26
 8027f9a:	d42b      	bmi.n	8027ff4 <_printf_common+0xb0>
 8027f9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8027fa0:	4641      	mov	r1, r8
 8027fa2:	4638      	mov	r0, r7
 8027fa4:	47c8      	blx	r9
 8027fa6:	3001      	adds	r0, #1
 8027fa8:	d01e      	beq.n	8027fe8 <_printf_common+0xa4>
 8027faa:	6823      	ldr	r3, [r4, #0]
 8027fac:	6922      	ldr	r2, [r4, #16]
 8027fae:	f003 0306 	and.w	r3, r3, #6
 8027fb2:	2b04      	cmp	r3, #4
 8027fb4:	bf02      	ittt	eq
 8027fb6:	68e5      	ldreq	r5, [r4, #12]
 8027fb8:	6833      	ldreq	r3, [r6, #0]
 8027fba:	1aed      	subeq	r5, r5, r3
 8027fbc:	68a3      	ldr	r3, [r4, #8]
 8027fbe:	bf0c      	ite	eq
 8027fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027fc4:	2500      	movne	r5, #0
 8027fc6:	4293      	cmp	r3, r2
 8027fc8:	bfc4      	itt	gt
 8027fca:	1a9b      	subgt	r3, r3, r2
 8027fcc:	18ed      	addgt	r5, r5, r3
 8027fce:	2600      	movs	r6, #0
 8027fd0:	341a      	adds	r4, #26
 8027fd2:	42b5      	cmp	r5, r6
 8027fd4:	d11a      	bne.n	802800c <_printf_common+0xc8>
 8027fd6:	2000      	movs	r0, #0
 8027fd8:	e008      	b.n	8027fec <_printf_common+0xa8>
 8027fda:	2301      	movs	r3, #1
 8027fdc:	4652      	mov	r2, sl
 8027fde:	4641      	mov	r1, r8
 8027fe0:	4638      	mov	r0, r7
 8027fe2:	47c8      	blx	r9
 8027fe4:	3001      	adds	r0, #1
 8027fe6:	d103      	bne.n	8027ff0 <_printf_common+0xac>
 8027fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8027fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027ff0:	3501      	adds	r5, #1
 8027ff2:	e7c6      	b.n	8027f82 <_printf_common+0x3e>
 8027ff4:	18e1      	adds	r1, r4, r3
 8027ff6:	1c5a      	adds	r2, r3, #1
 8027ff8:	2030      	movs	r0, #48	@ 0x30
 8027ffa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8027ffe:	4422      	add	r2, r4
 8028000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8028004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8028008:	3302      	adds	r3, #2
 802800a:	e7c7      	b.n	8027f9c <_printf_common+0x58>
 802800c:	2301      	movs	r3, #1
 802800e:	4622      	mov	r2, r4
 8028010:	4641      	mov	r1, r8
 8028012:	4638      	mov	r0, r7
 8028014:	47c8      	blx	r9
 8028016:	3001      	adds	r0, #1
 8028018:	d0e6      	beq.n	8027fe8 <_printf_common+0xa4>
 802801a:	3601      	adds	r6, #1
 802801c:	e7d9      	b.n	8027fd2 <_printf_common+0x8e>
	...

08028020 <_printf_i>:
 8028020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028024:	7e0f      	ldrb	r7, [r1, #24]
 8028026:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028028:	2f78      	cmp	r7, #120	@ 0x78
 802802a:	4691      	mov	r9, r2
 802802c:	4680      	mov	r8, r0
 802802e:	460c      	mov	r4, r1
 8028030:	469a      	mov	sl, r3
 8028032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8028036:	d807      	bhi.n	8028048 <_printf_i+0x28>
 8028038:	2f62      	cmp	r7, #98	@ 0x62
 802803a:	d80a      	bhi.n	8028052 <_printf_i+0x32>
 802803c:	2f00      	cmp	r7, #0
 802803e:	f000 80d2 	beq.w	80281e6 <_printf_i+0x1c6>
 8028042:	2f58      	cmp	r7, #88	@ 0x58
 8028044:	f000 80b9 	beq.w	80281ba <_printf_i+0x19a>
 8028048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802804c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8028050:	e03a      	b.n	80280c8 <_printf_i+0xa8>
 8028052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8028056:	2b15      	cmp	r3, #21
 8028058:	d8f6      	bhi.n	8028048 <_printf_i+0x28>
 802805a:	a101      	add	r1, pc, #4	@ (adr r1, 8028060 <_printf_i+0x40>)
 802805c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028060:	080280b9 	.word	0x080280b9
 8028064:	080280cd 	.word	0x080280cd
 8028068:	08028049 	.word	0x08028049
 802806c:	08028049 	.word	0x08028049
 8028070:	08028049 	.word	0x08028049
 8028074:	08028049 	.word	0x08028049
 8028078:	080280cd 	.word	0x080280cd
 802807c:	08028049 	.word	0x08028049
 8028080:	08028049 	.word	0x08028049
 8028084:	08028049 	.word	0x08028049
 8028088:	08028049 	.word	0x08028049
 802808c:	080281cd 	.word	0x080281cd
 8028090:	080280f7 	.word	0x080280f7
 8028094:	08028187 	.word	0x08028187
 8028098:	08028049 	.word	0x08028049
 802809c:	08028049 	.word	0x08028049
 80280a0:	080281ef 	.word	0x080281ef
 80280a4:	08028049 	.word	0x08028049
 80280a8:	080280f7 	.word	0x080280f7
 80280ac:	08028049 	.word	0x08028049
 80280b0:	08028049 	.word	0x08028049
 80280b4:	0802818f 	.word	0x0802818f
 80280b8:	6833      	ldr	r3, [r6, #0]
 80280ba:	1d1a      	adds	r2, r3, #4
 80280bc:	681b      	ldr	r3, [r3, #0]
 80280be:	6032      	str	r2, [r6, #0]
 80280c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80280c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80280c8:	2301      	movs	r3, #1
 80280ca:	e09d      	b.n	8028208 <_printf_i+0x1e8>
 80280cc:	6833      	ldr	r3, [r6, #0]
 80280ce:	6820      	ldr	r0, [r4, #0]
 80280d0:	1d19      	adds	r1, r3, #4
 80280d2:	6031      	str	r1, [r6, #0]
 80280d4:	0606      	lsls	r6, r0, #24
 80280d6:	d501      	bpl.n	80280dc <_printf_i+0xbc>
 80280d8:	681d      	ldr	r5, [r3, #0]
 80280da:	e003      	b.n	80280e4 <_printf_i+0xc4>
 80280dc:	0645      	lsls	r5, r0, #25
 80280de:	d5fb      	bpl.n	80280d8 <_printf_i+0xb8>
 80280e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80280e4:	2d00      	cmp	r5, #0
 80280e6:	da03      	bge.n	80280f0 <_printf_i+0xd0>
 80280e8:	232d      	movs	r3, #45	@ 0x2d
 80280ea:	426d      	negs	r5, r5
 80280ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80280f0:	4859      	ldr	r0, [pc, #356]	@ (8028258 <_printf_i+0x238>)
 80280f2:	230a      	movs	r3, #10
 80280f4:	e011      	b.n	802811a <_printf_i+0xfa>
 80280f6:	6821      	ldr	r1, [r4, #0]
 80280f8:	6833      	ldr	r3, [r6, #0]
 80280fa:	0608      	lsls	r0, r1, #24
 80280fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8028100:	d402      	bmi.n	8028108 <_printf_i+0xe8>
 8028102:	0649      	lsls	r1, r1, #25
 8028104:	bf48      	it	mi
 8028106:	b2ad      	uxthmi	r5, r5
 8028108:	2f6f      	cmp	r7, #111	@ 0x6f
 802810a:	4853      	ldr	r0, [pc, #332]	@ (8028258 <_printf_i+0x238>)
 802810c:	6033      	str	r3, [r6, #0]
 802810e:	bf14      	ite	ne
 8028110:	230a      	movne	r3, #10
 8028112:	2308      	moveq	r3, #8
 8028114:	2100      	movs	r1, #0
 8028116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802811a:	6866      	ldr	r6, [r4, #4]
 802811c:	60a6      	str	r6, [r4, #8]
 802811e:	2e00      	cmp	r6, #0
 8028120:	bfa2      	ittt	ge
 8028122:	6821      	ldrge	r1, [r4, #0]
 8028124:	f021 0104 	bicge.w	r1, r1, #4
 8028128:	6021      	strge	r1, [r4, #0]
 802812a:	b90d      	cbnz	r5, 8028130 <_printf_i+0x110>
 802812c:	2e00      	cmp	r6, #0
 802812e:	d04b      	beq.n	80281c8 <_printf_i+0x1a8>
 8028130:	4616      	mov	r6, r2
 8028132:	fbb5 f1f3 	udiv	r1, r5, r3
 8028136:	fb03 5711 	mls	r7, r3, r1, r5
 802813a:	5dc7      	ldrb	r7, [r0, r7]
 802813c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8028140:	462f      	mov	r7, r5
 8028142:	42bb      	cmp	r3, r7
 8028144:	460d      	mov	r5, r1
 8028146:	d9f4      	bls.n	8028132 <_printf_i+0x112>
 8028148:	2b08      	cmp	r3, #8
 802814a:	d10b      	bne.n	8028164 <_printf_i+0x144>
 802814c:	6823      	ldr	r3, [r4, #0]
 802814e:	07df      	lsls	r7, r3, #31
 8028150:	d508      	bpl.n	8028164 <_printf_i+0x144>
 8028152:	6923      	ldr	r3, [r4, #16]
 8028154:	6861      	ldr	r1, [r4, #4]
 8028156:	4299      	cmp	r1, r3
 8028158:	bfde      	ittt	le
 802815a:	2330      	movle	r3, #48	@ 0x30
 802815c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8028160:	f106 36ff 	addle.w	r6, r6, #4294967295
 8028164:	1b92      	subs	r2, r2, r6
 8028166:	6122      	str	r2, [r4, #16]
 8028168:	f8cd a000 	str.w	sl, [sp]
 802816c:	464b      	mov	r3, r9
 802816e:	aa03      	add	r2, sp, #12
 8028170:	4621      	mov	r1, r4
 8028172:	4640      	mov	r0, r8
 8028174:	f7ff fee6 	bl	8027f44 <_printf_common>
 8028178:	3001      	adds	r0, #1
 802817a:	d14a      	bne.n	8028212 <_printf_i+0x1f2>
 802817c:	f04f 30ff 	mov.w	r0, #4294967295
 8028180:	b004      	add	sp, #16
 8028182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028186:	6823      	ldr	r3, [r4, #0]
 8028188:	f043 0320 	orr.w	r3, r3, #32
 802818c:	6023      	str	r3, [r4, #0]
 802818e:	4833      	ldr	r0, [pc, #204]	@ (802825c <_printf_i+0x23c>)
 8028190:	2778      	movs	r7, #120	@ 0x78
 8028192:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8028196:	6823      	ldr	r3, [r4, #0]
 8028198:	6831      	ldr	r1, [r6, #0]
 802819a:	061f      	lsls	r7, r3, #24
 802819c:	f851 5b04 	ldr.w	r5, [r1], #4
 80281a0:	d402      	bmi.n	80281a8 <_printf_i+0x188>
 80281a2:	065f      	lsls	r7, r3, #25
 80281a4:	bf48      	it	mi
 80281a6:	b2ad      	uxthmi	r5, r5
 80281a8:	6031      	str	r1, [r6, #0]
 80281aa:	07d9      	lsls	r1, r3, #31
 80281ac:	bf44      	itt	mi
 80281ae:	f043 0320 	orrmi.w	r3, r3, #32
 80281b2:	6023      	strmi	r3, [r4, #0]
 80281b4:	b11d      	cbz	r5, 80281be <_printf_i+0x19e>
 80281b6:	2310      	movs	r3, #16
 80281b8:	e7ac      	b.n	8028114 <_printf_i+0xf4>
 80281ba:	4827      	ldr	r0, [pc, #156]	@ (8028258 <_printf_i+0x238>)
 80281bc:	e7e9      	b.n	8028192 <_printf_i+0x172>
 80281be:	6823      	ldr	r3, [r4, #0]
 80281c0:	f023 0320 	bic.w	r3, r3, #32
 80281c4:	6023      	str	r3, [r4, #0]
 80281c6:	e7f6      	b.n	80281b6 <_printf_i+0x196>
 80281c8:	4616      	mov	r6, r2
 80281ca:	e7bd      	b.n	8028148 <_printf_i+0x128>
 80281cc:	6833      	ldr	r3, [r6, #0]
 80281ce:	6825      	ldr	r5, [r4, #0]
 80281d0:	6961      	ldr	r1, [r4, #20]
 80281d2:	1d18      	adds	r0, r3, #4
 80281d4:	6030      	str	r0, [r6, #0]
 80281d6:	062e      	lsls	r6, r5, #24
 80281d8:	681b      	ldr	r3, [r3, #0]
 80281da:	d501      	bpl.n	80281e0 <_printf_i+0x1c0>
 80281dc:	6019      	str	r1, [r3, #0]
 80281de:	e002      	b.n	80281e6 <_printf_i+0x1c6>
 80281e0:	0668      	lsls	r0, r5, #25
 80281e2:	d5fb      	bpl.n	80281dc <_printf_i+0x1bc>
 80281e4:	8019      	strh	r1, [r3, #0]
 80281e6:	2300      	movs	r3, #0
 80281e8:	6123      	str	r3, [r4, #16]
 80281ea:	4616      	mov	r6, r2
 80281ec:	e7bc      	b.n	8028168 <_printf_i+0x148>
 80281ee:	6833      	ldr	r3, [r6, #0]
 80281f0:	1d1a      	adds	r2, r3, #4
 80281f2:	6032      	str	r2, [r6, #0]
 80281f4:	681e      	ldr	r6, [r3, #0]
 80281f6:	6862      	ldr	r2, [r4, #4]
 80281f8:	2100      	movs	r1, #0
 80281fa:	4630      	mov	r0, r6
 80281fc:	f7d8 f808 	bl	8000210 <memchr>
 8028200:	b108      	cbz	r0, 8028206 <_printf_i+0x1e6>
 8028202:	1b80      	subs	r0, r0, r6
 8028204:	6060      	str	r0, [r4, #4]
 8028206:	6863      	ldr	r3, [r4, #4]
 8028208:	6123      	str	r3, [r4, #16]
 802820a:	2300      	movs	r3, #0
 802820c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028210:	e7aa      	b.n	8028168 <_printf_i+0x148>
 8028212:	6923      	ldr	r3, [r4, #16]
 8028214:	4632      	mov	r2, r6
 8028216:	4649      	mov	r1, r9
 8028218:	4640      	mov	r0, r8
 802821a:	47d0      	blx	sl
 802821c:	3001      	adds	r0, #1
 802821e:	d0ad      	beq.n	802817c <_printf_i+0x15c>
 8028220:	6823      	ldr	r3, [r4, #0]
 8028222:	079b      	lsls	r3, r3, #30
 8028224:	d413      	bmi.n	802824e <_printf_i+0x22e>
 8028226:	68e0      	ldr	r0, [r4, #12]
 8028228:	9b03      	ldr	r3, [sp, #12]
 802822a:	4298      	cmp	r0, r3
 802822c:	bfb8      	it	lt
 802822e:	4618      	movlt	r0, r3
 8028230:	e7a6      	b.n	8028180 <_printf_i+0x160>
 8028232:	2301      	movs	r3, #1
 8028234:	4632      	mov	r2, r6
 8028236:	4649      	mov	r1, r9
 8028238:	4640      	mov	r0, r8
 802823a:	47d0      	blx	sl
 802823c:	3001      	adds	r0, #1
 802823e:	d09d      	beq.n	802817c <_printf_i+0x15c>
 8028240:	3501      	adds	r5, #1
 8028242:	68e3      	ldr	r3, [r4, #12]
 8028244:	9903      	ldr	r1, [sp, #12]
 8028246:	1a5b      	subs	r3, r3, r1
 8028248:	42ab      	cmp	r3, r5
 802824a:	dcf2      	bgt.n	8028232 <_printf_i+0x212>
 802824c:	e7eb      	b.n	8028226 <_printf_i+0x206>
 802824e:	2500      	movs	r5, #0
 8028250:	f104 0619 	add.w	r6, r4, #25
 8028254:	e7f5      	b.n	8028242 <_printf_i+0x222>
 8028256:	bf00      	nop
 8028258:	0802c664 	.word	0x0802c664
 802825c:	0802c675 	.word	0x0802c675

08028260 <__sflush_r>:
 8028260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028268:	0716      	lsls	r6, r2, #28
 802826a:	4605      	mov	r5, r0
 802826c:	460c      	mov	r4, r1
 802826e:	d454      	bmi.n	802831a <__sflush_r+0xba>
 8028270:	684b      	ldr	r3, [r1, #4]
 8028272:	2b00      	cmp	r3, #0
 8028274:	dc02      	bgt.n	802827c <__sflush_r+0x1c>
 8028276:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8028278:	2b00      	cmp	r3, #0
 802827a:	dd48      	ble.n	802830e <__sflush_r+0xae>
 802827c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802827e:	2e00      	cmp	r6, #0
 8028280:	d045      	beq.n	802830e <__sflush_r+0xae>
 8028282:	2300      	movs	r3, #0
 8028284:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8028288:	682f      	ldr	r7, [r5, #0]
 802828a:	6a21      	ldr	r1, [r4, #32]
 802828c:	602b      	str	r3, [r5, #0]
 802828e:	d030      	beq.n	80282f2 <__sflush_r+0x92>
 8028290:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028292:	89a3      	ldrh	r3, [r4, #12]
 8028294:	0759      	lsls	r1, r3, #29
 8028296:	d505      	bpl.n	80282a4 <__sflush_r+0x44>
 8028298:	6863      	ldr	r3, [r4, #4]
 802829a:	1ad2      	subs	r2, r2, r3
 802829c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802829e:	b10b      	cbz	r3, 80282a4 <__sflush_r+0x44>
 80282a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80282a2:	1ad2      	subs	r2, r2, r3
 80282a4:	2300      	movs	r3, #0
 80282a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80282a8:	6a21      	ldr	r1, [r4, #32]
 80282aa:	4628      	mov	r0, r5
 80282ac:	47b0      	blx	r6
 80282ae:	1c43      	adds	r3, r0, #1
 80282b0:	89a3      	ldrh	r3, [r4, #12]
 80282b2:	d106      	bne.n	80282c2 <__sflush_r+0x62>
 80282b4:	6829      	ldr	r1, [r5, #0]
 80282b6:	291d      	cmp	r1, #29
 80282b8:	d82b      	bhi.n	8028312 <__sflush_r+0xb2>
 80282ba:	4a2a      	ldr	r2, [pc, #168]	@ (8028364 <__sflush_r+0x104>)
 80282bc:	410a      	asrs	r2, r1
 80282be:	07d6      	lsls	r6, r2, #31
 80282c0:	d427      	bmi.n	8028312 <__sflush_r+0xb2>
 80282c2:	2200      	movs	r2, #0
 80282c4:	6062      	str	r2, [r4, #4]
 80282c6:	04d9      	lsls	r1, r3, #19
 80282c8:	6922      	ldr	r2, [r4, #16]
 80282ca:	6022      	str	r2, [r4, #0]
 80282cc:	d504      	bpl.n	80282d8 <__sflush_r+0x78>
 80282ce:	1c42      	adds	r2, r0, #1
 80282d0:	d101      	bne.n	80282d6 <__sflush_r+0x76>
 80282d2:	682b      	ldr	r3, [r5, #0]
 80282d4:	b903      	cbnz	r3, 80282d8 <__sflush_r+0x78>
 80282d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80282d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80282da:	602f      	str	r7, [r5, #0]
 80282dc:	b1b9      	cbz	r1, 802830e <__sflush_r+0xae>
 80282de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80282e2:	4299      	cmp	r1, r3
 80282e4:	d002      	beq.n	80282ec <__sflush_r+0x8c>
 80282e6:	4628      	mov	r0, r5
 80282e8:	f7ff fca0 	bl	8027c2c <_free_r>
 80282ec:	2300      	movs	r3, #0
 80282ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80282f0:	e00d      	b.n	802830e <__sflush_r+0xae>
 80282f2:	2301      	movs	r3, #1
 80282f4:	4628      	mov	r0, r5
 80282f6:	47b0      	blx	r6
 80282f8:	4602      	mov	r2, r0
 80282fa:	1c50      	adds	r0, r2, #1
 80282fc:	d1c9      	bne.n	8028292 <__sflush_r+0x32>
 80282fe:	682b      	ldr	r3, [r5, #0]
 8028300:	2b00      	cmp	r3, #0
 8028302:	d0c6      	beq.n	8028292 <__sflush_r+0x32>
 8028304:	2b1d      	cmp	r3, #29
 8028306:	d001      	beq.n	802830c <__sflush_r+0xac>
 8028308:	2b16      	cmp	r3, #22
 802830a:	d11e      	bne.n	802834a <__sflush_r+0xea>
 802830c:	602f      	str	r7, [r5, #0]
 802830e:	2000      	movs	r0, #0
 8028310:	e022      	b.n	8028358 <__sflush_r+0xf8>
 8028312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028316:	b21b      	sxth	r3, r3
 8028318:	e01b      	b.n	8028352 <__sflush_r+0xf2>
 802831a:	690f      	ldr	r7, [r1, #16]
 802831c:	2f00      	cmp	r7, #0
 802831e:	d0f6      	beq.n	802830e <__sflush_r+0xae>
 8028320:	0793      	lsls	r3, r2, #30
 8028322:	680e      	ldr	r6, [r1, #0]
 8028324:	bf08      	it	eq
 8028326:	694b      	ldreq	r3, [r1, #20]
 8028328:	600f      	str	r7, [r1, #0]
 802832a:	bf18      	it	ne
 802832c:	2300      	movne	r3, #0
 802832e:	eba6 0807 	sub.w	r8, r6, r7
 8028332:	608b      	str	r3, [r1, #8]
 8028334:	f1b8 0f00 	cmp.w	r8, #0
 8028338:	dde9      	ble.n	802830e <__sflush_r+0xae>
 802833a:	6a21      	ldr	r1, [r4, #32]
 802833c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802833e:	4643      	mov	r3, r8
 8028340:	463a      	mov	r2, r7
 8028342:	4628      	mov	r0, r5
 8028344:	47b0      	blx	r6
 8028346:	2800      	cmp	r0, #0
 8028348:	dc08      	bgt.n	802835c <__sflush_r+0xfc>
 802834a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802834e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028352:	81a3      	strh	r3, [r4, #12]
 8028354:	f04f 30ff 	mov.w	r0, #4294967295
 8028358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802835c:	4407      	add	r7, r0
 802835e:	eba8 0800 	sub.w	r8, r8, r0
 8028362:	e7e7      	b.n	8028334 <__sflush_r+0xd4>
 8028364:	dfbffffe 	.word	0xdfbffffe

08028368 <_fflush_r>:
 8028368:	b538      	push	{r3, r4, r5, lr}
 802836a:	690b      	ldr	r3, [r1, #16]
 802836c:	4605      	mov	r5, r0
 802836e:	460c      	mov	r4, r1
 8028370:	b913      	cbnz	r3, 8028378 <_fflush_r+0x10>
 8028372:	2500      	movs	r5, #0
 8028374:	4628      	mov	r0, r5
 8028376:	bd38      	pop	{r3, r4, r5, pc}
 8028378:	b118      	cbz	r0, 8028382 <_fflush_r+0x1a>
 802837a:	6a03      	ldr	r3, [r0, #32]
 802837c:	b90b      	cbnz	r3, 8028382 <_fflush_r+0x1a>
 802837e:	f7ff f9bf 	bl	8027700 <__sinit>
 8028382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028386:	2b00      	cmp	r3, #0
 8028388:	d0f3      	beq.n	8028372 <_fflush_r+0xa>
 802838a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802838c:	07d0      	lsls	r0, r2, #31
 802838e:	d404      	bmi.n	802839a <_fflush_r+0x32>
 8028390:	0599      	lsls	r1, r3, #22
 8028392:	d402      	bmi.n	802839a <_fflush_r+0x32>
 8028394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028396:	f7ff fc1a 	bl	8027bce <__retarget_lock_acquire_recursive>
 802839a:	4628      	mov	r0, r5
 802839c:	4621      	mov	r1, r4
 802839e:	f7ff ff5f 	bl	8028260 <__sflush_r>
 80283a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80283a4:	07da      	lsls	r2, r3, #31
 80283a6:	4605      	mov	r5, r0
 80283a8:	d4e4      	bmi.n	8028374 <_fflush_r+0xc>
 80283aa:	89a3      	ldrh	r3, [r4, #12]
 80283ac:	059b      	lsls	r3, r3, #22
 80283ae:	d4e1      	bmi.n	8028374 <_fflush_r+0xc>
 80283b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80283b2:	f7ff fc0d 	bl	8027bd0 <__retarget_lock_release_recursive>
 80283b6:	e7dd      	b.n	8028374 <_fflush_r+0xc>

080283b8 <fiprintf>:
 80283b8:	b40e      	push	{r1, r2, r3}
 80283ba:	b503      	push	{r0, r1, lr}
 80283bc:	4601      	mov	r1, r0
 80283be:	ab03      	add	r3, sp, #12
 80283c0:	4805      	ldr	r0, [pc, #20]	@ (80283d8 <fiprintf+0x20>)
 80283c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80283c6:	6800      	ldr	r0, [r0, #0]
 80283c8:	9301      	str	r3, [sp, #4]
 80283ca:	f7ff fca3 	bl	8027d14 <_vfiprintf_r>
 80283ce:	b002      	add	sp, #8
 80283d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80283d4:	b003      	add	sp, #12
 80283d6:	4770      	bx	lr
 80283d8:	20000060 	.word	0x20000060

080283dc <__swhatbuf_r>:
 80283dc:	b570      	push	{r4, r5, r6, lr}
 80283de:	460c      	mov	r4, r1
 80283e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80283e4:	2900      	cmp	r1, #0
 80283e6:	b096      	sub	sp, #88	@ 0x58
 80283e8:	4615      	mov	r5, r2
 80283ea:	461e      	mov	r6, r3
 80283ec:	da0d      	bge.n	802840a <__swhatbuf_r+0x2e>
 80283ee:	89a3      	ldrh	r3, [r4, #12]
 80283f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80283f4:	f04f 0100 	mov.w	r1, #0
 80283f8:	bf14      	ite	ne
 80283fa:	2340      	movne	r3, #64	@ 0x40
 80283fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8028400:	2000      	movs	r0, #0
 8028402:	6031      	str	r1, [r6, #0]
 8028404:	602b      	str	r3, [r5, #0]
 8028406:	b016      	add	sp, #88	@ 0x58
 8028408:	bd70      	pop	{r4, r5, r6, pc}
 802840a:	466a      	mov	r2, sp
 802840c:	f000 f848 	bl	80284a0 <_fstat_r>
 8028410:	2800      	cmp	r0, #0
 8028412:	dbec      	blt.n	80283ee <__swhatbuf_r+0x12>
 8028414:	9901      	ldr	r1, [sp, #4]
 8028416:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802841a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802841e:	4259      	negs	r1, r3
 8028420:	4159      	adcs	r1, r3
 8028422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028426:	e7eb      	b.n	8028400 <__swhatbuf_r+0x24>

08028428 <__smakebuf_r>:
 8028428:	898b      	ldrh	r3, [r1, #12]
 802842a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802842c:	079d      	lsls	r5, r3, #30
 802842e:	4606      	mov	r6, r0
 8028430:	460c      	mov	r4, r1
 8028432:	d507      	bpl.n	8028444 <__smakebuf_r+0x1c>
 8028434:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8028438:	6023      	str	r3, [r4, #0]
 802843a:	6123      	str	r3, [r4, #16]
 802843c:	2301      	movs	r3, #1
 802843e:	6163      	str	r3, [r4, #20]
 8028440:	b003      	add	sp, #12
 8028442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028444:	ab01      	add	r3, sp, #4
 8028446:	466a      	mov	r2, sp
 8028448:	f7ff ffc8 	bl	80283dc <__swhatbuf_r>
 802844c:	9f00      	ldr	r7, [sp, #0]
 802844e:	4605      	mov	r5, r0
 8028450:	4639      	mov	r1, r7
 8028452:	4630      	mov	r0, r6
 8028454:	f7fe fffe 	bl	8027454 <_malloc_r>
 8028458:	b948      	cbnz	r0, 802846e <__smakebuf_r+0x46>
 802845a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802845e:	059a      	lsls	r2, r3, #22
 8028460:	d4ee      	bmi.n	8028440 <__smakebuf_r+0x18>
 8028462:	f023 0303 	bic.w	r3, r3, #3
 8028466:	f043 0302 	orr.w	r3, r3, #2
 802846a:	81a3      	strh	r3, [r4, #12]
 802846c:	e7e2      	b.n	8028434 <__smakebuf_r+0xc>
 802846e:	89a3      	ldrh	r3, [r4, #12]
 8028470:	6020      	str	r0, [r4, #0]
 8028472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8028476:	81a3      	strh	r3, [r4, #12]
 8028478:	9b01      	ldr	r3, [sp, #4]
 802847a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802847e:	b15b      	cbz	r3, 8028498 <__smakebuf_r+0x70>
 8028480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028484:	4630      	mov	r0, r6
 8028486:	f000 f81d 	bl	80284c4 <_isatty_r>
 802848a:	b128      	cbz	r0, 8028498 <__smakebuf_r+0x70>
 802848c:	89a3      	ldrh	r3, [r4, #12]
 802848e:	f023 0303 	bic.w	r3, r3, #3
 8028492:	f043 0301 	orr.w	r3, r3, #1
 8028496:	81a3      	strh	r3, [r4, #12]
 8028498:	89a3      	ldrh	r3, [r4, #12]
 802849a:	431d      	orrs	r5, r3
 802849c:	81a5      	strh	r5, [r4, #12]
 802849e:	e7cf      	b.n	8028440 <__smakebuf_r+0x18>

080284a0 <_fstat_r>:
 80284a0:	b538      	push	{r3, r4, r5, lr}
 80284a2:	4d07      	ldr	r5, [pc, #28]	@ (80284c0 <_fstat_r+0x20>)
 80284a4:	2300      	movs	r3, #0
 80284a6:	4604      	mov	r4, r0
 80284a8:	4608      	mov	r0, r1
 80284aa:	4611      	mov	r1, r2
 80284ac:	602b      	str	r3, [r5, #0]
 80284ae:	f7da fca1 	bl	8002df4 <_fstat>
 80284b2:	1c43      	adds	r3, r0, #1
 80284b4:	d102      	bne.n	80284bc <_fstat_r+0x1c>
 80284b6:	682b      	ldr	r3, [r5, #0]
 80284b8:	b103      	cbz	r3, 80284bc <_fstat_r+0x1c>
 80284ba:	6023      	str	r3, [r4, #0]
 80284bc:	bd38      	pop	{r3, r4, r5, pc}
 80284be:	bf00      	nop
 80284c0:	20011c00 	.word	0x20011c00

080284c4 <_isatty_r>:
 80284c4:	b538      	push	{r3, r4, r5, lr}
 80284c6:	4d06      	ldr	r5, [pc, #24]	@ (80284e0 <_isatty_r+0x1c>)
 80284c8:	2300      	movs	r3, #0
 80284ca:	4604      	mov	r4, r0
 80284cc:	4608      	mov	r0, r1
 80284ce:	602b      	str	r3, [r5, #0]
 80284d0:	f7da fca0 	bl	8002e14 <_isatty>
 80284d4:	1c43      	adds	r3, r0, #1
 80284d6:	d102      	bne.n	80284de <_isatty_r+0x1a>
 80284d8:	682b      	ldr	r3, [r5, #0]
 80284da:	b103      	cbz	r3, 80284de <_isatty_r+0x1a>
 80284dc:	6023      	str	r3, [r4, #0]
 80284de:	bd38      	pop	{r3, r4, r5, pc}
 80284e0:	20011c00 	.word	0x20011c00

080284e4 <abort>:
 80284e4:	b508      	push	{r3, lr}
 80284e6:	2006      	movs	r0, #6
 80284e8:	f000 f82c 	bl	8028544 <raise>
 80284ec:	2001      	movs	r0, #1
 80284ee:	f7da fc31 	bl	8002d54 <_exit>

080284f2 <_raise_r>:
 80284f2:	291f      	cmp	r1, #31
 80284f4:	b538      	push	{r3, r4, r5, lr}
 80284f6:	4605      	mov	r5, r0
 80284f8:	460c      	mov	r4, r1
 80284fa:	d904      	bls.n	8028506 <_raise_r+0x14>
 80284fc:	2316      	movs	r3, #22
 80284fe:	6003      	str	r3, [r0, #0]
 8028500:	f04f 30ff 	mov.w	r0, #4294967295
 8028504:	bd38      	pop	{r3, r4, r5, pc}
 8028506:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8028508:	b112      	cbz	r2, 8028510 <_raise_r+0x1e>
 802850a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802850e:	b94b      	cbnz	r3, 8028524 <_raise_r+0x32>
 8028510:	4628      	mov	r0, r5
 8028512:	f000 f831 	bl	8028578 <_getpid_r>
 8028516:	4622      	mov	r2, r4
 8028518:	4601      	mov	r1, r0
 802851a:	4628      	mov	r0, r5
 802851c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028520:	f000 b818 	b.w	8028554 <_kill_r>
 8028524:	2b01      	cmp	r3, #1
 8028526:	d00a      	beq.n	802853e <_raise_r+0x4c>
 8028528:	1c59      	adds	r1, r3, #1
 802852a:	d103      	bne.n	8028534 <_raise_r+0x42>
 802852c:	2316      	movs	r3, #22
 802852e:	6003      	str	r3, [r0, #0]
 8028530:	2001      	movs	r0, #1
 8028532:	e7e7      	b.n	8028504 <_raise_r+0x12>
 8028534:	2100      	movs	r1, #0
 8028536:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802853a:	4620      	mov	r0, r4
 802853c:	4798      	blx	r3
 802853e:	2000      	movs	r0, #0
 8028540:	e7e0      	b.n	8028504 <_raise_r+0x12>
	...

08028544 <raise>:
 8028544:	4b02      	ldr	r3, [pc, #8]	@ (8028550 <raise+0xc>)
 8028546:	4601      	mov	r1, r0
 8028548:	6818      	ldr	r0, [r3, #0]
 802854a:	f7ff bfd2 	b.w	80284f2 <_raise_r>
 802854e:	bf00      	nop
 8028550:	20000060 	.word	0x20000060

08028554 <_kill_r>:
 8028554:	b538      	push	{r3, r4, r5, lr}
 8028556:	4d07      	ldr	r5, [pc, #28]	@ (8028574 <_kill_r+0x20>)
 8028558:	2300      	movs	r3, #0
 802855a:	4604      	mov	r4, r0
 802855c:	4608      	mov	r0, r1
 802855e:	4611      	mov	r1, r2
 8028560:	602b      	str	r3, [r5, #0]
 8028562:	f7da fbe5 	bl	8002d30 <_kill>
 8028566:	1c43      	adds	r3, r0, #1
 8028568:	d102      	bne.n	8028570 <_kill_r+0x1c>
 802856a:	682b      	ldr	r3, [r5, #0]
 802856c:	b103      	cbz	r3, 8028570 <_kill_r+0x1c>
 802856e:	6023      	str	r3, [r4, #0]
 8028570:	bd38      	pop	{r3, r4, r5, pc}
 8028572:	bf00      	nop
 8028574:	20011c00 	.word	0x20011c00

08028578 <_getpid_r>:
 8028578:	f7da bbd2 	b.w	8002d20 <_getpid>

0802857c <_init>:
 802857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802857e:	bf00      	nop
 8028580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028582:	bc08      	pop	{r3}
 8028584:	469e      	mov	lr, r3
 8028586:	4770      	bx	lr

08028588 <_fini>:
 8028588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802858a:	bf00      	nop
 802858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802858e:	bc08      	pop	{r3}
 8028590:	469e      	mov	lr, r3
 8028592:	4770      	bx	lr
