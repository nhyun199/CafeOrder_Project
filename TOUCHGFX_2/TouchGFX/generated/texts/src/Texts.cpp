/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32, 0x30, 0x32, 0x34, 0x2e, 0x6e, 0x68, 0x79, 0x75, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2e, 0x0, // @0 "Copyright 2024.nhyun.All rights reserved."
    0x6e, 0x68, 0x79, 0x75, 0x6e, 0x20, 0xb2d8, 0xc744, 0x20, 0xc704, 0xd55c, 0x20, 0xcd94, 0xcc9c, 0x20, 0xba54, 0xb274, 0x0, // @42 "nhyun ?? ?? ?? ??"
    0xc0b0, 0xd0c0, 0x20, 0xcf54, 0xcf54, 0xb11b, 0xa, 0xc560, 0xd50c, 0xd2f0, 0x20, 0xb77c, 0xb5bc, 0x0, // @60 "?? ???\n??? ??"
    0xc0b0, 0xd0c0, 0x20, 0xcf54, 0xcf54, 0xb11b, 0x20, 0xc560, 0xd50c, 0xd2f0, 0x20, 0xb77c, 0xb5bc, 0x0, // @74 "?? ??? ??? ??"
    0xce74, 0xd14c, 0xace0, 0xb9ac, 0xb97c, 0x20, 0xc120, 0xd0dd, 0xd574, 0xc8fc, 0xc138, 0xc694, 0x0, // @88 "????? ??????"
    0x28, 0x48, 0x4f, 0x54, 0x29, 0xc544, 0xba54, 0xb9ac, 0xce74, 0xb178, 0x0, // @101 "(HOT)?????"
    0x28, 0x49, 0x43, 0x45, 0x29, 0xc544, 0xba54, 0xb9ac, 0xce74, 0xb178, 0x0, // @112 "(ICE)?????"
    0x2, 0x0, // @123 "<>"
    0xb538, 0xae30, 0xcfe0, 0xd0a4, 0xd504, 0xb77c, 0xd398, 0x0, // @125 "???????"
    0xbcf5, 0xc22d, 0xc544, 0xc544, 0xc774, 0xc2a4, 0xd2f0, 0x0, // @133 "???????"
    0xc624, 0xb808, 0xc624, 0xcd08, 0xcf54, 0xb77c, 0xb5bc, 0x0, // @141 "???????"
    0xc7a5, 0xbc14, 0xad6c, 0xb2c8, 0x20, 0xb2f4, 0xae30, 0x0, // @149 "???? ??"
    0xcd08, 0xcf54, 0xbb34, 0xc2a4, 0x20, 0xcf00, 0xc775, 0x0, // @157 "???? ??"
    0xd2f0, 0xb77c, 0xbbf8, 0xc218, 0x20, 0xcf00, 0xc775, 0x0, // @165 "???? ??"
    0x31, 0x2c, 0x35, 0x30, 0x30, 0xc6d0, 0x0, // @173 "1,500?"
    0x32, 0x2c, 0x30, 0x30, 0x30, 0xc6d0, 0x0, // @180 "2,000?"
    0x33, 0x2c, 0x30, 0x30, 0x30, 0xc6d0, 0x0, // @187 "3,000?"
    0x33, 0x2c, 0x33, 0x30, 0x30, 0xc6d0, 0x0, // @194 "3,300?"
    0x33, 0x2c, 0x35, 0x30, 0x30, 0xc6d0, 0x0, // @201 "3,500?"
    0x33, 0x2c, 0x37, 0x30, 0x30, 0xc6d0, 0x0, // @208 "3,700?"
    0x33, 0x2c, 0x39, 0x30, 0x30, 0xc6d0, 0x0, // @215 "3,900?"
    0x34, 0x2c, 0x32, 0x30, 0x30, 0xc6d0, 0x0, // @222 "4,200?"
    0xd2f0, 0xb77c, 0xbbf8, 0xc218, 0xb77c, 0xb5bc, 0x0, // @229 "??????"
    0xba54, 0xac00, 0xb9ac, 0xce74, 0xb178, 0x0, // @236 "?????"
    0xbc14, 0xb85c, 0x20, 0xc8fc, 0xbb38, 0x0, // @242 "?? ??"
    0xc0ac, 0xacfc, 0xc720, 0xc790, 0xcc28, 0x0, // @248 "?????"
    0xc8fc, 0xbb38, 0x20, 0xc0c1, 0xc138, 0x0, // @254 "?? ??"
    0xce58, 0xc988, 0x20, 0xcf00, 0xc775, 0x0, // @260 "?? ??"
    0xacb0, 0xc81c, 0xd558, 0xae30, 0x0, // @266 "????"
    0xace1, 0xbb3c, 0xb77c, 0xb5bc, 0x0, // @271 "????"
    0xb179, 0xcc28, 0xb77c, 0xb5bc, 0x0, // @276 "????"
    0xb538, 0xae30, 0xb77c, 0xb5bc, 0x0, // @281 "????"
    0xc0c1, 0xd488, 0xae08, 0xc561, 0x0, // @286 "????"
    0xc8fc, 0xbb38, 0xd558, 0xae30, 0x0, // @291 "????"
    0xce58, 0xc988, 0xcf00, 0xc775, 0x0, // @296 "????"
    0xce74, 0xd398, 0xbaa8, 0xce74, 0x0, // @301 "????"
    0xd050, 0xbe0c, 0xb77c, 0xb5bc, 0x0, // @306 "????"
    0xb808, 0xbaac, 0xd2f0, 0x0, // @311 "???"
    0xc790, 0xbabd, 0xd2f0, 0x0, // @315 "???"
    0x31, 0x0, // @319 "1"
    0xac1c, 0x0 // @321 "?"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
