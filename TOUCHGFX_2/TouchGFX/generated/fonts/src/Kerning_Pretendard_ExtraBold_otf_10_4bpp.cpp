#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_Pretendard_ExtraBold_otf_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x002C, -1 },  // (First char = [0x002C, ,], Second char = [0x0022, "], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, .], Second char = [0x0022, "], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0022, "], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, 7], Second char = [0x0023, #], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0026, &], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, ,], Second char = [0x0027, '], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, .], Second char = [0x0027, '], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0027, '], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x002A, *], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, _], Second char = [0x002A, *], Kerning dist = -1)
    { 0x0022, -1 },  // (First char = [0x0022, "], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0027, -1 },  // (First char = [0x0027, '], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x002A, -1 },  // (First char = [0x002A, *], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, 7], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x005E, -1 },  // (First char = [0x005E, ^], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0022, -1 },  // (First char = [0x0022, "], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0027, -1 },  // (First char = [0x0027, '], Second char = [0x002E, .], Kerning dist = -1)
    { 0x002A, -1 },  // (First char = [0x002A, *], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, 7], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x002E, .], Kerning dist = -1)
    { 0x005E, -1 },  // (First char = [0x005E, ^], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x002E, .], Kerning dist = -1)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x002F, /], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x002F, /], Kerning dist = -1)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x002F, /], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x002F, /], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x002F, /], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x002F, /], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, ,], Second char = [0x0031, 1], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, .], Second char = [0x0031, 1], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, _], Second char = [0x0031, 1], Kerning dist = -1)
    { 0x0022, -1 },  // (First char = [0x0022, "], Second char = [0x0034, 4], Kerning dist = -1)
    { 0x0027, -1 },  // (First char = [0x0027, '], Second char = [0x0034, 4], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, 7], Second char = [0x0034, 4], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0034, 4], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0034, 4], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, _], Second char = [0x0034, 4], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x0034, 4], Kerning dist = -1)
    { 0x003E, -1 },  // (First char = [0x003E, >], Second char = [0x0037, 7], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003A, :], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003A, :], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003B, ;], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003B, ;], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, 7], Second char = [0x003C, <], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x003C, <], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x003C, <], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003C, <], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x003C, <], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x003C, <], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003C, <], Kerning dist = -1)
    { 0x005A, -1 },  // (First char = [0x005A, Z], Second char = [0x003C, <], Kerning dist = -1)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x003C, <], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003D, =], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x003D, =], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003D, =], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, ,], Second char = [0x003F, ?], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, .], Second char = [0x003F, ?], Kerning dist = -1)
    { 0x0022, -1 },  // (First char = [0x0022, "], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0027, -1 },  // (First char = [0x0027, '], Second char = [0x0041, A], Kerning dist = -1)
    { 0x002A, -1 },  // (First char = [0x002A, *], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, 7], Second char = [0x0041, A], Kerning dist = -1)
    { 0x003E, -1 },  // (First char = [0x003E, >], Second char = [0x0041, A], Kerning dist = -1)
    { 0x003F, -1 },  // (First char = [0x003F, ?], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0041, A], Kerning dist = -1)
    { 0x005E, -1 },  // (First char = [0x005E, ^], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0022, -2 },  // (First char = [0x0022, "], Second char = [0x004A, J], Kerning dist = -2)
    { 0x0027, -2 },  // (First char = [0x0027, '], Second char = [0x004A, J], Kerning dist = -2)
    { 0x002A, -1 },  // (First char = [0x002A, *], Second char = [0x004A, J], Kerning dist = -1)
    { 0x002F, -1 },  // (First char = [0x002F, /], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0037, -1 },  // (First char = [0x0037, 7], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x004A, J], Kerning dist = -1)
    { 0x005E, -1 },  // (First char = [0x005E, ^], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x004A, J], Kerning dist = -1)
    { 0x0026, -1 },  // (First char = [0x0026, &], Second char = [0x0054, T], Kerning dist = -1)
    { 0x003E, -1 },  // (First char = [0x003E, >], Second char = [0x0054, T], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0054, T], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, _], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0054, T], Kerning dist = -1)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0026, -1 },  // (First char = [0x0026, &], Second char = [0x0056, V], Kerning dist = -1)
    { 0x003A, -1 },  // (First char = [0x003A, :], Second char = [0x0056, V], Kerning dist = -1)
    { 0x003B, -1 },  // (First char = [0x003B, ;], Second char = [0x0056, V], Kerning dist = -1)
    { 0x003D, -1 },  // (First char = [0x003D, =], Second char = [0x0056, V], Kerning dist = -1)
    { 0x003E, -1 },  // (First char = [0x003E, >], Second char = [0x0056, V], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0056, V], Kerning dist = -1)
    { 0x005C, -1 },  // (First char = [0x005C, \], Second char = [0x0056, V], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, _], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0056, V], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0056, V], Kerning dist = -1)
    { 0x003D, -1 },  // (First char = [0x003D, =], Second char = [0x0057, W], Kerning dist = -1)
    { 0x003E, -1 },  // (First char = [0x003E, >], Second char = [0x0057, W], Kerning dist = -1)
    { 0x005C, -1 },  // (First char = [0x005C, \], Second char = [0x0057, W], Kerning dist = -1)
    { 0x003E, -1 },  // (First char = [0x003E, >], Second char = [0x0058, X], Kerning dist = -1)
    { 0x0026, -1 },  // (First char = [0x0026, &], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, ,], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, .], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x003D, -1 },  // (First char = [0x003D, =], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x003E, -1 },  // (First char = [0x003E, >], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0061, -1 },  // (First char = [0x0061, a], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0068, -1 },  // (First char = [0x0068, h], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x006D, -1 },  // (First char = [0x006D, m], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0075, -1 },  // (First char = [0x0075, u], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x003E, -1 },  // (First char = [0x003E, >], Second char = [0x005A, Z], Kerning dist = -1)
    { 0x0026, -1 },  // (First char = [0x0026, &], Second char = [0x005C, \], Kerning dist = -1)
    { 0x003A, -1 },  // (First char = [0x003A, :], Second char = [0x005C, \], Kerning dist = -1)
    { 0x003B, -1 },  // (First char = [0x003B, ;], Second char = [0x005C, \], Kerning dist = -1)
    { 0x003D, -1 },  // (First char = [0x003D, =], Second char = [0x005C, \], Kerning dist = -1)
    { 0x003E, -1 },  // (First char = [0x003E, >], Second char = [0x005C, \], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x005C, \], Kerning dist = -1)
    { 0x005C, -1 },  // (First char = [0x005C, \], Second char = [0x005C, \], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, _], Second char = [0x005C, \], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x005C, \], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x005C, \], Kerning dist = -1)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x005C, \], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x005E, ^], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, _], Second char = [0x005E, ^], Kerning dist = -1)
    { 0x002A, -1 },  // (First char = [0x002A, *], Second char = [0x005F, _], Kerning dist = -1)
    { 0x0037, -2 },  // (First char = [0x0037, 7], Second char = [0x005F, _], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x005F, _], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x005F, _], Kerning dist = -1)
    { 0x005E, -1 },  // (First char = [0x005E, ^], Second char = [0x005F, _], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x005F, _], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x005F, _], Kerning dist = -1)
    { 0x002C, -1 },  // (First char = [0x002C, ,], Second char = [0x0060, `], Kerning dist = -1)
    { 0x002E, -1 },  // (First char = [0x002E, .], Second char = [0x0060, `], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0067, g], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0067, g], Kerning dist = -1)
    { 0x005F,  1 },  // (First char = [0x005F, _], Second char = [0x006A, j], Kerning dist = 1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006E, n], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0070, p], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0071, q], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0073, s], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0075, u], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0076, v], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, _], Second char = [0x0076, v], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0077, w], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0079, y], Kerning dist = -1)
    { 0x005F, -1 },  // (First char = [0x005F, _], Second char = [0x0079, y], Kerning dist = -1)
};
